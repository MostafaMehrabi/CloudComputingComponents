%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:41:31 p.m.
%%BoundingBox: 0 0 704 524
%%HiResBoundingBox: 0 0 703.8000 523.8000
%%CropBox: 0 0 703.8000 523.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -523.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 523.8 li
703.8 523.8 li
703.8 0 li
cp
clp
gsave
0 523.8 mo
704 523.8 li
704 -.200012 li
0 -.200012 li
cp
clp
0 0 mo
703.801 0 li
703.801 523.801 li
0 523.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
59.398 459.602 mo
686.641 459.602 li
59.398 422.762 mo
686.641 422.762 li
59.398 385.922 mo
686.641 385.922 li
59.398 348.961 mo
686.641 348.961 li
59.398 312.121 mo
686.641 312.121 li
59.398 275.281 mo
686.641 275.281 li
59.398 238.441 mo
686.641 238.441 li
59.398 201.48 mo
686.641 201.48 li
59.398 164.641 mo
686.641 164.641 li
59.398 127.801 mo
686.641 127.801 li
59.398 90.961 mo
686.641 90.961 li
59.398 54 mo
686.641 54 li
.135805 .104005 .108583 0 cmyk
@
59.398 441.121 mo
686.641 441.121 li
59.398 404.281 mo
686.641 404.281 li
59.398 367.441 mo
686.641 367.441 li
59.398 330.602 mo
686.641 330.602 li
59.398 293.762 mo
686.641 293.762 li
59.398 256.801 mo
686.641 256.801 li
59.398 219.961 mo
686.641 219.961 li
59.398 183.121 mo
686.641 183.121 li
59.398 146.281 mo
686.641 146.281 li
59.398 109.32 mo
686.641 109.32 li
59.398 72.48 mo
686.641 72.48 li
59.398 35.641 mo
686.641 35.641 li
.326574 .281529 .277562 0 cmyk
@
98.52 35.641 mo
98.52 478.078 li
177 35.641 mo
177 478.078 li
255.359 35.641 mo
255.359 478.078 li
333.84 35.641 mo
333.84 478.078 li
412.199 35.641 mo
412.199 478.078 li
490.559 35.641 mo
490.559 478.078 li
569.039 35.641 mo
569.039 478.078 li
647.398 35.641 mo
647.398 478.078 li
.175235 .144778 .143648 0 cmyk
@
59.398 35.641 mo
59.398 478.078 li
137.762 35.641 mo
137.762 478.078 li
216.121 35.641 mo
216.121 478.078 li
294.602 35.641 mo
294.602 478.078 li
372.961 35.641 mo
372.961 478.078 li
451.441 35.641 mo
451.441 478.078 li
529.801 35.641 mo
529.801 478.078 li
608.16 35.641 mo
608.16 478.078 li
686.641 35.641 mo
686.641 478.078 li
.326574 .281529 .277562 0 cmyk
@
39.238 468.719 mo
46.32 468.719 li
46.32 485.762 li
39.238 485.762 li
cp
0 0 0 0 cmyk
ef
39.238 431.879 mo
46.32 431.879 li
46.32 448.922 li
39.238 448.922 li
cp
ef
32.16 395.039 mo
46.32 395.039 li
46.32 412.078 li
32.16 412.078 li
cp
ef
32.16 358.078 mo
46.32 358.078 li
46.32 375.238 li
32.16 375.238 li
cp
ef
32.16 321.238 mo
46.32 321.238 li
46.32 338.398 li
32.16 338.398 li
cp
ef
32.16 284.398 mo
46.32 284.398 li
46.32 301.441 li
32.16 301.441 li
cp
ef
32.16 247.559 mo
46.32 247.559 li
46.32 264.602 li
32.16 264.602 li
cp
ef
32.16 210.602 mo
46.32 210.602 li
46.32 227.762 li
32.16 227.762 li
cp
ef
32.16 173.762 mo
46.32 173.762 li
46.32 190.922 li
32.16 190.922 li
cp
ef
32.16 136.922 mo
46.32 136.922 li
46.32 153.961 li
32.16 153.961 li
cp
ef
32.16 100.078 mo
46.32 100.078 li
46.32 117.121 li
32.16 117.121 li
cp
ef
32.16 63.121 mo
46.32 63.121 li
46.32 80.281 li
32.16 80.281 li
cp
ef
32.16 26.281 mo
46.32 26.281 li
46.32 43.441 li
32.16 43.441 li
cp
ef
.96 lw
59.398 478.078 mo
686.641 478.078 li
.369879 .299321 .304356 .000976577 cmyk
@
59.398 478.078 mo
59.398 482.52 li
137.762 478.078 mo
137.762 482.52 li
216.121 478.078 mo
216.121 482.52 li
294.602 478.078 mo
294.602 482.52 li
372.961 478.078 mo
372.961 482.52 li
451.441 478.078 mo
451.441 482.52 li
529.801 478.078 mo
529.801 482.52 li
608.16 478.078 mo
608.16 482.52 li
686.641 478.078 mo
686.641 482.52 li
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
1 lc
59.398 135.602 mo
137.762 244.441 li
216.121 309.961 li
294.602 322.801 li
372.961 335.398 li
451.441 340.801 li
529.801 339.961 li
608.16 355.922 li
686.641 344.52 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
54.238 130.551 mo
64.199 130.551 li
64.199 140.512 li
54.238 140.512 li
cp
.62829 .284672 0 0 cmyk
@
132.719 239.391 mo
142.68 239.391 li
142.68 249.352 li
132.719 249.352 li
cp
@
211.078 304.91 mo
221.039 304.91 li
221.039 314.871 li
211.078 314.871 li
cp
@
289.441 317.629 mo
299.398 317.629 li
299.398 327.59 li
289.441 327.59 li
cp
@
367.922 330.23 mo
377.879 330.23 li
377.879 340.191 li
367.922 340.191 li
cp
@
446.281 335.629 mo
456.238 335.629 li
456.238 345.59 li
446.281 345.59 li
cp
@
524.762 334.91 mo
534.719 334.91 li
534.719 344.871 li
524.762 344.871 li
cp
@
603.121 350.871 mo
613.078 350.871 li
613.078 360.828 li
603.121 360.828 li
cp
@
681.48 339.469 mo
691.441 339.469 li
691.441 349.43 li
681.48 349.43 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
59.398 125.281 mo
137.762 295.441 li
216.121 368.641 li
294.602 355.441 li
372.961 387.719 li
451.441 408.121 li
529.801 392.52 li
608.16 362.16 li
686.641 387.84 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
54.238 120.23 mo
64.199 120.23 li
64.199 130.191 li
54.238 130.191 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
132.719 290.27 mo
142.68 290.27 li
142.68 300.231 li
132.719 300.231 li
cp
@
211.078 363.469 mo
221.039 363.469 li
221.039 373.43 li
211.078 373.43 li
cp
@
289.441 350.27 mo
299.398 350.27 li
299.398 360.231 li
289.441 360.231 li
cp
@
367.922 382.672 mo
377.879 382.672 li
377.879 392.629 li
367.922 392.629 li
cp
@
446.281 403.07 mo
456.238 403.07 li
456.238 413.031 li
446.281 413.031 li
cp
@
524.762 387.352 mo
534.719 387.352 li
534.719 397.309 li
524.762 397.309 li
cp
@
603.121 357.109 mo
613.078 357.109 li
613.078 367.07 li
603.121 367.07 li
cp
@
681.48 382.672 mo
691.441 382.672 li
691.441 392.629 li
681.48 392.629 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
59.398 124.801 mo
137.762 301.441 li
216.121 367.801 li
294.602 355.922 li
372.961 376.559 li
451.441 368.281 li
529.801 382.559 li
608.16 375.84 li
686.641 395.039 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
54.238 119.629 mo
64.199 119.629 li
64.199 129.59 li
54.238 129.59 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
132.719 296.391 mo
142.68 296.391 li
142.68 306.352 li
132.719 306.352 li
cp
@
211.078 362.629 mo
221.039 362.629 li
221.039 372.59 li
211.078 372.59 li
cp
@
289.441 350.871 mo
299.398 350.871 li
299.398 360.828 li
289.441 360.828 li
cp
@
367.922 371.391 mo
377.879 371.391 li
377.879 381.352 li
367.922 381.352 li
cp
@
446.281 363.23 mo
456.238 363.23 li
456.238 373.191 li
446.281 373.191 li
cp
@
524.762 377.512 mo
534.719 377.512 li
534.719 387.469 li
524.762 387.469 li
cp
@
603.121 370.789 mo
613.078 370.789 li
613.078 380.75 li
603.121 380.75 li
cp
@
681.48 389.988 mo
691.441 389.988 li
691.441 399.949 li
681.48 399.949 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
59.398 124.801 mo
137.762 269.641 li
216.121 312.121 li
294.602 383.16 li
372.961 358.32 li
451.441 380.879 li
529.801 368.16 li
608.16 369.961 li
686.641 388.199 li
0 .993988 1 0 cmyk
@
grestore
54.238 119.629 mo
64.199 119.629 li
64.199 129.59 li
54.238 129.59 li
cp
0 .993988 1 0 cmyk
@
132.719 264.59 mo
142.68 264.59 li
142.68 274.551 li
132.719 274.551 li
cp
@
211.078 307.07 mo
221.039 307.07 li
221.039 317.031 li
211.078 317.031 li
cp
@
289.441 377.988 mo
299.398 377.988 li
299.398 387.949 li
289.441 387.949 li
cp
@
367.922 353.27 mo
377.879 353.27 li
377.879 363.231 li
367.922 363.231 li
cp
@
446.281 375.828 mo
456.238 375.828 li
456.238 385.789 li
446.281 385.789 li
cp
@
524.762 363.109 mo
534.719 363.109 li
534.719 373.07 li
524.762 373.07 li
cp
@
603.121 364.91 mo
613.078 364.91 li
613.078 374.871 li
603.121 374.871 li
cp
@
681.48 383.148 mo
691.441 383.148 li
691.441 393.109 li
681.48 393.109 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.398 123.961 mo
137.762 291.48 li
216.121 352.32 li
294.602 381.961 li
372.961 378.602 li
451.441 390.84 li
529.801 392.52 li
608.16 375.359 li
686.641 414.961 li
.62829 .284672 0 0 cmyk
@
grestore
54.238 118.789 mo
64.199 118.789 li
64.199 128.75 li
54.238 128.75 li
cp
.62829 .284672 0 0 cmyk
@
132.719 286.309 mo
142.68 286.309 li
142.68 296.27 li
132.719 296.27 li
cp
@
211.078 347.148 mo
221.039 347.148 li
221.039 357.109 li
211.078 357.109 li
cp
@
289.441 376.789 mo
299.398 376.789 li
299.398 386.75 li
289.441 386.75 li
cp
@
367.922 373.551 mo
377.879 373.551 li
377.879 383.512 li
367.922 383.512 li
cp
@
446.281 385.789 mo
456.238 385.789 li
456.238 395.75 li
446.281 395.75 li
cp
@
524.762 387.469 mo
534.719 387.469 li
534.719 397.43 li
524.762 397.43 li
cp
@
603.121 370.191 mo
613.078 370.191 li
613.078 380.148 li
603.121 380.148 li
cp
@
681.48 409.91 mo
691.441 409.91 li
691.441 419.871 li
681.48 419.871 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.398 130.441 mo
137.762 286.078 li
216.121 365.762 li
294.602 359.762 li
372.961 384.121 li
451.441 381.238 li
529.801 374.641 li
608.16 375.719 li
686.641 378.602 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
54.719 125.871 mo
63.719 125.871 li
63.719 134.871 li
54.719 134.871 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
133.199 281.391 mo
142.199 281.391 li
142.199 290.391 li
133.199 290.391 li
cp
@
211.559 361.191 mo
220.559 361.191 li
220.559 370.191 li
211.559 370.191 li
cp
@
289.922 355.191 mo
298.922 355.191 li
298.922 364.191 li
289.922 364.191 li
cp
@
368.398 379.551 mo
377.398 379.551 li
377.398 388.551 li
368.398 388.551 li
cp
@
446.762 376.672 mo
455.762 376.672 li
455.762 385.672 li
446.762 385.672 li
cp
@
525.238 369.949 mo
534.238 369.949 li
534.238 378.949 li
525.238 378.949 li
cp
@
603.602 371.148 mo
612.602 371.148 li
612.602 380.148 li
603.602 380.148 li
cp
@
681.961 374.031 mo
690.961 374.031 li
690.961 383.031 li
681.961 383.031 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.398 135.602 mo
137.762 295.441 li
216.121 383.16 li
294.602 375.359 li
372.961 368.641 li
451.441 370.559 li
529.801 369.359 li
608.16 382.922 li
686.641 408.719 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
54.238 130.551 mo
64.199 130.551 li
64.199 140.512 li
54.238 140.512 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
132.719 290.27 mo
142.68 290.27 li
142.68 300.231 li
132.719 300.231 li
cp
@
211.078 377.988 mo
221.039 377.988 li
221.039 387.949 li
211.078 387.949 li
cp
@
289.441 370.191 mo
299.398 370.191 li
299.398 380.148 li
289.441 380.148 li
cp
@
367.922 363.469 mo
377.879 363.469 li
377.879 373.43 li
367.922 373.43 li
cp
@
446.281 365.391 mo
456.238 365.391 li
456.238 375.352 li
446.281 375.352 li
cp
@
524.762 364.191 mo
534.719 364.191 li
534.719 374.148 li
524.762 374.148 li
cp
@
603.121 377.75 mo
613.078 377.75 li
613.078 387.711 li
603.121 387.711 li
cp
@
681.48 403.672 mo
691.441 403.672 li
691.441 413.629 li
681.48 413.629 li
cp
@
gsave
59.281 35.52 mo
687.359 35.52 li
687.359 478.68 li
59.281 478.68 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
59.398 135.602 mo
137.762 298.922 li
216.121 392.039 li
294.602 404.398 li
372.961 379.32 li
451.441 382.559 li
529.801 373.68 li
608.16 389.879 li
686.641 395.398 li
0 .993988 1 0 cmyk
@
grestore
54.238 130.551 mo
64.199 130.551 li
64.199 140.512 li
54.238 140.512 li
cp
0 .993988 1 0 cmyk
@
132.719 293.871 mo
142.68 293.871 li
142.68 303.828 li
132.719 303.828 li
cp
@
211.078 386.871 mo
221.039 386.871 li
221.039 396.828 li
211.078 396.828 li
cp
@
289.441 399.352 mo
299.398 399.352 li
299.398 409.309 li
289.441 409.309 li
cp
@
367.922 374.27 mo
377.879 374.27 li
377.879 384.231 li
367.922 384.231 li
cp
@
446.281 377.512 mo
456.238 377.512 li
456.238 387.469 li
446.281 387.469 li
cp
@
524.762 368.629 mo
534.719 368.629 li
534.719 378.59 li
524.762 378.59 li
cp
@
603.121 384.828 mo
613.078 384.828 li
613.078 394.789 li
603.121 394.789 li
cp
@
681.48 390.23 mo
691.441 390.23 li
691.441 400.191 li
681.48 400.191 li
cp
@
39.281 468.715 mo
46.375 468.715 li
46.375 485.805 li
39.281 485.805 li
cp
0 0 0 0 cmyk
ef
45.918 477.68 mo
45.914 478.363 45.863 478.984 45.758 479.547 cv
45.648 480.109 45.469 480.594 45.223 480.996 cv
44.969 481.402 44.641 481.715 44.242 481.934 cv
43.836 482.156 43.344 482.266 42.758 482.266 cv
42.199 482.266 41.727 482.168 41.348 481.969 cv
40.965 481.773 40.66 481.48 40.426 481.094 cv
40.191 480.707 40.023 480.234 39.93 479.668 cv
39.828 479.105 39.781 478.457 39.781 477.723 cv
39.781 477.051 39.836 476.43 39.945 475.863 cv
40.055 475.301 40.23 474.816 40.48 474.41 cv
40.723 474.008 41.047 473.695 41.453 473.469 cv
41.852 473.25 42.348 473.137 42.938 473.137 cv
43.496 473.137 43.969 473.238 44.352 473.434 cv
44.734 473.637 45.039 473.93 45.273 474.312 cv
45.504 474.703 45.672 475.176 45.77 475.738 cv
45.867 476.301 45.914 476.949 45.918 477.68 cv
cp
44.711 477.762 mo
44.707 477.32 44.691 476.922 44.664 476.57 cv
44.629 476.219 44.582 475.91 44.523 475.641 cv
44.457 475.371 44.379 475.141 44.281 474.945 cv
44.184 474.754 44.066 474.594 43.93 474.465 cv
43.789 474.34 43.629 474.246 43.457 474.187 cv
43.277 474.133 43.082 474.105 42.867 474.102 cv
42.477 474.105 42.16 474.195 41.922 474.379 cv
41.676 474.562 41.484 474.816 41.348 475.133 cv
41.207 475.453 41.113 475.824 41.063 476.254 cv
41.012 476.684 40.988 477.148 40.988 477.641 cv
40.988 478.305 41.02 478.867 41.09 479.328 cv
41.156 479.797 41.266 480.176 41.418 480.465 cv
41.563 480.762 41.754 480.973 41.984 481.102 cv
42.215 481.238 42.496 481.305 42.828 481.301 cv
43.082 481.305 43.305 481.266 43.5 481.18 cv
43.691 481.102 43.859 480.98 44 480.824 cv
44.141 480.672 44.254 480.488 44.348 480.273 cv
44.434 480.059 44.508 479.82 44.566 479.559 cv
44.617 479.301 44.656 479.02 44.68 478.715 cv
44.699 478.41 44.707 478.094 44.711 477.762 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.281 431.852 mo
46.375 431.852 li
46.375 448.942 li
39.281 448.942 li
cp
0 0 0 0 cmyk
ef
45.582 442.398 mo
45.582 442.875 45.5 443.297 45.34 443.668 cv
45.18 444.039 44.953 444.352 44.664 444.605 cv
44.367 444.859 44.02 445.055 43.617 445.184 cv
43.211 445.316 42.762 445.379 42.27 445.379 cv
41.992 445.379 41.73 445.359 41.488 445.32 cv
41.238 445.281 41.02 445.234 40.832 445.18 cv
40.637 445.125 40.48 445.07 40.355 445.012 cv
40.23 444.961 40.152 444.918 40.121 444.883 cv
40.086 444.852 40.063 444.82 40.051 444.793 cv
40.035 444.766 40.02 444.734 40.012 444.691 cv
39.996 444.656 39.988 444.605 39.988 444.543 cv
39.98 444.484 39.98 444.414 39.98 444.332 cv
39.98 444.258 39.984 444.187 39.992 444.125 cv
40 444.062 40.012 444.012 40.031 443.973 cv
40.047 443.934 40.066 443.906 40.094 443.887 cv
40.117 443.871 40.148 443.863 40.18 443.859 cv
40.227 443.863 40.297 443.891 40.391 443.945 cv
40.484 444.004 40.613 444.066 40.777 444.133 cv
40.941 444.199 41.141 444.262 41.383 444.32 cv
41.617 444.379 41.902 444.406 42.238 444.406 cv
42.539 444.406 42.82 444.371 43.078 444.297 cv
43.332 444.227 43.555 444.113 43.742 443.957 cv
43.926 443.805 44.07 443.609 44.176 443.371 cv
44.281 443.137 44.332 442.848 44.336 442.508 cv
44.332 442.227 44.289 441.977 44.199 441.758 cv
44.109 441.539 43.973 441.359 43.789 441.215 cv
43.602 441.074 43.367 440.969 43.086 440.895 cv
42.801 440.824 42.461 440.785 42.074 440.785 cv
41.789 440.785 41.551 440.801 41.352 440.828 cv
41.148 440.859 40.961 440.875 40.789 440.871 cv
40.66 440.875 40.566 440.844 40.516 440.781 cv
40.457 440.723 40.43 440.609 40.434 440.437 cv
40.434 436.824 li
40.43 436.676 40.465 436.566 40.539 436.488 cv
40.605 436.418 40.707 436.379 40.844 436.379 cv
44.773 436.379 li
44.809 436.379 44.844 436.391 44.879 436.41 cv
44.91 436.434 44.938 436.465 44.965 436.504 cv
44.984 436.547 45 436.598 45.016 436.66 cv
45.023 436.727 45.031 436.805 45.035 436.887 cv
45.031 437.055 45.008 437.18 44.969 437.27 cv
44.922 437.363 44.863 437.41 44.785 437.406 cv
41.613 437.406 li
41.613 439.895 li
41.766 439.875 41.922 439.863 42.086 439.855 cv
42.242 439.852 42.43 439.848 42.645 439.848 cv
43.129 439.848 43.555 439.91 43.922 440.031 cv
44.285 440.152 44.59 440.324 44.84 440.543 cv
45.082 440.77 45.27 441.035 45.395 441.348 cv
45.52 441.664 45.582 442.016 45.582 442.398 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
32.18 394.98 mo
46.371 394.98 li
46.371 412.07 li
32.18 412.07 li
cp
0 0 0 0 cmyk
ef
38.566 407.914 mo
38.563 408.004 38.555 408.074 38.543 408.133 cv
38.527 408.195 38.508 408.246 38.488 408.277 cv
38.465 408.316 38.441 408.34 38.41 408.355 cv
38.379 408.371 38.348 408.379 38.32 408.379 cv
33.684 408.379 li
33.648 408.379 33.621 408.371 33.594 408.355 cv
33.566 408.34 33.539 408.316 33.516 408.277 cv
33.488 408.246 33.469 408.195 33.457 408.133 cv
33.441 408.074 33.434 408.004 33.438 407.914 cv
33.434 407.836 33.441 407.762 33.457 407.699 cv
33.469 407.641 33.484 407.594 33.508 407.555 cv
33.523 407.52 33.551 407.488 33.582 407.465 cv
33.613 407.445 33.645 407.437 33.684 407.434 cv
35.535 407.434 li
35.535 400.687 li
33.82 401.707 li
33.73 401.758 33.66 401.785 33.613 401.793 cv
33.559 401.801 33.516 401.793 33.484 401.762 cv
33.449 401.734 33.43 401.684 33.418 401.613 cv
33.406 401.547 33.398 401.461 33.402 401.352 cv
33.398 401.277 33.402 401.211 33.414 401.152 cv
33.418 401.102 33.43 401.055 33.445 401.016 cv
33.457 400.98 33.477 400.949 33.5 400.922 cv
33.523 400.895 33.555 400.867 33.602 400.84 cv
35.645 399.527 li
35.66 399.516 35.68 399.504 35.711 399.496 cv
35.734 399.488 35.77 399.48 35.816 399.469 cv
35.855 399.461 35.906 399.453 35.961 399.449 cv
36.016 399.449 36.082 399.449 36.168 399.445 cv
36.273 399.449 36.367 399.453 36.441 399.461 cv
36.512 399.469 36.566 399.484 36.613 399.5 cv
36.652 399.52 36.68 399.539 36.695 399.562 cv
36.703 399.59 36.711 399.613 36.715 399.637 cv
36.715 407.434 li
38.32 407.434 li
38.355 407.437 38.391 407.445 38.422 407.465 cv
38.453 407.488 38.477 407.52 38.5 407.555 cv
38.516 407.594 38.531 407.641 38.547 407.699 cv
38.555 407.762 38.563 407.836 38.566 407.914 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 403.922 mo
45.914 404.605 45.863 405.227 45.758 405.789 cv
45.648 406.352 45.469 406.836 45.223 407.238 cv
44.969 407.645 44.641 407.957 44.242 408.176 cv
43.836 408.398 43.344 408.508 42.758 408.508 cv
42.199 408.508 41.727 408.41 41.348 408.211 cv
40.965 408.016 40.66 407.723 40.426 407.336 cv
40.191 406.949 40.023 406.477 39.93 405.91 cv
39.828 405.348 39.781 404.699 39.781 403.965 cv
39.781 403.293 39.836 402.672 39.945 402.105 cv
40.055 401.543 40.23 401.059 40.48 400.652 cv
40.723 400.25 41.047 399.937 41.453 399.711 cv
41.852 399.492 42.348 399.379 42.938 399.379 cv
43.496 399.379 43.969 399.48 44.352 399.676 cv
44.734 399.879 45.039 400.172 45.273 400.555 cv
45.504 400.945 45.672 401.418 45.77 401.98 cv
45.867 402.543 45.914 403.191 45.918 403.922 cv
cp
44.711 404.004 mo
44.707 403.562 44.691 403.164 44.664 402.812 cv
44.629 402.461 44.582 402.152 44.523 401.883 cv
44.457 401.613 44.379 401.383 44.281 401.187 cv
44.184 400.996 44.066 400.836 43.93 400.707 cv
43.789 400.582 43.629 400.488 43.457 400.43 cv
43.277 400.375 43.082 400.348 42.867 400.344 cv
42.477 400.348 42.16 400.437 41.922 400.621 cv
41.676 400.805 41.484 401.059 41.348 401.375 cv
41.207 401.695 41.113 402.066 41.063 402.496 cv
41.012 402.926 40.988 403.391 40.988 403.883 cv
40.988 404.547 41.02 405.109 41.09 405.57 cv
41.156 406.039 41.266 406.418 41.418 406.707 cv
41.563 407.004 41.754 407.215 41.984 407.344 cv
42.215 407.48 42.496 407.547 42.828 407.543 cv
43.082 407.547 43.305 407.508 43.5 407.422 cv
43.691 407.344 43.859 407.223 44 407.066 cv
44.141 406.914 44.254 406.73 44.348 406.516 cv
44.434 406.301 44.508 406.062 44.566 405.801 cv
44.617 405.543 44.656 405.262 44.68 404.957 cv
44.699 404.652 44.707 404.336 44.711 404.004 cv
cp
f
32.18 358.109 mo
46.371 358.109 li
46.371 375.199 li
32.18 375.199 li
cp
0 0 0 0 cmyk
ef
38.566 371.035 mo
38.563 371.125 38.555 371.195 38.543 371.254 cv
38.527 371.316 38.508 371.367 38.488 371.398 cv
38.465 371.437 38.441 371.461 38.41 371.477 cv
38.379 371.492 38.348 371.5 38.32 371.5 cv
33.684 371.5 li
33.648 371.5 33.621 371.492 33.594 371.477 cv
33.566 371.461 33.539 371.437 33.516 371.398 cv
33.488 371.367 33.469 371.316 33.457 371.254 cv
33.441 371.195 33.434 371.125 33.438 371.035 cv
33.434 370.957 33.441 370.883 33.457 370.82 cv
33.469 370.762 33.484 370.715 33.508 370.676 cv
33.523 370.641 33.551 370.609 33.582 370.586 cv
33.613 370.566 33.645 370.559 33.684 370.555 cv
35.535 370.555 li
35.535 363.809 li
33.82 364.828 li
33.73 364.879 33.66 364.906 33.613 364.914 cv
33.559 364.922 33.516 364.914 33.484 364.883 cv
33.449 364.855 33.43 364.805 33.418 364.734 cv
33.406 364.668 33.398 364.582 33.402 364.473 cv
33.398 364.398 33.402 364.332 33.414 364.273 cv
33.418 364.223 33.43 364.176 33.445 364.137 cv
33.457 364.102 33.477 364.07 33.5 364.043 cv
33.523 364.016 33.555 363.988 33.602 363.961 cv
35.645 362.648 li
35.66 362.637 35.68 362.625 35.711 362.617 cv
35.734 362.609 35.77 362.602 35.816 362.59 cv
35.855 362.582 35.906 362.574 35.961 362.57 cv
36.016 362.57 36.082 362.57 36.168 362.566 cv
36.273 362.57 36.367 362.574 36.441 362.582 cv
36.512 362.59 36.566 362.605 36.613 362.621 cv
36.652 362.641 36.68 362.66 36.695 362.684 cv
36.703 362.711 36.711 362.734 36.715 362.758 cv
36.715 370.555 li
38.32 370.555 li
38.355 370.559 38.391 370.566 38.422 370.586 cv
38.453 370.609 38.477 370.641 38.5 370.676 cv
38.516 370.715 38.531 370.762 38.547 370.82 cv
38.555 370.883 38.563 370.957 38.566 371.035 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.582 368.648 mo
45.582 369.125 45.5 369.547 45.34 369.918 cv
45.18 370.289 44.953 370.602 44.664 370.855 cv
44.367 371.109 44.02 371.305 43.617 371.434 cv
43.211 371.566 42.762 371.629 42.27 371.629 cv
41.992 371.629 41.73 371.609 41.488 371.57 cv
41.238 371.531 41.02 371.484 40.832 371.43 cv
40.637 371.375 40.48 371.32 40.355 371.262 cv
40.23 371.211 40.152 371.168 40.121 371.133 cv
40.086 371.102 40.063 371.07 40.051 371.043 cv
40.035 371.016 40.02 370.984 40.012 370.941 cv
39.996 370.906 39.988 370.855 39.988 370.793 cv
39.98 370.734 39.98 370.664 39.98 370.582 cv
39.98 370.508 39.984 370.437 39.992 370.375 cv
40 370.312 40.012 370.262 40.031 370.223 cv
40.047 370.184 40.066 370.156 40.094 370.137 cv
40.117 370.121 40.148 370.113 40.18 370.109 cv
40.227 370.113 40.297 370.141 40.391 370.195 cv
40.484 370.254 40.613 370.316 40.777 370.383 cv
40.941 370.449 41.141 370.512 41.383 370.57 cv
41.617 370.629 41.902 370.656 42.238 370.656 cv
42.539 370.656 42.82 370.621 43.078 370.547 cv
43.332 370.477 43.555 370.363 43.742 370.207 cv
43.926 370.055 44.07 369.859 44.176 369.621 cv
44.281 369.387 44.332 369.098 44.336 368.758 cv
44.332 368.477 44.289 368.227 44.199 368.008 cv
44.109 367.789 43.973 367.609 43.789 367.465 cv
43.602 367.324 43.367 367.219 43.086 367.145 cv
42.801 367.074 42.461 367.035 42.074 367.035 cv
41.789 367.035 41.551 367.051 41.352 367.078 cv
41.148 367.109 40.961 367.125 40.789 367.121 cv
40.66 367.125 40.566 367.094 40.516 367.031 cv
40.457 366.973 40.43 366.859 40.434 366.687 cv
40.434 363.074 li
40.43 362.926 40.465 362.816 40.539 362.738 cv
40.605 362.668 40.707 362.629 40.844 362.629 cv
44.773 362.629 li
44.809 362.629 44.844 362.641 44.879 362.66 cv
44.91 362.684 44.938 362.715 44.965 362.754 cv
44.984 362.797 45 362.848 45.016 362.91 cv
45.023 362.977 45.031 363.055 45.035 363.137 cv
45.031 363.305 45.008 363.43 44.969 363.52 cv
44.922 363.613 44.863 363.66 44.785 363.656 cv
41.613 363.656 li
41.613 366.145 li
41.766 366.125 41.922 366.113 42.086 366.105 cv
42.242 366.102 42.43 366.098 42.645 366.098 cv
43.129 366.098 43.555 366.16 43.922 366.281 cv
44.285 366.402 44.59 366.574 44.84 366.793 cv
45.082 367.02 45.27 367.285 45.395 367.598 cv
45.52 367.914 45.582 368.266 45.582 368.648 cv
cp
f
32.18 321.238 mo
46.371 321.238 li
46.371 338.328 li
32.18 338.328 li
cp
0 0 0 0 cmyk
ef
38.547 334.121 mo
38.543 334.207 38.539 334.281 38.527 334.344 cv
38.516 334.41 38.5 334.465 38.48 334.504 cv
38.457 334.551 38.43 334.582 38.398 334.598 cv
38.363 334.621 38.324 334.629 38.285 334.629 cv
33.383 334.629 li
33.32 334.629 33.262 334.621 33.215 334.605 cv
33.164 334.59 33.125 334.566 33.09 334.527 cv
33.055 334.496 33.027 334.441 33.016 334.371 cv
32.996 334.301 32.988 334.215 32.992 334.113 cv
32.988 334.023 32.992 333.945 33 333.875 cv
33.004 333.809 33.02 333.75 33.047 333.695 cv
33.07 333.645 33.102 333.59 33.137 333.535 cv
33.172 333.484 33.215 333.43 33.273 333.367 cv
35.047 331.543 li
35.457 331.125 35.785 330.75 36.035 330.414 cv
36.281 330.086 36.473 329.781 36.605 329.504 cv
36.738 329.23 36.824 328.98 36.871 328.754 cv
36.91 328.531 36.934 328.32 36.934 328.125 cv
36.934 327.93 36.898 327.746 36.832 327.566 cv
36.766 327.395 36.672 327.238 36.547 327.102 cv
36.422 326.973 36.266 326.867 36.078 326.785 cv
35.891 326.711 35.672 326.672 35.426 326.668 cv
35.137 326.672 34.879 326.711 34.652 326.785 cv
34.422 326.867 34.223 326.953 34.051 327.039 cv
33.879 327.133 33.734 327.215 33.617 327.293 cv
33.5 327.371 33.414 327.41 33.363 327.41 cv
33.328 327.41 33.297 327.402 33.273 327.383 cv
33.242 327.367 33.223 327.336 33.207 327.293 cv
33.191 327.254 33.176 327.199 33.168 327.129 cv
33.156 327.062 33.152 326.98 33.156 326.883 cv
33.152 326.816 33.156 326.758 33.164 326.707 cv
33.168 326.656 33.176 326.613 33.188 326.574 cv
33.195 326.539 33.211 326.504 33.23 326.473 cv
33.25 326.441 33.285 326.402 33.344 326.352 cv
33.395 326.305 33.488 326.238 33.625 326.156 cv
33.758 326.074 33.93 325.996 34.133 325.914 cv
34.336 325.836 34.559 325.766 34.805 325.711 cv
35.047 325.656 35.305 325.629 35.578 325.629 cv
36.004 325.629 36.379 325.691 36.703 325.812 cv
37.023 325.934 37.289 326.098 37.504 326.309 cv
37.715 326.52 37.875 326.766 37.98 327.039 cv
38.086 327.32 38.141 327.617 38.141 327.93 cv
38.141 328.219 38.113 328.5 38.063 328.777 cv
38.012 329.062 37.906 329.367 37.746 329.691 cv
37.582 330.02 37.348 330.383 37.043 330.781 cv
36.734 331.184 36.328 331.645 35.824 332.16 cv
34.418 333.629 li
38.277 333.629 li
38.309 333.633 38.344 333.645 38.383 333.66 cv
38.414 333.684 38.445 333.715 38.473 333.754 cv
38.496 333.797 38.516 333.848 38.527 333.906 cv
38.539 333.973 38.543 334.043 38.547 334.121 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 330.172 mo
45.914 330.855 45.863 331.477 45.758 332.039 cv
45.648 332.602 45.469 333.086 45.223 333.488 cv
44.969 333.895 44.641 334.207 44.242 334.426 cv
43.836 334.648 43.344 334.758 42.758 334.758 cv
42.199 334.758 41.727 334.66 41.348 334.461 cv
40.965 334.266 40.66 333.973 40.426 333.586 cv
40.191 333.199 40.023 332.727 39.93 332.16 cv
39.828 331.598 39.781 330.949 39.781 330.215 cv
39.781 329.543 39.836 328.922 39.945 328.355 cv
40.055 327.793 40.23 327.309 40.48 326.902 cv
40.723 326.5 41.047 326.187 41.453 325.961 cv
41.852 325.742 42.348 325.629 42.938 325.629 cv
43.496 325.629 43.969 325.73 44.352 325.926 cv
44.734 326.129 45.039 326.422 45.273 326.805 cv
45.504 327.195 45.672 327.668 45.77 328.23 cv
45.867 328.793 45.914 329.441 45.918 330.172 cv
cp
44.711 330.254 mo
44.707 329.812 44.691 329.414 44.664 329.062 cv
44.629 328.711 44.582 328.402 44.523 328.133 cv
44.457 327.863 44.379 327.633 44.281 327.437 cv
44.184 327.246 44.066 327.086 43.93 326.957 cv
43.789 326.832 43.629 326.738 43.457 326.68 cv
43.277 326.625 43.082 326.598 42.867 326.594 cv
42.477 326.598 42.16 326.687 41.922 326.871 cv
41.676 327.055 41.484 327.309 41.348 327.625 cv
41.207 327.945 41.113 328.316 41.063 328.746 cv
41.012 329.176 40.988 329.641 40.988 330.133 cv
40.988 330.797 41.02 331.359 41.09 331.82 cv
41.156 332.289 41.266 332.668 41.418 332.957 cv
41.563 333.254 41.754 333.465 41.984 333.594 cv
42.215 333.73 42.496 333.797 42.828 333.793 cv
43.082 333.797 43.305 333.758 43.5 333.672 cv
43.691 333.594 43.859 333.473 44 333.316 cv
44.141 333.164 44.254 332.98 44.348 332.766 cv
44.434 332.551 44.508 332.312 44.566 332.051 cv
44.617 331.793 44.656 331.512 44.68 331.207 cv
44.699 330.902 44.707 330.586 44.711 330.254 cv
cp
f
32.18 284.371 mo
46.371 284.371 li
46.371 301.461 li
32.18 301.461 li
cp
0 0 0 0 cmyk
ef
38.547 297.23 mo
38.543 297.316 38.539 297.391 38.527 297.453 cv
38.516 297.52 38.5 297.574 38.48 297.613 cv
38.457 297.66 38.43 297.691 38.398 297.707 cv
38.363 297.73 38.324 297.738 38.285 297.738 cv
33.383 297.738 li
33.32 297.738 33.262 297.73 33.215 297.715 cv
33.164 297.699 33.125 297.676 33.09 297.637 cv
33.055 297.605 33.027 297.551 33.016 297.48 cv
32.996 297.41 32.988 297.324 32.992 297.223 cv
32.988 297.133 32.992 297.055 33 296.984 cv
33.004 296.918 33.02 296.859 33.047 296.805 cv
33.07 296.754 33.102 296.699 33.137 296.645 cv
33.172 296.594 33.215 296.539 33.273 296.477 cv
35.047 294.652 li
35.457 294.234 35.785 293.859 36.035 293.523 cv
36.281 293.195 36.473 292.891 36.605 292.613 cv
36.738 292.34 36.824 292.09 36.871 291.863 cv
36.91 291.641 36.934 291.43 36.934 291.234 cv
36.934 291.039 36.898 290.855 36.832 290.676 cv
36.766 290.504 36.672 290.348 36.547 290.211 cv
36.422 290.082 36.266 289.977 36.078 289.895 cv
35.891 289.82 35.672 289.781 35.426 289.777 cv
35.137 289.781 34.879 289.82 34.652 289.895 cv
34.422 289.977 34.223 290.062 34.051 290.148 cv
33.879 290.242 33.734 290.324 33.617 290.402 cv
33.5 290.48 33.414 290.52 33.363 290.52 cv
33.328 290.52 33.297 290.512 33.273 290.492 cv
33.242 290.477 33.223 290.445 33.207 290.402 cv
33.191 290.363 33.176 290.309 33.168 290.238 cv
33.156 290.172 33.152 290.09 33.156 289.992 cv
33.152 289.926 33.156 289.867 33.164 289.816 cv
33.168 289.766 33.176 289.723 33.188 289.684 cv
33.195 289.648 33.211 289.613 33.23 289.582 cv
33.25 289.551 33.285 289.512 33.344 289.461 cv
33.395 289.414 33.488 289.348 33.625 289.266 cv
33.758 289.184 33.93 289.105 34.133 289.023 cv
34.336 288.945 34.559 288.875 34.805 288.82 cv
35.047 288.766 35.305 288.738 35.578 288.738 cv
36.004 288.738 36.379 288.801 36.703 288.922 cv
37.023 289.043 37.289 289.207 37.504 289.418 cv
37.715 289.629 37.875 289.875 37.98 290.148 cv
38.086 290.43 38.141 290.727 38.141 291.039 cv
38.141 291.328 38.113 291.609 38.063 291.887 cv
38.012 292.172 37.906 292.477 37.746 292.801 cv
37.582 293.129 37.348 293.492 37.043 293.891 cv
36.734 294.293 36.328 294.754 35.824 295.27 cv
34.418 296.738 li
38.277 296.738 li
38.309 296.742 38.344 296.754 38.383 296.77 cv
38.414 296.793 38.445 296.824 38.473 296.863 cv
38.496 296.906 38.516 296.957 38.527 297.016 cv
38.539 297.082 38.543 297.152 38.547 297.23 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.582 294.887 mo
45.582 295.363 45.5 295.785 45.34 296.156 cv
45.18 296.527 44.953 296.84 44.664 297.094 cv
44.367 297.348 44.02 297.543 43.617 297.672 cv
43.211 297.805 42.762 297.867 42.27 297.867 cv
41.992 297.867 41.73 297.848 41.488 297.809 cv
41.238 297.77 41.02 297.723 40.832 297.668 cv
40.637 297.613 40.48 297.559 40.355 297.5 cv
40.23 297.449 40.152 297.406 40.121 297.371 cv
40.086 297.34 40.063 297.309 40.051 297.281 cv
40.035 297.254 40.02 297.223 40.012 297.18 cv
39.996 297.145 39.988 297.094 39.988 297.031 cv
39.98 296.973 39.98 296.902 39.98 296.82 cv
39.98 296.746 39.984 296.676 39.992 296.613 cv
40 296.551 40.012 296.5 40.031 296.461 cv
40.047 296.422 40.066 296.395 40.094 296.375 cv
40.117 296.359 40.148 296.352 40.18 296.348 cv
40.227 296.352 40.297 296.379 40.391 296.434 cv
40.484 296.492 40.613 296.555 40.777 296.621 cv
40.941 296.687 41.141 296.75 41.383 296.809 cv
41.617 296.867 41.902 296.895 42.238 296.895 cv
42.539 296.895 42.82 296.859 43.078 296.785 cv
43.332 296.715 43.555 296.602 43.742 296.445 cv
43.926 296.293 44.07 296.098 44.176 295.859 cv
44.281 295.625 44.332 295.336 44.336 294.996 cv
44.332 294.715 44.289 294.465 44.199 294.246 cv
44.109 294.027 43.973 293.848 43.789 293.703 cv
43.602 293.562 43.367 293.457 43.086 293.383 cv
42.801 293.312 42.461 293.273 42.074 293.273 cv
41.789 293.273 41.551 293.289 41.352 293.316 cv
41.148 293.348 40.961 293.363 40.789 293.359 cv
40.66 293.363 40.566 293.332 40.516 293.27 cv
40.457 293.211 40.43 293.098 40.434 292.926 cv
40.434 289.312 li
40.43 289.164 40.465 289.055 40.539 288.977 cv
40.605 288.906 40.707 288.867 40.844 288.867 cv
44.773 288.867 li
44.809 288.867 44.844 288.879 44.879 288.898 cv
44.91 288.922 44.938 288.953 44.965 288.992 cv
44.984 289.035 45 289.086 45.016 289.148 cv
45.023 289.215 45.031 289.293 45.035 289.375 cv
45.031 289.543 45.008 289.668 44.969 289.758 cv
44.922 289.852 44.863 289.898 44.785 289.895 cv
41.613 289.895 li
41.613 292.383 li
41.766 292.363 41.922 292.352 42.086 292.344 cv
42.242 292.34 42.43 292.336 42.645 292.336 cv
43.129 292.336 43.555 292.398 43.922 292.52 cv
44.285 292.641 44.59 292.812 44.84 293.031 cv
45.082 293.258 45.27 293.523 45.395 293.836 cv
45.52 294.152 45.582 294.504 45.582 294.887 cv
cp
f
32.18 247.512 mo
46.371 247.512 li
46.371 264.602 li
32.18 264.602 li
cp
0 0 0 0 cmyk
ef
38.477 258.344 mo
38.473 258.754 38.402 259.121 38.262 259.445 cv
38.117 259.773 37.914 260.055 37.652 260.285 cv
37.387 260.52 37.059 260.695 36.672 260.82 cv
36.281 260.945 35.844 261.008 35.359 261.008 cv
35.055 261.008 34.777 260.98 34.523 260.934 cv
34.262 260.887 34.031 260.836 33.836 260.766 cv
33.633 260.703 33.469 260.633 33.336 260.562 cv
33.203 260.492 33.117 260.441 33.086 260.406 cv
33.047 260.379 33.023 260.348 33.008 260.312 cv
32.988 260.281 32.969 260.242 32.957 260.195 cv
32.941 260.152 32.934 260.098 32.926 260.027 cv
32.918 259.965 32.914 259.883 32.918 259.781 cv
32.914 259.621 32.93 259.508 32.965 259.441 cv
32.996 259.379 33.043 259.344 33.105 259.344 cv
33.148 259.344 33.23 259.383 33.355 259.453 cv
33.477 259.531 33.637 259.609 33.832 259.691 cv
34.023 259.777 34.25 259.855 34.516 259.926 cv
34.773 260 35.066 260.035 35.387 260.035 cv
35.695 260.035 35.965 259.996 36.203 259.918 cv
36.434 259.84 36.633 259.73 36.793 259.59 cv
36.949 259.449 37.066 259.281 37.148 259.086 cv
37.227 258.891 37.266 258.68 37.27 258.453 cv
37.266 258.203 37.215 257.977 37.117 257.773 cv
37.012 257.574 36.863 257.402 36.672 257.254 cv
36.473 257.109 36.234 256.996 35.949 256.918 cv
35.664 256.84 35.34 256.801 34.977 256.801 cv
34.105 256.801 li
34.063 256.801 34.027 256.793 33.992 256.777 cv
33.957 256.762 33.926 256.734 33.902 256.695 cv
33.875 256.66 33.855 256.613 33.84 256.555 cv
33.824 256.496 33.816 256.418 33.816 256.32 cv
33.816 256.234 33.82 256.164 33.836 256.105 cv
33.844 256.051 33.863 256.004 33.895 255.969 cv
33.918 255.934 33.949 255.91 33.98 255.891 cv
34.012 255.879 34.047 255.871 34.09 255.867 cv
34.863 255.867 li
35.164 255.871 35.434 255.832 35.676 255.75 cv
35.91 255.676 36.113 255.562 36.285 255.414 cv
36.449 255.27 36.578 255.094 36.668 254.891 cv
36.758 254.687 36.805 254.461 36.805 254.207 cv
36.805 254.027 36.773 253.852 36.715 253.684 cv
36.652 253.52 36.563 253.375 36.445 253.25 cv
36.324 253.125 36.172 253.027 35.992 252.957 cv
35.805 252.887 35.594 252.852 35.352 252.852 cv
35.086 252.852 34.84 252.895 34.621 252.973 cv
34.395 253.055 34.199 253.141 34.027 253.23 cv
33.852 253.324 33.707 253.41 33.594 253.488 cv
33.48 253.57 33.398 253.609 33.355 253.605 cv
33.32 253.609 33.293 253.602 33.27 253.59 cv
33.242 253.578 33.223 253.555 33.207 253.52 cv
33.191 253.488 33.18 253.441 33.172 253.375 cv
33.164 253.316 33.16 253.234 33.164 253.133 cv
33.16 253.066 33.16 253.008 33.168 252.953 cv
33.168 252.902 33.18 252.855 33.195 252.812 cv
33.211 252.777 33.227 252.742 33.246 252.707 cv
33.262 252.68 33.293 252.641 33.336 252.594 cv
33.379 252.551 33.465 252.488 33.602 252.406 cv
33.73 252.324 33.895 252.246 34.09 252.164 cv
34.281 252.086 34.504 252.016 34.762 251.961 cv
35.012 251.906 35.285 251.879 35.582 251.879 cv
35.988 251.879 36.352 251.934 36.664 252.035 cv
36.977 252.145 37.234 252.293 37.445 252.48 cv
37.648 252.676 37.805 252.906 37.91 253.172 cv
38.012 253.441 38.063 253.734 38.066 254.059 cv
38.063 254.34 38.027 254.602 37.957 254.836 cv
37.883 255.078 37.773 255.289 37.633 255.473 cv
37.488 255.66 37.316 255.816 37.113 255.945 cv
36.906 256.078 36.668 256.172 36.398 256.219 cv
36.398 256.23 li
36.703 256.266 36.984 256.34 37.238 256.461 cv
37.492 256.582 37.711 256.734 37.895 256.918 cv
38.074 257.102 38.215 257.316 38.32 257.559 cv
38.422 257.805 38.473 258.066 38.477 258.344 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 256.422 mo
45.914 257.105 45.863 257.727 45.758 258.289 cv
45.648 258.852 45.469 259.336 45.223 259.738 cv
44.969 260.145 44.641 260.457 44.242 260.676 cv
43.836 260.898 43.344 261.008 42.758 261.008 cv
42.199 261.008 41.727 260.91 41.348 260.711 cv
40.965 260.516 40.66 260.223 40.426 259.836 cv
40.191 259.449 40.023 258.977 39.93 258.41 cv
39.828 257.848 39.781 257.199 39.781 256.465 cv
39.781 255.793 39.836 255.172 39.945 254.605 cv
40.055 254.043 40.23 253.559 40.48 253.152 cv
40.723 252.75 41.047 252.437 41.453 252.211 cv
41.852 251.992 42.348 251.879 42.938 251.879 cv
43.496 251.879 43.969 251.98 44.352 252.176 cv
44.734 252.379 45.039 252.672 45.273 253.055 cv
45.504 253.445 45.672 253.918 45.77 254.48 cv
45.867 255.043 45.914 255.691 45.918 256.422 cv
cp
44.711 256.504 mo
44.707 256.062 44.691 255.664 44.664 255.312 cv
44.629 254.961 44.582 254.652 44.523 254.383 cv
44.457 254.113 44.379 253.883 44.281 253.687 cv
44.184 253.496 44.066 253.336 43.93 253.207 cv
43.789 253.082 43.629 252.988 43.457 252.93 cv
43.277 252.875 43.082 252.848 42.867 252.844 cv
42.477 252.848 42.16 252.937 41.922 253.121 cv
41.676 253.305 41.484 253.559 41.348 253.875 cv
41.207 254.195 41.113 254.566 41.063 254.996 cv
41.012 255.426 40.988 255.891 40.988 256.383 cv
40.988 257.047 41.02 257.609 41.09 258.07 cv
41.156 258.539 41.266 258.918 41.418 259.207 cv
41.563 259.504 41.754 259.715 41.984 259.844 cv
42.215 259.98 42.496 260.047 42.828 260.043 cv
43.082 260.047 43.305 260.008 43.5 259.922 cv
43.691 259.844 43.859 259.723 44 259.566 cv
44.141 259.414 44.254 259.23 44.348 259.016 cv
44.434 258.801 44.508 258.562 44.566 258.301 cv
44.617 258.043 44.656 257.762 44.68 257.457 cv
44.699 257.152 44.707 256.836 44.711 256.504 cv
cp
f
32.18 210.641 mo
46.371 210.641 li
46.371 227.731 li
32.18 227.731 li
cp
0 0 0 0 cmyk
ef
38.477 221.453 mo
38.473 221.863 38.402 222.23 38.262 222.555 cv
38.117 222.883 37.914 223.164 37.652 223.395 cv
37.387 223.629 37.059 223.805 36.672 223.93 cv
36.281 224.055 35.844 224.117 35.359 224.117 cv
35.055 224.117 34.777 224.09 34.523 224.043 cv
34.262 223.996 34.031 223.945 33.836 223.875 cv
33.633 223.812 33.469 223.742 33.336 223.672 cv
33.203 223.602 33.117 223.551 33.086 223.516 cv
33.047 223.488 33.023 223.457 33.008 223.422 cv
32.988 223.391 32.969 223.352 32.957 223.305 cv
32.941 223.262 32.934 223.207 32.926 223.137 cv
32.918 223.074 32.914 222.992 32.918 222.891 cv
32.914 222.73 32.93 222.617 32.965 222.551 cv
32.996 222.488 33.043 222.453 33.105 222.453 cv
33.148 222.453 33.23 222.492 33.355 222.562 cv
33.477 222.641 33.637 222.719 33.832 222.801 cv
34.023 222.887 34.25 222.965 34.516 223.035 cv
34.773 223.109 35.066 223.145 35.387 223.145 cv
35.695 223.145 35.965 223.105 36.203 223.027 cv
36.434 222.949 36.633 222.84 36.793 222.699 cv
36.949 222.559 37.066 222.391 37.148 222.195 cv
37.227 222 37.266 221.789 37.27 221.562 cv
37.266 221.312 37.215 221.086 37.117 220.883 cv
37.012 220.684 36.863 220.512 36.672 220.363 cv
36.473 220.219 36.234 220.105 35.949 220.027 cv
35.664 219.949 35.34 219.91 34.977 219.91 cv
34.105 219.91 li
34.063 219.91 34.027 219.902 33.992 219.887 cv
33.957 219.871 33.926 219.844 33.902 219.805 cv
33.875 219.77 33.855 219.723 33.84 219.664 cv
33.824 219.605 33.816 219.527 33.816 219.43 cv
33.816 219.344 33.82 219.273 33.836 219.215 cv
33.844 219.16 33.863 219.113 33.895 219.078 cv
33.918 219.043 33.949 219.02 33.98 219 cv
34.012 218.988 34.047 218.98 34.09 218.977 cv
34.863 218.977 li
35.164 218.98 35.434 218.941 35.676 218.859 cv
35.91 218.785 36.113 218.672 36.285 218.523 cv
36.449 218.379 36.578 218.203 36.668 218 cv
36.758 217.797 36.805 217.57 36.805 217.316 cv
36.805 217.137 36.773 216.961 36.715 216.793 cv
36.652 216.629 36.563 216.484 36.445 216.359 cv
36.324 216.234 36.172 216.137 35.992 216.066 cv
35.805 215.996 35.594 215.961 35.352 215.961 cv
35.086 215.961 34.84 216.004 34.621 216.082 cv
34.395 216.164 34.199 216.25 34.027 216.34 cv
33.852 216.434 33.707 216.52 33.594 216.598 cv
33.48 216.68 33.398 216.719 33.355 216.715 cv
33.32 216.719 33.293 216.711 33.27 216.699 cv
33.242 216.687 33.223 216.664 33.207 216.629 cv
33.191 216.598 33.18 216.551 33.172 216.484 cv
33.164 216.426 33.16 216.344 33.164 216.242 cv
33.16 216.176 33.16 216.117 33.168 216.062 cv
33.168 216.012 33.18 215.965 33.195 215.922 cv
33.211 215.887 33.227 215.852 33.246 215.816 cv
33.262 215.789 33.293 215.75 33.336 215.703 cv
33.379 215.66 33.465 215.598 33.602 215.516 cv
33.73 215.434 33.895 215.355 34.09 215.273 cv
34.281 215.195 34.504 215.125 34.762 215.07 cv
35.012 215.016 35.285 214.988 35.582 214.988 cv
35.988 214.988 36.352 215.043 36.664 215.145 cv
36.977 215.254 37.234 215.402 37.445 215.59 cv
37.648 215.785 37.805 216.016 37.91 216.281 cv
38.012 216.551 38.063 216.844 38.066 217.168 cv
38.063 217.449 38.027 217.711 37.957 217.945 cv
37.883 218.187 37.773 218.398 37.633 218.582 cv
37.488 218.77 37.316 218.926 37.113 219.055 cv
36.906 219.187 36.668 219.281 36.398 219.328 cv
36.398 219.34 li
36.703 219.375 36.984 219.449 37.238 219.57 cv
37.492 219.691 37.711 219.844 37.895 220.027 cv
38.074 220.211 38.215 220.426 38.32 220.668 cv
38.422 220.914 38.473 221.176 38.477 221.453 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.582 221.137 mo
45.582 221.613 45.5 222.035 45.34 222.406 cv
45.18 222.777 44.953 223.09 44.664 223.344 cv
44.367 223.598 44.02 223.793 43.617 223.922 cv
43.211 224.055 42.762 224.117 42.27 224.117 cv
41.992 224.117 41.73 224.098 41.488 224.059 cv
41.238 224.02 41.02 223.973 40.832 223.918 cv
40.637 223.863 40.48 223.809 40.355 223.75 cv
40.23 223.699 40.152 223.656 40.121 223.621 cv
40.086 223.59 40.063 223.559 40.051 223.531 cv
40.035 223.504 40.02 223.473 40.012 223.43 cv
39.996 223.395 39.988 223.344 39.988 223.281 cv
39.98 223.223 39.98 223.152 39.98 223.07 cv
39.98 222.996 39.984 222.926 39.992 222.863 cv
40 222.801 40.012 222.75 40.031 222.711 cv
40.047 222.672 40.066 222.645 40.094 222.625 cv
40.117 222.609 40.148 222.602 40.18 222.598 cv
40.227 222.602 40.297 222.629 40.391 222.684 cv
40.484 222.742 40.613 222.805 40.777 222.871 cv
40.941 222.937 41.141 223 41.383 223.059 cv
41.617 223.117 41.902 223.145 42.238 223.145 cv
42.539 223.145 42.82 223.109 43.078 223.035 cv
43.332 222.965 43.555 222.852 43.742 222.695 cv
43.926 222.543 44.07 222.348 44.176 222.109 cv
44.281 221.875 44.332 221.586 44.336 221.246 cv
44.332 220.965 44.289 220.715 44.199 220.496 cv
44.109 220.277 43.973 220.098 43.789 219.953 cv
43.602 219.812 43.367 219.707 43.086 219.633 cv
42.801 219.562 42.461 219.523 42.074 219.523 cv
41.789 219.523 41.551 219.539 41.352 219.566 cv
41.148 219.598 40.961 219.613 40.789 219.609 cv
40.66 219.613 40.566 219.582 40.516 219.52 cv
40.457 219.461 40.43 219.348 40.434 219.176 cv
40.434 215.562 li
40.43 215.414 40.465 215.305 40.539 215.227 cv
40.605 215.156 40.707 215.117 40.844 215.117 cv
44.773 215.117 li
44.809 215.117 44.844 215.129 44.879 215.148 cv
44.91 215.172 44.938 215.203 44.965 215.242 cv
44.984 215.285 45 215.336 45.016 215.398 cv
45.023 215.465 45.031 215.543 45.035 215.625 cv
45.031 215.793 45.008 215.918 44.969 216.008 cv
44.922 216.102 44.863 216.148 44.785 216.145 cv
41.613 216.145 li
41.613 218.633 li
41.766 218.613 41.922 218.602 42.086 218.594 cv
42.242 218.59 42.43 218.586 42.645 218.586 cv
43.129 218.586 43.555 218.648 43.922 218.77 cv
44.285 218.891 44.59 219.062 44.84 219.281 cv
45.082 219.508 45.27 219.773 45.395 220.086 cv
45.52 220.402 45.582 220.754 45.582 221.137 cv
cp
f
32.18 173.77 mo
46.371 173.77 li
46.371 190.86 li
32.18 190.86 li
cp
0 0 0 0 cmyk
ef
38.922 184.605 mo
38.918 184.758 38.895 184.879 38.852 184.965 cv
38.805 185.055 38.742 185.098 38.66 185.094 cv
37.66 185.094 li
37.66 186.957 li
37.66 186.996 37.648 187.027 37.633 187.051 cv
37.609 187.078 37.578 187.098 37.535 187.117 cv
37.484 187.133 37.422 187.145 37.352 187.156 cv
37.273 187.164 37.18 187.168 37.063 187.172 cv
36.945 187.168 36.848 187.164 36.777 187.156 cv
36.699 187.145 36.641 187.133 36.598 187.117 cv
36.551 187.098 36.52 187.078 36.504 187.051 cv
36.484 187.027 36.477 186.996 36.48 186.957 cv
36.48 185.094 li
32.852 185.094 li
32.793 185.098 32.75 185.09 32.715 185.074 cv
32.68 185.062 32.645 185.035 32.617 184.996 cv
32.586 184.961 32.566 184.91 32.555 184.84 cv
32.543 184.773 32.539 184.684 32.539 184.57 cv
32.539 184.488 32.539 184.41 32.547 184.34 cv
32.547 184.27 32.559 184.207 32.574 184.152 cv
32.586 184.098 32.602 184.043 32.629 183.988 cv
32.648 183.934 32.676 183.879 32.711 183.816 cv
35.871 178.43 li
35.891 178.395 35.926 178.363 35.973 178.336 cv
36.016 178.309 36.07 178.285 36.145 178.266 cv
36.211 178.25 36.297 178.238 36.402 178.227 cv
36.504 178.223 36.625 178.219 36.766 178.215 cv
36.914 178.219 37.051 178.223 37.168 178.234 cv
37.281 178.246 37.371 178.262 37.445 178.277 cv
37.512 178.297 37.566 178.32 37.605 178.352 cv
37.641 178.383 37.66 178.418 37.66 178.457 cv
37.66 184.121 li
38.66 184.121 li
38.734 184.125 38.797 184.164 38.848 184.242 cv
38.895 184.324 38.918 184.445 38.922 184.605 cv
cp
36.48 179.254 mo
36.469 179.254 li
33.617 184.121 li
36.48 184.121 li
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 182.672 mo
45.914 183.355 45.863 183.977 45.758 184.539 cv
45.648 185.102 45.469 185.586 45.223 185.988 cv
44.969 186.395 44.641 186.707 44.242 186.926 cv
43.836 187.148 43.344 187.258 42.758 187.258 cv
42.199 187.258 41.727 187.16 41.348 186.961 cv
40.965 186.766 40.66 186.473 40.426 186.086 cv
40.191 185.699 40.023 185.227 39.93 184.66 cv
39.828 184.098 39.781 183.449 39.781 182.715 cv
39.781 182.043 39.836 181.422 39.945 180.855 cv
40.055 180.293 40.23 179.809 40.48 179.402 cv
40.723 179 41.047 178.687 41.453 178.461 cv
41.852 178.242 42.348 178.129 42.938 178.129 cv
43.496 178.129 43.969 178.23 44.352 178.426 cv
44.734 178.629 45.039 178.922 45.273 179.305 cv
45.504 179.695 45.672 180.168 45.77 180.73 cv
45.867 181.293 45.914 181.941 45.918 182.672 cv
cp
44.711 182.754 mo
44.707 182.312 44.691 181.914 44.664 181.562 cv
44.629 181.211 44.582 180.902 44.523 180.633 cv
44.457 180.363 44.379 180.133 44.281 179.937 cv
44.184 179.746 44.066 179.586 43.93 179.457 cv
43.789 179.332 43.629 179.238 43.457 179.18 cv
43.277 179.125 43.082 179.098 42.867 179.094 cv
42.477 179.098 42.16 179.187 41.922 179.371 cv
41.676 179.555 41.484 179.809 41.348 180.125 cv
41.207 180.445 41.113 180.816 41.063 181.246 cv
41.012 181.676 40.988 182.141 40.988 182.633 cv
40.988 183.297 41.02 183.859 41.09 184.32 cv
41.156 184.789 41.266 185.168 41.418 185.457 cv
41.563 185.754 41.754 185.965 41.984 186.094 cv
42.215 186.23 42.496 186.297 42.828 186.293 cv
43.082 186.297 43.305 186.258 43.5 186.172 cv
43.691 186.094 43.859 185.973 44 185.816 cv
44.141 185.664 44.254 185.48 44.348 185.266 cv
44.434 185.051 44.508 184.812 44.566 184.551 cv
44.617 184.293 44.656 184.012 44.68 183.707 cv
44.699 183.402 44.707 183.086 44.711 182.754 cv
cp
f
32.18 136.898 mo
46.371 136.898 li
46.371 153.988 li
32.18 153.988 li
cp
0 0 0 0 cmyk
ef
38.934 147.734 mo
38.93 147.891 38.906 148.008 38.863 148.094 cv
38.816 148.18 38.754 148.223 38.672 148.223 cv
37.672 148.223 li
37.672 150.09 li
37.672 150.129 37.66 150.16 37.641 150.184 cv
37.621 150.211 37.59 150.23 37.543 150.25 cv
37.496 150.266 37.434 150.277 37.359 150.289 cv
37.281 150.297 37.184 150.301 37.07 150.305 cv
36.953 150.301 36.859 150.297 36.785 150.289 cv
36.707 150.277 36.648 150.266 36.605 150.25 cv
36.559 150.23 36.527 150.211 36.512 150.184 cv
36.496 150.16 36.488 150.129 36.488 150.09 cv
36.488 148.223 li
32.855 148.223 li
32.801 148.223 32.754 148.219 32.719 148.203 cv
32.68 148.191 32.645 148.164 32.617 148.125 cv
32.586 148.09 32.566 148.039 32.555 147.969 cv
32.543 147.902 32.539 147.812 32.539 147.699 cv
32.539 147.617 32.539 147.539 32.547 147.469 cv
32.547 147.402 32.559 147.34 32.574 147.277 cv
32.586 147.223 32.602 147.168 32.629 147.113 cv
32.648 147.066 32.676 147.008 32.711 146.945 cv
35.879 141.547 li
35.902 141.516 35.934 141.484 35.98 141.453 cv
36.02 141.43 36.078 141.406 36.152 141.383 cv
36.219 141.367 36.305 141.355 36.41 141.348 cv
36.508 141.344 36.629 141.34 36.773 141.336 cv
36.926 141.34 37.059 141.344 37.176 141.352 cv
37.285 141.363 37.379 141.379 37.453 141.395 cv
37.52 141.418 37.574 141.441 37.613 141.469 cv
37.652 141.5 37.672 141.535 37.672 141.574 cv
37.672 147.246 li
38.672 147.246 li
38.746 147.25 38.809 147.289 38.859 147.367 cv
38.906 147.449 38.93 147.574 38.934 147.734 cv
cp
36.488 142.371 mo
36.477 142.371 li
33.617 147.246 li
36.488 147.246 li
cp
.629236 .549432 .540154 .282963 cmyk
f
45.594 147.406 mo
45.594 147.887 45.512 148.309 45.352 148.676 cv
45.191 149.047 44.965 149.359 44.672 149.613 cv
44.379 149.867 44.031 150.059 43.625 150.191 cv
43.219 150.324 42.77 150.391 42.277 150.391 cv
42 150.391 41.738 150.371 41.492 150.332 cv
41.242 150.293 41.02 150.246 40.832 150.191 cv
40.637 150.137 40.48 150.082 40.359 150.023 cv
40.234 149.969 40.156 149.926 40.121 149.891 cv
40.086 149.863 40.063 149.832 40.051 149.805 cv
40.035 149.777 40.02 149.746 40.012 149.703 cv
39.996 149.668 39.988 149.617 39.988 149.555 cv
39.98 149.496 39.98 149.426 39.984 149.34 cv
39.98 149.27 39.984 149.199 39.992 149.133 cv
40 149.074 40.012 149.023 40.031 148.98 cv
40.047 148.945 40.066 148.918 40.094 148.895 cv
40.117 148.879 40.148 148.867 40.184 148.867 cv
40.227 148.867 40.297 148.898 40.395 148.953 cv
40.488 149.016 40.617 149.078 40.781 149.141 cv
40.941 149.211 41.145 149.273 41.387 149.328 cv
41.625 149.391 41.91 149.418 42.242 149.418 cv
42.547 149.418 42.828 149.383 43.086 149.309 cv
43.344 149.238 43.563 149.125 43.75 148.965 cv
43.93 148.812 44.074 148.617 44.184 148.379 cv
44.285 148.145 44.34 147.855 44.344 147.516 cv
44.34 147.234 44.293 146.984 44.207 146.766 cv
44.113 146.551 43.977 146.371 43.797 146.223 cv
43.609 146.082 43.375 145.973 43.094 145.898 cv
42.805 145.832 42.469 145.797 42.078 145.793 cv
41.797 145.797 41.555 145.812 41.355 145.836 cv
41.152 145.867 40.965 145.879 40.793 145.875 cv
40.664 145.879 40.574 145.848 40.52 145.785 cv
40.465 145.727 40.438 145.613 40.438 145.441 cv
40.438 141.82 li
40.438 141.672 40.473 141.559 40.543 141.484 cv
40.613 141.414 40.715 141.379 40.848 141.375 cv
44.781 141.375 li
44.813 141.379 44.848 141.391 44.887 141.406 cv
44.918 141.43 44.949 141.461 44.973 141.5 cv
44.996 141.547 45.012 141.598 45.023 141.66 cv
45.035 141.723 45.043 141.797 45.043 141.883 cv
45.043 142.051 45.02 142.18 44.977 142.27 cv
44.934 142.363 44.871 142.41 44.793 142.406 cv
41.617 142.406 li
41.617 144.898 li
41.766 144.879 41.926 144.863 42.09 144.859 cv
42.25 144.855 42.434 144.855 42.648 144.852 cv
43.133 144.855 43.563 144.914 43.93 145.035 cv
44.297 145.156 44.602 145.328 44.848 145.547 cv
45.09 145.77 45.273 146.039 45.402 146.355 cv
45.527 146.672 45.594 147.023 45.594 147.406 cv
cp
f
32.18 100.031 mo
46.371 100.031 li
46.371 117.121 li
32.18 117.121 li
cp
0 0 0 0 cmyk
ef
38.504 110.527 mo
38.504 111.004 38.422 111.426 38.262 111.797 cv
38.102 112.168 37.875 112.48 37.586 112.734 cv
37.289 112.988 36.941 113.184 36.539 113.312 cv
36.133 113.445 35.684 113.508 35.191 113.508 cv
34.914 113.508 34.652 113.488 34.41 113.449 cv
34.16 113.41 33.941 113.363 33.754 113.309 cv
33.559 113.254 33.402 113.199 33.277 113.141 cv
33.152 113.09 33.074 113.047 33.043 113.012 cv
33.008 112.98 32.984 112.949 32.973 112.922 cv
32.957 112.895 32.941 112.863 32.934 112.82 cv
32.918 112.785 32.91 112.734 32.91 112.672 cv
32.902 112.613 32.902 112.543 32.902 112.461 cv
32.902 112.387 32.906 112.316 32.914 112.254 cv
32.922 112.191 32.934 112.141 32.953 112.102 cv
32.969 112.062 32.988 112.035 33.016 112.016 cv
33.039 112 33.07 111.992 33.102 111.988 cv
33.148 111.992 33.219 112.02 33.313 112.074 cv
33.406 112.133 33.535 112.195 33.699 112.262 cv
33.863 112.328 34.063 112.391 34.305 112.449 cv
34.539 112.508 34.824 112.535 35.16 112.535 cv
35.461 112.535 35.742 112.5 36 112.426 cv
36.254 112.355 36.477 112.242 36.664 112.086 cv
36.848 111.934 36.992 111.738 37.098 111.5 cv
37.203 111.266 37.254 110.977 37.258 110.637 cv
37.254 110.355 37.211 110.105 37.121 109.887 cv
37.031 109.668 36.895 109.488 36.711 109.344 cv
36.523 109.203 36.289 109.098 36.008 109.023 cv
35.723 108.953 35.383 108.914 34.996 108.914 cv
34.711 108.914 34.473 108.93 34.273 108.957 cv
34.07 108.988 33.883 109.004 33.711 109 cv
33.582 109.004 33.488 108.973 33.438 108.91 cv
33.379 108.852 33.352 108.738 33.355 108.566 cv
33.355 104.953 li
33.352 104.805 33.387 104.695 33.461 104.617 cv
33.527 104.547 33.629 104.508 33.766 104.508 cv
37.695 104.508 li
37.73 104.508 37.766 104.52 37.801 104.539 cv
37.832 104.562 37.859 104.594 37.887 104.633 cv
37.906 104.676 37.922 104.727 37.938 104.789 cv
37.945 104.855 37.953 104.934 37.957 105.016 cv
37.953 105.184 37.93 105.309 37.891 105.398 cv
37.844 105.492 37.785 105.539 37.707 105.535 cv
34.535 105.535 li
34.535 108.023 li
34.688 108.004 34.844 107.992 35.008 107.984 cv
35.164 107.98 35.352 107.977 35.566 107.977 cv
36.051 107.977 36.477 108.039 36.844 108.16 cv
37.207 108.281 37.512 108.453 37.762 108.672 cv
38.004 108.898 38.191 109.164 38.316 109.477 cv
38.441 109.793 38.504 110.145 38.504 110.527 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 108.922 mo
45.914 109.605 45.863 110.227 45.758 110.789 cv
45.648 111.352 45.469 111.836 45.223 112.238 cv
44.969 112.645 44.641 112.957 44.242 113.176 cv
43.836 113.398 43.344 113.508 42.758 113.508 cv
42.199 113.508 41.727 113.41 41.348 113.211 cv
40.965 113.016 40.66 112.723 40.426 112.336 cv
40.191 111.949 40.023 111.477 39.93 110.91 cv
39.828 110.348 39.781 109.699 39.781 108.965 cv
39.781 108.293 39.836 107.672 39.945 107.105 cv
40.055 106.543 40.23 106.059 40.48 105.652 cv
40.723 105.25 41.047 104.937 41.453 104.711 cv
41.852 104.492 42.348 104.379 42.938 104.379 cv
43.496 104.379 43.969 104.48 44.352 104.676 cv
44.734 104.879 45.039 105.172 45.273 105.555 cv
45.504 105.945 45.672 106.418 45.77 106.98 cv
45.867 107.543 45.914 108.191 45.918 108.922 cv
cp
44.711 109.004 mo
44.707 108.562 44.691 108.164 44.664 107.812 cv
44.629 107.461 44.582 107.152 44.523 106.883 cv
44.457 106.613 44.379 106.383 44.281 106.187 cv
44.184 105.996 44.066 105.836 43.93 105.707 cv
43.789 105.582 43.629 105.488 43.457 105.43 cv
43.277 105.375 43.082 105.348 42.867 105.344 cv
42.477 105.348 42.16 105.437 41.922 105.621 cv
41.676 105.805 41.484 106.059 41.348 106.375 cv
41.207 106.695 41.113 107.066 41.063 107.496 cv
41.012 107.926 40.988 108.391 40.988 108.883 cv
40.988 109.547 41.02 110.109 41.09 110.57 cv
41.156 111.039 41.266 111.418 41.418 111.707 cv
41.563 112.004 41.754 112.215 41.984 112.344 cv
42.215 112.48 42.496 112.547 42.828 112.543 cv
43.082 112.547 43.305 112.508 43.5 112.422 cv
43.691 112.344 43.859 112.223 44 112.066 cv
44.141 111.914 44.254 111.73 44.348 111.516 cv
44.434 111.301 44.508 111.062 44.566 110.801 cv
44.617 110.543 44.656 110.262 44.68 109.957 cv
44.699 109.652 44.707 109.336 44.711 109.004 cv
cp
f
32.18 63.16 mo
46.371 63.16 li
46.371 80.25 li
32.18 80.25 li
cp
0 0 0 0 cmyk
ef
38.504 73.66 mo
38.504 74.137 38.422 74.559 38.262 74.93 cv
38.102 75.301 37.875 75.613 37.586 75.867 cv
37.289 76.121 36.941 76.316 36.539 76.445 cv
36.133 76.578 35.684 76.641 35.191 76.641 cv
34.914 76.641 34.652 76.621 34.41 76.582 cv
34.16 76.543 33.941 76.496 33.754 76.441 cv
33.559 76.387 33.402 76.332 33.277 76.273 cv
33.152 76.223 33.074 76.18 33.043 76.145 cv
33.008 76.113 32.984 76.082 32.973 76.055 cv
32.957 76.027 32.941 75.996 32.934 75.953 cv
32.918 75.918 32.91 75.867 32.91 75.805 cv
32.902 75.746 32.902 75.676 32.902 75.594 cv
32.902 75.52 32.906 75.449 32.914 75.387 cv
32.922 75.324 32.934 75.273 32.953 75.234 cv
32.969 75.195 32.988 75.168 33.016 75.148 cv
33.039 75.133 33.07 75.125 33.102 75.121 cv
33.148 75.125 33.219 75.152 33.313 75.207 cv
33.406 75.266 33.535 75.328 33.699 75.395 cv
33.863 75.461 34.063 75.523 34.305 75.582 cv
34.539 75.641 34.824 75.668 35.16 75.668 cv
35.461 75.668 35.742 75.633 36 75.559 cv
36.254 75.488 36.477 75.375 36.664 75.219 cv
36.848 75.066 36.992 74.871 37.098 74.633 cv
37.203 74.398 37.254 74.109 37.258 73.77 cv
37.254 73.488 37.211 73.238 37.121 73.02 cv
37.031 72.801 36.895 72.621 36.711 72.477 cv
36.523 72.336 36.289 72.23 36.008 72.156 cv
35.723 72.086 35.383 72.047 34.996 72.047 cv
34.711 72.047 34.473 72.062 34.273 72.09 cv
34.07 72.121 33.883 72.137 33.711 72.133 cv
33.582 72.137 33.488 72.105 33.438 72.043 cv
33.379 71.984 33.352 71.871 33.355 71.699 cv
33.355 68.086 li
33.352 67.937 33.387 67.828 33.461 67.75 cv
33.527 67.68 33.629 67.641 33.766 67.641 cv
37.695 67.641 li
37.73 67.641 37.766 67.652 37.801 67.672 cv
37.832 67.695 37.859 67.727 37.887 67.766 cv
37.906 67.809 37.922 67.859 37.938 67.922 cv
37.945 67.988 37.953 68.066 37.957 68.148 cv
37.953 68.316 37.93 68.441 37.891 68.531 cv
37.844 68.625 37.785 68.672 37.707 68.668 cv
34.535 68.668 li
34.535 71.156 li
34.688 71.137 34.844 71.125 35.008 71.117 cv
35.164 71.113 35.352 71.109 35.566 71.109 cv
36.051 71.109 36.477 71.172 36.844 71.293 cv
37.207 71.414 37.512 71.586 37.762 71.805 cv
38.004 72.031 38.191 72.297 38.316 72.609 cv
38.441 72.926 38.504 73.277 38.504 73.66 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.582 73.66 mo
45.582 74.137 45.5 74.559 45.34 74.93 cv
45.18 75.301 44.953 75.613 44.664 75.867 cv
44.367 76.121 44.02 76.316 43.617 76.445 cv
43.211 76.578 42.762 76.641 42.27 76.641 cv
41.992 76.641 41.73 76.621 41.488 76.582 cv
41.238 76.543 41.02 76.496 40.832 76.441 cv
40.637 76.387 40.48 76.332 40.355 76.273 cv
40.23 76.223 40.152 76.18 40.121 76.145 cv
40.086 76.113 40.063 76.082 40.051 76.055 cv
40.035 76.027 40.02 75.996 40.012 75.953 cv
39.996 75.918 39.988 75.867 39.988 75.805 cv
39.98 75.746 39.98 75.676 39.98 75.594 cv
39.98 75.52 39.984 75.449 39.992 75.387 cv
40 75.324 40.012 75.273 40.031 75.234 cv
40.047 75.195 40.066 75.168 40.094 75.148 cv
40.117 75.133 40.148 75.125 40.18 75.121 cv
40.227 75.125 40.297 75.152 40.391 75.207 cv
40.484 75.266 40.613 75.328 40.777 75.395 cv
40.941 75.461 41.141 75.523 41.383 75.582 cv
41.617 75.641 41.902 75.668 42.238 75.668 cv
42.539 75.668 42.82 75.633 43.078 75.559 cv
43.332 75.488 43.555 75.375 43.742 75.219 cv
43.926 75.066 44.07 74.871 44.176 74.633 cv
44.281 74.398 44.332 74.109 44.336 73.77 cv
44.332 73.488 44.289 73.238 44.199 73.02 cv
44.109 72.801 43.973 72.621 43.789 72.477 cv
43.602 72.336 43.367 72.23 43.086 72.156 cv
42.801 72.086 42.461 72.047 42.074 72.047 cv
41.789 72.047 41.551 72.062 41.352 72.09 cv
41.148 72.121 40.961 72.137 40.789 72.133 cv
40.66 72.137 40.566 72.105 40.516 72.043 cv
40.457 71.984 40.43 71.871 40.434 71.699 cv
40.434 68.086 li
40.43 67.937 40.465 67.828 40.539 67.75 cv
40.605 67.68 40.707 67.641 40.844 67.641 cv
44.773 67.641 li
44.809 67.641 44.844 67.652 44.879 67.672 cv
44.91 67.695 44.938 67.727 44.965 67.766 cv
44.984 67.809 45 67.859 45.016 67.922 cv
45.023 67.988 45.031 68.066 45.035 68.148 cv
45.031 68.316 45.008 68.441 44.969 68.531 cv
44.922 68.625 44.863 68.672 44.785 68.668 cv
41.613 68.668 li
41.613 71.156 li
41.766 71.137 41.922 71.125 42.086 71.117 cv
42.242 71.113 42.43 71.109 42.645 71.109 cv
43.129 71.109 43.555 71.172 43.922 71.293 cv
44.285 71.414 44.59 71.586 44.84 71.805 cv
45.082 72.031 45.27 72.297 45.395 72.609 cv
45.52 72.926 45.582 73.277 45.582 73.66 cv
cp
f
32.18 26.301 mo
46.371 26.301 li
46.371 43.391 li
32.18 43.391 li
cp
0 0 0 0 cmyk
ef
38.773 36.75 mo
38.773 37.141 38.711 37.52 38.594 37.879 cv
38.469 38.246 38.285 38.562 38.043 38.836 cv
37.793 39.113 37.48 39.336 37.105 39.5 cv
36.723 39.668 36.277 39.75 35.762 39.75 cv
35.391 39.75 35.063 39.707 34.781 39.613 cv
34.496 39.527 34.25 39.395 34.039 39.223 cv
33.828 39.055 33.652 38.848 33.516 38.602 cv
33.375 38.355 33.262 38.074 33.18 37.758 cv
33.094 37.445 33.035 37.102 33 36.723 cv
32.961 36.352 32.941 35.949 32.945 35.516 cv
32.941 35.137 32.961 34.754 33.004 34.363 cv
33.043 33.98 33.117 33.605 33.223 33.238 cv
33.328 32.879 33.473 32.539 33.652 32.223 cv
33.832 31.906 34.059 31.629 34.332 31.395 cv
34.605 31.16 34.93 30.973 35.309 30.832 cv
35.688 30.695 36.129 30.629 36.633 30.625 cv
36.801 30.629 36.973 30.637 37.145 30.656 cv
37.316 30.68 37.477 30.711 37.625 30.742 cv
37.773 30.781 37.895 30.816 37.996 30.855 cv
38.094 30.895 38.16 30.93 38.195 30.953 cv
38.223 30.98 38.246 31.008 38.266 31.035 cv
38.281 31.066 38.297 31.098 38.305 31.133 cv
38.313 31.168 38.316 31.207 38.324 31.25 cv
38.324 31.293 38.328 31.348 38.332 31.41 cv
38.328 31.496 38.328 31.566 38.328 31.621 cv
38.324 31.684 38.313 31.73 38.301 31.766 cv
38.281 31.805 38.262 31.832 38.238 31.848 cv
38.211 31.867 38.18 31.875 38.141 31.875 cv
38.09 31.875 38.02 31.859 37.934 31.828 cv
37.844 31.797 37.738 31.762 37.617 31.719 cv
37.492 31.684 37.344 31.648 37.168 31.613 cv
36.992 31.586 36.789 31.57 36.559 31.566 cv
36.129 31.57 35.762 31.656 35.457 31.828 cv
35.152 32 34.902 32.234 34.707 32.527 cv
34.512 32.82 34.367 33.16 34.277 33.543 cv
34.18 33.934 34.125 34.336 34.117 34.754 cv
34.234 34.687 34.371 34.621 34.52 34.551 cv
34.668 34.484 34.828 34.422 35.004 34.363 cv
35.18 34.312 35.367 34.266 35.563 34.23 cv
35.758 34.199 35.969 34.184 36.195 34.18 cv
36.672 34.184 37.074 34.25 37.406 34.375 cv
37.734 34.508 38 34.687 38.207 34.918 cv
38.406 35.148 38.551 35.418 38.641 35.73 cv
38.727 36.043 38.773 36.383 38.773 36.75 cv
cp
37.578 36.859 mo
37.578 36.598 37.551 36.355 37.5 36.137 cv
37.445 35.922 37.355 35.738 37.234 35.582 cv
37.109 35.434 36.945 35.316 36.742 35.234 cv
36.531 35.152 36.277 35.109 35.98 35.109 cv
35.809 35.109 35.641 35.125 35.473 35.156 cv
35.301 35.187 35.137 35.23 34.98 35.277 cv
34.82 35.332 34.672 35.395 34.531 35.465 cv
34.387 35.539 34.254 35.613 34.137 35.691 cv
34.133 36.285 34.172 36.781 34.25 37.176 cv
34.324 37.574 34.434 37.891 34.578 38.129 cv
34.723 38.371 34.902 38.543 35.117 38.645 cv
35.332 38.75 35.582 38.801 35.871 38.797 cv
36.16 38.801 36.414 38.746 36.629 38.633 cv
36.844 38.527 37.02 38.379 37.164 38.191 cv
37.305 38.008 37.41 37.801 37.477 37.57 cv
37.543 37.34 37.578 37.105 37.578 36.859 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
45.918 35.164 mo
45.914 35.848 45.863 36.469 45.758 37.031 cv
45.648 37.594 45.469 38.078 45.223 38.48 cv
44.969 38.887 44.641 39.199 44.242 39.418 cv
43.836 39.641 43.344 39.75 42.758 39.75 cv
42.199 39.75 41.727 39.652 41.348 39.453 cv
40.965 39.258 40.66 38.965 40.426 38.578 cv
40.191 38.191 40.023 37.719 39.93 37.152 cv
39.828 36.59 39.781 35.941 39.781 35.207 cv
39.781 34.535 39.836 33.914 39.945 33.348 cv
40.055 32.785 40.23 32.301 40.48 31.895 cv
40.723 31.492 41.047 31.18 41.453 30.953 cv
41.852 30.734 42.348 30.621 42.938 30.621 cv
43.496 30.621 43.969 30.723 44.352 30.918 cv
44.734 31.121 45.039 31.414 45.273 31.797 cv
45.504 32.187 45.672 32.66 45.77 33.223 cv
45.867 33.785 45.914 34.434 45.918 35.164 cv
cp
44.711 35.246 mo
44.707 34.805 44.691 34.406 44.664 34.055 cv
44.629 33.703 44.582 33.395 44.523 33.125 cv
44.457 32.855 44.379 32.625 44.281 32.43 cv
44.184 32.238 44.066 32.078 43.93 31.949 cv
43.789 31.824 43.629 31.73 43.457 31.672 cv
43.277 31.617 43.082 31.59 42.867 31.586 cv
42.477 31.59 42.16 31.68 41.922 31.863 cv
41.676 32.047 41.484 32.301 41.348 32.617 cv
41.207 32.937 41.113 33.309 41.063 33.738 cv
41.012 34.168 40.988 34.633 40.988 35.125 cv
40.988 35.789 41.02 36.352 41.09 36.812 cv
41.156 37.281 41.266 37.66 41.418 37.949 cv
41.563 38.246 41.754 38.457 41.984 38.586 cv
42.215 38.723 42.496 38.789 42.828 38.785 cv
43.082 38.789 43.305 38.75 43.5 38.664 cv
43.691 38.586 43.859 38.465 44 38.309 cv
44.141 38.156 44.254 37.973 44.348 37.758 cv
44.434 37.543 44.508 37.305 44.566 37.043 cv
44.617 36.785 44.656 36.504 44.68 36.199 cv
44.699 35.895 44.707 35.578 44.711 35.246 cv
cp
f
62.176 499.863 mo
62.172 499.953 62.164 500.023 62.152 500.082 cv
62.137 500.145 62.117 500.195 62.098 500.227 cv
62.074 500.266 62.051 500.289 62.02 500.305 cv
61.988 500.32 61.957 500.328 61.93 500.328 cv
57.293 500.328 li
57.258 500.328 57.23 500.32 57.203 500.305 cv
57.176 500.289 57.148 500.266 57.125 500.227 cv
57.098 500.195 57.078 500.145 57.066 500.082 cv
57.051 500.023 57.043 499.953 57.047 499.863 cv
57.043 499.785 57.051 499.711 57.066 499.648 cv
57.078 499.59 57.094 499.543 57.117 499.504 cv
57.133 499.469 57.16 499.437 57.191 499.414 cv
57.223 499.395 57.254 499.387 57.293 499.383 cv
59.145 499.383 li
59.145 492.637 li
57.43 493.656 li
57.34 493.707 57.27 493.734 57.223 493.742 cv
57.168 493.75 57.125 493.742 57.094 493.711 cv
57.059 493.684 57.039 493.633 57.027 493.562 cv
57.016 493.496 57.008 493.41 57.012 493.301 cv
57.008 493.227 57.012 493.16 57.023 493.102 cv
57.027 493.051 57.039 493.004 57.055 492.965 cv
57.066 492.93 57.086 492.898 57.109 492.871 cv
57.133 492.844 57.164 492.816 57.211 492.789 cv
59.254 491.477 li
59.27 491.465 59.289 491.453 59.32 491.445 cv
59.344 491.437 59.379 491.43 59.426 491.418 cv
59.465 491.41 59.516 491.402 59.57 491.398 cv
59.625 491.398 59.691 491.398 59.777 491.395 cv
59.883 491.398 59.977 491.402 60.051 491.41 cv
60.121 491.418 60.176 491.434 60.223 491.449 cv
60.262 491.469 60.289 491.488 60.305 491.512 cv
60.313 491.539 60.32 491.562 60.324 491.586 cv
60.324 499.383 li
61.93 499.383 li
61.965 499.387 62 499.395 62.031 499.414 cv
62.063 499.437 62.086 499.469 62.109 499.504 cv
62.125 499.543 62.141 499.59 62.156 499.648 cv
62.164 499.711 62.172 499.785 62.176 499.863 cv
cp
f
140.598 499.82 mo
140.594 499.906 140.59 499.98 140.578 500.043 cv
140.566 500.109 140.551 500.164 140.531 500.203 cv
140.508 500.25 140.48 500.281 140.449 500.297 cv
140.414 500.32 140.375 500.328 140.336 500.328 cv
135.434 500.328 li
135.371 500.328 135.313 500.32 135.266 500.305 cv
135.215 500.289 135.176 500.266 135.141 500.227 cv
135.105 500.195 135.078 500.141 135.066 500.07 cv
135.047 500 135.039 499.914 135.043 499.812 cv
135.039 499.723 135.043 499.645 135.051 499.574 cv
135.055 499.508 135.07 499.449 135.098 499.395 cv
135.121 499.344 135.152 499.289 135.188 499.234 cv
135.223 499.184 135.266 499.129 135.324 499.066 cv
137.098 497.242 li
137.508 496.824 137.836 496.449 138.086 496.113 cv
138.332 495.785 138.523 495.48 138.656 495.203 cv
138.789 494.93 138.875 494.68 138.922 494.453 cv
138.961 494.23 138.984 494.02 138.984 493.824 cv
138.984 493.629 138.949 493.445 138.883 493.266 cv
138.816 493.094 138.723 492.937 138.598 492.801 cv
138.473 492.672 138.316 492.566 138.129 492.484 cv
137.941 492.41 137.723 492.371 137.477 492.367 cv
137.188 492.371 136.93 492.41 136.703 492.484 cv
136.473 492.566 136.273 492.652 136.102 492.738 cv
135.93 492.832 135.785 492.914 135.668 492.992 cv
135.551 493.07 135.465 493.109 135.414 493.109 cv
135.379 493.109 135.348 493.102 135.324 493.082 cv
135.293 493.066 135.273 493.035 135.258 492.992 cv
135.242 492.953 135.227 492.898 135.219 492.828 cv
135.207 492.762 135.203 492.68 135.207 492.582 cv
135.203 492.516 135.207 492.457 135.215 492.406 cv
135.219 492.355 135.227 492.312 135.238 492.273 cv
135.246 492.238 135.262 492.203 135.281 492.172 cv
135.301 492.141 135.336 492.102 135.395 492.051 cv
135.445 492.004 135.539 491.937 135.676 491.855 cv
135.809 491.773 135.98 491.695 136.184 491.613 cv
136.387 491.535 136.609 491.465 136.855 491.41 cv
137.098 491.355 137.355 491.328 137.629 491.328 cv
138.055 491.328 138.43 491.391 138.754 491.512 cv
139.074 491.633 139.34 491.797 139.555 492.008 cv
139.766 492.219 139.926 492.465 140.031 492.738 cv
140.137 493.02 140.191 493.316 140.191 493.629 cv
140.191 493.918 140.164 494.199 140.113 494.477 cv
140.063 494.762 139.957 495.066 139.797 495.391 cv
139.633 495.719 139.398 496.082 139.094 496.48 cv
138.785 496.883 138.379 497.344 137.875 497.859 cv
136.469 499.328 li
140.328 499.328 li
140.359 499.332 140.395 499.344 140.434 499.359 cv
140.465 499.383 140.496 499.414 140.523 499.453 cv
140.547 499.496 140.566 499.547 140.578 499.605 cv
140.59 499.672 140.594 499.742 140.598 499.82 cv
cp
f
219.371 497.805 mo
219.367 497.957 219.344 498.078 219.301 498.164 cv
219.254 498.254 219.191 498.297 219.109 498.293 cv
218.109 498.293 li
218.109 500.156 li
218.109 500.195 218.098 500.227 218.082 500.25 cv
218.059 500.277 218.027 500.297 217.984 500.316 cv
217.934 500.332 217.871 500.344 217.801 500.355 cv
217.723 500.363 217.629 500.367 217.512 500.371 cv
217.395 500.367 217.297 500.363 217.227 500.355 cv
217.148 500.344 217.09 500.332 217.047 500.316 cv
217 500.297 216.969 500.277 216.953 500.25 cv
216.934 500.227 216.926 500.195 216.93 500.156 cv
216.93 498.293 li
213.301 498.293 li
213.242 498.297 213.199 498.289 213.164 498.273 cv
213.129 498.262 213.094 498.234 213.066 498.195 cv
213.035 498.16 213.016 498.109 213.004 498.039 cv
212.992 497.973 212.988 497.883 212.988 497.77 cv
212.988 497.687 212.988 497.609 212.996 497.539 cv
212.996 497.469 213.008 497.406 213.023 497.352 cv
213.035 497.297 213.051 497.242 213.078 497.187 cv
213.098 497.133 213.125 497.078 213.16 497.016 cv
216.32 491.629 li
216.34 491.594 216.375 491.562 216.422 491.535 cv
216.465 491.508 216.52 491.484 216.594 491.465 cv
216.66 491.449 216.746 491.437 216.852 491.426 cv
216.953 491.422 217.074 491.418 217.215 491.414 cv
217.363 491.418 217.5 491.422 217.617 491.434 cv
217.73 491.445 217.82 491.461 217.895 491.477 cv
217.961 491.496 218.016 491.52 218.055 491.551 cv
218.09 491.582 218.109 491.617 218.109 491.656 cv
218.109 497.32 li
219.109 497.32 li
219.184 497.324 219.246 497.363 219.297 497.441 cv
219.344 497.523 219.367 497.645 219.371 497.805 cv
cp
216.93 492.453 mo
216.918 492.453 li
214.066 497.32 li
216.93 497.32 li
cp
f
297.664 497.457 mo
297.664 497.848 297.602 498.227 297.484 498.586 cv
297.359 498.953 297.176 499.27 296.934 499.543 cv
296.684 499.82 296.371 500.043 295.996 500.207 cv
295.613 500.375 295.168 500.457 294.652 500.457 cv
294.281 500.457 293.953 500.414 293.672 500.32 cv
293.387 500.234 293.141 500.102 292.93 499.93 cv
292.719 499.762 292.543 499.555 292.406 499.309 cv
292.266 499.062 292.152 498.781 292.07 498.465 cv
291.984 498.152 291.926 497.809 291.891 497.43 cv
291.852 497.059 291.832 496.656 291.836 496.223 cv
291.832 495.844 291.852 495.461 291.895 495.07 cv
291.934 494.687 292.008 494.312 292.113 493.945 cv
292.219 493.586 292.363 493.246 292.543 492.93 cv
292.723 492.613 292.949 492.336 293.223 492.102 cv
293.496 491.867 293.82 491.68 294.199 491.539 cv
294.578 491.402 295.02 491.336 295.523 491.332 cv
295.691 491.336 295.863 491.344 296.035 491.363 cv
296.207 491.387 296.367 491.418 296.516 491.449 cv
296.664 491.488 296.785 491.523 296.887 491.562 cv
296.984 491.602 297.051 491.637 297.086 491.66 cv
297.113 491.687 297.137 491.715 297.156 491.742 cv
297.172 491.773 297.188 491.805 297.195 491.84 cv
297.203 491.875 297.207 491.914 297.215 491.957 cv
297.215 492 297.219 492.055 297.223 492.117 cv
297.219 492.203 297.219 492.273 297.219 492.328 cv
297.215 492.391 297.203 492.437 297.191 492.473 cv
297.172 492.512 297.152 492.539 297.129 492.555 cv
297.102 492.574 297.07 492.582 297.031 492.582 cv
296.98 492.582 296.91 492.566 296.824 492.535 cv
296.734 492.504 296.629 492.469 296.508 492.426 cv
296.383 492.391 296.234 492.355 296.059 492.32 cv
295.883 492.293 295.68 492.277 295.449 492.273 cv
295.02 492.277 294.652 492.363 294.348 492.535 cv
294.043 492.707 293.793 492.941 293.598 493.234 cv
293.402 493.527 293.258 493.867 293.168 494.25 cv
293.07 494.641 293.016 495.043 293.008 495.461 cv
293.125 495.395 293.262 495.328 293.41 495.258 cv
293.559 495.191 293.719 495.129 293.895 495.07 cv
294.07 495.02 294.258 494.973 294.453 494.937 cv
294.648 494.906 294.859 494.891 295.086 494.887 cv
295.563 494.891 295.965 494.957 296.297 495.082 cv
296.625 495.215 296.891 495.395 297.098 495.625 cv
297.297 495.855 297.441 496.125 297.531 496.437 cv
297.617 496.75 297.664 497.09 297.664 497.457 cv
cp
296.469 497.566 mo
296.469 497.305 296.441 497.062 296.391 496.844 cv
296.336 496.629 296.246 496.445 296.125 496.289 cv
296 496.141 295.836 496.023 295.633 495.941 cv
295.422 495.859 295.168 495.816 294.871 495.816 cv
294.699 495.816 294.531 495.832 294.363 495.863 cv
294.191 495.895 294.027 495.937 293.871 495.984 cv
293.711 496.039 293.563 496.102 293.422 496.172 cv
293.277 496.246 293.145 496.32 293.027 496.398 cv
293.023 496.992 293.063 497.488 293.141 497.883 cv
293.215 498.281 293.324 498.598 293.469 498.836 cv
293.613 499.078 293.793 499.25 294.008 499.352 cv
294.223 499.457 294.473 499.508 294.762 499.504 cv
295.051 499.508 295.305 499.453 295.52 499.34 cv
295.734 499.234 295.91 499.086 296.055 498.898 cv
296.195 498.715 296.301 498.508 296.367 498.277 cv
296.434 498.047 296.469 497.812 296.469 497.566 cv
cp
f
376.039 498.051 mo
376.039 498.437 375.969 498.781 375.832 499.078 cv
375.695 499.383 375.5 499.633 375.242 499.836 cv
374.984 500.043 374.664 500.199 374.285 500.301 cv
373.902 500.406 373.469 500.457 372.984 500.457 cv
372.523 500.457 372.113 500.41 371.754 500.316 cv
371.391 500.223 371.086 500.082 370.836 499.891 cv
370.586 499.707 370.395 499.477 370.262 499.199 cv
370.129 498.926 370.063 498.613 370.063 498.258 cv
370.063 497.984 370.105 497.727 370.199 497.492 cv
370.285 497.258 370.418 497.043 370.594 496.848 cv
370.762 496.652 370.973 496.469 371.227 496.293 cv
371.477 496.125 371.762 495.961 372.078 495.805 cv
371.805 495.664 371.563 495.516 371.352 495.355 cv
371.141 495.199 370.961 495.027 370.816 494.84 cv
370.668 494.656 370.559 494.461 370.484 494.25 cv
370.406 494.043 370.367 493.812 370.371 493.562 cv
370.367 493.254 370.422 492.961 370.539 492.687 cv
370.648 492.418 370.82 492.184 371.047 491.98 cv
371.273 491.781 371.559 491.621 371.91 491.504 cv
372.254 491.387 372.664 491.328 373.133 491.328 cv
373.578 491.328 373.965 491.383 374.293 491.488 cv
374.621 491.598 374.891 491.742 375.102 491.926 cv
375.313 492.113 375.469 492.332 375.574 492.582 cv
375.672 492.832 375.723 493.102 375.727 493.391 cv
375.723 493.625 375.684 493.852 375.613 494.062 cv
375.535 494.281 375.426 494.484 375.277 494.672 cv
375.129 494.867 374.949 495.047 374.738 495.211 cv
374.527 495.383 374.285 495.539 374.012 495.68 cv
374.332 495.844 374.617 496.008 374.875 496.176 cv
375.125 496.344 375.34 496.523 375.516 496.719 cv
375.684 496.914 375.813 497.121 375.906 497.336 cv
375.992 497.555 376.039 497.793 376.039 498.051 cv
cp
374.559 493.5 mo
374.555 493.312 374.523 493.137 374.457 492.98 cv
374.391 492.824 374.293 492.691 374.168 492.582 cv
374.039 492.473 373.879 492.391 373.691 492.332 cv
373.496 492.277 373.281 492.25 373.043 492.246 cv
372.547 492.25 372.172 492.359 371.922 492.582 cv
371.664 492.809 371.539 493.117 371.543 493.5 cv
371.539 493.68 371.57 493.844 371.633 493.996 cv
371.695 494.152 371.789 494.297 371.922 494.434 cv
372.047 494.57 372.211 494.703 372.414 494.832 cv
372.609 494.965 372.848 495.102 373.125 495.242 cv
373.586 495.008 373.941 494.746 374.188 494.453 cv
374.434 494.168 374.555 493.852 374.559 493.5 cv
cp
374.848 498.176 mo
374.844 497.969 374.805 497.777 374.73 497.605 cv
374.648 497.437 374.531 497.277 374.375 497.125 cv
374.219 496.977 374.02 496.832 373.785 496.691 cv
373.547 496.555 373.277 496.41 372.969 496.258 cv
372.68 496.402 372.426 496.543 372.211 496.684 cv
371.992 496.824 371.813 496.973 371.676 497.121 cv
371.535 497.277 371.43 497.434 371.359 497.598 cv
371.285 497.766 371.25 497.949 371.254 498.148 cv
371.25 498.594 371.402 498.937 371.711 499.176 cv
372.012 499.422 372.465 499.543 373.07 499.539 cv
373.652 499.543 374.098 499.422 374.398 499.172 cv
374.695 498.93 374.844 498.598 374.848 498.176 cv
cp
f
450.715 499.863 mo
450.711 499.953 450.703 500.023 450.691 500.082 cv
450.676 500.145 450.656 500.195 450.637 500.227 cv
450.613 500.266 450.59 500.289 450.559 500.305 cv
450.527 500.32 450.496 500.328 450.469 500.328 cv
445.832 500.328 li
445.797 500.328 445.77 500.32 445.742 500.305 cv
445.715 500.289 445.688 500.266 445.664 500.227 cv
445.637 500.195 445.617 500.145 445.605 500.082 cv
445.59 500.023 445.582 499.953 445.586 499.863 cv
445.582 499.785 445.59 499.711 445.605 499.648 cv
445.617 499.59 445.633 499.543 445.656 499.504 cv
445.672 499.469 445.699 499.437 445.73 499.414 cv
445.762 499.395 445.793 499.387 445.832 499.383 cv
447.684 499.383 li
447.684 492.637 li
445.969 493.656 li
445.879 493.707 445.809 493.734 445.762 493.742 cv
445.707 493.75 445.664 493.742 445.633 493.711 cv
445.598 493.684 445.578 493.633 445.566 493.562 cv
445.555 493.496 445.547 493.41 445.551 493.301 cv
445.547 493.227 445.551 493.16 445.563 493.102 cv
445.566 493.051 445.578 493.004 445.594 492.965 cv
445.605 492.93 445.625 492.898 445.648 492.871 cv
445.672 492.844 445.703 492.816 445.75 492.789 cv
447.793 491.477 li
447.809 491.465 447.828 491.453 447.859 491.445 cv
447.883 491.437 447.918 491.43 447.965 491.418 cv
448.004 491.41 448.055 491.402 448.109 491.398 cv
448.164 491.398 448.23 491.398 448.316 491.395 cv
448.422 491.398 448.516 491.402 448.59 491.41 cv
448.66 491.418 448.715 491.434 448.762 491.449 cv
448.801 491.469 448.828 491.488 448.844 491.512 cv
448.852 491.539 448.859 491.562 448.863 491.586 cv
448.863 499.383 li
450.469 499.383 li
450.504 499.387 450.539 499.395 450.57 499.414 cv
450.602 499.437 450.625 499.469 450.648 499.504 cv
450.664 499.543 450.68 499.59 450.695 499.648 cv
450.703 499.711 450.711 499.785 450.715 499.863 cv
cp
f
458.07 495.871 mo
458.066 496.555 458.016 497.176 457.91 497.738 cv
457.801 498.301 457.621 498.785 457.375 499.187 cv
457.121 499.594 456.793 499.906 456.395 500.125 cv
455.988 500.348 455.496 500.457 454.91 500.457 cv
454.352 500.457 453.879 500.359 453.5 500.16 cv
453.117 499.965 452.813 499.672 452.578 499.285 cv
452.344 498.898 452.176 498.426 452.082 497.859 cv
451.98 497.297 451.934 496.648 451.934 495.914 cv
451.934 495.242 451.988 494.621 452.098 494.055 cv
452.207 493.492 452.383 493.008 452.633 492.602 cv
452.875 492.199 453.199 491.887 453.605 491.66 cv
454.004 491.441 454.5 491.328 455.09 491.328 cv
455.648 491.328 456.121 491.43 456.504 491.625 cv
456.887 491.828 457.191 492.121 457.426 492.504 cv
457.656 492.895 457.824 493.367 457.922 493.93 cv
458.02 494.492 458.066 495.141 458.07 495.871 cv
cp
456.863 495.953 mo
456.859 495.512 456.844 495.113 456.816 494.762 cv
456.781 494.41 456.734 494.102 456.676 493.832 cv
456.609 493.562 456.531 493.332 456.434 493.137 cv
456.336 492.945 456.219 492.785 456.082 492.656 cv
455.941 492.531 455.781 492.437 455.609 492.379 cv
455.43 492.324 455.234 492.297 455.02 492.293 cv
454.629 492.297 454.313 492.387 454.074 492.57 cv
453.828 492.754 453.637 493.008 453.5 493.324 cv
453.359 493.645 453.266 494.016 453.215 494.445 cv
453.164 494.875 453.141 495.34 453.141 495.832 cv
453.141 496.496 453.172 497.059 453.242 497.52 cv
453.309 497.988 453.418 498.367 453.57 498.656 cv
453.715 498.953 453.906 499.164 454.137 499.293 cv
454.367 499.43 454.648 499.496 454.98 499.492 cv
455.234 499.496 455.457 499.457 455.652 499.371 cv
455.844 499.293 456.012 499.172 456.152 499.016 cv
456.293 498.863 456.406 498.68 456.5 498.465 cv
456.586 498.25 456.66 498.012 456.719 497.75 cv
456.77 497.492 456.809 497.211 456.832 496.906 cv
456.852 496.602 456.859 496.285 456.863 495.953 cv
cp
f
529.145 499.863 mo
529.141 499.953 529.133 500.023 529.121 500.082 cv
529.105 500.145 529.086 500.195 529.066 500.227 cv
529.043 500.266 529.02 500.289 528.988 500.305 cv
528.957 500.32 528.926 500.328 528.898 500.328 cv
524.262 500.328 li
524.227 500.328 524.199 500.32 524.172 500.305 cv
524.145 500.289 524.117 500.266 524.094 500.227 cv
524.066 500.195 524.047 500.145 524.035 500.082 cv
524.02 500.023 524.012 499.953 524.016 499.863 cv
524.012 499.785 524.02 499.711 524.035 499.648 cv
524.047 499.59 524.063 499.543 524.086 499.504 cv
524.102 499.469 524.129 499.437 524.16 499.414 cv
524.191 499.395 524.223 499.387 524.262 499.383 cv
526.113 499.383 li
526.113 492.637 li
524.398 493.656 li
524.309 493.707 524.238 493.734 524.191 493.742 cv
524.137 493.75 524.094 493.742 524.063 493.711 cv
524.027 493.684 524.008 493.633 523.996 493.562 cv
523.984 493.496 523.977 493.41 523.98 493.301 cv
523.977 493.227 523.98 493.16 523.992 493.102 cv
523.996 493.051 524.008 493.004 524.023 492.965 cv
524.035 492.93 524.055 492.898 524.078 492.871 cv
524.102 492.844 524.133 492.816 524.18 492.789 cv
526.223 491.477 li
526.238 491.465 526.258 491.453 526.289 491.445 cv
526.313 491.437 526.348 491.43 526.395 491.418 cv
526.434 491.41 526.484 491.402 526.539 491.398 cv
526.594 491.398 526.66 491.398 526.746 491.395 cv
526.852 491.398 526.945 491.402 527.02 491.41 cv
527.09 491.418 527.145 491.434 527.191 491.449 cv
527.23 491.469 527.258 491.488 527.273 491.512 cv
527.281 491.539 527.289 491.562 527.293 491.586 cv
527.293 499.383 li
528.898 499.383 li
528.934 499.387 528.969 499.395 529 499.414 cv
529.031 499.437 529.055 499.469 529.078 499.504 cv
529.094 499.543 529.109 499.59 529.125 499.648 cv
529.133 499.711 529.141 499.785 529.145 499.863 cv
cp
f
536.207 499.82 mo
536.203 499.906 536.199 499.98 536.188 500.043 cv
536.176 500.109 536.16 500.164 536.141 500.203 cv
536.117 500.25 536.09 500.281 536.059 500.297 cv
536.023 500.32 535.984 500.328 535.945 500.328 cv
531.043 500.328 li
530.98 500.328 530.922 500.32 530.875 500.305 cv
530.824 500.289 530.785 500.266 530.75 500.227 cv
530.715 500.195 530.688 500.141 530.676 500.07 cv
530.656 500 530.648 499.914 530.652 499.812 cv
530.648 499.723 530.652 499.645 530.66 499.574 cv
530.664 499.508 530.68 499.449 530.707 499.395 cv
530.73 499.344 530.762 499.289 530.797 499.234 cv
530.832 499.184 530.875 499.129 530.934 499.066 cv
532.707 497.242 li
533.117 496.824 533.445 496.449 533.695 496.113 cv
533.941 495.785 534.133 495.48 534.266 495.203 cv
534.398 494.93 534.484 494.68 534.531 494.453 cv
534.57 494.23 534.594 494.02 534.594 493.824 cv
534.594 493.629 534.559 493.445 534.492 493.266 cv
534.426 493.094 534.332 492.937 534.207 492.801 cv
534.082 492.672 533.926 492.566 533.738 492.484 cv
533.551 492.41 533.332 492.371 533.086 492.367 cv
532.797 492.371 532.539 492.41 532.313 492.484 cv
532.082 492.566 531.883 492.652 531.711 492.738 cv
531.539 492.832 531.395 492.914 531.277 492.992 cv
531.16 493.07 531.074 493.109 531.023 493.109 cv
530.988 493.109 530.957 493.102 530.934 493.082 cv
530.902 493.066 530.883 493.035 530.867 492.992 cv
530.852 492.953 530.836 492.898 530.828 492.828 cv
530.816 492.762 530.813 492.68 530.816 492.582 cv
530.813 492.516 530.816 492.457 530.824 492.406 cv
530.828 492.355 530.836 492.312 530.848 492.273 cv
530.855 492.238 530.871 492.203 530.891 492.172 cv
530.91 492.141 530.945 492.102 531.004 492.051 cv
531.055 492.004 531.148 491.937 531.285 491.855 cv
531.418 491.773 531.59 491.695 531.793 491.613 cv
531.996 491.535 532.219 491.465 532.465 491.41 cv
532.707 491.355 532.965 491.328 533.238 491.328 cv
533.664 491.328 534.039 491.391 534.363 491.512 cv
534.684 491.633 534.949 491.797 535.164 492.008 cv
535.375 492.219 535.535 492.465 535.641 492.738 cv
535.746 493.02 535.801 493.316 535.801 493.629 cv
535.801 493.918 535.773 494.199 535.723 494.477 cv
535.672 494.762 535.566 495.066 535.406 495.391 cv
535.242 495.719 535.008 496.082 534.703 496.48 cv
534.395 496.883 533.988 497.344 533.484 497.859 cv
532.078 499.328 li
535.938 499.328 li
535.969 499.332 536.004 499.344 536.043 499.359 cv
536.074 499.383 536.105 499.414 536.133 499.453 cv
536.156 499.496 536.176 499.547 536.188 499.605 cv
536.199 499.672 536.203 499.742 536.207 499.82 cv
cp
f
607.555 499.863 mo
607.551 499.953 607.543 500.023 607.531 500.082 cv
607.516 500.145 607.496 500.195 607.477 500.227 cv
607.453 500.266 607.43 500.289 607.398 500.305 cv
607.367 500.32 607.336 500.328 607.309 500.328 cv
602.672 500.328 li
602.637 500.328 602.609 500.32 602.582 500.305 cv
602.555 500.289 602.527 500.266 602.504 500.227 cv
602.477 500.195 602.457 500.145 602.445 500.082 cv
602.43 500.023 602.422 499.953 602.426 499.863 cv
602.422 499.785 602.43 499.711 602.445 499.648 cv
602.457 499.59 602.473 499.543 602.496 499.504 cv
602.512 499.469 602.539 499.437 602.57 499.414 cv
602.602 499.395 602.633 499.387 602.672 499.383 cv
604.523 499.383 li
604.523 492.637 li
602.809 493.656 li
602.719 493.707 602.648 493.734 602.602 493.742 cv
602.547 493.75 602.504 493.742 602.473 493.711 cv
602.438 493.684 602.418 493.633 602.406 493.562 cv
602.395 493.496 602.387 493.41 602.391 493.301 cv
602.387 493.227 602.391 493.16 602.402 493.102 cv
602.406 493.051 602.418 493.004 602.434 492.965 cv
602.445 492.93 602.465 492.898 602.488 492.871 cv
602.512 492.844 602.543 492.816 602.59 492.789 cv
604.633 491.477 li
604.648 491.465 604.668 491.453 604.699 491.445 cv
604.723 491.437 604.758 491.43 604.805 491.418 cv
604.844 491.41 604.895 491.402 604.949 491.398 cv
605.004 491.398 605.07 491.398 605.156 491.395 cv
605.262 491.398 605.355 491.402 605.43 491.41 cv
605.5 491.418 605.555 491.434 605.602 491.449 cv
605.641 491.469 605.668 491.488 605.684 491.512 cv
605.691 491.539 605.699 491.562 605.703 491.586 cv
605.703 499.383 li
607.309 499.383 li
607.344 499.387 607.379 499.395 607.41 499.414 cv
607.441 499.437 607.465 499.469 607.488 499.504 cv
607.504 499.543 607.52 499.59 607.535 499.648 cv
607.543 499.711 607.551 499.785 607.555 499.863 cv
cp
f
614.992 497.805 mo
614.988 497.957 614.965 498.078 614.922 498.164 cv
614.875 498.254 614.813 498.297 614.73 498.293 cv
613.73 498.293 li
613.73 500.156 li
613.73 500.195 613.719 500.227 613.703 500.25 cv
613.68 500.277 613.648 500.297 613.605 500.316 cv
613.555 500.332 613.492 500.344 613.422 500.355 cv
613.344 500.363 613.25 500.367 613.133 500.371 cv
613.016 500.367 612.918 500.363 612.848 500.355 cv
612.77 500.344 612.711 500.332 612.668 500.316 cv
612.621 500.297 612.59 500.277 612.574 500.25 cv
612.555 500.227 612.547 500.195 612.551 500.156 cv
612.551 498.293 li
608.922 498.293 li
608.863 498.297 608.82 498.289 608.785 498.273 cv
608.75 498.262 608.715 498.234 608.688 498.195 cv
608.656 498.16 608.637 498.109 608.625 498.039 cv
608.613 497.973 608.609 497.883 608.609 497.77 cv
608.609 497.687 608.609 497.609 608.617 497.539 cv
608.617 497.469 608.629 497.406 608.645 497.352 cv
608.656 497.297 608.672 497.242 608.699 497.187 cv
608.719 497.133 608.746 497.078 608.781 497.016 cv
611.941 491.629 li
611.961 491.594 611.996 491.562 612.043 491.535 cv
612.086 491.508 612.141 491.484 612.215 491.465 cv
612.281 491.449 612.367 491.437 612.473 491.426 cv
612.574 491.422 612.695 491.418 612.836 491.414 cv
612.984 491.418 613.121 491.422 613.238 491.434 cv
613.352 491.445 613.441 491.461 613.516 491.477 cv
613.582 491.496 613.637 491.52 613.676 491.551 cv
613.711 491.582 613.73 491.617 613.73 491.656 cv
613.73 497.32 li
614.73 497.32 li
614.805 497.324 614.867 497.363 614.918 497.441 cv
614.965 497.523 614.988 497.645 614.992 497.805 cv
cp
612.551 492.453 mo
612.539 492.453 li
609.688 497.32 li
612.551 497.32 li
cp
f
685.984 499.863 mo
685.98 499.953 685.973 500.023 685.961 500.082 cv
685.945 500.145 685.926 500.195 685.906 500.227 cv
685.883 500.266 685.859 500.289 685.828 500.305 cv
685.797 500.32 685.766 500.328 685.738 500.328 cv
681.102 500.328 li
681.066 500.328 681.039 500.32 681.012 500.305 cv
680.984 500.289 680.957 500.266 680.934 500.227 cv
680.906 500.195 680.887 500.145 680.875 500.082 cv
680.859 500.023 680.852 499.953 680.855 499.863 cv
680.852 499.785 680.859 499.711 680.875 499.648 cv
680.887 499.59 680.902 499.543 680.926 499.504 cv
680.941 499.469 680.969 499.437 681 499.414 cv
681.031 499.395 681.063 499.387 681.102 499.383 cv
682.953 499.383 li
682.953 492.637 li
681.238 493.656 li
681.148 493.707 681.078 493.734 681.031 493.742 cv
680.977 493.75 680.934 493.742 680.902 493.711 cv
680.867 493.684 680.848 493.633 680.836 493.562 cv
680.824 493.496 680.816 493.41 680.82 493.301 cv
680.816 493.227 680.82 493.16 680.832 493.102 cv
680.836 493.051 680.848 493.004 680.863 492.965 cv
680.875 492.93 680.895 492.898 680.918 492.871 cv
680.941 492.844 680.973 492.816 681.02 492.789 cv
683.063 491.477 li
683.078 491.465 683.098 491.453 683.129 491.445 cv
683.152 491.437 683.188 491.43 683.234 491.418 cv
683.273 491.41 683.324 491.402 683.379 491.398 cv
683.434 491.398 683.5 491.398 683.586 491.395 cv
683.691 491.398 683.785 491.402 683.859 491.41 cv
683.93 491.418 683.984 491.434 684.031 491.449 cv
684.07 491.469 684.098 491.488 684.113 491.512 cv
684.121 491.539 684.129 491.562 684.133 491.586 cv
684.133 499.383 li
685.738 499.383 li
685.773 499.387 685.809 499.395 685.84 499.414 cv
685.871 499.437 685.895 499.469 685.918 499.504 cv
685.934 499.543 685.949 499.59 685.965 499.648 cv
685.973 499.711 685.98 499.785 685.984 499.863 cv
cp
f
693.273 497.457 mo
693.273 497.848 693.211 498.227 693.094 498.586 cv
692.969 498.953 692.785 499.27 692.543 499.543 cv
692.293 499.82 691.98 500.043 691.605 500.207 cv
691.223 500.375 690.777 500.457 690.262 500.457 cv
689.891 500.457 689.563 500.414 689.281 500.32 cv
688.996 500.234 688.75 500.102 688.539 499.93 cv
688.328 499.762 688.152 499.555 688.016 499.309 cv
687.875 499.062 687.762 498.781 687.68 498.465 cv
687.594 498.152 687.535 497.809 687.5 497.43 cv
687.461 497.059 687.441 496.656 687.445 496.223 cv
687.441 495.844 687.461 495.461 687.504 495.07 cv
687.543 494.687 687.617 494.312 687.723 493.945 cv
687.828 493.586 687.973 493.246 688.152 492.93 cv
688.332 492.613 688.559 492.336 688.832 492.102 cv
689.105 491.867 689.43 491.68 689.809 491.539 cv
690.188 491.402 690.629 491.336 691.133 491.332 cv
691.301 491.336 691.473 491.344 691.645 491.363 cv
691.816 491.387 691.977 491.418 692.125 491.449 cv
692.273 491.488 692.395 491.523 692.496 491.562 cv
692.594 491.602 692.66 491.637 692.695 491.66 cv
692.723 491.687 692.746 491.715 692.766 491.742 cv
692.781 491.773 692.797 491.805 692.805 491.84 cv
692.813 491.875 692.816 491.914 692.824 491.957 cv
692.824 492 692.828 492.055 692.832 492.117 cv
692.828 492.203 692.828 492.273 692.828 492.328 cv
692.824 492.391 692.813 492.437 692.801 492.473 cv
692.781 492.512 692.762 492.539 692.738 492.555 cv
692.711 492.574 692.68 492.582 692.641 492.582 cv
692.59 492.582 692.52 492.566 692.434 492.535 cv
692.344 492.504 692.238 492.469 692.117 492.426 cv
691.992 492.391 691.844 492.355 691.668 492.32 cv
691.492 492.293 691.289 492.277 691.059 492.273 cv
690.629 492.277 690.262 492.363 689.957 492.535 cv
689.652 492.707 689.402 492.941 689.207 493.234 cv
689.012 493.527 688.867 493.867 688.777 494.25 cv
688.68 494.641 688.625 495.043 688.617 495.461 cv
688.734 495.395 688.871 495.328 689.02 495.258 cv
689.168 495.191 689.328 495.129 689.504 495.07 cv
689.68 495.02 689.867 494.973 690.063 494.937 cv
690.258 494.906 690.469 494.891 690.695 494.887 cv
691.172 494.891 691.574 494.957 691.906 495.082 cv
692.234 495.215 692.5 495.395 692.707 495.625 cv
692.906 495.855 693.051 496.125 693.141 496.437 cv
693.227 496.75 693.273 497.09 693.273 497.457 cv
cp
692.078 497.566 mo
692.078 497.305 692.051 497.062 692 496.844 cv
691.945 496.629 691.855 496.445 691.734 496.289 cv
691.609 496.141 691.445 496.023 691.242 495.941 cv
691.031 495.859 690.777 495.816 690.48 495.816 cv
690.309 495.816 690.141 495.832 689.973 495.863 cv
689.801 495.895 689.637 495.937 689.48 495.984 cv
689.32 496.039 689.172 496.102 689.031 496.172 cv
688.887 496.246 688.754 496.32 688.637 496.398 cv
688.633 496.992 688.672 497.488 688.75 497.883 cv
688.824 498.281 688.934 498.598 689.078 498.836 cv
689.223 499.078 689.402 499.25 689.617 499.352 cv
689.832 499.457 690.082 499.508 690.371 499.504 cv
690.66 499.508 690.914 499.453 691.129 499.34 cv
691.344 499.234 691.52 499.086 691.664 498.898 cv
691.805 498.715 691.91 498.508 691.977 498.277 cv
692.043 498.047 692.078 497.812 692.078 497.566 cv
cp
f
16.652 371.406 mo
16.75 371.41 16.832 371.414 16.898 371.422 cv
16.973 371.434 17.031 371.453 17.074 371.477 cv
17.125 371.504 17.16 371.535 17.176 371.566 cv
17.199 371.605 17.207 371.641 17.207 371.68 cv
17.207 376.52 li
17.207 376.641 17.168 376.754 17.086 376.859 cv
17.008 376.969 16.867 377.023 16.66 377.02 cv
7.668 377.02 li
7.465 377.023 7.324 376.969 7.242 376.859 cv
7.164 376.754 7.125 376.641 7.121 376.52 cv
7.121 371.734 li
7.125 371.695 7.133 371.656 7.152 371.621 cv
7.176 371.59 7.211 371.562 7.254 371.539 cv
7.305 371.52 7.363 371.504 7.43 371.488 cv
7.504 371.477 7.59 371.469 7.691 371.469 cv
7.785 371.469 7.867 371.477 7.938 371.488 cv
8.008 371.504 8.066 371.52 8.109 371.539 cv
8.156 371.562 8.188 371.59 8.207 371.621 cv
8.23 371.656 8.242 371.695 8.238 371.734 cv
8.238 375.68 li
11.402 375.68 li
11.402 372.297 li
11.406 372.258 11.418 372.219 11.438 372.184 cv
11.465 372.152 11.496 372.125 11.535 372.098 cv
11.578 372.078 11.637 372.062 11.707 372.047 cv
11.781 372.039 11.867 372.031 11.961 372.031 cv
12.059 372.031 12.137 372.039 12.203 372.047 cv
12.273 372.062 12.328 372.078 12.367 372.098 cv
12.41 372.125 12.441 372.152 12.457 372.184 cv
12.477 372.219 12.484 372.258 12.484 372.297 cv
12.484 375.68 li
16.094 375.68 li
16.094 371.68 li
16.094 371.641 16.105 371.605 16.125 371.566 cv
16.148 371.535 16.18 371.504 16.223 371.477 cv
16.27 371.453 16.328 371.434 16.395 371.422 cv
16.465 371.414 16.551 371.41 16.652 371.406 cv
cp
f
17.012 363.34 mo
17.059 363.34 17.094 363.352 17.117 363.371 cv
17.148 363.395 17.172 363.43 17.191 363.473 cv
17.211 363.523 17.223 363.586 17.238 363.668 cv
17.246 363.75 17.254 363.855 17.254 363.977 cv
17.254 364.109 17.246 364.215 17.238 364.297 cv
17.223 364.383 17.211 364.449 17.191 364.492 cv
17.172 364.543 17.148 364.574 17.117 364.594 cv
17.094 364.617 17.059 364.629 17.012 364.625 cv
12.906 364.625 li
12.508 364.629 12.188 364.66 11.941 364.719 cv
11.699 364.785 11.488 364.875 11.309 364.992 cv
11.133 365.109 10.996 365.266 10.902 365.453 cv
10.809 365.648 10.762 365.867 10.762 366.113 cv
10.762 366.437 10.879 366.762 11.105 367.082 cv
11.34 367.406 11.672 367.742 12.109 368.094 cv
17.012 368.094 li
17.059 368.098 17.094 368.109 17.117 368.125 cv
17.148 368.148 17.172 368.18 17.191 368.227 cv
17.211 368.273 17.223 368.34 17.238 368.418 cv
17.246 368.504 17.254 368.609 17.254 368.738 cv
17.254 368.867 17.246 368.973 17.238 369.051 cv
17.223 369.137 17.211 369.203 17.191 369.25 cv
17.172 369.305 17.148 369.336 17.117 369.352 cv
17.094 369.371 17.059 369.383 17.012 369.379 cv
10 369.379 li
9.961 369.383 9.926 369.375 9.895 369.355 cv
9.867 369.344 9.844 369.312 9.816 369.262 cv
9.797 369.219 9.781 369.156 9.77 369.082 cv
9.766 369.012 9.762 368.918 9.758 368.793 cv
9.762 368.684 9.766 368.586 9.77 368.508 cv
9.781 368.434 9.797 368.375 9.816 368.332 cv
9.844 368.293 9.867 368.266 9.895 368.246 cv
9.926 368.23 9.961 368.223 10 368.219 cv
10.926 368.219 li
10.484 367.828 10.164 367.434 9.957 367.039 cv
9.754 366.648 9.648 366.25 9.648 365.848 cv
9.648 365.379 9.73 364.988 9.887 364.668 cv
10.051 364.352 10.262 364.09 10.523 363.891 cv
10.789 363.695 11.098 363.555 11.453 363.469 cv
11.809 363.383 12.238 363.34 12.734 363.34 cv
cp
f
13.203 354.969 mo
13.406 354.973 13.547 355.023 13.633 355.121 cv
13.719 355.227 13.762 355.344 13.762 355.469 cv
13.762 360.086 li
14.152 360.09 14.504 360.051 14.816 359.969 cv
15.129 359.895 15.398 359.762 15.617 359.578 cv
15.844 359.398 16.016 359.164 16.133 358.867 cv
16.258 358.578 16.316 358.219 16.313 357.793 cv
16.316 357.461 16.289 357.164 16.23 356.902 cv
16.18 356.641 16.117 356.414 16.047 356.223 cv
15.98 356.035 15.922 355.879 15.863 355.754 cv
15.813 355.633 15.785 355.539 15.781 355.477 cv
15.785 355.441 15.793 355.41 15.809 355.379 cv
15.828 355.352 15.855 355.328 15.891 355.309 cv
15.93 355.297 15.98 355.285 16.043 355.273 cv
16.109 355.27 16.188 355.266 16.281 355.262 cv
16.352 355.266 16.41 355.27 16.457 355.27 cv
16.504 355.277 16.547 355.281 16.586 355.289 cv
16.625 355.297 16.66 355.312 16.691 355.328 cv
16.723 355.352 16.754 355.375 16.781 355.398 cv
16.813 355.43 16.859 355.512 16.922 355.652 cv
16.988 355.793 17.051 355.977 17.113 356.199 cv
17.176 356.426 17.23 356.684 17.281 356.977 cv
17.328 357.27 17.352 357.582 17.355 357.914 cv
17.352 358.492 17.273 359 17.113 359.43 cv
16.953 359.867 16.715 360.23 16.398 360.523 cv
16.082 360.824 15.688 361.047 15.207 361.195 cv
14.73 361.344 14.172 361.418 13.535 361.418 cv
12.938 361.418 12.398 361.344 11.914 361.187 cv
11.438 361.035 11.027 360.809 10.691 360.512 cv
10.355 360.219 10.098 359.863 9.918 359.449 cv
9.738 359.035 9.648 358.57 9.648 358.055 cv
9.648 357.504 9.738 357.035 9.914 356.648 cv
10.094 356.262 10.332 355.945 10.629 355.691 cv
10.93 355.445 11.281 355.262 11.68 355.145 cv
12.086 355.031 12.516 354.973 12.969 354.969 cv
cp
12.82 356.262 mo
12.145 356.246 11.613 356.398 11.23 356.715 cv
10.848 357.031 10.656 357.5 10.652 358.117 cv
10.656 358.441 10.715 358.723 10.832 358.961 cv
10.953 359.203 11.113 359.402 11.309 359.562 cv
11.508 359.727 11.738 359.852 12 359.937 cv
12.262 360.027 12.535 360.078 12.82 360.086 cv
cp
f
10.457 348.902 mo
10.574 348.906 10.672 348.906 10.746 348.91 cv
10.828 348.918 10.891 348.93 10.93 348.941 cv
10.977 348.961 11.008 348.98 11.031 349 cv
11.055 349.027 11.066 349.059 11.066 349.098 cv
11.066 349.141 11.055 349.191 11.031 349.25 cv
11.008 349.312 10.984 349.383 10.961 349.453 cv
10.938 349.531 10.918 349.613 10.895 349.707 cv
10.879 349.801 10.867 349.902 10.863 350.012 cv
10.867 350.145 10.895 350.273 10.941 350.395 cv
10.996 350.52 11.082 350.648 11.199 350.785 cv
11.324 350.926 11.48 351.07 11.676 351.219 cv
11.871 351.371 12.113 351.539 12.398 351.719 cv
17.012 351.719 li
17.059 351.723 17.094 351.734 17.117 351.75 cv
17.148 351.773 17.172 351.805 17.191 351.852 cv
17.211 351.898 17.223 351.965 17.238 352.043 cv
17.246 352.129 17.254 352.234 17.254 352.363 cv
17.254 352.492 17.246 352.598 17.238 352.676 cv
17.223 352.762 17.211 352.828 17.191 352.875 cv
17.172 352.93 17.148 352.961 17.117 352.977 cv
17.094 352.996 17.059 353.008 17.012 353.004 cv
10 353.004 li
9.961 353.008 9.926 353 9.895 352.98 cv
9.867 352.969 9.844 352.937 9.816 352.887 cv
9.797 352.844 9.781 352.781 9.77 352.707 cv
9.766 352.637 9.762 352.543 9.758 352.418 cv
9.762 352.309 9.766 352.211 9.77 352.133 cv
9.781 352.059 9.797 352 9.816 351.957 cv
9.844 351.918 9.867 351.891 9.895 351.871 cv
9.926 351.855 9.961 351.848 10 351.844 cv
11.02 351.844 li
10.738 351.656 10.512 351.473 10.336 351.301 cv
10.16 351.133 10.02 350.973 9.918 350.82 cv
9.816 350.672 9.746 350.523 9.707 350.375 cv
9.668 350.227 9.648 350.078 9.648 349.926 cv
9.648 349.859 9.652 349.781 9.66 349.695 cv
9.668 349.609 9.684 349.52 9.703 349.426 cv
9.727 349.332 9.75 349.25 9.773 349.172 cv
9.801 349.102 9.828 349.047 9.852 349.012 cv
9.883 348.984 9.906 348.965 9.926 348.949 cv
9.953 348.941 9.984 348.93 10.016 348.922 cv
10.055 348.914 10.105 348.91 10.176 348.906 cv
10.246 348.906 10.34 348.906 10.457 348.902 cv
cp
f
10.316 341.895 mo
10.5 341.898 10.633 341.922 10.711 341.969 cv
10.793 342.02 10.832 342.082 10.832 342.156 cv
10.832 343.164 li
11.02 342.984 11.227 342.855 11.453 342.781 cv
11.68 342.711 11.914 342.676 12.156 342.672 cv
12.563 342.676 12.922 342.742 13.234 342.867 cv
13.547 343 13.813 343.184 14.023 343.426 cv
14.242 343.668 14.406 343.957 14.52 344.285 cv
14.637 344.621 14.695 344.988 14.691 345.391 cv
14.695 345.68 14.656 345.953 14.578 346.207 cv
14.504 346.469 14.41 346.664 14.293 346.801 cv
14.391 346.895 14.496 346.973 14.613 347.031 cv
14.734 347.094 14.871 347.125 15.023 347.121 cv
15.207 347.125 15.359 347.039 15.477 346.867 cv
15.602 346.699 15.664 346.477 15.672 346.195 cv
15.75 344.363 li
15.762 344.016 15.809 343.699 15.895 343.406 cv
15.98 343.117 16.105 342.863 16.262 342.648 cv
16.422 342.437 16.613 342.27 16.844 342.148 cv
17.078 342.031 17.348 341.973 17.652 341.969 cv
17.973 341.973 18.277 342.039 18.57 342.172 cv
18.859 342.309 19.113 342.516 19.336 342.793 cv
19.555 343.074 19.73 343.43 19.859 343.859 cv
19.984 344.289 20.047 344.797 20.051 345.383 cv
20.047 345.953 20 346.437 19.906 346.832 cv
19.809 347.23 19.676 347.555 19.512 347.809 cv
19.344 348.062 19.148 348.246 18.918 348.359 cv
18.684 348.477 18.43 348.535 18.164 348.531 cv
17.992 348.535 17.828 348.516 17.668 348.469 cv
17.504 348.43 17.352 348.367 17.207 348.281 cv
17.063 348.199 16.926 348.09 16.789 347.961 cv
16.66 347.836 16.527 347.691 16.398 347.52 cv
16.27 347.777 16.105 347.965 15.906 348.086 cv
15.711 348.207 15.5 348.266 15.266 348.266 cv
14.953 348.266 14.668 348.203 14.418 348.074 cv
14.168 347.945 13.945 347.785 13.746 347.59 cv
13.555 347.754 13.34 347.879 13.098 347.973 cv
12.859 348.066 12.566 348.113 12.219 348.113 cv
11.824 348.113 11.465 348.047 11.145 347.91 cv
10.828 347.777 10.563 347.59 10.344 347.348 cv
10.129 347.109 9.961 346.824 9.84 346.488 cv
9.727 346.156 9.668 345.789 9.664 345.391 cv
9.668 345.18 9.68 344.98 9.699 344.797 cv
9.727 344.613 9.758 344.441 9.797 344.277 cv
9.797 342.156 li
9.801 342.07 9.844 342.004 9.926 341.961 cv
10.016 341.918 10.145 341.898 10.316 341.895 cv
cp
12.164 343.902 mo
11.691 343.906 11.32 344.039 11.047 344.297 cv
10.781 344.562 10.645 344.934 10.645 345.414 cv
10.645 345.668 10.688 345.887 10.77 346.066 cv
10.855 346.254 10.969 346.406 11.113 346.527 cv
11.262 346.648 11.43 346.738 11.617 346.797 cv
11.805 346.859 12.004 346.891 12.211 346.887 cv
12.676 346.891 13.039 346.758 13.305 346.496 cv
13.57 346.234 13.703 345.867 13.699 345.391 cv
13.703 345.141 13.664 344.922 13.578 344.73 cv
13.5 344.547 13.387 344.391 13.246 344.266 cv
13.105 344.145 12.941 344.055 12.75 343.992 cv
12.566 343.937 12.371 343.906 12.164 343.902 cv
cp
17.723 343.258 mo
17.418 343.262 17.188 343.387 17.023 343.629 cv
16.863 343.879 16.773 344.211 16.762 344.629 cv
16.699 346.445 li
16.832 346.613 16.957 346.75 17.07 346.852 cv
17.188 346.961 17.297 347.043 17.406 347.105 cv
17.512 347.168 17.617 347.211 17.723 347.234 cv
17.824 347.258 17.93 347.27 18.039 347.27 cv
18.375 347.27 18.629 347.102 18.809 346.758 cv
18.98 346.418 19.07 345.937 19.07 345.32 cv
19.07 344.934 19.031 344.609 18.957 344.344 cv
18.879 344.086 18.777 343.875 18.656 343.711 cv
18.527 343.555 18.387 343.437 18.227 343.363 cv
18.066 343.297 17.898 343.262 17.723 343.258 cv
cp
f
17.207 337.043 mo
19.785 337.977 li
19.867 338.012 19.93 338.09 19.977 338.215 cv
20.02 338.344 20.043 338.539 20.043 338.797 cv
20.043 338.937 20.035 339.047 20.023 339.125 cv
20.008 339.211 19.984 339.273 19.957 339.312 cv
19.922 339.359 19.883 339.383 19.832 339.387 cv
19.777 339.395 19.715 339.383 19.645 339.348 cv
17.207 338.383 li
17.188 338.43 17.156 338.477 17.105 338.516 cv
17.063 338.562 17.012 338.59 16.957 338.602 cv
10.254 341.102 li
10.148 341.145 10.063 341.168 10 341.164 cv
9.938 341.168 9.891 341.145 9.852 341.102 cv
9.82 341.062 9.793 340.996 9.777 340.898 cv
9.766 340.809 9.762 340.684 9.758 340.527 cv
9.762 340.371 9.766 340.25 9.77 340.16 cv
9.781 340.074 9.793 340.004 9.813 339.949 cv
9.836 339.898 9.867 339.859 9.902 339.836 cv
9.945 339.812 10 339.789 10.063 339.762 cv
15.688 337.758 li
15.688 337.734 li
10.031 335.805 li
9.934 335.773 9.871 335.738 9.84 335.691 cv
9.816 335.652 9.793 335.586 9.777 335.492 cv
9.766 335.406 9.762 335.277 9.758 335.109 cv
9.762 334.965 9.766 334.844 9.777 334.75 cv
9.793 334.656 9.82 334.59 9.852 334.543 cv
9.891 334.504 9.938 334.48 10 334.477 cv
10.063 334.48 10.141 334.496 10.23 334.523 cv
cp
f
15.781 322.406 mo
15.867 322.406 15.938 322.41 16 322.414 cv
16.063 322.422 16.117 322.43 16.164 322.441 cv
16.211 322.457 16.254 322.477 16.289 322.492 cv
16.328 322.516 16.371 322.551 16.422 322.602 cv
16.473 322.656 16.551 322.766 16.656 322.93 cv
16.766 323.098 16.871 323.305 16.969 323.551 cv
17.074 323.797 17.156 324.078 17.227 324.398 cv
17.293 324.719 17.328 325.07 17.332 325.445 cv
17.328 326.105 17.223 326.695 17.004 327.223 cv
16.789 327.75 16.469 328.199 16.039 328.57 cv
15.617 328.941 15.09 329.227 14.461 329.426 cv
13.836 329.625 13.113 329.727 12.297 329.723 cv
11.461 329.727 10.719 329.617 10.063 329.402 cv
9.41 329.187 8.855 328.887 8.398 328.496 cv
7.945 328.109 7.598 327.645 7.359 327.098 cv
7.121 326.559 7 325.953 7 325.289 cv
7 325 7.027 324.719 7.082 324.441 cv
7.137 324.168 7.207 323.914 7.285 323.68 cv
7.371 323.449 7.465 323.242 7.574 323.055 cv
7.684 322.875 7.773 322.746 7.844 322.676 cv
7.914 322.605 7.969 322.562 8.004 322.539 cv
8.043 322.523 8.086 322.504 8.133 322.488 cv
8.184 322.477 8.242 322.469 8.309 322.457 cv
8.379 322.453 8.461 322.449 8.551 322.445 cv
8.656 322.449 8.742 322.453 8.813 322.461 cv
8.887 322.473 8.949 322.488 8.996 322.508 cv
9.051 322.531 9.086 322.555 9.105 322.582 cv
9.133 322.613 9.145 322.648 9.141 322.687 cv
9.145 322.762 9.094 322.867 8.988 322.996 cv
8.891 323.129 8.781 323.297 8.656 323.5 cv
8.539 323.711 8.426 323.961 8.32 324.254 cv
8.223 324.551 8.172 324.902 8.168 325.312 cv
8.172 325.766 8.262 326.176 8.438 326.543 cv
8.617 326.91 8.879 327.227 9.227 327.484 cv
9.578 327.75 10.004 327.949 10.504 328.09 cv
11.004 328.234 11.578 328.309 12.219 328.305 cv
12.863 328.309 13.43 328.238 13.918 328.098 cv
14.41 327.961 14.82 327.762 15.148 327.504 cv
15.48 327.246 15.727 326.93 15.895 326.555 cv
16.066 326.18 16.152 325.754 16.148 325.273 cv
16.152 324.875 16.102 324.523 16 324.223 cv
15.902 323.922 15.793 323.668 15.668 323.453 cv
15.547 323.246 15.438 323.07 15.336 322.934 cv
15.242 322.797 15.191 322.691 15.188 322.609 cv
15.191 322.578 15.199 322.547 15.211 322.516 cv
15.23 322.492 15.262 322.469 15.301 322.453 cv
15.348 322.437 15.406 322.426 15.484 322.418 cv
15.563 322.41 15.664 322.406 15.781 322.406 cv
cp
f
13.426 314.258 mo
14.004 314.262 14.531 314.336 15.008 314.484 cv
15.492 314.637 15.906 314.863 16.25 315.16 cv
16.602 315.461 16.871 315.836 17.063 316.281 cv
17.258 316.734 17.352 317.254 17.355 317.844 cv
17.352 318.422 17.27 318.926 17.098 319.352 cv
16.93 319.781 16.68 320.137 16.352 320.422 cv
16.023 320.711 15.629 320.926 15.16 321.062 cv
14.695 321.203 14.164 321.27 13.566 321.27 cv
13 321.27 12.473 321.199 11.992 321.051 cv
11.512 320.906 11.098 320.68 10.746 320.379 cv
10.398 320.082 10.129 319.711 9.938 319.262 cv
9.746 318.816 9.648 318.293 9.648 317.695 cv
9.648 317.117 9.734 316.617 9.906 316.187 cv
10.078 315.762 10.328 315.402 10.656 315.117 cv
10.984 314.832 11.383 314.617 11.848 314.473 cv
12.316 314.332 12.844 314.262 13.426 314.258 cv
cp
13.512 315.59 mo
13.137 315.594 12.777 315.629 12.438 315.695 cv
12.102 315.77 11.809 315.887 11.551 316.047 cv
11.301 316.211 11.098 316.43 10.945 316.707 cv
10.801 316.988 10.727 317.336 10.723 317.746 cv
10.727 318.133 10.793 318.461 10.926 318.734 cv
11.063 319.012 11.254 319.238 11.5 319.414 cv
11.746 319.594 12.039 319.727 12.375 319.809 cv
12.715 319.898 13.082 319.941 13.48 319.937 cv
13.867 319.941 14.23 319.906 14.566 319.832 cv
14.906 319.766 15.199 319.648 15.449 319.48 cv
15.703 319.316 15.906 319.094 16.051 318.816 cv
16.203 318.539 16.277 318.191 16.273 317.777 cv
16.277 317.402 16.207 317.074 16.07 316.793 cv
15.938 316.516 15.75 316.289 15.5 316.109 cv
15.258 315.934 14.965 315.805 14.629 315.719 cv
14.293 315.637 13.922 315.594 13.512 315.59 cv
cp
f
17.012 306.301 mo
17.059 306.301 17.094 306.312 17.117 306.332 cv
17.148 306.355 17.172 306.391 17.191 306.434 cv
17.211 306.484 17.223 306.547 17.238 306.629 cv
17.246 306.711 17.254 306.816 17.254 306.937 cv
17.254 307.07 17.246 307.176 17.238 307.258 cv
17.223 307.344 17.211 307.41 17.191 307.453 cv
17.172 307.504 17.148 307.535 17.117 307.555 cv
17.094 307.578 17.059 307.59 17.012 307.586 cv
12.906 307.586 li
12.508 307.59 12.188 307.621 11.941 307.68 cv
11.699 307.746 11.488 307.836 11.309 307.953 cv
11.133 308.07 10.996 308.227 10.902 308.414 cv
10.809 308.609 10.762 308.828 10.762 309.074 cv
10.762 309.398 10.879 309.723 11.105 310.043 cv
11.34 310.367 11.672 310.703 12.109 311.055 cv
17.012 311.055 li
17.059 311.059 17.094 311.07 17.117 311.086 cv
17.148 311.109 17.172 311.141 17.191 311.187 cv
17.211 311.234 17.223 311.301 17.238 311.379 cv
17.246 311.465 17.254 311.57 17.254 311.699 cv
17.254 311.828 17.246 311.934 17.238 312.012 cv
17.223 312.098 17.211 312.164 17.191 312.211 cv
17.172 312.266 17.148 312.297 17.117 312.312 cv
17.094 312.332 17.059 312.344 17.012 312.34 cv
10 312.34 li
9.961 312.344 9.926 312.336 9.895 312.316 cv
9.867 312.305 9.844 312.273 9.816 312.223 cv
9.797 312.18 9.781 312.117 9.77 312.043 cv
9.766 311.973 9.762 311.879 9.758 311.754 cv
9.762 311.645 9.766 311.547 9.77 311.469 cv
9.781 311.395 9.797 311.336 9.816 311.293 cv
9.844 311.254 9.867 311.227 9.895 311.207 cv
9.926 311.191 9.961 311.184 10 311.18 cv
10.926 311.18 li
10.484 310.789 10.164 310.395 9.957 310 cv
9.754 309.609 9.648 309.211 9.648 308.809 cv
9.648 308.34 9.73 307.949 9.887 307.629 cv
10.051 307.312 10.262 307.051 10.523 306.852 cv
10.789 306.656 11.098 306.516 11.453 306.43 cv
11.809 306.344 12.238 306.301 12.734 306.301 cv
cp
f
15.102 299.559 mo
15.465 299.562 15.785 299.629 16.063 299.758 cv
16.344 299.891 16.578 300.078 16.77 300.32 cv
16.965 300.566 17.109 300.859 17.207 301.195 cv
17.305 301.535 17.352 301.906 17.355 302.309 cv
17.352 302.562 17.332 302.801 17.297 303.023 cv
17.254 303.25 17.207 303.449 17.148 303.629 cv
17.09 303.809 17.027 303.961 16.961 304.086 cv
16.898 304.211 16.84 304.305 16.785 304.359 cv
16.734 304.418 16.664 304.457 16.566 304.48 cv
16.477 304.508 16.348 304.52 16.188 304.52 cv
16.09 304.52 16.008 304.516 15.938 304.504 cv
15.871 304.496 15.816 304.484 15.773 304.465 cv
15.734 304.453 15.703 304.43 15.684 304.402 cv
15.668 304.375 15.66 304.344 15.656 304.305 cv
15.66 304.25 15.695 304.164 15.762 304.051 cv
15.836 303.941 15.914 303.805 15.992 303.637 cv
16.078 303.477 16.152 303.285 16.223 303.059 cv
16.293 302.84 16.328 302.582 16.328 302.285 cv
16.328 302.07 16.305 301.871 16.258 301.691 cv
16.211 301.516 16.145 301.363 16.051 301.234 cv
15.965 301.105 15.848 301.004 15.703 300.934 cv
15.566 300.863 15.398 300.828 15.203 300.828 cv
15.008 300.828 14.844 300.879 14.707 300.98 cv
14.574 301.082 14.453 301.219 14.348 301.383 cv
14.246 301.551 14.156 301.734 14.07 301.941 cv
13.992 302.152 13.906 302.367 13.816 302.586 cv
13.73 302.805 13.629 303.02 13.516 303.23 cv
13.406 303.441 13.273 303.633 13.109 303.797 cv
12.953 303.969 12.758 304.102 12.531 304.199 cv
12.309 304.305 12.043 304.355 11.73 304.352 cv
11.457 304.355 11.191 304.301 10.938 304.191 cv
10.688 304.086 10.469 303.926 10.277 303.711 cv
10.09 303.5 9.938 303.234 9.82 302.914 cv
9.707 302.594 9.648 302.223 9.648 301.793 cv
9.648 301.609 9.664 301.422 9.695 301.234 cv
9.727 301.051 9.766 300.883 9.813 300.727 cv
9.859 300.578 9.91 300.449 9.965 300.34 cv
10.02 300.238 10.07 300.156 10.109 300.098 cv
10.156 300.047 10.191 300.012 10.219 299.988 cv
10.25 299.973 10.285 299.957 10.32 299.949 cv
10.363 299.941 10.41 299.934 10.465 299.926 cv
10.523 299.918 10.594 299.914 10.676 299.914 cv
10.766 299.914 10.844 299.918 10.906 299.926 cv
10.977 299.934 11.027 299.949 11.066 299.965 cv
11.109 299.988 11.141 300.008 11.156 300.031 cv
11.176 300.059 11.184 300.09 11.184 300.117 cv
11.184 300.168 11.156 300.234 11.098 300.32 cv
11.043 300.41 10.98 300.523 10.914 300.664 cv
10.852 300.805 10.793 300.973 10.73 301.16 cv
10.676 301.352 10.645 301.566 10.645 301.809 cv
10.645 302.031 10.672 302.223 10.719 302.387 cv
10.773 302.555 10.844 302.691 10.93 302.797 cv
11.023 302.902 11.129 302.984 11.254 303.035 cv
11.379 303.094 11.516 303.121 11.66 303.117 cv
11.863 303.121 12.031 303.07 12.168 302.965 cv
12.309 302.863 12.43 302.727 12.531 302.559 cv
12.637 302.395 12.73 302.203 12.813 301.988 cv
12.898 301.777 12.984 301.562 13.07 301.34 cv
13.16 301.121 13.262 300.902 13.367 300.684 cv
13.477 300.469 13.605 300.277 13.762 300.109 cv
13.918 299.945 14.105 299.812 14.324 299.711 cv
14.543 299.613 14.805 299.562 15.102 299.559 cv
cp
f
17.012 291.711 mo
17.059 291.715 17.094 291.723 17.117 291.738 cv
17.148 291.758 17.172 291.793 17.191 291.836 cv
17.211 291.883 17.223 291.941 17.238 292.016 cv
17.246 292.094 17.254 292.187 17.254 292.293 cv
17.254 292.418 17.246 292.516 17.238 292.586 cv
17.223 292.664 17.211 292.723 17.191 292.766 cv
17.172 292.812 17.148 292.844 17.117 292.855 cv
17.094 292.875 17.059 292.883 17.012 292.879 cv
16.086 292.879 li
16.531 293.281 16.852 293.676 17.051 294.062 cv
17.254 294.457 17.352 294.852 17.355 295.246 cv
17.352 295.719 17.277 296.113 17.121 296.43 cv
16.969 296.75 16.758 297.008 16.488 297.203 cv
16.223 297.406 15.91 297.547 15.551 297.629 cv
15.195 297.719 14.762 297.762 14.254 297.758 cv
10 297.758 li
9.961 297.762 9.926 297.754 9.895 297.73 cv
9.867 297.715 9.844 297.68 9.816 297.625 cv
9.797 297.578 9.781 297.508 9.77 297.422 cv
9.766 297.34 9.762 297.238 9.758 297.109 cv
9.762 296.988 9.766 296.883 9.77 296.797 cv
9.781 296.715 9.797 296.648 9.816 296.602 cv
9.844 296.555 9.867 296.52 9.895 296.496 cv
9.926 296.477 9.961 296.469 10 296.465 cv
14.082 296.465 li
14.496 296.469 14.824 296.437 15.07 296.375 cv
15.316 296.316 15.527 296.227 15.699 296.102 cv
15.879 295.984 16.012 295.828 16.105 295.637 cv
16.203 295.453 16.254 295.234 16.25 294.984 cv
16.254 294.664 16.137 294.344 15.906 294.02 cv
15.68 293.703 15.344 293.363 14.898 293.004 cv
10 293.004 li
9.961 293.004 9.926 292.996 9.895 292.977 cv
9.867 292.961 9.844 292.926 9.816 292.871 cv
9.797 292.82 9.781 292.754 9.77 292.672 cv
9.766 292.594 9.762 292.488 9.758 292.355 cv
9.762 292.234 9.766 292.129 9.77 292.043 cv
9.781 291.961 9.797 291.898 9.816 291.852 cv
9.844 291.809 9.867 291.773 9.895 291.746 cv
9.926 291.727 9.961 291.715 10 291.711 cv
cp
f
17.012 278.855 mo
17.059 278.859 17.094 278.867 17.117 278.887 cv
17.148 278.91 17.172 278.945 17.191 278.988 cv
17.211 279.039 17.223 279.105 17.238 279.184 cv
17.246 279.27 17.254 279.371 17.254 279.496 cv
17.254 279.629 17.246 279.738 17.238 279.816 cv
17.223 279.902 17.211 279.969 17.191 280.016 cv
17.172 280.07 17.148 280.105 17.117 280.121 cv
17.094 280.145 17.059 280.152 17.012 280.152 cv
12.75 280.152 li
12.457 280.152 12.188 280.18 11.941 280.23 cv
11.699 280.285 11.488 280.367 11.309 280.48 cv
11.133 280.594 10.996 280.738 10.902 280.914 cv
10.809 281.094 10.762 281.305 10.762 281.539 cv
10.762 281.836 10.879 282.133 11.105 282.43 cv
11.34 282.734 11.672 283.062 12.109 283.418 cv
17.012 283.418 li
17.059 283.422 17.094 283.434 17.117 283.449 cv
17.148 283.473 17.172 283.504 17.191 283.551 cv
17.211 283.602 17.223 283.668 17.238 283.75 cv
17.246 283.836 17.254 283.941 17.254 284.062 cv
17.254 284.184 17.246 284.285 17.238 284.371 cv
17.223 284.457 17.211 284.527 17.191 284.574 cv
17.172 284.629 17.148 284.66 17.117 284.676 cv
17.094 284.695 17.059 284.707 17.012 284.703 cv
12.75 284.703 li
12.457 284.707 12.188 284.734 11.941 284.789 cv
11.699 284.848 11.488 284.934 11.309 285.047 cv
11.133 285.16 10.996 285.305 10.902 285.477 cv
10.809 285.656 10.762 285.863 10.762 286.098 cv
10.762 286.398 10.879 286.695 11.105 286.996 cv
11.34 287.297 11.672 287.625 12.109 287.977 cv
17.012 287.977 li
17.059 287.98 17.094 287.992 17.117 288.008 cv
17.148 288.031 17.172 288.062 17.191 288.109 cv
17.211 288.156 17.223 288.223 17.238 288.301 cv
17.246 288.387 17.254 288.492 17.254 288.621 cv
17.254 288.75 17.246 288.855 17.238 288.934 cv
17.223 289.02 17.211 289.086 17.191 289.133 cv
17.172 289.187 17.148 289.219 17.117 289.234 cv
17.094 289.254 17.059 289.266 17.012 289.262 cv
10 289.262 li
9.961 289.266 9.926 289.258 9.895 289.238 cv
9.867 289.227 9.844 289.195 9.816 289.145 cv
9.797 289.102 9.781 289.039 9.77 288.965 cv
9.766 288.895 9.762 288.801 9.758 288.676 cv
9.762 288.566 9.766 288.469 9.77 288.391 cv
9.781 288.316 9.797 288.258 9.816 288.215 cv
9.844 288.176 9.867 288.148 9.895 288.129 cv
9.926 288.113 9.961 288.105 10 288.102 cv
10.926 288.102 li
10.484 287.711 10.164 287.328 9.957 286.953 cv
9.754 286.586 9.648 286.207 9.648 285.824 cv
9.648 285.535 9.684 285.277 9.75 285.043 cv
9.82 284.816 9.914 284.609 10.035 284.43 cv
10.156 284.254 10.301 284.105 10.469 283.977 cv
10.641 283.855 10.832 283.75 11.035 283.664 cv
10.785 283.434 10.57 283.211 10.391 283 cv
10.219 282.789 10.074 282.586 9.961 282.391 cv
9.855 282.195 9.777 282.008 9.723 281.824 cv
9.676 281.641 9.648 281.453 9.648 281.266 cv
9.648 280.812 9.73 280.434 9.887 280.129 cv
10.051 279.824 10.262 279.578 10.523 279.383 cv
10.789 279.195 11.098 279.059 11.453 278.977 cv
11.809 278.898 12.184 278.859 12.578 278.855 cv
cp
f
13.395 270.055 mo
14.012 270.059 14.563 270.125 15.051 270.254 cv
15.539 270.391 15.953 270.586 16.293 270.84 cv
16.633 271.098 16.895 271.414 17.078 271.793 cv
17.262 272.172 17.352 272.605 17.355 273.094 cv
17.352 273.305 17.332 273.5 17.293 273.672 cv
17.25 273.852 17.188 274.023 17.098 274.187 cv
17.012 274.359 16.898 274.527 16.762 274.691 cv
16.629 274.863 16.473 275.039 16.289 275.223 cv
19.793 275.223 li
19.832 275.227 19.871 275.238 19.902 275.254 cv
19.934 275.277 19.957 275.309 19.98 275.355 cv
19.996 275.402 20.012 275.469 20.027 275.547 cv
20.035 275.633 20.043 275.738 20.043 275.867 cv
20.043 275.996 20.035 276.102 20.027 276.18 cv
20.012 276.266 19.996 276.332 19.98 276.379 cv
19.957 276.434 19.934 276.465 19.902 276.48 cv
19.871 276.5 19.832 276.512 19.793 276.508 cv
10 276.508 li
9.953 276.512 9.918 276.504 9.887 276.484 cv
9.863 276.473 9.836 276.441 9.813 276.391 cv
9.793 276.348 9.781 276.285 9.77 276.211 cv
9.766 276.141 9.762 276.055 9.758 275.945 cv
9.762 275.84 9.766 275.75 9.77 275.676 cv
9.781 275.609 9.793 275.551 9.813 275.5 cv
9.836 275.457 9.863 275.422 9.887 275.402 cv
9.918 275.387 9.953 275.379 10 275.375 cv
10.941 275.375 li
10.727 275.168 10.535 274.965 10.375 274.762 cv
10.215 274.566 10.082 274.367 9.973 274.164 cv
9.867 273.969 9.785 273.762 9.73 273.551 cv
9.676 273.34 9.648 273.117 9.648 272.883 cv
9.648 272.375 9.75 271.941 9.945 271.582 cv
10.145 271.223 10.414 270.934 10.754 270.707 cv
11.102 270.484 11.5 270.316 11.953 270.211 cv
12.41 270.109 12.891 270.059 13.395 270.055 cv
cp
13.543 271.387 mo
13.191 271.391 12.844 271.418 12.504 271.469 cv
12.172 271.527 11.875 271.621 11.613 271.754 cv
11.355 271.891 11.148 272.07 10.988 272.289 cv
10.836 272.516 10.758 272.793 10.754 273.129 cv
10.758 273.297 10.781 273.461 10.828 273.621 cv
10.879 273.785 10.957 273.953 11.063 274.117 cv
11.172 274.289 11.313 274.461 11.484 274.641 cv
11.66 274.824 11.875 275.02 12.125 275.223 cv
14.914 275.223 li
15.352 274.867 15.68 274.531 15.906 274.211 cv
16.137 273.895 16.254 273.559 16.25 273.207 cv
16.254 272.883 16.176 272.605 16.016 272.371 cv
15.863 272.145 15.652 271.957 15.391 271.809 cv
15.133 271.668 14.844 271.559 14.52 271.488 cv
14.199 271.422 13.875 271.391 13.543 271.387 cv
cp
f
16.496 264.594 mo
16.652 264.594 16.77 264.605 16.855 264.625 cv
16.945 264.648 17.012 264.68 17.051 264.719 cv
17.094 264.762 17.133 264.824 17.168 264.906 cv
17.203 264.992 17.23 265.086 17.258 265.191 cv
17.277 265.301 17.297 265.414 17.316 265.531 cv
17.328 265.648 17.336 265.77 17.34 265.887 cv
17.336 266.254 17.289 266.566 17.195 266.824 cv
17.102 267.086 16.957 267.297 16.758 267.461 cv
16.566 267.629 16.32 267.75 16.02 267.824 cv
15.723 267.902 15.371 267.941 14.961 267.937 cv
10.863 267.937 li
10.863 268.918 li
10.867 268.996 10.824 269.059 10.738 269.105 cv
10.656 269.152 10.523 269.176 10.332 269.176 cv
10.238 269.176 10.156 269.172 10.086 269.156 cv
10.023 269.148 9.965 269.129 9.918 269.105 cv
9.875 269.086 9.844 269.059 9.824 269.023 cv
9.809 268.992 9.801 268.957 9.797 268.91 cv
9.797 267.937 li
8.129 267.937 li
8.098 267.941 8.063 267.93 8.027 267.91 cv
8 267.895 7.973 267.863 7.945 267.809 cv
7.926 267.762 7.91 267.695 7.895 267.609 cv
7.887 267.531 7.879 267.426 7.879 267.297 cv
7.879 267.168 7.887 267.062 7.895 266.98 cv
7.91 266.898 7.926 266.832 7.945 266.785 cv
7.973 266.738 8 266.707 8.027 266.684 cv
8.063 266.668 8.098 266.656 8.129 266.652 cv
9.797 266.652 li
9.797 264.852 li
9.801 264.812 9.809 264.777 9.824 264.742 cv
9.844 264.715 9.875 264.687 9.918 264.66 cv
9.965 264.641 10.023 264.625 10.086 264.609 cv
10.156 264.602 10.238 264.594 10.332 264.594 cv
10.523 264.594 10.656 264.617 10.738 264.664 cv
10.824 264.711 10.867 264.773 10.863 264.852 cv
10.863 266.652 li
14.777 266.652 li
15.262 266.656 15.625 266.586 15.871 266.437 cv
16.121 266.297 16.246 266.039 16.242 265.668 cv
16.246 265.555 16.234 265.449 16.207 265.352 cv
16.188 265.262 16.164 265.18 16.133 265.102 cv
16.109 265.031 16.082 264.969 16.059 264.914 cv
16.035 264.867 16.023 264.82 16.023 264.773 cv
16.023 264.75 16.031 264.723 16.043 264.699 cv
16.059 264.676 16.082 264.66 16.117 264.645 cv
16.156 264.637 16.207 264.625 16.266 264.609 cv
16.332 264.602 16.41 264.594 16.496 264.594 cv
cp
f
17.012 261.578 mo
17.059 261.582 17.094 261.594 17.117 261.609 cv
17.148 261.633 17.172 261.664 17.191 261.711 cv
17.211 261.758 17.223 261.824 17.238 261.902 cv
17.246 261.988 17.254 262.094 17.254 262.223 cv
17.254 262.352 17.246 262.457 17.238 262.535 cv
17.223 262.621 17.211 262.687 17.191 262.734 cv
17.172 262.789 17.148 262.82 17.117 262.836 cv
17.094 262.855 17.059 262.867 17.012 262.863 cv
10 262.863 li
9.965 262.867 9.934 262.855 9.898 262.836 cv
9.871 262.82 9.844 262.789 9.82 262.734 cv
9.801 262.687 9.785 262.621 9.773 262.535 cv
9.766 262.457 9.762 262.352 9.758 262.223 cv
9.762 262.094 9.766 261.988 9.773 261.902 cv
9.785 261.824 9.801 261.758 9.82 261.711 cv
9.844 261.664 9.871 261.633 9.898 261.609 cv
9.934 261.594 9.965 261.582 10 261.578 cv
cp
7.629 261.43 mo
7.934 261.43 8.141 261.488 8.246 261.602 cv
8.359 261.715 8.414 261.926 8.41 262.23 cv
8.414 262.535 8.359 262.742 8.25 262.852 cv
8.145 262.969 7.941 263.023 7.645 263.02 cv
7.344 263.023 7.141 262.965 7.031 262.848 cv
6.926 262.734 6.871 262.523 6.867 262.215 cv
6.871 261.914 6.926 261.711 7.027 261.598 cv
7.137 261.488 7.336 261.43 7.629 261.43 cv
cp
f
13.426 252.637 mo
14.004 252.641 14.531 252.715 15.008 252.863 cv
15.492 253.016 15.906 253.242 16.25 253.539 cv
16.602 253.84 16.871 254.215 17.063 254.66 cv
17.258 255.113 17.352 255.633 17.355 256.223 cv
17.352 256.801 17.27 257.305 17.098 257.73 cv
16.93 258.16 16.68 258.516 16.352 258.801 cv
16.023 259.09 15.629 259.305 15.16 259.441 cv
14.695 259.582 14.164 259.648 13.566 259.648 cv
13 259.648 12.473 259.578 11.992 259.43 cv
11.512 259.285 11.098 259.059 10.746 258.758 cv
10.398 258.461 10.129 258.09 9.938 257.641 cv
9.746 257.195 9.648 256.672 9.648 256.074 cv
9.648 255.496 9.734 254.996 9.906 254.566 cv
10.078 254.141 10.328 253.781 10.656 253.496 cv
10.984 253.211 11.383 252.996 11.848 252.852 cv
12.316 252.711 12.844 252.641 13.426 252.637 cv
cp
13.512 253.969 mo
13.137 253.973 12.777 254.008 12.438 254.074 cv
12.102 254.148 11.809 254.266 11.551 254.426 cv
11.301 254.59 11.098 254.809 10.945 255.086 cv
10.801 255.367 10.727 255.715 10.723 256.125 cv
10.727 256.512 10.793 256.84 10.926 257.113 cv
11.063 257.391 11.254 257.617 11.5 257.793 cv
11.746 257.973 12.039 258.105 12.375 258.187 cv
12.715 258.277 13.082 258.32 13.48 258.316 cv
13.867 258.32 14.23 258.285 14.566 258.211 cv
14.906 258.145 15.199 258.027 15.449 257.859 cv
15.703 257.695 15.906 257.473 16.051 257.195 cv
16.203 256.918 16.277 256.57 16.273 256.156 cv
16.277 255.781 16.207 255.453 16.07 255.172 cv
15.938 254.895 15.75 254.668 15.5 254.488 cv
15.258 254.312 14.965 254.184 14.629 254.098 cv
14.293 254.016 13.922 253.973 13.512 253.969 cv
cp
f
17.012 244.711 mo
17.059 244.711 17.094 244.723 17.117 244.742 cv
17.148 244.766 17.172 244.801 17.191 244.844 cv
17.211 244.895 17.223 244.957 17.238 245.039 cv
17.246 245.121 17.254 245.227 17.254 245.348 cv
17.254 245.48 17.246 245.586 17.238 245.668 cv
17.223 245.754 17.211 245.82 17.191 245.863 cv
17.172 245.914 17.148 245.945 17.117 245.965 cv
17.094 245.988 17.059 246 17.012 245.996 cv
12.906 245.996 li
12.508 246 12.188 246.031 11.941 246.09 cv
11.699 246.156 11.488 246.246 11.309 246.363 cv
11.133 246.48 10.996 246.637 10.902 246.824 cv
10.809 247.02 10.762 247.238 10.762 247.484 cv
10.762 247.809 10.879 248.133 11.105 248.453 cv
11.34 248.777 11.672 249.113 12.109 249.465 cv
17.012 249.465 li
17.059 249.469 17.094 249.48 17.117 249.496 cv
17.148 249.52 17.172 249.551 17.191 249.598 cv
17.211 249.645 17.223 249.711 17.238 249.789 cv
17.246 249.875 17.254 249.98 17.254 250.109 cv
17.254 250.238 17.246 250.344 17.238 250.422 cv
17.223 250.508 17.211 250.574 17.191 250.621 cv
17.172 250.676 17.148 250.707 17.117 250.723 cv
17.094 250.742 17.059 250.754 17.012 250.75 cv
10 250.75 li
9.961 250.754 9.926 250.746 9.895 250.727 cv
9.867 250.715 9.844 250.684 9.816 250.633 cv
9.797 250.59 9.781 250.527 9.77 250.453 cv
9.766 250.383 9.762 250.289 9.758 250.164 cv
9.762 250.055 9.766 249.957 9.77 249.879 cv
9.781 249.805 9.797 249.746 9.816 249.703 cv
9.844 249.664 9.867 249.637 9.895 249.617 cv
9.926 249.602 9.961 249.594 10 249.59 cv
10.926 249.59 li
10.484 249.199 10.164 248.805 9.957 248.41 cv
9.754 248.02 9.648 247.621 9.648 247.219 cv
9.648 246.75 9.73 246.359 9.887 246.039 cv
10.051 245.723 10.262 245.461 10.523 245.262 cv
10.789 245.066 11.098 244.926 11.453 244.84 cv
11.809 244.754 12.238 244.711 12.734 244.711 cv
cp
f
6.469 235.824 mo
7.516 236.32 8.586 236.687 9.684 236.93 cv
10.785 237.172 11.891 237.293 13 237.293 cv
14.117 237.293 15.227 237.172 16.32 236.922 cv
17.418 236.68 18.488 236.316 19.543 235.84 cv
19.602 235.816 19.656 235.805 19.703 235.797 cv
19.746 235.797 19.781 235.812 19.813 235.848 cv
19.84 235.887 19.859 235.941 19.875 236.016 cv
19.883 236.094 19.891 236.199 19.895 236.324 cv
19.891 236.422 19.887 236.5 19.887 236.566 cv
19.879 236.637 19.871 236.695 19.855 236.742 cv
19.84 236.793 19.82 236.836 19.801 236.863 cv
19.777 236.898 19.754 236.922 19.73 236.934 cv
19.199 237.215 18.664 237.461 18.121 237.672 cv
17.578 237.891 17.027 238.07 16.469 238.211 cv
15.906 238.359 15.34 238.469 14.766 238.539 cv
14.191 238.617 13.609 238.652 13.023 238.648 cv
12.438 238.652 11.859 238.613 11.285 238.527 cv
10.715 238.449 10.148 238.332 9.582 238.184 cv
9.02 238.035 8.465 237.855 7.918 237.645 cv
7.375 237.434 6.832 237.195 6.297 236.926 cv
6.277 236.922 6.262 236.906 6.242 236.883 cv
6.23 236.859 6.215 236.828 6.195 236.785 cv
6.184 236.746 6.172 236.687 6.16 236.613 cv
6.156 236.543 6.152 236.449 6.148 236.332 cv
6.152 236.215 6.16 236.121 6.172 236.043 cv
6.191 235.973 6.211 235.914 6.234 235.871 cv
6.262 235.832 6.297 235.809 6.336 235.801 cv
6.383 235.797 6.426 235.805 6.469 235.824 cv
cp
f
16.988 226.93 mo
17.035 226.934 17.07 226.941 17.102 226.957 cv
17.137 226.977 17.164 227.012 17.184 227.062 cv
17.203 227.117 17.219 227.187 17.234 227.273 cv
17.246 227.363 17.254 227.477 17.254 227.617 cv
17.254 227.797 17.246 227.945 17.23 228.059 cv
17.215 228.176 17.188 228.262 17.145 228.316 cv
17.105 228.375 17.059 228.422 17.004 228.457 cv
11.961 232.168 li
17.004 232.168 li
17.043 232.172 17.078 232.18 17.109 232.199 cv
17.145 232.223 17.172 232.262 17.188 232.309 cv
17.207 232.363 17.219 232.43 17.234 232.516 cv
17.246 232.602 17.254 232.711 17.254 232.836 cv
17.254 232.965 17.246 233.07 17.234 233.156 cv
17.219 233.246 17.207 233.316 17.188 233.367 cv
17.172 233.422 17.145 233.457 17.109 233.477 cv
17.078 233.5 17.043 233.512 17.004 233.508 cv
7.324 233.508 li
7.285 233.512 7.25 233.5 7.215 233.477 cv
7.188 233.457 7.16 233.422 7.141 233.367 cv
7.125 233.316 7.109 233.246 7.094 233.156 cv
7.082 233.07 7.078 232.965 7.074 232.836 cv
7.078 232.711 7.082 232.602 7.094 232.516 cv
7.109 232.43 7.125 232.363 7.141 232.309 cv
7.16 232.262 7.188 232.223 7.215 232.199 cv
7.25 232.18 7.285 232.172 7.324 232.168 cv
11.805 232.168 li
7.324 228.598 li
7.281 228.57 7.242 228.535 7.207 228.488 cv
7.18 228.449 7.156 228.398 7.133 228.336 cv
7.117 228.281 7.102 228.207 7.09 228.117 cv
7.082 228.035 7.078 227.926 7.074 227.789 cv
7.078 227.656 7.082 227.547 7.094 227.461 cv
7.109 227.379 7.129 227.312 7.145 227.262 cv
7.168 227.215 7.191 227.18 7.223 227.16 cv
7.254 227.145 7.289 227.137 7.324 227.133 cv
7.395 227.137 7.461 227.152 7.527 227.184 cv
7.598 227.219 7.691 227.285 7.809 227.375 cv
11.805 230.719 li
16.59 227.117 li
16.73 227.031 16.82 226.977 16.867 226.957 cv
16.918 226.941 16.961 226.934 16.988 226.93 cv
cp
f
17.012 224.121 mo
17.059 224.125 17.094 224.137 17.117 224.152 cv
17.148 224.176 17.172 224.207 17.191 224.254 cv
17.211 224.301 17.223 224.367 17.238 224.445 cv
17.246 224.531 17.254 224.637 17.254 224.766 cv
17.254 224.895 17.246 225 17.238 225.078 cv
17.223 225.164 17.211 225.23 17.191 225.277 cv
17.172 225.332 17.148 225.363 17.117 225.379 cv
17.094 225.398 17.059 225.41 17.012 225.406 cv
10 225.406 li
9.965 225.41 9.934 225.398 9.898 225.379 cv
9.871 225.363 9.844 225.332 9.82 225.277 cv
9.801 225.23 9.785 225.164 9.773 225.078 cv
9.766 225 9.762 224.895 9.758 224.766 cv
9.762 224.637 9.766 224.531 9.773 224.445 cv
9.785 224.367 9.801 224.301 9.82 224.254 cv
9.844 224.207 9.871 224.176 9.898 224.152 cv
9.934 224.137 9.965 224.125 10 224.121 cv
cp
7.629 223.973 mo
7.934 223.973 8.141 224.031 8.246 224.145 cv
8.359 224.258 8.414 224.469 8.41 224.773 cv
8.414 225.078 8.359 225.285 8.25 225.395 cv
8.145 225.512 7.941 225.566 7.645 225.562 cv
7.344 225.566 7.141 225.508 7.031 225.391 cv
6.926 225.277 6.871 225.066 6.867 224.758 cv
6.871 224.457 6.926 224.254 7.027 224.141 cv
7.137 224.031 7.336 223.973 7.629 223.973 cv
cp
f
17.012 220.418 mo
17.059 220.422 17.094 220.434 17.117 220.449 cv
17.148 220.473 17.172 220.504 17.191 220.551 cv
17.211 220.598 17.223 220.664 17.238 220.742 cv
17.246 220.828 17.254 220.934 17.254 221.062 cv
17.254 221.191 17.246 221.297 17.238 221.375 cv
17.223 221.461 17.211 221.527 17.191 221.574 cv
17.172 221.629 17.148 221.66 17.117 221.676 cv
17.094 221.695 17.059 221.707 17.012 221.703 cv
6.602 221.703 li
6.563 221.707 6.527 221.695 6.492 221.676 cv
6.465 221.66 6.438 221.629 6.414 221.574 cv
6.395 221.527 6.379 221.461 6.367 221.375 cv
6.359 221.297 6.355 221.191 6.352 221.062 cv
6.355 220.934 6.359 220.828 6.367 220.742 cv
6.379 220.664 6.395 220.598 6.414 220.551 cv
6.438 220.504 6.465 220.473 6.492 220.449 cv
6.527 220.434 6.563 220.422 6.602 220.418 cv
cp
f
13.426 211.477 mo
14.004 211.48 14.531 211.555 15.008 211.703 cv
15.492 211.855 15.906 212.082 16.25 212.379 cv
16.602 212.68 16.871 213.055 17.063 213.5 cv
17.258 213.953 17.352 214.473 17.355 215.062 cv
17.352 215.641 17.27 216.145 17.098 216.57 cv
16.93 217 16.68 217.355 16.352 217.641 cv
16.023 217.93 15.629 218.145 15.16 218.281 cv
14.695 218.422 14.164 218.488 13.566 218.488 cv
13 218.488 12.473 218.418 11.992 218.27 cv
11.512 218.125 11.098 217.898 10.746 217.598 cv
10.398 217.301 10.129 216.93 9.938 216.48 cv
9.746 216.035 9.648 215.512 9.648 214.914 cv
9.648 214.336 9.734 213.836 9.906 213.406 cv
10.078 212.98 10.328 212.621 10.656 212.336 cv
10.984 212.051 11.383 211.836 11.848 211.691 cv
12.316 211.551 12.844 211.48 13.426 211.477 cv
cp
13.512 212.809 mo
13.137 212.812 12.777 212.848 12.438 212.914 cv
12.102 212.988 11.809 213.105 11.551 213.266 cv
11.301 213.43 11.098 213.648 10.945 213.926 cv
10.801 214.207 10.727 214.555 10.723 214.965 cv
10.727 215.352 10.793 215.68 10.926 215.953 cv
11.063 216.23 11.254 216.457 11.5 216.633 cv
11.746 216.812 12.039 216.945 12.375 217.027 cv
12.715 217.117 13.082 217.16 13.48 217.156 cv
13.867 217.16 14.23 217.125 14.566 217.051 cv
14.906 216.984 15.199 216.867 15.449 216.699 cv
15.703 216.535 15.906 216.312 16.051 216.035 cv
16.203 215.758 16.277 215.41 16.273 214.996 cv
16.277 214.621 16.207 214.293 16.07 214.012 cv
15.938 213.734 15.75 213.508 15.5 213.328 cv
15.258 213.152 14.965 213.023 14.629 212.937 cv
14.293 212.855 13.922 212.812 13.512 212.809 cv
cp
f
16.91 196.176 mo
16.984 196.199 17.043 196.23 17.086 196.27 cv
17.133 196.312 17.168 196.371 17.188 196.441 cv
17.211 196.52 17.223 196.609 17.238 196.711 cv
17.246 196.82 17.254 196.949 17.254 197.102 cv
17.254 197.266 17.246 197.402 17.238 197.512 cv
17.223 197.625 17.211 197.719 17.188 197.789 cv
17.168 197.867 17.133 197.922 17.086 197.953 cv
17.043 197.992 16.984 198.02 16.91 198.039 cv
9.297 200.152 li
9.297 200.164 li
16.91 202.113 li
16.984 202.133 17.043 202.156 17.086 202.191 cv
17.133 202.23 17.168 202.285 17.188 202.348 cv
17.211 202.418 17.223 202.504 17.238 202.609 cv
17.246 202.719 17.254 202.855 17.254 203.02 cv
17.254 203.191 17.246 203.332 17.238 203.445 cv
17.223 203.562 17.211 203.656 17.188 203.727 cv
17.168 203.801 17.133 203.859 17.086 203.895 cv
17.043 203.937 16.984 203.965 16.91 203.977 cv
7.598 206.641 li
7.48 206.676 7.387 206.691 7.316 206.691 cv
7.25 206.695 7.199 206.676 7.16 206.629 cv
7.125 206.586 7.102 206.516 7.09 206.418 cv
7.082 206.32 7.078 206.187 7.074 206.02 cv
7.078 205.859 7.082 205.73 7.086 205.637 cv
7.098 205.543 7.109 205.473 7.129 205.422 cv
7.152 205.375 7.184 205.34 7.215 205.32 cv
7.254 205.305 7.301 205.293 7.355 205.277 cv
15.805 203.012 li
15.805 203.004 li
7.371 200.852 li
7.316 200.84 7.27 200.82 7.227 200.793 cv
7.191 200.773 7.16 200.734 7.137 200.68 cv
7.117 200.629 7.102 200.555 7.09 200.457 cv
7.082 200.363 7.078 200.238 7.074 200.082 cv
7.078 199.937 7.082 199.824 7.09 199.734 cv
7.102 199.652 7.117 199.582 7.137 199.527 cv
7.16 199.477 7.191 199.437 7.227 199.414 cv
7.27 199.391 7.316 199.371 7.371 199.355 cv
15.805 197.039 li
15.805 197.027 li
7.363 194.805 li
7.313 194.793 7.27 194.777 7.227 194.758 cv
7.191 194.746 7.16 194.715 7.137 194.66 cv
7.117 194.613 7.102 194.543 7.09 194.449 cv
7.082 194.363 7.078 194.242 7.074 194.086 cv
7.078 193.937 7.082 193.812 7.094 193.719 cv
7.109 193.629 7.137 193.562 7.168 193.52 cv
7.207 193.48 7.258 193.461 7.324 193.461 cv
7.395 193.465 7.488 193.48 7.605 193.504 cv
cp
f
17.02 187.098 mo
17.082 187.102 17.129 187.121 17.16 187.16 cv
17.191 187.203 17.215 187.262 17.23 187.332 cv
17.246 187.41 17.254 187.516 17.254 187.652 cv
17.254 187.789 17.246 187.898 17.23 187.977 cv
17.215 188.062 17.191 188.121 17.16 188.152 cv
17.129 188.191 17.082 188.207 17.02 188.203 cv
16.32 188.203 li
16.648 188.512 16.902 188.855 17.082 189.23 cv
17.266 189.609 17.352 190.008 17.355 190.426 cv
17.352 190.801 17.305 191.133 17.211 191.43 cv
17.113 191.727 16.977 191.98 16.793 192.191 cv
16.613 192.402 16.391 192.566 16.125 192.684 cv
15.863 192.801 15.563 192.859 15.219 192.855 cv
14.828 192.859 14.484 192.781 14.191 192.617 cv
13.902 192.461 13.66 192.227 13.469 191.922 cv
13.277 191.621 13.133 191.254 13.035 190.816 cv
12.941 190.383 12.895 189.891 12.891 189.344 cv
12.891 188.375 li
12.344 188.375 li
12.074 188.379 11.836 188.406 11.629 188.461 cv
11.422 188.52 11.25 188.613 11.109 188.738 cv
10.973 188.871 10.867 189.035 10.797 189.234 cv
10.727 189.441 10.691 189.691 10.691 189.98 cv
10.691 190.301 10.73 190.586 10.805 190.836 cv
10.883 191.094 10.965 191.312 11.055 191.5 cv
11.148 191.687 11.234 191.848 11.305 191.973 cv
11.383 192.105 11.418 192.199 11.418 192.258 cv
11.418 192.301 11.41 192.336 11.387 192.367 cv
11.371 192.398 11.34 192.426 11.293 192.449 cv
11.254 192.473 11.199 192.492 11.133 192.5 cv
11.07 192.516 11 192.52 10.918 192.516 cv
10.793 192.52 10.688 192.512 10.609 192.488 cv
10.535 192.473 10.465 192.426 10.395 192.355 cv
10.328 192.285 10.25 192.164 10.16 191.992 cv
10.07 191.82 9.988 191.625 9.91 191.402 cv
9.84 191.18 9.777 190.934 9.723 190.668 cv
9.676 190.402 9.648 190.137 9.648 189.863 cv
9.648 189.363 9.707 188.934 9.82 188.582 cv
9.938 188.23 10.105 187.945 10.324 187.723 cv
10.547 187.508 10.82 187.348 11.145 187.246 cv
11.477 187.148 11.859 187.102 12.289 187.098 cv
cp
13.816 188.375 mo
13.816 189.477 li
13.82 189.832 13.852 190.137 13.906 190.395 cv
13.969 190.656 14.055 190.871 14.172 191.043 cv
14.289 191.215 14.43 191.34 14.594 191.418 cv
14.758 191.5 14.945 191.543 15.156 191.539 cv
15.523 191.543 15.816 191.426 16.027 191.195 cv
16.246 190.965 16.352 190.641 16.352 190.223 cv
16.352 189.887 16.266 189.574 16.094 189.285 cv
15.922 188.996 15.66 188.695 15.305 188.375 cv
cp
f
16.496 181.172 mo
16.652 181.172 16.77 181.184 16.855 181.203 cv
16.945 181.227 17.012 181.258 17.051 181.297 cv
17.094 181.34 17.133 181.402 17.168 181.484 cv
17.203 181.57 17.23 181.664 17.258 181.77 cv
17.277 181.879 17.297 181.992 17.316 182.109 cv
17.328 182.227 17.336 182.348 17.34 182.465 cv
17.336 182.832 17.289 183.145 17.195 183.402 cv
17.102 183.664 16.957 183.875 16.758 184.039 cv
16.566 184.207 16.32 184.328 16.02 184.402 cv
15.723 184.48 15.371 184.52 14.961 184.516 cv
10.863 184.516 li
10.863 185.496 li
10.867 185.574 10.824 185.637 10.738 185.684 cv
10.656 185.73 10.523 185.754 10.332 185.754 cv
10.238 185.754 10.156 185.75 10.086 185.734 cv
10.023 185.727 9.965 185.707 9.918 185.684 cv
9.875 185.664 9.844 185.637 9.824 185.602 cv
9.809 185.57 9.801 185.535 9.797 185.488 cv
9.797 184.516 li
8.129 184.516 li
8.098 184.52 8.063 184.508 8.027 184.488 cv
8 184.473 7.973 184.441 7.945 184.387 cv
7.926 184.34 7.91 184.273 7.895 184.187 cv
7.887 184.109 7.879 184.004 7.879 183.875 cv
7.879 183.746 7.887 183.641 7.895 183.559 cv
7.91 183.477 7.926 183.41 7.945 183.363 cv
7.973 183.316 8 183.285 8.027 183.262 cv
8.063 183.246 8.098 183.234 8.129 183.23 cv
9.797 183.23 li
9.797 181.43 li
9.801 181.391 9.809 181.355 9.824 181.32 cv
9.844 181.293 9.875 181.266 9.918 181.238 cv
9.965 181.219 10.023 181.203 10.086 181.187 cv
10.156 181.18 10.238 181.172 10.332 181.172 cv
10.523 181.172 10.656 181.195 10.738 181.242 cv
10.824 181.289 10.867 181.352 10.863 181.43 cv
10.863 183.23 li
14.777 183.23 li
15.262 183.234 15.625 183.164 15.871 183.016 cv
16.121 182.875 16.246 182.617 16.242 182.246 cv
16.246 182.133 16.234 182.027 16.207 181.93 cv
16.188 181.84 16.164 181.758 16.133 181.68 cv
16.109 181.609 16.082 181.547 16.059 181.492 cv
16.035 181.445 16.023 181.398 16.023 181.352 cv
16.023 181.328 16.031 181.301 16.043 181.277 cv
16.059 181.254 16.082 181.238 16.117 181.223 cv
16.156 181.215 16.207 181.203 16.266 181.187 cv
16.332 181.18 16.41 181.172 16.496 181.172 cv
cp
f
16.496 176.016 mo
16.652 176.016 16.77 176.027 16.855 176.047 cv
16.945 176.07 17.012 176.102 17.051 176.141 cv
17.094 176.184 17.133 176.246 17.168 176.328 cv
17.203 176.414 17.23 176.508 17.258 176.613 cv
17.277 176.723 17.297 176.836 17.316 176.953 cv
17.328 177.07 17.336 177.191 17.34 177.309 cv
17.336 177.676 17.289 177.988 17.195 178.246 cv
17.102 178.508 16.957 178.719 16.758 178.883 cv
16.566 179.051 16.32 179.172 16.02 179.246 cv
15.723 179.324 15.371 179.363 14.961 179.359 cv
10.863 179.359 li
10.863 180.34 li
10.867 180.418 10.824 180.48 10.738 180.527 cv
10.656 180.574 10.523 180.598 10.332 180.598 cv
10.238 180.598 10.156 180.594 10.086 180.578 cv
10.023 180.57 9.965 180.551 9.918 180.527 cv
9.875 180.508 9.844 180.48 9.824 180.445 cv
9.809 180.414 9.801 180.379 9.797 180.332 cv
9.797 179.359 li
8.129 179.359 li
8.098 179.363 8.063 179.352 8.027 179.332 cv
8 179.316 7.973 179.285 7.945 179.23 cv
7.926 179.184 7.91 179.117 7.895 179.031 cv
7.887 178.953 7.879 178.848 7.879 178.719 cv
7.879 178.59 7.887 178.484 7.895 178.402 cv
7.91 178.32 7.926 178.254 7.945 178.207 cv
7.973 178.16 8 178.129 8.027 178.105 cv
8.063 178.09 8.098 178.078 8.129 178.074 cv
9.797 178.074 li
9.797 176.273 li
9.801 176.234 9.809 176.199 9.824 176.164 cv
9.844 176.137 9.875 176.109 9.918 176.082 cv
9.965 176.062 10.023 176.047 10.086 176.031 cv
10.156 176.023 10.238 176.016 10.332 176.016 cv
10.523 176.016 10.656 176.039 10.738 176.086 cv
10.824 176.133 10.867 176.195 10.863 176.273 cv
10.863 178.074 li
14.777 178.074 li
15.262 178.078 15.625 178.008 15.871 177.859 cv
16.121 177.719 16.246 177.461 16.242 177.09 cv
16.246 176.977 16.234 176.871 16.207 176.773 cv
16.188 176.684 16.164 176.602 16.133 176.523 cv
16.109 176.453 16.082 176.391 16.059 176.336 cv
16.035 176.289 16.023 176.242 16.023 176.195 cv
16.023 176.172 16.031 176.145 16.043 176.121 cv
16.059 176.098 16.082 176.082 16.117 176.066 cv
16.156 176.059 16.207 176.047 16.266 176.031 cv
16.332 176.023 16.41 176.016 16.496 176.016 cv
cp
f
15.102 169.883 mo
15.465 169.887 15.785 169.953 16.063 170.082 cv
16.344 170.215 16.578 170.402 16.77 170.645 cv
16.965 170.891 17.109 171.184 17.207 171.52 cv
17.305 171.859 17.352 172.23 17.355 172.633 cv
17.352 172.887 17.332 173.125 17.297 173.348 cv
17.254 173.574 17.207 173.773 17.148 173.953 cv
17.09 174.133 17.027 174.285 16.961 174.41 cv
16.898 174.535 16.84 174.629 16.785 174.684 cv
16.734 174.742 16.664 174.781 16.566 174.805 cv
16.477 174.832 16.348 174.844 16.188 174.844 cv
16.09 174.844 16.008 174.84 15.938 174.828 cv
15.871 174.82 15.816 174.809 15.773 174.789 cv
15.734 174.777 15.703 174.754 15.684 174.727 cv
15.668 174.699 15.66 174.668 15.656 174.629 cv
15.66 174.574 15.695 174.488 15.762 174.375 cv
15.836 174.266 15.914 174.129 15.992 173.961 cv
16.078 173.801 16.152 173.609 16.223 173.383 cv
16.293 173.164 16.328 172.906 16.328 172.609 cv
16.328 172.395 16.305 172.195 16.258 172.016 cv
16.211 171.84 16.145 171.687 16.051 171.559 cv
15.965 171.43 15.848 171.328 15.703 171.258 cv
15.566 171.187 15.398 171.152 15.203 171.152 cv
15.008 171.152 14.844 171.203 14.707 171.305 cv
14.574 171.406 14.453 171.543 14.348 171.707 cv
14.246 171.875 14.156 172.059 14.07 172.266 cv
13.992 172.477 13.906 172.691 13.816 172.91 cv
13.73 173.129 13.629 173.344 13.516 173.555 cv
13.406 173.766 13.273 173.957 13.109 174.121 cv
12.953 174.293 12.758 174.426 12.531 174.523 cv
12.309 174.629 12.043 174.68 11.73 174.676 cv
11.457 174.68 11.191 174.625 10.938 174.516 cv
10.688 174.41 10.469 174.25 10.277 174.035 cv
10.09 173.824 9.938 173.559 9.82 173.238 cv
9.707 172.918 9.648 172.547 9.648 172.117 cv
9.648 171.934 9.664 171.746 9.695 171.559 cv
9.727 171.375 9.766 171.207 9.813 171.051 cv
9.859 170.902 9.91 170.773 9.965 170.664 cv
10.02 170.562 10.07 170.48 10.109 170.422 cv
10.156 170.371 10.191 170.336 10.219 170.312 cv
10.25 170.297 10.285 170.281 10.32 170.273 cv
10.363 170.266 10.41 170.258 10.465 170.25 cv
10.523 170.242 10.594 170.238 10.676 170.238 cv
10.766 170.238 10.844 170.242 10.906 170.25 cv
10.977 170.258 11.027 170.273 11.066 170.289 cv
11.109 170.312 11.141 170.332 11.156 170.355 cv
11.176 170.383 11.184 170.414 11.184 170.441 cv
11.184 170.492 11.156 170.559 11.098 170.645 cv
11.043 170.734 10.98 170.848 10.914 170.988 cv
10.852 171.129 10.793 171.297 10.73 171.484 cv
10.676 171.676 10.645 171.891 10.645 172.133 cv
10.645 172.355 10.672 172.547 10.719 172.711 cv
10.773 172.879 10.844 173.016 10.93 173.121 cv
11.023 173.227 11.129 173.309 11.254 173.359 cv
11.379 173.418 11.516 173.445 11.66 173.441 cv
11.863 173.445 12.031 173.395 12.168 173.289 cv
12.309 173.187 12.43 173.051 12.531 172.883 cv
12.637 172.719 12.73 172.527 12.813 172.312 cv
12.898 172.102 12.984 171.887 13.07 171.664 cv
13.16 171.445 13.262 171.227 13.367 171.008 cv
13.477 170.793 13.605 170.602 13.762 170.434 cv
13.918 170.27 14.105 170.137 14.324 170.035 cv
14.543 169.937 14.805 169.887 15.102 169.883 cv
cp
f
13.023 165.437 mo
13.609 165.437 14.191 165.477 14.766 165.547 cv
15.34 165.625 15.906 165.734 16.469 165.875 cv
17.027 166.023 17.578 166.199 18.121 166.41 cv
18.664 166.621 19.199 166.867 19.73 167.145 cv
19.754 167.164 19.777 167.187 19.801 167.215 cv
19.82 167.25 19.84 167.289 19.855 167.336 cv
19.871 167.387 19.879 167.445 19.887 167.512 cv
19.887 167.582 19.891 167.664 19.895 167.754 cv
19.891 167.891 19.883 167.996 19.875 168.07 cv
19.859 168.148 19.84 168.203 19.813 168.234 cv
19.781 168.27 19.746 168.285 19.703 168.281 cv
19.656 168.281 19.602 168.266 19.543 168.238 cv
18.492 167.762 17.422 167.402 16.324 167.156 cv
15.227 166.914 14.117 166.793 13 166.789 cv
11.891 166.793 10.785 166.914 9.684 167.156 cv
8.586 167.402 7.516 167.77 6.469 168.254 cv
6.426 168.277 6.383 168.285 6.336 168.277 cv
6.297 168.277 6.262 168.254 6.234 168.207 cv
6.211 168.168 6.191 168.109 6.172 168.035 cv
6.16 167.965 6.152 167.867 6.148 167.746 cv
6.152 167.637 6.156 167.547 6.16 167.473 cv
6.172 167.402 6.184 167.344 6.195 167.297 cv
6.215 167.254 6.23 167.223 6.242 167.199 cv
6.262 167.184 6.277 167.168 6.297 167.152 cv
7.363 166.621 8.461 166.199 9.582 165.895 cv
10.711 165.59 11.855 165.437 13.023 165.437 cv
cp
f
305.98 517.582 mo
305.977 517.687 305.961 517.777 305.926 517.848 cv
305.891 517.926 305.844 517.984 305.789 518.027 cv
305.73 518.078 305.668 518.113 305.602 518.129 cv
305.527 518.152 305.457 518.16 305.395 518.16 cv
304.949 518.16 li
304.809 518.16 304.688 518.148 304.582 518.117 cv
304.477 518.094 304.379 518.039 304.285 517.961 cv
304.191 517.887 304.098 517.785 304.004 517.652 cv
303.91 517.523 303.809 517.359 303.703 517.156 cv
300.629 511.418 li
300.465 511.125 300.301 510.816 300.141 510.488 cv
299.973 510.168 299.82 509.852 299.684 509.543 cv
299.668 509.543 li
299.676 509.918 299.684 510.301 299.691 510.687 cv
299.695 511.078 299.695 511.465 299.699 511.848 cv
299.699 517.934 li
299.695 517.973 299.684 518.008 299.664 518.039 cv
299.641 518.074 299.605 518.102 299.555 518.117 cv
299.5 518.137 299.43 518.148 299.348 518.164 cv
299.262 518.176 299.156 518.184 299.027 518.184 cv
298.891 518.184 298.781 518.176 298.699 518.164 cv
298.613 518.148 298.547 518.137 298.5 518.117 cv
298.449 518.102 298.414 518.074 298.391 518.039 cv
298.367 518.008 298.355 517.973 298.359 517.934 cv
298.359 508.629 li
298.355 508.422 298.414 508.273 298.535 508.184 cv
298.652 508.098 298.781 508.055 298.922 508.051 cv
299.582 508.051 li
299.734 508.055 299.867 508.066 299.973 508.09 cv
300.074 508.117 300.168 508.16 300.254 508.219 cv
300.336 508.281 300.414 508.363 300.496 508.469 cv
300.57 508.578 300.652 508.715 300.738 508.871 cv
303.105 513.297 li
303.25 513.57 303.391 513.836 303.527 514.09 cv
303.66 514.348 303.789 514.602 303.918 514.848 cv
304.039 515.102 304.164 515.348 304.289 515.586 cv
304.41 515.828 304.531 516.07 304.656 516.312 cv
304.664 516.312 li
304.652 515.906 304.645 515.477 304.645 515.031 cv
304.637 514.586 304.637 514.16 304.641 513.75 cv
304.641 508.277 li
304.637 508.242 304.648 508.207 304.672 508.176 cv
304.695 508.145 304.73 508.117 304.785 508.094 cv
304.832 508.07 304.902 508.055 304.988 508.043 cv
305.074 508.035 305.184 508.031 305.324 508.027 cv
305.441 508.031 305.547 508.035 305.637 508.043 cv
305.723 508.055 305.789 508.07 305.84 508.094 cv
305.887 508.117 305.922 508.145 305.945 508.176 cv
305.965 508.207 305.977 508.242 305.98 508.277 cv
cp
f
314.531 517.941 mo
314.527 517.988 314.52 518.023 314.504 518.047 cv
314.484 518.078 314.449 518.102 314.406 518.121 cv
314.359 518.141 314.301 518.152 314.227 518.168 cv
314.148 518.176 314.055 518.184 313.949 518.184 cv
313.824 518.184 313.727 518.176 313.656 518.168 cv
313.578 518.152 313.52 518.141 313.477 518.121 cv
313.43 518.102 313.398 518.078 313.387 518.047 cv
313.367 518.023 313.359 517.988 313.363 517.941 cv
313.363 517.016 li
312.961 517.461 312.566 517.781 312.18 517.98 cv
311.785 518.184 311.391 518.281 310.996 518.285 cv
310.523 518.281 310.129 518.207 309.813 518.051 cv
309.492 517.898 309.234 517.687 309.039 517.418 cv
308.836 517.152 308.695 516.84 308.613 516.48 cv
308.523 516.125 308.48 515.691 308.484 515.184 cv
308.484 510.93 li
308.48 510.891 308.488 510.855 308.512 510.824 cv
308.527 510.797 308.563 510.773 308.617 510.746 cv
308.664 510.727 308.734 510.711 308.82 510.699 cv
308.902 510.695 309.004 510.691 309.133 510.687 cv
309.254 510.691 309.359 510.695 309.445 510.699 cv
309.527 510.711 309.594 510.727 309.641 510.746 cv
309.688 510.773 309.723 510.797 309.746 510.824 cv
309.766 510.855 309.773 510.891 309.777 510.93 cv
309.777 515.012 li
309.773 515.426 309.805 515.754 309.867 516 cv
309.926 516.246 310.016 516.457 310.141 516.629 cv
310.258 516.809 310.414 516.941 310.605 517.035 cv
310.789 517.133 311.008 517.184 311.258 517.18 cv
311.578 517.184 311.898 517.066 312.223 516.836 cv
312.539 516.609 312.879 516.273 313.238 515.828 cv
313.238 510.93 li
313.238 510.891 313.246 510.855 313.266 510.824 cv
313.281 510.797 313.316 510.773 313.371 510.746 cv
313.422 510.727 313.488 510.711 313.57 510.699 cv
313.648 510.695 313.754 510.691 313.887 510.687 cv
314.008 510.691 314.113 510.695 314.199 510.699 cv
314.281 510.711 314.344 510.727 314.391 510.746 cv
314.434 510.773 314.469 510.797 314.496 510.824 cv
314.516 510.855 314.527 510.891 314.531 510.93 cv
cp
f
327.309 517.941 mo
327.305 517.988 327.297 518.023 327.277 518.047 cv
327.254 518.078 327.219 518.102 327.176 518.121 cv
327.125 518.141 327.059 518.152 326.98 518.168 cv
326.895 518.176 326.793 518.184 326.668 518.184 cv
326.535 518.184 326.426 518.176 326.348 518.168 cv
326.262 518.152 326.195 518.141 326.148 518.121 cv
326.094 518.102 326.059 518.078 326.043 518.047 cv
326.02 518.023 326.012 517.988 326.012 517.941 cv
326.012 513.68 li
326.012 513.387 325.984 513.117 325.934 512.871 cv
325.879 512.629 325.797 512.418 325.684 512.238 cv
325.57 512.062 325.426 511.926 325.25 511.832 cv
325.07 511.738 324.859 511.691 324.625 511.691 cv
324.328 511.691 324.031 511.809 323.734 512.035 cv
323.43 512.27 323.102 512.602 322.746 513.039 cv
322.746 517.941 li
322.742 517.988 322.73 518.023 322.715 518.047 cv
322.691 518.078 322.66 518.102 322.613 518.121 cv
322.563 518.141 322.496 518.152 322.414 518.168 cv
322.328 518.176 322.223 518.184 322.102 518.184 cv
321.98 518.184 321.879 518.176 321.793 518.168 cv
321.707 518.152 321.637 518.141 321.59 518.121 cv
321.535 518.102 321.504 518.078 321.488 518.047 cv
321.469 518.023 321.457 517.988 321.461 517.941 cv
321.461 513.68 li
321.457 513.387 321.43 513.117 321.375 512.871 cv
321.316 512.629 321.23 512.418 321.117 512.238 cv
321.004 512.062 320.859 511.926 320.688 511.832 cv
320.508 511.738 320.301 511.691 320.066 511.691 cv
319.766 511.691 319.469 511.809 319.168 512.035 cv
318.867 512.27 318.539 512.602 318.188 513.039 cv
318.188 517.941 li
318.184 517.988 318.172 518.023 318.156 518.047 cv
318.133 518.078 318.102 518.102 318.055 518.121 cv
318.008 518.141 317.941 518.152 317.863 518.168 cv
317.777 518.176 317.672 518.184 317.543 518.184 cv
317.414 518.184 317.309 518.176 317.23 518.168 cv
317.145 518.152 317.078 518.141 317.031 518.121 cv
316.977 518.102 316.945 518.078 316.93 518.047 cv
316.91 518.023 316.898 517.988 316.902 517.941 cv
316.902 510.93 li
316.898 510.891 316.906 510.855 316.926 510.824 cv
316.938 510.797 316.969 510.773 317.02 510.746 cv
317.063 510.727 317.125 510.711 317.199 510.699 cv
317.27 510.695 317.363 510.691 317.488 510.687 cv
317.598 510.691 317.695 510.695 317.773 510.699 cv
317.848 510.711 317.906 510.727 317.949 510.746 cv
317.988 510.773 318.016 510.797 318.035 510.824 cv
318.051 510.855 318.059 510.891 318.063 510.93 cv
318.063 511.855 li
318.453 511.414 318.836 511.094 319.211 510.887 cv
319.578 510.684 319.957 510.578 320.34 510.578 cv
320.629 510.578 320.887 510.613 321.121 510.68 cv
321.348 510.75 321.555 510.844 321.734 510.965 cv
321.91 511.086 322.059 511.23 322.188 511.398 cv
322.309 511.57 322.414 511.762 322.5 511.965 cv
322.73 511.715 322.953 511.5 323.164 511.32 cv
323.375 511.148 323.578 511.004 323.773 510.891 cv
323.969 510.785 324.156 510.707 324.34 510.652 cv
324.523 510.605 324.711 510.578 324.898 510.578 cv
325.352 510.578 325.73 510.66 326.035 510.816 cv
326.34 510.98 326.586 511.191 326.781 511.453 cv
326.969 511.719 327.105 512.027 327.188 512.383 cv
327.266 512.738 327.305 513.113 327.309 513.508 cv
cp
f
336.105 514.34 mo
336.102 514.949 336.035 515.5 335.906 515.984 cv
335.77 516.473 335.574 516.887 335.32 517.227 cv
335.063 517.57 334.746 517.832 334.375 518.012 cv
334 518.195 333.574 518.281 333.09 518.285 cv
332.863 518.281 332.656 518.262 332.469 518.219 cv
332.281 518.172 332.094 518.102 331.914 518.004 cv
331.727 517.906 331.547 517.781 331.367 517.629 cv
331.184 517.48 330.992 517.301 330.793 517.086 cv
330.793 517.941 li
330.793 517.988 330.781 518.023 330.762 518.051 cv
330.738 518.086 330.703 518.109 330.66 518.125 cv
330.609 518.141 330.551 518.152 330.484 518.168 cv
330.41 518.176 330.32 518.184 330.215 518.184 cv
330.105 518.184 330.02 518.176 329.949 518.168 cv
329.875 518.152 329.813 518.141 329.77 518.125 cv
329.719 518.109 329.688 518.086 329.676 518.051 cv
329.656 518.023 329.648 517.988 329.652 517.941 cv
329.652 507.531 li
329.648 507.492 329.66 507.457 329.68 507.422 cv
329.695 507.395 329.727 507.367 329.781 507.344 cv
329.828 507.324 329.895 507.309 329.98 507.297 cv
330.059 507.289 330.164 507.285 330.293 507.281 cv
330.422 507.285 330.527 507.289 330.613 507.297 cv
330.691 507.309 330.758 507.324 330.805 507.344 cv
330.852 507.367 330.883 507.395 330.906 507.422 cv
330.922 507.457 330.934 507.492 330.938 507.531 cv
330.938 511.73 li
331.145 511.52 331.348 511.34 331.543 511.195 cv
331.738 511.051 331.926 510.934 332.113 510.84 cv
332.297 510.754 332.484 510.687 332.676 510.641 cv
332.859 510.602 333.059 510.578 333.27 510.578 cv
333.773 510.578 334.207 510.68 334.574 510.883 cv
334.934 511.086 335.227 511.359 335.453 511.695 cv
335.676 512.039 335.844 512.437 335.949 512.895 cv
336.051 513.352 336.102 513.832 336.105 514.34 cv
cp
334.773 514.488 mo
334.77 514.133 334.742 513.785 334.691 513.445 cv
334.633 513.109 334.539 512.812 334.402 512.551 cv
334.266 512.293 334.086 512.082 333.863 511.922 cv
333.637 511.766 333.355 511.687 333.023 511.684 cv
332.855 511.687 332.691 511.711 332.531 511.754 cv
332.367 511.805 332.203 511.883 332.035 511.988 cv
331.867 512.102 331.691 512.242 331.516 512.41 cv
331.332 512.586 331.141 512.801 330.938 513.055 cv
330.938 515.852 li
331.293 516.285 331.633 516.617 331.957 516.84 cv
332.281 517.07 332.617 517.184 332.969 517.18 cv
333.289 517.184 333.566 517.105 333.801 516.945 cv
334.027 516.793 334.215 516.586 334.359 516.324 cv
334.504 516.07 334.609 515.781 334.676 515.461 cv
334.738 515.145 334.77 514.82 334.773 514.488 cv
cp
f
344.016 514.133 mo
344.012 514.336 343.961 514.477 343.863 514.562 cv
343.758 514.648 343.641 514.691 343.516 514.691 cv
338.898 514.691 li
338.895 515.082 338.934 515.434 339.016 515.746 cv
339.09 516.059 339.223 516.328 339.406 516.547 cv
339.586 516.773 339.82 516.945 340.117 517.062 cv
340.406 517.187 340.766 517.246 341.191 517.242 cv
341.523 517.246 341.82 517.219 342.082 517.16 cv
342.344 517.109 342.57 517.047 342.762 516.977 cv
342.949 516.91 343.105 516.852 343.23 516.793 cv
343.352 516.742 343.445 516.715 343.508 516.711 cv
343.543 516.715 343.574 516.723 343.605 516.738 cv
343.633 516.758 343.656 516.785 343.676 516.82 cv
343.688 516.859 343.699 516.91 343.711 516.973 cv
343.715 517.039 343.719 517.117 343.723 517.211 cv
343.719 517.281 343.715 517.34 343.715 517.387 cv
343.707 517.434 343.703 517.477 343.695 517.516 cv
343.688 517.555 343.672 517.59 343.656 517.621 cv
343.633 517.652 343.609 517.684 343.586 517.711 cv
343.555 517.742 343.473 517.789 343.332 517.852 cv
343.191 517.918 343.008 517.98 342.785 518.043 cv
342.559 518.105 342.301 518.16 342.008 518.211 cv
341.715 518.258 341.402 518.281 341.07 518.285 cv
340.492 518.281 339.984 518.203 339.555 518.043 cv
339.117 517.883 338.754 517.645 338.461 517.328 cv
338.16 517.012 337.938 516.617 337.789 516.137 cv
337.641 515.66 337.566 515.102 337.566 514.465 cv
337.566 513.867 337.641 513.328 337.797 512.844 cv
337.949 512.367 338.176 511.957 338.473 511.621 cv
338.766 511.285 339.121 511.027 339.535 510.848 cv
339.949 510.668 340.414 510.578 340.93 510.578 cv
341.48 510.578 341.949 510.668 342.336 510.844 cv
342.723 511.023 343.039 511.262 343.293 511.559 cv
343.539 511.859 343.723 512.211 343.84 512.609 cv
343.953 513.016 344.012 513.445 344.016 513.898 cv
cp
342.723 513.75 mo
342.738 513.074 342.586 512.543 342.27 512.16 cv
341.953 511.777 341.484 511.586 340.867 511.582 cv
340.543 511.586 340.262 511.645 340.023 511.762 cv
339.781 511.883 339.582 512.043 339.422 512.238 cv
339.258 512.437 339.133 512.668 339.047 512.93 cv
338.957 513.191 338.906 513.465 338.898 513.75 cv
cp
f
350.082 511.387 mo
350.078 511.504 350.078 511.602 350.074 511.676 cv
350.066 511.758 350.055 511.82 350.043 511.859 cv
350.023 511.906 350.004 511.937 349.984 511.961 cv
349.957 511.984 349.926 511.996 349.887 511.996 cv
349.844 511.996 349.793 511.984 349.734 511.961 cv
349.672 511.937 349.602 511.914 349.531 511.891 cv
349.453 511.867 349.371 511.848 349.277 511.824 cv
349.184 511.809 349.082 511.797 348.973 511.793 cv
348.84 511.797 348.711 511.824 348.59 511.871 cv
348.465 511.926 348.336 512.012 348.199 512.129 cv
348.059 512.254 347.914 512.41 347.766 512.605 cv
347.613 512.801 347.445 513.043 347.266 513.328 cv
347.266 517.941 li
347.262 517.988 347.25 518.023 347.234 518.047 cv
347.211 518.078 347.18 518.102 347.133 518.121 cv
347.086 518.141 347.02 518.152 346.941 518.168 cv
346.855 518.176 346.75 518.184 346.621 518.184 cv
346.492 518.184 346.387 518.176 346.309 518.168 cv
346.223 518.152 346.156 518.141 346.109 518.121 cv
346.055 518.102 346.023 518.078 346.008 518.047 cv
345.988 518.023 345.977 517.988 345.98 517.941 cv
345.98 510.93 li
345.977 510.891 345.984 510.855 346.004 510.824 cv
346.016 510.797 346.047 510.773 346.098 510.746 cv
346.141 510.727 346.203 510.711 346.277 510.699 cv
346.348 510.695 346.441 510.691 346.566 510.687 cv
346.676 510.691 346.773 510.695 346.852 510.699 cv
346.926 510.711 346.984 510.727 347.027 510.746 cv
347.066 510.773 347.094 510.797 347.113 510.824 cv
347.129 510.855 347.137 510.891 347.141 510.93 cv
347.141 511.949 li
347.328 511.668 347.512 511.441 347.684 511.266 cv
347.852 511.09 348.012 510.949 348.164 510.848 cv
348.313 510.746 348.461 510.676 348.609 510.637 cv
348.758 510.598 348.906 510.578 349.059 510.578 cv
349.125 510.578 349.203 510.582 349.289 510.59 cv
349.375 510.598 349.465 510.613 349.559 510.633 cv
349.652 510.656 349.734 510.68 349.813 510.703 cv
349.883 510.73 349.938 510.758 349.973 510.781 cv
350 510.812 350.02 510.836 350.035 510.855 cv
350.043 510.883 350.055 510.914 350.063 510.945 cv
350.07 510.984 350.074 511.035 350.078 511.105 cv
350.078 511.176 350.078 511.27 350.082 511.387 cv
cp
f
361.855 514.355 mo
361.852 514.934 361.777 515.461 361.629 515.937 cv
361.477 516.422 361.25 516.836 360.953 517.18 cv
360.652 517.531 360.277 517.801 359.832 517.992 cv
359.379 518.187 358.859 518.281 358.27 518.285 cv
357.691 518.281 357.188 518.199 356.762 518.027 cv
356.332 517.859 355.977 517.609 355.691 517.281 cv
355.402 516.953 355.188 516.559 355.051 516.09 cv
354.91 515.625 354.844 515.094 354.844 514.496 cv
354.844 513.93 354.914 513.402 355.063 512.922 cv
355.207 512.441 355.434 512.027 355.734 511.676 cv
356.031 511.328 356.402 511.059 356.852 510.867 cv
357.297 510.676 357.82 510.578 358.418 510.578 cv
358.996 510.578 359.496 510.664 359.926 510.836 cv
360.352 511.008 360.711 511.258 360.996 511.586 cv
361.281 511.914 361.496 512.312 361.641 512.777 cv
361.781 513.246 361.852 513.773 361.855 514.355 cv
cp
360.523 514.441 mo
360.52 514.066 360.484 513.707 360.418 513.367 cv
360.344 513.031 360.227 512.738 360.066 512.48 cv
359.902 512.23 359.684 512.027 359.406 511.875 cv
359.125 511.73 358.777 511.656 358.367 511.652 cv
357.98 511.656 357.652 511.723 357.379 511.855 cv
357.102 511.992 356.875 512.184 356.699 512.43 cv
356.52 512.676 356.387 512.969 356.305 513.305 cv
356.215 513.645 356.172 514.012 356.176 514.41 cv
356.172 514.797 356.207 515.16 356.281 515.496 cv
356.348 515.836 356.465 516.129 356.633 516.379 cv
356.797 516.633 357.02 516.836 357.297 516.98 cv
357.574 517.133 357.922 517.207 358.336 517.203 cv
358.711 517.207 359.039 517.137 359.32 517 cv
359.598 516.867 359.824 516.68 360.004 516.43 cv
360.18 516.187 360.309 515.895 360.395 515.559 cv
360.477 515.223 360.52 514.852 360.523 514.441 cv
cp
f
367.586 508.043 mo
367.582 508.145 367.578 508.223 367.57 508.281 cv
367.559 508.344 367.547 508.395 367.535 508.426 cv
367.52 508.465 367.504 508.488 367.484 508.5 cv
367.461 508.516 367.434 508.523 367.406 508.52 cv
367.367 508.523 367.32 508.512 367.27 508.484 cv
367.211 508.465 367.145 508.437 367.07 508.406 cv
366.988 508.379 366.898 508.352 366.793 508.328 cv
366.684 508.305 366.559 508.293 366.426 508.293 cv
366.23 508.293 366.066 508.324 365.934 508.387 cv
365.793 508.449 365.684 508.547 365.605 508.68 cv
365.52 508.812 365.461 508.984 365.426 509.195 cv
365.387 509.406 365.367 509.664 365.371 509.961 cv
365.371 510.727 li
366.938 510.727 li
366.977 510.73 367.012 510.738 367.043 510.754 cv
367.07 510.773 367.098 510.805 367.121 510.848 cv
367.145 510.895 367.16 510.953 367.176 511.016 cv
367.184 511.086 367.191 511.168 367.195 511.262 cv
367.191 511.453 367.168 511.586 367.125 511.668 cv
367.074 511.754 367.012 511.797 366.938 511.793 cv
365.371 511.793 li
365.371 517.941 li
365.367 517.988 365.359 518.023 365.34 518.047 cv
365.316 518.078 365.281 518.102 365.234 518.121 cv
365.184 518.141 365.117 518.152 365.035 518.168 cv
364.949 518.176 364.844 518.184 364.727 518.184 cv
364.598 518.184 364.496 518.176 364.414 518.168 cv
364.328 518.152 364.262 518.141 364.215 518.121 cv
364.164 518.102 364.129 518.078 364.109 518.047 cv
364.086 518.023 364.074 517.988 364.078 517.941 cv
364.078 511.793 li
363.09 511.793 li
363.004 511.797 362.941 511.754 362.902 511.668 cv
362.859 511.586 362.836 511.453 362.84 511.262 cv
362.836 511.168 362.844 511.086 362.855 511.016 cv
362.863 510.953 362.879 510.895 362.902 510.848 cv
362.922 510.805 362.945 510.773 362.98 510.754 cv
363.008 510.738 363.047 510.73 363.09 510.727 cv
364.078 510.727 li
364.078 510 li
364.074 509.516 364.121 509.098 364.215 508.742 cv
364.305 508.395 364.441 508.105 364.629 507.883 cv
364.813 507.66 365.047 507.496 365.336 507.387 cv
365.617 507.281 365.953 507.227 366.34 507.227 cv
366.516 507.227 366.691 507.246 366.867 507.277 cv
367.035 507.316 367.168 507.352 367.266 507.387 cv
367.355 507.43 367.418 507.465 367.453 507.492 cv
367.48 507.527 367.508 507.566 367.531 507.613 cv
367.551 507.664 367.563 507.727 367.574 507.793 cv
367.578 507.867 367.582 507.949 367.586 508.043 cv
cp
f
377.785 515.309 mo
377.781 515.781 377.695 516.203 377.523 516.57 cv
377.348 516.945 377.105 517.258 376.797 517.512 cv
376.488 517.77 376.125 517.961 375.707 518.09 cv
375.285 518.219 374.836 518.281 374.355 518.285 cv
374.016 518.281 373.699 518.254 373.414 518.199 cv
373.125 518.141 372.871 518.074 372.645 517.988 cv
372.418 517.91 372.227 517.824 372.074 517.73 cv
371.918 517.645 371.813 517.566 371.754 517.504 cv
371.695 517.441 371.652 517.363 371.625 517.27 cv
371.594 517.176 371.578 517.047 371.582 516.883 cv
371.578 516.77 371.582 516.676 371.598 516.598 cv
371.605 516.523 371.621 516.461 371.645 516.414 cv
371.66 516.367 371.688 516.336 371.723 516.316 cv
371.75 516.301 371.785 516.293 371.828 516.289 cv
371.898 516.293 372 516.336 372.137 516.422 cv
372.266 516.512 372.438 516.609 372.648 516.711 cv
372.855 516.82 373.105 516.918 373.398 517.004 cv
373.691 517.098 374.031 517.141 374.418 517.141 cv
374.707 517.141 374.973 517.102 375.215 517.023 cv
375.453 516.945 375.66 516.836 375.84 516.691 cv
376.012 516.551 376.148 516.375 376.242 516.164 cv
376.336 515.957 376.383 515.723 376.383 515.457 cv
376.383 515.176 376.316 514.93 376.188 514.723 cv
376.055 514.523 375.883 514.348 375.672 514.191 cv
375.457 514.043 375.215 513.902 374.941 513.77 cv
374.668 513.645 374.387 513.512 374.105 513.379 cv
373.816 513.246 373.539 513.102 373.27 512.937 cv
373 512.781 372.758 512.59 372.547 512.371 cv
372.328 512.152 372.156 511.898 372.027 511.602 cv
371.891 511.312 371.824 510.961 371.828 510.547 cv
371.824 510.129 371.902 509.754 372.059 509.422 cv
372.211 509.094 372.422 508.816 372.699 508.59 cv
372.969 508.371 373.293 508.199 373.672 508.082 cv
374.047 507.965 374.457 507.906 374.895 507.906 cv
375.113 507.906 375.336 507.926 375.566 507.965 cv
375.789 508.004 376 508.055 376.203 508.117 cv
376.398 508.184 376.578 508.258 376.738 508.336 cv
376.891 508.418 376.992 508.484 377.047 508.531 cv
377.094 508.586 377.129 508.625 377.145 508.648 cv
377.16 508.68 377.172 508.715 377.184 508.758 cv
377.191 508.805 377.199 508.859 377.207 508.918 cv
377.211 508.984 377.215 509.062 377.215 509.16 cv
377.215 509.254 377.211 509.34 377.203 509.41 cv
377.195 509.488 377.184 509.547 377.168 509.594 cv
377.152 509.641 377.129 509.676 377.102 509.699 cv
377.07 509.723 377.039 509.734 377.004 509.734 cv
376.945 509.734 376.855 509.699 376.734 509.629 cv
376.609 509.559 376.457 509.477 376.285 509.383 cv
376.105 509.293 375.898 509.211 375.66 509.133 cv
375.414 509.059 375.145 509.02 374.848 509.02 cv
374.566 509.02 374.32 509.059 374.113 509.133 cv
373.902 509.211 373.73 509.312 373.598 509.434 cv
373.461 509.559 373.359 509.703 373.293 509.875 cv
373.227 510.047 373.195 510.23 373.195 510.422 cv
373.195 510.707 373.258 510.949 373.387 511.148 cv
373.516 511.352 373.688 511.531 373.906 511.684 cv
374.117 511.844 374.363 511.984 374.641 512.113 cv
374.914 512.246 375.195 512.379 375.484 512.508 cv
375.77 512.641 376.051 512.785 376.324 512.941 cv
376.598 513.102 376.844 513.289 377.063 513.504 cv
377.277 513.723 377.449 513.977 377.586 514.27 cv
377.715 514.562 377.781 514.91 377.785 515.309 cv
cp
f
385.551 517.941 mo
385.547 517.988 385.539 518.023 385.523 518.047 cv
385.504 518.078 385.469 518.102 385.426 518.121 cv
385.379 518.141 385.32 518.152 385.246 518.168 cv
385.168 518.176 385.074 518.184 384.969 518.184 cv
384.844 518.184 384.746 518.176 384.676 518.168 cv
384.598 518.152 384.539 518.141 384.496 518.121 cv
384.449 518.102 384.418 518.078 384.406 518.047 cv
384.387 518.023 384.379 517.988 384.383 517.941 cv
384.383 517.016 li
383.98 517.461 383.586 517.781 383.199 517.98 cv
382.805 518.184 382.41 518.281 382.016 518.285 cv
381.543 518.281 381.148 518.207 380.832 518.051 cv
380.512 517.898 380.254 517.687 380.059 517.418 cv
379.855 517.152 379.715 516.84 379.633 516.48 cv
379.543 516.125 379.5 515.691 379.504 515.184 cv
379.504 510.93 li
379.5 510.891 379.508 510.855 379.531 510.824 cv
379.547 510.797 379.582 510.773 379.637 510.746 cv
379.684 510.727 379.754 510.711 379.84 510.699 cv
379.922 510.695 380.023 510.691 380.152 510.687 cv
380.273 510.691 380.379 510.695 380.465 510.699 cv
380.547 510.711 380.613 510.727 380.66 510.746 cv
380.707 510.773 380.742 510.797 380.766 510.824 cv
380.785 510.855 380.793 510.891 380.797 510.93 cv
380.797 515.012 li
380.793 515.426 380.824 515.754 380.887 516 cv
380.945 516.246 381.035 516.457 381.16 516.629 cv
381.277 516.809 381.434 516.941 381.625 517.035 cv
381.809 517.133 382.027 517.184 382.277 517.18 cv
382.598 517.184 382.918 517.066 383.242 516.836 cv
383.559 516.609 383.898 516.273 384.258 515.828 cv
384.258 510.93 li
384.258 510.891 384.266 510.855 384.285 510.824 cv
384.301 510.797 384.336 510.773 384.391 510.746 cv
384.441 510.727 384.508 510.711 384.59 510.699 cv
384.668 510.695 384.773 510.691 384.906 510.687 cv
385.027 510.691 385.133 510.695 385.219 510.699 cv
385.301 510.711 385.363 510.727 385.41 510.746 cv
385.453 510.773 385.488 510.797 385.516 510.824 cv
385.535 510.855 385.547 510.891 385.551 510.93 cv
cp
f
394.406 514.34 mo
394.402 514.949 394.336 515.5 394.207 515.984 cv
394.07 516.473 393.875 516.887 393.621 517.227 cv
393.363 517.57 393.047 517.832 392.676 518.012 cv
392.301 518.195 391.875 518.281 391.391 518.285 cv
391.164 518.281 390.957 518.262 390.77 518.219 cv
390.582 518.172 390.395 518.102 390.215 518.004 cv
390.027 517.906 389.848 517.781 389.668 517.629 cv
389.484 517.48 389.293 517.301 389.094 517.086 cv
389.094 517.941 li
389.094 517.988 389.082 518.023 389.063 518.051 cv
389.039 518.086 389.004 518.109 388.961 518.125 cv
388.91 518.141 388.852 518.152 388.785 518.168 cv
388.711 518.176 388.621 518.184 388.516 518.184 cv
388.406 518.184 388.32 518.176 388.25 518.168 cv
388.176 518.152 388.113 518.141 388.07 518.125 cv
388.02 518.109 387.988 518.086 387.977 518.051 cv
387.957 518.023 387.949 517.988 387.953 517.941 cv
387.953 507.531 li
387.949 507.492 387.961 507.457 387.98 507.422 cv
387.996 507.395 388.027 507.367 388.082 507.344 cv
388.129 507.324 388.195 507.309 388.281 507.297 cv
388.359 507.289 388.465 507.285 388.594 507.281 cv
388.723 507.285 388.828 507.289 388.914 507.297 cv
388.992 507.309 389.059 507.324 389.105 507.344 cv
389.152 507.367 389.184 507.395 389.207 507.422 cv
389.223 507.457 389.234 507.492 389.238 507.531 cv
389.238 511.73 li
389.445 511.52 389.648 511.34 389.844 511.195 cv
390.039 511.051 390.227 510.934 390.414 510.84 cv
390.598 510.754 390.785 510.687 390.977 510.641 cv
391.16 510.602 391.359 510.578 391.57 510.578 cv
392.074 510.578 392.508 510.68 392.875 510.883 cv
393.234 511.086 393.527 511.359 393.754 511.695 cv
393.977 512.039 394.145 512.437 394.25 512.895 cv
394.352 513.352 394.402 513.832 394.406 514.34 cv
cp
393.074 514.488 mo
393.07 514.133 393.043 513.785 392.992 513.445 cv
392.934 513.109 392.84 512.812 392.703 512.551 cv
392.566 512.293 392.387 512.082 392.164 511.922 cv
391.938 511.766 391.656 511.687 391.324 511.684 cv
391.156 511.687 390.992 511.711 390.832 511.754 cv
390.668 511.805 390.504 511.883 390.336 511.988 cv
390.168 512.102 389.992 512.242 389.816 512.41 cv
389.633 512.586 389.441 512.801 389.238 513.055 cv
389.238 515.852 li
389.594 516.285 389.934 516.617 390.258 516.84 cv
390.582 517.07 390.918 517.184 391.27 517.18 cv
391.59 517.184 391.867 517.105 392.102 516.945 cv
392.328 516.793 392.516 516.586 392.66 516.324 cv
392.805 516.07 392.91 515.781 392.977 515.461 cv
393.039 515.145 393.07 514.82 393.074 514.488 cv
cp
f
399.527 514.203 mo
399.527 514.406 399.504 514.543 399.457 514.621 cv
399.41 514.699 399.34 514.738 399.254 514.738 cv
395.996 514.738 li
395.902 514.738 395.836 514.699 395.789 514.617 cv
395.742 514.539 395.719 514.402 395.719 514.203 cv
395.719 514.008 395.742 513.867 395.789 513.789 cv
395.836 513.711 395.902 513.672 395.996 513.672 cv
399.254 513.672 li
399.293 513.672 399.332 513.68 399.367 513.695 cv
399.398 513.711 399.426 513.742 399.453 513.785 cv
399.473 513.832 399.492 513.887 399.508 513.953 cv
399.52 514.023 399.527 514.109 399.527 514.203 cv
cp
f
402.781 517.934 mo
402.777 517.977 402.77 518.012 402.75 518.043 cv
402.727 518.074 402.688 518.102 402.641 518.117 cv
402.586 518.137 402.52 518.148 402.434 518.164 cv
402.348 518.176 402.238 518.184 402.113 518.184 cv
401.984 518.184 401.879 518.176 401.793 518.164 cv
401.703 518.148 401.633 518.137 401.582 518.117 cv
401.527 518.102 401.492 518.074 401.473 518.043 cv
401.449 518.012 401.438 517.977 401.441 517.934 cv
401.441 508.254 li
401.438 508.215 401.449 508.18 401.477 508.145 cv
401.496 508.117 401.535 508.09 401.594 508.07 cv
401.645 508.055 401.715 508.039 401.805 508.023 cv
401.887 508.012 401.988 508.008 402.113 508.004 cv
402.238 508.008 402.348 508.012 402.434 508.023 cv
402.52 508.039 402.586 508.055 402.641 508.07 cv
402.688 508.09 402.727 508.117 402.75 508.145 cv
402.77 508.18 402.777 508.215 402.781 508.254 cv
cp
f
415.766 517.941 mo
415.762 517.988 415.754 518.023 415.734 518.047 cv
415.711 518.078 415.676 518.102 415.633 518.121 cv
415.582 518.141 415.516 518.152 415.438 518.168 cv
415.352 518.176 415.25 518.184 415.125 518.184 cv
414.992 518.184 414.883 518.176 414.805 518.168 cv
414.719 518.152 414.652 518.141 414.605 518.121 cv
414.551 518.102 414.516 518.078 414.5 518.047 cv
414.477 518.023 414.469 517.988 414.469 517.941 cv
414.469 513.68 li
414.469 513.387 414.441 513.117 414.391 512.871 cv
414.336 512.629 414.254 512.418 414.141 512.238 cv
414.027 512.062 413.883 511.926 413.707 511.832 cv
413.527 511.738 413.316 511.691 413.082 511.691 cv
412.785 511.691 412.488 511.809 412.191 512.035 cv
411.887 512.27 411.559 512.602 411.203 513.039 cv
411.203 517.941 li
411.199 517.988 411.188 518.023 411.172 518.047 cv
411.148 518.078 411.117 518.102 411.07 518.121 cv
411.02 518.141 410.953 518.152 410.871 518.168 cv
410.785 518.176 410.68 518.184 410.559 518.184 cv
410.438 518.184 410.336 518.176 410.25 518.168 cv
410.164 518.152 410.094 518.141 410.047 518.121 cv
409.992 518.102 409.961 518.078 409.945 518.047 cv
409.926 518.023 409.914 517.988 409.918 517.941 cv
409.918 513.68 li
409.914 513.387 409.887 513.117 409.832 512.871 cv
409.773 512.629 409.688 512.418 409.574 512.238 cv
409.461 512.062 409.316 511.926 409.145 511.832 cv
408.965 511.738 408.758 511.691 408.523 511.691 cv
408.223 511.691 407.926 511.809 407.625 512.035 cv
407.324 512.27 406.996 512.602 406.645 513.039 cv
406.645 517.941 li
406.641 517.988 406.629 518.023 406.613 518.047 cv
406.59 518.078 406.559 518.102 406.512 518.121 cv
406.465 518.141 406.398 518.152 406.32 518.168 cv
406.234 518.176 406.129 518.184 406 518.184 cv
405.871 518.184 405.766 518.176 405.688 518.168 cv
405.602 518.152 405.535 518.141 405.488 518.121 cv
405.434 518.102 405.402 518.078 405.387 518.047 cv
405.367 518.023 405.355 517.988 405.359 517.941 cv
405.359 510.93 li
405.355 510.891 405.363 510.855 405.383 510.824 cv
405.395 510.797 405.426 510.773 405.477 510.746 cv
405.52 510.727 405.582 510.711 405.656 510.699 cv
405.727 510.695 405.82 510.691 405.945 510.687 cv
406.055 510.691 406.152 510.695 406.23 510.699 cv
406.305 510.711 406.363 510.727 406.406 510.746 cv
406.445 510.773 406.473 510.797 406.492 510.824 cv
406.508 510.855 406.516 510.891 406.52 510.93 cv
406.52 511.855 li
406.91 511.414 407.293 511.094 407.668 510.887 cv
408.035 510.684 408.414 510.578 408.797 510.578 cv
409.086 510.578 409.344 510.613 409.578 510.68 cv
409.805 510.75 410.012 510.844 410.191 510.965 cv
410.367 511.086 410.516 511.23 410.645 511.398 cv
410.766 511.57 410.871 511.762 410.957 511.965 cv
411.188 511.715 411.41 511.5 411.621 511.32 cv
411.832 511.148 412.035 511.004 412.23 510.891 cv
412.426 510.785 412.613 510.707 412.797 510.652 cv
412.98 510.605 413.168 510.578 413.355 510.578 cv
413.809 510.578 414.188 510.66 414.492 510.816 cv
414.797 510.98 415.043 511.191 415.238 511.453 cv
415.426 511.719 415.563 512.027 415.645 512.383 cv
415.723 512.738 415.762 513.113 415.766 513.508 cv
cp
f
423.398 517.949 mo
423.395 518.012 423.375 518.059 423.336 518.09 cv
423.293 518.121 423.234 518.145 423.164 518.16 cv
423.086 518.176 422.98 518.184 422.844 518.184 cv
422.707 518.184 422.598 518.176 422.52 518.16 cv
422.434 518.145 422.375 518.121 422.344 518.09 cv
422.305 518.059 422.289 518.012 422.293 517.949 cv
422.293 517.25 li
421.984 517.578 421.641 517.832 421.266 518.012 cv
420.887 518.195 420.488 518.281 420.07 518.285 cv
419.695 518.281 419.363 518.234 419.066 518.141 cv
418.77 518.043 418.516 517.906 418.305 517.723 cv
418.094 517.543 417.93 517.32 417.813 517.055 cv
417.695 516.793 417.637 516.492 417.641 516.148 cv
417.637 515.758 417.715 515.414 417.879 515.121 cv
418.035 514.832 418.27 514.59 418.574 514.398 cv
418.875 514.207 419.242 514.062 419.68 513.965 cv
420.113 513.871 420.605 513.824 421.152 513.82 cv
422.121 513.82 li
422.121 513.273 li
422.117 513.004 422.09 512.766 422.035 512.559 cv
421.977 512.352 421.883 512.18 421.758 512.039 cv
421.625 511.902 421.461 511.797 421.262 511.727 cv
421.055 511.656 420.805 511.621 420.516 511.621 cv
420.195 511.621 419.91 511.66 419.66 511.734 cv
419.402 511.812 419.184 511.895 418.996 511.984 cv
418.809 512.078 418.648 512.164 418.523 512.234 cv
418.391 512.312 418.297 512.348 418.238 512.348 cv
418.195 512.348 418.16 512.34 418.129 512.316 cv
418.098 512.301 418.07 512.27 418.047 512.223 cv
418.023 512.184 418.004 512.129 417.996 512.062 cv
417.98 512 417.977 511.93 417.98 511.848 cv
417.977 511.723 417.984 511.617 418.008 511.539 cv
418.023 511.465 418.07 511.395 418.141 511.324 cv
418.211 511.258 418.332 511.18 418.504 511.09 cv
418.676 511 418.871 510.918 419.094 510.84 cv
419.316 510.77 419.563 510.707 419.828 510.652 cv
420.094 510.605 420.359 510.578 420.633 510.578 cv
421.133 510.578 421.563 510.637 421.914 510.75 cv
422.266 510.867 422.551 511.035 422.773 511.254 cv
422.988 511.477 423.148 511.75 423.25 512.074 cv
423.348 512.406 423.395 512.789 423.398 513.219 cv
cp
422.121 514.746 mo
421.02 514.746 li
420.664 514.75 420.359 514.781 420.102 514.836 cv
419.84 514.898 419.625 514.984 419.453 515.102 cv
419.281 515.219 419.156 515.359 419.078 515.523 cv
418.996 515.687 418.953 515.875 418.957 516.086 cv
418.953 516.453 419.07 516.746 419.301 516.957 cv
419.531 517.176 419.855 517.281 420.273 517.281 cv
420.609 517.281 420.922 517.195 421.211 517.023 cv
421.5 516.852 421.801 516.59 422.121 516.234 cv
cp
f
431.617 511.246 mo
431.613 511.43 431.59 511.562 431.543 511.641 cv
431.492 511.723 431.43 511.762 431.355 511.762 cv
430.348 511.762 li
430.527 511.949 430.656 512.156 430.73 512.383 cv
430.801 512.609 430.836 512.844 430.84 513.086 cv
430.836 513.492 430.77 513.852 430.645 514.164 cv
430.512 514.477 430.328 514.742 430.086 514.953 cv
429.844 515.172 429.555 515.336 429.227 515.449 cv
428.891 515.566 428.523 515.625 428.121 515.621 cv
427.832 515.625 427.559 515.586 427.305 515.508 cv
427.043 515.434 426.848 515.34 426.711 515.223 cv
426.617 515.32 426.539 515.426 426.48 515.543 cv
426.418 515.664 426.387 515.801 426.391 515.953 cv
426.387 516.137 426.473 516.289 426.645 516.406 cv
426.813 516.531 427.035 516.594 427.316 516.602 cv
429.148 516.68 li
429.496 516.691 429.813 516.738 430.105 516.824 cv
430.395 516.91 430.648 517.035 430.863 517.191 cv
431.074 517.352 431.242 517.543 431.363 517.773 cv
431.48 518.008 431.539 518.277 431.543 518.582 cv
431.539 518.902 431.473 519.207 431.34 519.5 cv
431.203 519.789 430.996 520.043 430.719 520.266 cv
430.438 520.484 430.082 520.66 429.652 520.789 cv
429.223 520.914 428.715 520.977 428.129 520.98 cv
427.559 520.977 427.074 520.93 426.68 520.836 cv
426.281 520.738 425.957 520.605 425.703 520.441 cv
425.449 520.273 425.266 520.078 425.152 519.848 cv
425.035 519.613 424.977 519.359 424.98 519.094 cv
424.977 518.922 424.996 518.758 425.043 518.598 cv
425.082 518.434 425.145 518.281 425.23 518.137 cv
425.313 517.992 425.422 517.855 425.551 517.719 cv
425.676 517.59 425.82 517.457 425.992 517.328 cv
425.734 517.199 425.547 517.035 425.426 516.836 cv
425.305 516.641 425.246 516.43 425.246 516.195 cv
425.246 515.883 425.309 515.598 425.438 515.348 cv
425.566 515.098 425.727 514.875 425.922 514.676 cv
425.758 514.484 425.633 514.27 425.539 514.027 cv
425.445 513.789 425.398 513.496 425.398 513.148 cv
425.398 512.754 425.465 512.395 425.602 512.074 cv
425.734 511.758 425.922 511.492 426.164 511.273 cv
426.402 511.059 426.688 510.891 427.023 510.77 cv
427.355 510.656 427.723 510.598 428.121 510.594 cv
428.332 510.598 428.531 510.609 428.715 510.629 cv
428.898 510.656 429.07 510.687 429.234 510.727 cv
431.355 510.727 li
431.441 510.73 431.508 510.773 431.551 510.855 cv
431.594 510.945 431.613 511.074 431.617 511.246 cv
cp
429.609 513.094 mo
429.605 512.621 429.473 512.25 429.215 511.977 cv
428.949 511.711 428.578 511.574 428.098 511.574 cv
427.844 511.574 427.625 511.617 427.445 511.699 cv
427.258 511.785 427.105 511.898 426.984 512.043 cv
426.863 512.191 426.773 512.359 426.715 512.547 cv
426.652 512.734 426.621 512.934 426.625 513.141 cv
426.621 513.605 426.754 513.969 427.016 514.234 cv
427.277 514.5 427.645 514.633 428.121 514.629 cv
428.371 514.633 428.59 514.594 428.781 514.508 cv
428.965 514.43 429.121 514.316 429.246 514.176 cv
429.367 514.035 429.457 513.871 429.52 513.68 cv
429.574 513.496 429.605 513.301 429.609 513.094 cv
cp
430.254 518.652 mo
430.25 518.348 430.125 518.117 429.883 517.953 cv
429.633 517.793 429.301 517.703 428.883 517.691 cv
427.066 517.629 li
426.898 517.762 426.762 517.887 426.66 518 cv
426.551 518.117 426.469 518.227 426.406 518.336 cv
426.344 518.441 426.301 518.547 426.277 518.652 cv
426.254 518.754 426.242 518.859 426.242 518.969 cv
426.242 519.305 426.41 519.559 426.754 519.738 cv
427.094 519.91 427.574 520 428.191 520 cv
428.578 520 428.902 519.961 429.168 519.887 cv
429.426 519.809 429.637 519.707 429.801 519.586 cv
429.957 519.457 430.074 519.316 430.148 519.156 cv
430.215 518.996 430.25 518.828 430.254 518.652 cv
cp
f
439.211 514.133 mo
439.207 514.336 439.156 514.477 439.059 514.562 cv
438.953 514.648 438.836 514.691 438.711 514.691 cv
434.094 514.691 li
434.09 515.082 434.129 515.434 434.211 515.746 cv
434.285 516.059 434.418 516.328 434.602 516.547 cv
434.781 516.773 435.016 516.945 435.313 517.062 cv
435.602 517.187 435.961 517.246 436.387 517.242 cv
436.719 517.246 437.016 517.219 437.277 517.16 cv
437.539 517.109 437.766 517.047 437.957 516.977 cv
438.145 516.91 438.301 516.852 438.426 516.793 cv
438.547 516.742 438.641 516.715 438.703 516.711 cv
438.738 516.715 438.77 516.723 438.801 516.738 cv
438.828 516.758 438.852 516.785 438.871 516.82 cv
438.883 516.859 438.895 516.91 438.906 516.973 cv
438.91 517.039 438.914 517.117 438.918 517.211 cv
438.914 517.281 438.91 517.34 438.91 517.387 cv
438.902 517.434 438.898 517.477 438.891 517.516 cv
438.883 517.555 438.867 517.59 438.852 517.621 cv
438.828 517.652 438.805 517.684 438.781 517.711 cv
438.75 517.742 438.668 517.789 438.527 517.852 cv
438.387 517.918 438.203 517.98 437.98 518.043 cv
437.754 518.105 437.496 518.16 437.203 518.211 cv
436.91 518.258 436.598 518.281 436.266 518.285 cv
435.688 518.281 435.18 518.203 434.75 518.043 cv
434.313 517.883 433.949 517.645 433.656 517.328 cv
433.355 517.012 433.133 516.617 432.984 516.137 cv
432.836 515.66 432.762 515.102 432.762 514.465 cv
432.762 513.867 432.836 513.328 432.992 512.844 cv
433.145 512.367 433.371 511.957 433.668 511.621 cv
433.961 511.285 434.316 511.027 434.73 510.848 cv
435.145 510.668 435.609 510.578 436.125 510.578 cv
436.676 510.578 437.145 510.668 437.531 510.844 cv
437.918 511.023 438.234 511.262 438.488 511.559 cv
438.734 511.859 438.918 512.211 439.035 512.609 cv
439.148 513.016 439.207 513.445 439.211 513.898 cv
cp
437.918 513.75 mo
437.934 513.074 437.781 512.543 437.465 512.16 cv
437.148 511.777 436.68 511.586 436.063 511.582 cv
435.738 511.586 435.457 511.645 435.219 511.762 cv
434.977 511.883 434.777 512.043 434.617 512.238 cv
434.453 512.437 434.328 512.668 434.242 512.93 cv
434.152 513.191 434.102 513.465 434.094 513.75 cv
cp
f
445.578 516.031 mo
445.574 516.395 445.508 516.715 445.379 516.992 cv
445.246 517.273 445.059 517.508 444.816 517.699 cv
444.57 517.895 444.277 518.039 443.941 518.137 cv
443.602 518.234 443.23 518.281 442.828 518.285 cv
442.574 518.281 442.336 518.262 442.113 518.227 cv
441.887 518.184 441.688 518.137 441.508 518.078 cv
441.328 518.02 441.176 517.957 441.051 517.891 cv
440.926 517.828 440.832 517.77 440.777 517.715 cv
440.719 517.664 440.68 517.594 440.656 517.496 cv
440.629 517.406 440.617 517.277 440.617 517.117 cv
440.617 517.02 440.621 516.937 440.633 516.867 cv
440.641 516.801 440.652 516.746 440.672 516.703 cv
440.684 516.664 440.707 516.633 440.734 516.613 cv
440.762 516.598 440.793 516.59 440.832 516.586 cv
440.887 516.59 440.973 516.625 441.086 516.691 cv
441.195 516.766 441.332 516.844 441.5 516.922 cv
441.66 517.008 441.852 517.082 442.078 517.152 cv
442.297 517.223 442.555 517.258 442.852 517.258 cv
443.066 517.258 443.266 517.234 443.445 517.187 cv
443.621 517.141 443.773 517.074 443.902 516.98 cv
444.031 516.895 444.133 516.777 444.203 516.633 cv
444.273 516.496 444.309 516.328 444.309 516.133 cv
444.309 515.937 444.258 515.773 444.156 515.637 cv
444.055 515.504 443.918 515.383 443.754 515.277 cv
443.586 515.176 443.402 515.086 443.195 515 cv
442.984 514.922 442.77 514.836 442.551 514.746 cv
442.332 514.66 442.117 514.559 441.906 514.445 cv
441.695 514.336 441.504 514.203 441.34 514.039 cv
441.168 513.883 441.035 513.687 440.938 513.461 cv
440.832 513.238 440.781 512.973 440.785 512.66 cv
440.781 512.387 440.836 512.121 440.945 511.867 cv
441.051 511.617 441.211 511.398 441.426 511.207 cv
441.637 511.02 441.902 510.867 442.223 510.75 cv
442.543 510.637 442.914 510.578 443.344 510.578 cv
443.527 510.578 443.715 510.594 443.902 510.625 cv
444.086 510.656 444.254 510.695 444.41 510.742 cv
444.559 510.789 444.688 510.84 444.797 510.895 cv
444.898 510.949 444.98 511 445.039 511.039 cv
445.09 511.086 445.125 511.121 445.148 511.148 cv
445.164 511.18 445.18 511.215 445.188 511.25 cv
445.195 511.293 445.203 511.34 445.211 511.395 cv
445.219 511.453 445.223 511.523 445.223 511.605 cv
445.223 511.695 445.219 511.773 445.211 511.836 cv
445.203 511.906 445.188 511.957 445.172 511.996 cv
445.148 512.039 445.129 512.07 445.105 512.086 cv
445.078 512.105 445.047 512.113 445.02 512.113 cv
444.969 512.113 444.902 512.086 444.816 512.027 cv
444.727 511.973 444.613 511.91 444.473 511.844 cv
444.332 511.781 444.164 511.723 443.977 511.66 cv
443.785 511.605 443.57 511.574 443.328 511.574 cv
443.105 511.574 442.914 511.602 442.75 511.648 cv
442.582 511.703 442.445 511.773 442.34 511.859 cv
442.234 511.953 442.152 512.059 442.102 512.184 cv
442.043 512.309 442.016 512.445 442.02 512.59 cv
442.016 512.793 442.066 512.961 442.172 513.098 cv
442.273 513.238 442.41 513.359 442.578 513.461 cv
442.742 513.566 442.934 513.66 443.148 513.742 cv
443.359 513.828 443.574 513.914 443.797 514 cv
444.016 514.09 444.234 514.191 444.453 514.297 cv
444.668 514.406 444.859 514.535 445.027 514.691 cv
445.191 514.848 445.324 515.035 445.426 515.254 cv
445.523 515.473 445.574 515.734 445.578 516.031 cv
cp
f
262.484 18.949 mo
262.48 19.102 262.477 19.227 262.465 19.324 cv
262.449 19.43 262.43 19.512 262.406 19.57 cv
262.383 19.637 262.352 19.684 262.313 19.707 cv
262.273 19.738 262.23 19.75 262.184 19.75 cv
257.117 19.75 li
256.941 19.75 256.797 19.699 256.684 19.598 cv
256.563 19.496 256.504 19.332 256.508 19.102 cv
256.508 10.312 li
256.504 10.086 256.563 9.922 256.684 9.81598 cv
256.797 9.71899 256.941 9.66803 257.117 9.664 cv
262.152 9.664 li
262.195 9.66803 262.238 9.67999 262.277 9.703 cv
262.313 9.72998 262.344 9.77698 262.371 9.84003 cv
262.395 9.90997 262.41 9.992 262.426 10.09 cv
262.434 10.195 262.441 10.324 262.445 10.477 cv
262.441 10.625 262.434 10.75 262.426 10.848 cv
262.41 10.953 262.395 11.035 262.371 11.094 cv
262.344 11.156 262.313 11.199 262.277 11.227 cv
262.238 11.258 262.195 11.273 262.152 11.27 cv
258.551 11.27 li
258.551 13.734 li
261.598 13.734 li
261.645 13.738 261.688 13.754 261.727 13.777 cv
261.766 13.809 261.797 13.852 261.824 13.91 cv
261.848 13.973 261.867 14.055 261.883 14.152 cv
261.895 14.254 261.902 14.375 261.902 14.52 cv
261.902 14.672 261.895 14.797 261.883 14.895 cv
261.867 14.996 261.848 15.074 261.824 15.133 cv
261.797 15.195 261.766 15.238 261.727 15.262 cv
261.688 15.289 261.645 15.305 261.598 15.301 cv
258.551 15.301 li
258.551 18.145 li
262.184 18.145 li
262.23 18.145 262.273 18.16 262.313 18.187 cv
262.352 18.219 262.383 18.266 262.406 18.324 cv
262.43 18.391 262.449 18.473 262.465 18.57 cv
262.477 18.676 262.48 18.801 262.484 18.949 cv
cp
f
270.82 19.484 mo
270.816 19.539 270.801 19.582 270.773 19.621 cv
270.738 19.66 270.688 19.695 270.617 19.719 cv
270.543 19.746 270.441 19.762 270.316 19.777 cv
270.188 19.789 270.031 19.797 269.848 19.797 cv
269.652 19.797 269.492 19.789 269.367 19.777 cv
269.238 19.762 269.137 19.746 269.066 19.719 cv
268.988 19.695 268.938 19.66 268.91 19.621 cv
268.875 19.582 268.859 19.539 268.863 19.484 cv
268.863 15.52 li
268.859 15.184 268.836 14.918 268.789 14.723 cv
268.738 14.531 268.664 14.367 268.574 14.23 cv
268.48 14.094 268.363 13.988 268.215 13.91 cv
268.066 13.836 267.891 13.797 267.695 13.797 cv
267.441 13.797 267.191 13.891 266.938 14.07 cv
266.684 14.254 266.418 14.516 266.145 14.863 cv
266.145 19.484 li
266.141 19.539 266.125 19.582 266.098 19.621 cv
266.063 19.66 266.008 19.695 265.938 19.719 cv
265.859 19.746 265.762 19.762 265.637 19.777 cv
265.512 19.789 265.352 19.797 265.164 19.797 cv
264.969 19.797 264.813 19.789 264.688 19.777 cv
264.563 19.762 264.461 19.746 264.387 19.719 cv
264.309 19.695 264.254 19.66 264.227 19.621 cv
264.191 19.582 264.176 19.539 264.18 19.484 cv
264.18 12.535 li
264.176 12.488 264.191 12.441 264.219 12.398 cv
264.242 12.363 264.289 12.332 264.359 12.301 cv
264.426 12.277 264.512 12.258 264.621 12.242 cv
264.727 12.234 264.859 12.227 265.023 12.223 cv
265.188 12.227 265.324 12.234 265.434 12.242 cv
265.539 12.258 265.625 12.277 265.688 12.301 cv
265.746 12.332 265.789 12.363 265.816 12.398 cv
265.84 12.441 265.852 12.488 265.855 12.535 cv
265.855 13.336 li
266.238 12.926 266.629 12.613 267.027 12.402 cv
267.422 12.195 267.84 12.094 268.273 12.09 cv
268.742 12.094 269.141 12.172 269.469 12.324 cv
269.793 12.484 270.055 12.695 270.254 12.961 cv
270.453 13.23 270.598 13.543 270.688 13.898 cv
270.773 14.258 270.816 14.687 270.82 15.191 cv
cp
f
279.172 15.809 mo
279.168 16.047 279.117 16.223 279.012 16.336 cv
278.902 16.453 278.754 16.512 278.574 16.508 cv
274.34 16.508 li
274.336 16.809 274.371 17.078 274.445 17.316 cv
274.512 17.559 274.625 17.762 274.781 17.93 cv
274.934 18.102 275.129 18.23 275.371 18.316 cv
275.609 18.406 275.898 18.449 276.242 18.449 cv
276.582 18.449 276.883 18.426 277.145 18.375 cv
277.402 18.328 277.629 18.273 277.82 18.211 cv
278.008 18.152 278.164 18.098 278.293 18.047 cv
278.414 18 278.516 17.977 278.598 17.973 cv
278.641 17.977 278.68 17.984 278.715 18 cv
278.742 18.02 278.77 18.051 278.789 18.098 cv
278.809 18.145 278.82 18.211 278.832 18.297 cv
278.836 18.383 278.84 18.492 278.844 18.621 cv
278.84 18.738 278.84 18.836 278.836 18.914 cv
278.828 18.996 278.82 19.062 278.813 19.117 cv
278.801 19.176 278.785 19.227 278.766 19.262 cv
278.746 19.305 278.719 19.34 278.688 19.375 cv
278.652 19.414 278.559 19.465 278.41 19.523 cv
278.254 19.59 278.063 19.652 277.832 19.707 cv
277.594 19.77 277.324 19.816 277.027 19.863 cv
276.723 19.902 276.402 19.926 276.063 19.93 cv
275.441 19.926 274.898 19.852 274.438 19.695 cv
273.969 19.543 273.582 19.305 273.273 18.988 cv
272.957 18.672 272.723 18.273 272.574 17.789 cv
272.418 17.309 272.344 16.742 272.348 16.086 cv
272.344 15.473 272.422 14.914 272.586 14.418 cv
272.742 13.922 272.977 13.504 273.289 13.156 cv
273.594 12.812 273.969 12.547 274.406 12.363 cv
274.844 12.184 275.336 12.094 275.891 12.09 cv
276.469 12.094 276.969 12.18 277.383 12.348 cv
277.797 12.523 278.133 12.762 278.398 13.062 cv
278.66 13.367 278.855 13.727 278.984 14.141 cv
279.105 14.559 279.168 15.008 279.172 15.496 cv
cp
277.27 15.246 mo
277.281 14.695 277.172 14.262 276.938 13.949 cv
276.703 13.637 276.336 13.48 275.844 13.477 cv
275.594 13.48 275.379 13.527 275.195 13.617 cv
275.008 13.715 274.855 13.84 274.734 13.996 cv
274.609 14.156 274.516 14.344 274.453 14.559 cv
274.387 14.773 274.348 15.004 274.34 15.246 cv
cp
f
285.246 13.18 mo
285.246 13.371 285.238 13.523 285.23 13.641 cv
285.215 13.762 285.199 13.855 285.184 13.922 cv
285.16 13.992 285.133 14.039 285.102 14.062 cv
285.063 14.09 285.02 14.102 284.973 14.102 cv
284.926 14.102 284.879 14.094 284.832 14.074 cv
284.777 14.059 284.719 14.039 284.656 14.016 cv
284.586 13.996 284.516 13.977 284.441 13.957 cv
284.359 13.941 284.273 13.934 284.184 13.93 cv
284.07 13.934 283.961 13.953 283.855 13.996 cv
283.746 14.043 283.633 14.113 283.52 14.203 cv
283.398 14.297 283.277 14.422 283.152 14.574 cv
283.023 14.734 282.887 14.926 282.742 15.152 cv
282.742 19.484 li
282.738 19.539 282.723 19.582 282.695 19.621 cv
282.66 19.66 282.605 19.695 282.535 19.719 cv
282.457 19.746 282.359 19.762 282.234 19.777 cv
282.109 19.789 281.949 19.797 281.762 19.797 cv
281.566 19.797 281.41 19.789 281.285 19.777 cv
281.16 19.762 281.059 19.746 280.984 19.719 cv
280.906 19.695 280.852 19.66 280.824 19.621 cv
280.789 19.582 280.773 19.539 280.777 19.484 cv
280.777 12.535 li
280.773 12.488 280.789 12.441 280.816 12.398 cv
280.84 12.363 280.887 12.332 280.957 12.301 cv
281.023 12.277 281.109 12.258 281.219 12.242 cv
281.324 12.234 281.457 12.227 281.621 12.223 cv
281.785 12.227 281.922 12.234 282.031 12.242 cv
282.137 12.258 282.223 12.277 282.285 12.301 cv
282.344 12.332 282.387 12.363 282.414 12.398 cv
282.438 12.441 282.449 12.488 282.453 12.535 cv
282.453 13.398 li
282.633 13.141 282.805 12.93 282.969 12.758 cv
283.125 12.594 283.281 12.457 283.43 12.355 cv
283.574 12.258 283.719 12.191 283.863 12.148 cv
284.008 12.113 284.152 12.094 284.301 12.09 cv
284.367 12.094 284.441 12.098 284.52 12.102 cv
284.598 12.113 284.676 12.125 284.762 12.141 cv
284.84 12.16 284.914 12.18 284.98 12.203 cv
285.039 12.227 285.086 12.254 285.117 12.277 cv
285.145 12.309 285.164 12.336 285.18 12.363 cv
285.191 12.398 285.203 12.441 285.215 12.492 cv
285.223 12.551 285.23 12.633 285.238 12.738 cv
285.242 12.848 285.246 12.996 285.246 13.18 cv
cp
f
292.422 13.016 mo
292.418 13.27 292.391 13.453 292.336 13.57 cv
292.277 13.691 292.207 13.75 292.129 13.75 cv
291.309 13.75 li
291.422 13.875 291.504 14.02 291.555 14.176 cv
291.602 14.336 291.625 14.5 291.629 14.668 cv
291.625 15.078 291.559 15.437 291.426 15.75 cv
291.289 16.066 291.094 16.332 290.844 16.543 cv
290.59 16.762 290.289 16.926 289.934 17.035 cv
289.574 17.152 289.176 17.207 288.746 17.203 cv
288.52 17.207 288.309 17.18 288.105 17.121 cv
287.902 17.07 287.746 17.008 287.637 16.93 cv
287.574 17 287.516 17.078 287.469 17.172 cv
287.418 17.266 287.395 17.371 287.398 17.48 cv
287.395 17.637 287.461 17.758 287.594 17.852 cv
287.723 17.949 287.91 18.004 288.152 18.012 cv
289.844 18.074 li
290.238 18.09 290.59 18.148 290.898 18.242 cv
291.207 18.344 291.469 18.477 291.68 18.648 cv
291.891 18.824 292.051 19.035 292.16 19.277 cv
292.27 19.523 292.324 19.797 292.328 20.109 cv
292.324 20.445 292.25 20.77 292.102 21.078 cv
291.953 21.379 291.727 21.641 291.426 21.867 cv
291.121 22.086 290.742 22.266 290.289 22.398 cv
289.832 22.527 289.301 22.59 288.699 22.594 cv
288.102 22.59 287.598 22.543 287.18 22.453 cv
286.762 22.355 286.418 22.227 286.152 22.062 cv
285.883 21.895 285.688 21.695 285.57 21.469 cv
285.445 21.234 285.387 20.98 285.387 20.707 cv
285.387 20.535 285.406 20.375 285.453 20.219 cv
285.492 20.062 285.559 19.91 285.648 19.77 cv
285.73 19.625 285.836 19.492 285.961 19.359 cv
286.086 19.23 286.227 19.105 286.391 18.984 cv
286.164 18.871 285.992 18.711 285.871 18.5 cv
285.75 18.297 285.691 18.07 285.691 17.824 cv
285.691 17.523 285.758 17.246 285.898 16.988 cv
286.035 16.738 286.219 16.508 286.445 16.305 cv
286.262 16.125 286.117 15.91 286.008 15.652 cv
285.898 15.402 285.844 15.082 285.848 14.699 cv
285.844 14.297 285.914 13.937 286.059 13.613 cv
286.199 13.297 286.398 13.027 286.656 12.805 cv
286.91 12.586 287.215 12.414 287.566 12.297 cv
287.918 12.18 288.309 12.121 288.738 12.121 cv
288.957 12.121 289.164 12.137 289.363 12.16 cv
289.563 12.191 289.75 12.227 289.922 12.27 cv
292.129 12.27 li
292.211 12.273 292.281 12.332 292.34 12.441 cv
292.391 12.559 292.418 12.75 292.422 13.016 cv
cp
289.906 14.66 mo
289.902 14.289 289.801 14 289.594 13.789 cv
289.383 13.586 289.09 13.48 288.715 13.477 cv
288.52 13.48 288.348 13.512 288.207 13.574 cv
288.059 13.641 287.938 13.73 287.844 13.84 cv
287.742 13.953 287.672 14.082 287.629 14.23 cv
287.578 14.379 287.555 14.535 287.559 14.691 cv
287.555 15.051 287.66 15.328 287.871 15.531 cv
288.078 15.738 288.367 15.844 288.738 15.84 cv
288.934 15.844 289.102 15.812 289.25 15.746 cv
289.391 15.687 289.512 15.602 289.613 15.488 cv
289.707 15.383 289.781 15.254 289.832 15.109 cv
289.879 14.969 289.902 14.82 289.906 14.66 cv
cp
290.367 20.211 mo
290.367 19.973 290.273 19.797 290.086 19.672 cv
289.898 19.551 289.641 19.48 289.313 19.469 cv
287.918 19.43 li
287.781 19.531 287.672 19.625 287.594 19.715 cv
287.512 19.805 287.449 19.891 287.402 19.977 cv
287.352 20.059 287.316 20.141 287.305 20.219 cv
287.285 20.297 287.277 20.375 287.281 20.461 cv
287.277 20.715 287.41 20.914 287.672 21.051 cv
287.934 21.184 288.305 21.25 288.785 21.254 cv
289.078 21.25 289.324 21.219 289.531 21.164 cv
289.73 21.102 289.895 21.023 290.023 20.926 cv
290.145 20.824 290.234 20.715 290.289 20.594 cv
290.34 20.473 290.367 20.344 290.367 20.211 cv
cp
f
297.754 19.75 mo
296.91 22.211 li
296.859 22.34 296.734 22.434 296.527 22.492 cv
296.32 22.547 296.016 22.574 295.617 22.578 cv
295.406 22.574 295.238 22.566 295.117 22.551 cv
294.992 22.531 294.902 22.5 294.84 22.461 cv
294.777 22.418 294.742 22.367 294.738 22.305 cv
294.73 22.242 294.746 22.168 294.785 22.082 cv
295.711 19.75 li
295.641 19.719 295.578 19.672 295.527 19.605 cv
295.469 19.543 295.43 19.473 295.406 19.398 cv
293.016 13.008 li
292.945 12.828 292.91 12.691 292.914 12.594 cv
292.91 12.5 292.941 12.422 293.008 12.367 cv
293.066 12.312 293.172 12.277 293.32 12.254 cv
293.465 12.238 293.66 12.227 293.91 12.223 cv
294.129 12.227 294.309 12.23 294.441 12.234 cv
294.57 12.246 294.672 12.266 294.746 12.293 cv
294.816 12.328 294.871 12.375 294.91 12.437 cv
294.945 12.504 294.98 12.598 295.02 12.715 cv
296.652 17.367 li
296.676 17.367 li
298.176 12.621 li
298.199 12.488 298.238 12.398 298.293 12.352 cv
298.34 12.309 298.422 12.277 298.539 12.254 cv
298.648 12.238 298.852 12.227 299.141 12.223 cv
299.363 12.227 299.547 12.238 299.695 12.254 cv
299.84 12.277 299.949 12.316 300.023 12.371 cv
300.09 12.434 300.125 12.508 300.129 12.602 cv
300.125 12.695 300.105 12.809 300.066 12.937 cv
cp
f
312.195 18.223 mo
312.195 18.355 312.191 18.465 312.184 18.555 cv
312.176 18.648 312.164 18.727 312.148 18.789 cv
312.133 18.855 312.109 18.914 312.086 18.957 cv
312.055 19.004 312.016 19.055 311.961 19.113 cv
311.902 19.176 311.789 19.254 311.629 19.344 cv
311.461 19.441 311.262 19.531 311.027 19.613 cv
310.789 19.703 310.52 19.77 310.219 19.828 cv
309.91 19.883 309.582 19.914 309.234 19.914 cv
308.539 19.914 307.914 19.809 307.359 19.594 cv
306.801 19.383 306.328 19.066 305.941 18.641 cv
305.551 18.219 305.254 17.687 305.047 17.055 cv
304.84 16.422 304.734 15.684 304.738 14.84 cv
304.734 13.984 304.848 13.227 305.078 12.559 cv
305.305 11.895 305.625 11.336 306.035 10.883 cv
306.445 10.434 306.938 10.09 307.512 9.85498 cv
308.086 9.625 308.719 9.508 309.414 9.50403 cv
309.688 9.508 309.957 9.53101 310.223 9.57397 cv
310.48 9.62097 310.723 9.67999 310.941 9.75403 cv
311.16 9.83197 311.359 9.922 311.539 10.016 cv
311.715 10.117 311.836 10.199 311.91 10.27 cv
311.977 10.34 312.027 10.398 312.055 10.445 cv
312.078 10.492 312.098 10.555 312.117 10.625 cv
312.129 10.703 312.141 10.789 312.152 10.883 cv
312.156 10.984 312.16 11.105 312.164 11.246 cv
312.16 11.406 312.156 11.539 312.148 11.645 cv
312.137 11.758 312.117 11.844 312.094 11.91 cv
312.066 11.98 312.035 12.031 312 12.059 cv
311.961 12.094 311.918 12.109 311.875 12.105 cv
311.793 12.109 311.695 12.062 311.578 11.969 cv
311.457 11.879 311.301 11.777 311.113 11.664 cv
310.922 11.555 310.699 11.453 310.438 11.359 cv
310.172 11.27 309.859 11.227 309.5 11.223 cv
309.098 11.227 308.738 11.309 308.426 11.469 cv
308.109 11.637 307.844 11.871 307.625 12.172 cv
307.402 12.48 307.234 12.848 307.121 13.277 cv
307.004 13.711 306.945 14.195 306.949 14.73 cv
306.945 15.328 307.008 15.844 307.133 16.273 cv
307.254 16.711 307.426 17.066 307.656 17.344 cv
307.879 17.625 308.152 17.832 308.473 17.969 cv
308.789 18.109 309.148 18.18 309.555 18.176 cv
309.914 18.18 310.23 18.137 310.496 18.047 cv
310.762 17.965 310.988 17.871 311.176 17.762 cv
311.363 17.66 311.52 17.566 311.645 17.484 cv
311.766 17.402 311.859 17.359 311.93 17.359 cv
311.98 17.359 312.023 17.371 312.055 17.391 cv
312.086 17.41 312.109 17.449 312.133 17.512 cv
312.148 17.574 312.164 17.664 312.18 17.773 cv
312.188 17.891 312.195 18.039 312.195 18.223 cv
cp
f
320.574 15.937 mo
320.57 16.535 320.492 17.078 320.34 17.562 cv
320.18 18.055 319.945 18.473 319.629 18.824 cv
319.313 19.176 318.914 19.449 318.438 19.641 cv
317.957 19.832 317.398 19.926 316.762 19.93 cv
316.141 19.926 315.602 19.844 315.148 19.672 cv
314.688 19.504 314.309 19.254 314.012 18.926 cv
313.707 18.602 313.484 18.199 313.34 17.719 cv
313.195 17.242 313.125 16.695 313.125 16.078 cv
313.125 15.488 313.203 14.949 313.359 14.457 cv
313.516 13.969 313.754 13.547 314.074 13.195 cv
314.391 12.848 314.785 12.574 315.262 12.379 cv
315.734 12.187 316.293 12.094 316.934 12.09 cv
317.559 12.094 318.098 12.176 318.555 12.344 cv
319.012 12.516 319.391 12.766 319.688 13.09 cv
319.984 13.418 320.207 13.82 320.355 14.297 cv
320.5 14.777 320.57 15.324 320.574 15.937 cv
cp
318.555 16.016 mo
318.551 15.68 318.523 15.363 318.473 15.07 cv
318.414 14.785 318.32 14.535 318.195 14.32 cv
318.063 14.109 317.891 13.941 317.68 13.82 cv
317.461 13.703 317.191 13.645 316.863 13.641 cv
316.574 13.645 316.32 13.699 316.102 13.801 cv
315.883 13.91 315.703 14.066 315.563 14.27 cv
315.422 14.477 315.316 14.723 315.246 15.008 cv
315.176 15.301 315.141 15.629 315.141 15.992 cv
315.141 16.34 315.168 16.656 315.227 16.941 cv
315.281 17.234 315.375 17.484 315.504 17.695 cv
315.629 17.91 315.801 18.074 316.023 18.187 cv
316.238 18.309 316.508 18.367 316.832 18.363 cv
317.125 18.367 317.383 18.312 317.605 18.203 cv
317.82 18.098 318 17.945 318.141 17.738 cv
318.281 17.539 318.383 17.293 318.453 17.004 cv
318.516 16.719 318.551 16.391 318.555 16.016 cv
cp
f
328.77 19.484 mo
328.766 19.539 328.75 19.582 328.723 19.621 cv
328.688 19.66 328.637 19.695 328.566 19.719 cv
328.492 19.746 328.391 19.762 328.266 19.777 cv
328.137 19.789 327.98 19.797 327.797 19.797 cv
327.602 19.797 327.441 19.789 327.316 19.777 cv
327.188 19.762 327.086 19.746 327.016 19.719 cv
326.938 19.695 326.887 19.66 326.859 19.621 cv
326.824 19.582 326.809 19.539 326.813 19.484 cv
326.813 15.52 li
326.809 15.184 326.785 14.918 326.738 14.723 cv
326.688 14.531 326.613 14.367 326.523 14.23 cv
326.43 14.094 326.313 13.988 326.164 13.91 cv
326.016 13.836 325.84 13.797 325.645 13.797 cv
325.391 13.797 325.141 13.891 324.887 14.07 cv
324.633 14.254 324.367 14.516 324.094 14.863 cv
324.094 19.484 li
324.09 19.539 324.074 19.582 324.047 19.621 cv
324.012 19.66 323.957 19.695 323.887 19.719 cv
323.809 19.746 323.711 19.762 323.586 19.777 cv
323.461 19.789 323.301 19.797 323.113 19.797 cv
322.918 19.797 322.762 19.789 322.637 19.777 cv
322.512 19.762 322.41 19.746 322.336 19.719 cv
322.258 19.695 322.203 19.66 322.176 19.621 cv
322.141 19.582 322.125 19.539 322.129 19.484 cv
322.129 12.535 li
322.125 12.488 322.141 12.441 322.168 12.398 cv
322.191 12.363 322.238 12.332 322.309 12.301 cv
322.375 12.277 322.461 12.258 322.57 12.242 cv
322.676 12.234 322.809 12.227 322.973 12.223 cv
323.137 12.227 323.273 12.234 323.383 12.242 cv
323.488 12.258 323.574 12.277 323.637 12.301 cv
323.695 12.332 323.738 12.363 323.766 12.398 cv
323.789 12.441 323.801 12.488 323.805 12.535 cv
323.805 13.336 li
324.188 12.926 324.578 12.613 324.977 12.402 cv
325.371 12.195 325.789 12.094 326.223 12.09 cv
326.691 12.094 327.09 12.172 327.418 12.324 cv
327.742 12.484 328.004 12.695 328.203 12.961 cv
328.402 13.23 328.547 13.543 328.637 13.898 cv
328.723 14.258 328.766 14.687 328.77 15.191 cv
cp
f
335.594 17.52 mo
335.59 17.918 335.516 18.266 335.371 18.566 cv
335.223 18.867 335.016 19.121 334.746 19.32 cv
334.473 19.527 334.152 19.676 333.785 19.777 cv
333.418 19.875 333.016 19.926 332.586 19.93 cv
332.32 19.926 332.074 19.906 331.84 19.871 cv
331.605 19.828 331.395 19.781 331.207 19.723 cv
331.02 19.664 330.863 19.602 330.738 19.539 cv
330.613 19.477 330.52 19.418 330.465 19.363 cv
330.406 19.309 330.363 19.227 330.336 19.109 cv
330.301 18.996 330.285 18.82 330.289 18.59 cv
330.285 18.441 330.293 18.32 330.305 18.227 cv
330.313 18.137 330.328 18.066 330.352 18.008 cv
330.371 17.957 330.395 17.918 330.43 17.898 cv
330.457 17.883 330.496 17.875 330.543 17.871 cv
330.598 17.875 330.684 17.906 330.797 17.969 cv
330.906 18.035 331.043 18.109 331.215 18.184 cv
331.379 18.266 331.574 18.336 331.793 18.402 cv
332.012 18.473 332.262 18.508 332.547 18.504 cv
332.723 18.508 332.879 18.488 333.02 18.449 cv
333.152 18.414 333.273 18.363 333.379 18.293 cv
333.477 18.227 333.551 18.141 333.605 18.035 cv
333.652 17.934 333.68 17.812 333.684 17.676 cv
333.68 17.52 333.633 17.387 333.539 17.277 cv
333.445 17.168 333.316 17.07 333.16 16.984 cv
332.996 16.902 332.816 16.824 332.621 16.75 cv
332.418 16.68 332.215 16.602 332.004 16.508 cv
331.793 16.422 331.586 16.32 331.391 16.203 cv
331.188 16.094 331.008 15.953 330.852 15.785 cv
330.688 15.621 330.563 15.422 330.469 15.184 cv
330.375 14.953 330.328 14.672 330.328 14.34 cv
330.328 14.012 330.391 13.707 330.52 13.426 cv
330.648 13.152 330.836 12.914 331.082 12.715 cv
331.324 12.52 331.621 12.367 331.973 12.254 cv
332.32 12.148 332.715 12.094 333.156 12.09 cv
333.371 12.094 333.582 12.109 333.789 12.137 cv
333.992 12.172 334.18 12.211 334.348 12.254 cv
334.512 12.305 334.652 12.355 334.77 12.406 cv
334.883 12.465 334.965 12.512 335.016 12.547 cv
335.063 12.59 335.098 12.629 335.121 12.664 cv
335.141 12.707 335.152 12.754 335.164 12.805 cv
335.172 12.859 335.184 12.926 335.191 13.004 cv
335.199 13.09 335.203 13.187 335.203 13.305 cv
335.203 13.445 335.199 13.562 335.191 13.648 cv
335.184 13.742 335.168 13.812 335.152 13.859 cv
335.133 13.914 335.109 13.949 335.082 13.965 cv
335.047 13.988 335.012 13.996 334.973 13.992 cv
334.922 13.996 334.848 13.969 334.754 13.91 cv
334.652 13.859 334.531 13.801 334.383 13.734 cv
334.234 13.676 334.063 13.617 333.867 13.559 cv
333.672 13.508 333.449 13.48 333.203 13.477 cv
333.023 13.48 332.871 13.5 332.742 13.531 cv
332.609 13.57 332.5 13.621 332.422 13.687 cv
332.336 13.758 332.273 13.836 332.234 13.926 cv
332.188 14.02 332.168 14.117 332.172 14.219 cv
332.168 14.379 332.219 14.516 332.32 14.621 cv
332.418 14.734 332.547 14.828 332.711 14.91 cv
332.871 14.996 333.055 15.074 333.262 15.145 cv
333.465 15.219 333.672 15.301 333.883 15.383 cv
334.09 15.473 334.297 15.57 334.508 15.684 cv
334.711 15.797 334.895 15.937 335.055 16.102 cv
335.215 16.27 335.344 16.469 335.445 16.699 cv
335.539 16.934 335.59 17.207 335.594 17.52 cv
cp
f
343.66 19.484 mo
343.656 19.539 343.645 19.582 343.621 19.621 cv
343.594 19.66 343.547 19.695 343.484 19.719 cv
343.418 19.746 343.332 19.762 343.227 19.777 cv
343.121 19.789 342.988 19.797 342.828 19.797 cv
342.652 19.797 342.512 19.789 342.41 19.777 cv
342.301 19.762 342.219 19.746 342.156 19.719 cv
342.094 19.695 342.047 19.66 342.023 19.621 cv
341.992 19.582 341.98 19.539 341.984 19.484 cv
341.984 18.684 li
341.598 19.098 341.207 19.41 340.813 19.617 cv
340.41 19.824 340 19.926 339.578 19.93 cv
339.098 19.926 338.695 19.852 338.371 19.695 cv
338.047 19.543 337.785 19.328 337.586 19.059 cv
337.383 18.789 337.238 18.477 337.156 18.117 cv
337.066 17.762 337.023 17.32 337.027 16.789 cv
337.027 12.535 li
337.023 12.488 337.039 12.441 337.07 12.398 cv
337.098 12.363 337.148 12.332 337.227 12.301 cv
337.301 12.277 337.402 12.258 337.531 12.242 cv
337.656 12.234 337.813 12.227 338.004 12.223 cv
338.191 12.227 338.352 12.234 338.477 12.242 cv
338.602 12.258 338.699 12.277 338.777 12.301 cv
338.848 12.332 338.902 12.363 338.938 12.398 cv
338.965 12.441 338.98 12.488 338.984 12.535 cv
338.984 16.461 li
338.98 16.828 339.004 17.105 339.055 17.297 cv
339.098 17.488 339.168 17.652 339.27 17.789 cv
339.363 17.93 339.488 18.035 339.637 18.109 cv
339.785 18.187 339.957 18.227 340.152 18.223 cv
340.402 18.227 340.652 18.137 340.906 17.949 cv
341.156 17.77 341.426 17.504 341.711 17.156 cv
341.711 12.535 li
341.711 12.488 341.723 12.441 341.754 12.398 cv
341.777 12.363 341.832 12.332 341.91 12.301 cv
341.984 12.277 342.082 12.258 342.211 12.242 cv
342.332 12.234 342.492 12.227 342.688 12.223 cv
342.879 12.227 343.035 12.234 343.16 12.242 cv
343.281 12.258 343.383 12.277 343.457 12.301 cv
343.527 12.332 343.578 12.363 343.613 12.398 cv
343.641 12.441 343.656 12.488 343.66 12.535 cv
cp
f
356.602 19.484 mo
356.598 19.539 356.582 19.582 356.555 19.621 cv
356.52 19.66 356.469 19.695 356.398 19.719 cv
356.324 19.746 356.223 19.762 356.102 19.777 cv
355.977 19.789 355.82 19.797 355.629 19.797 cv
355.43 19.797 355.27 19.789 355.145 19.777 cv
355.02 19.762 354.918 19.746 354.844 19.719 cv
354.766 19.695 354.715 19.66 354.688 19.621 cv
354.66 19.582 354.645 19.539 354.648 19.484 cv
354.648 15.363 li
354.645 15.133 354.625 14.918 354.582 14.723 cv
354.535 14.531 354.465 14.367 354.379 14.23 cv
354.285 14.094 354.172 13.988 354.035 13.91 cv
353.895 13.836 353.73 13.797 353.539 13.797 cv
353.305 13.797 353.066 13.891 352.828 14.07 cv
352.59 14.254 352.332 14.516 352.051 14.863 cv
352.051 19.484 li
352.051 19.539 352.035 19.582 352.004 19.621 cv
351.973 19.66 351.918 19.695 351.844 19.719 cv
351.766 19.746 351.664 19.762 351.543 19.777 cv
351.418 19.789 351.266 19.797 351.078 19.797 cv
350.883 19.797 350.723 19.789 350.602 19.777 cv
350.473 19.762 350.371 19.746 350.301 19.719 cv
350.223 19.695 350.172 19.66 350.141 19.621 cv
350.109 19.582 350.094 19.539 350.094 19.484 cv
350.094 15.363 li
350.094 15.133 350.07 14.918 350.027 14.723 cv
349.984 14.531 349.918 14.367 349.832 14.23 cv
349.738 14.094 349.625 13.988 349.488 13.91 cv
349.344 13.836 349.18 13.797 348.996 13.797 cv
348.754 13.797 348.516 13.891 348.277 14.07 cv
348.039 14.254 347.781 14.516 347.508 14.863 cv
347.508 19.484 li
347.504 19.539 347.488 19.582 347.461 19.621 cv
347.426 19.66 347.371 19.695 347.301 19.719 cv
347.223 19.746 347.125 19.762 347 19.777 cv
346.875 19.789 346.715 19.797 346.527 19.797 cv
346.332 19.797 346.176 19.789 346.051 19.777 cv
345.926 19.762 345.824 19.746 345.75 19.719 cv
345.672 19.695 345.617 19.66 345.59 19.621 cv
345.555 19.582 345.539 19.539 345.543 19.484 cv
345.543 12.535 li
345.539 12.488 345.555 12.441 345.582 12.398 cv
345.605 12.363 345.652 12.332 345.723 12.301 cv
345.789 12.277 345.875 12.258 345.984 12.242 cv
346.09 12.234 346.223 12.227 346.387 12.223 cv
346.551 12.227 346.688 12.234 346.797 12.242 cv
346.902 12.258 346.988 12.277 347.051 12.301 cv
347.109 12.332 347.152 12.363 347.18 12.398 cv
347.203 12.441 347.215 12.488 347.219 12.535 cv
347.219 13.336 li
347.602 12.926 347.984 12.613 348.367 12.402 cv
348.746 12.195 349.148 12.094 349.566 12.09 cv
349.852 12.094 350.105 12.121 350.336 12.18 cv
350.563 12.242 350.77 12.328 350.949 12.437 cv
351.129 12.551 351.281 12.687 351.41 12.84 cv
351.539 12.996 351.648 13.168 351.738 13.359 cv
351.945 13.137 352.148 12.945 352.352 12.785 cv
352.547 12.625 352.746 12.492 352.941 12.391 cv
353.137 12.289 353.332 12.215 353.527 12.164 cv
353.723 12.117 353.922 12.094 354.125 12.09 cv
354.586 12.094 354.973 12.172 355.293 12.324 cv
355.605 12.484 355.863 12.695 356.059 12.961 cv
356.254 13.23 356.391 13.543 356.477 13.898 cv
356.555 14.258 356.598 14.637 356.602 15.035 cv
cp
f
365.52 15.906 mo
365.52 16.527 365.453 17.086 365.32 17.582 cv
365.188 18.078 364.992 18.5 364.738 18.848 cv
364.484 19.195 364.168 19.465 363.789 19.648 cv
363.406 19.836 362.973 19.926 362.488 19.93 cv
362.281 19.926 362.094 19.906 361.93 19.871 cv
361.758 19.828 361.594 19.77 361.438 19.691 cv
361.277 19.613 361.121 19.516 360.969 19.391 cv
360.809 19.273 360.648 19.133 360.484 18.969 cv
360.484 22.242 li
360.48 22.289 360.465 22.336 360.438 22.383 cv
360.402 22.422 360.348 22.457 360.277 22.488 cv
360.199 22.512 360.102 22.535 359.977 22.555 cv
359.852 22.566 359.691 22.574 359.504 22.578 cv
359.309 22.574 359.152 22.566 359.027 22.555 cv
358.902 22.535 358.801 22.512 358.727 22.488 cv
358.648 22.457 358.594 22.422 358.566 22.383 cv
358.531 22.336 358.516 22.289 358.52 22.242 cv
358.52 12.535 li
358.516 12.488 358.531 12.441 358.559 12.398 cv
358.582 12.363 358.625 12.332 358.695 12.301 cv
358.758 12.277 358.844 12.258 358.953 12.242 cv
359.055 12.234 359.191 12.227 359.355 12.223 cv
359.512 12.227 359.641 12.234 359.746 12.242 cv
359.852 12.258 359.938 12.277 360.004 12.301 cv
360.066 12.332 360.113 12.363 360.141 12.398 cv
360.164 12.441 360.176 12.488 360.18 12.535 cv
360.18 13.352 li
360.379 13.145 360.578 12.965 360.777 12.805 cv
360.969 12.648 361.168 12.516 361.371 12.406 cv
361.574 12.305 361.781 12.223 362 12.168 cv
362.211 12.117 362.441 12.094 362.691 12.09 cv
363.195 12.094 363.629 12.191 363.992 12.391 cv
364.348 12.594 364.641 12.871 364.867 13.215 cv
365.09 13.566 365.254 13.969 365.363 14.43 cv
365.465 14.891 365.52 15.383 365.52 15.906 cv
cp
363.477 16.047 mo
363.473 15.754 363.453 15.473 363.41 15.195 cv
363.363 14.926 363.285 14.684 363.184 14.469 cv
363.074 14.258 362.934 14.086 362.762 13.957 cv
362.586 13.832 362.371 13.77 362.113 13.766 cv
361.98 13.77 361.852 13.789 361.727 13.824 cv
361.598 13.867 361.469 13.93 361.336 14.016 cv
361.203 14.105 361.066 14.219 360.93 14.359 cv
360.785 14.5 360.637 14.676 360.484 14.879 cv
360.484 17.172 li
360.758 17.52 361.02 17.789 361.27 17.977 cv
361.516 18.168 361.777 18.262 362.051 18.262 cv
362.305 18.262 362.52 18.199 362.703 18.066 cv
362.879 17.941 363.027 17.77 363.141 17.559 cv
363.254 17.348 363.336 17.109 363.395 16.844 cv
363.445 16.578 363.473 16.312 363.477 16.047 cv
cp
f
371.016 18.801 mo
371.016 19.027 371 19.203 370.973 19.324 cv
370.941 19.449 370.902 19.535 370.859 19.582 cv
370.809 19.633 370.742 19.676 370.652 19.715 cv
370.559 19.754 370.449 19.785 370.332 19.816 cv
370.207 19.84 370.074 19.863 369.934 19.883 cv
369.789 19.895 369.648 19.902 369.504 19.906 cv
369.113 19.902 368.773 19.852 368.488 19.758 cv
368.203 19.656 367.969 19.508 367.781 19.301 cv
367.594 19.098 367.453 18.84 367.367 18.527 cv
367.273 18.219 367.23 17.848 367.234 17.418 cv
367.234 13.859 li
366.402 13.859 li
366.301 13.863 366.227 13.801 366.176 13.676 cv
366.121 13.555 366.094 13.352 366.098 13.062 cv
366.094 12.914 366.102 12.785 366.117 12.684 cv
366.129 12.582 366.148 12.5 366.176 12.437 cv
366.199 12.379 366.23 12.336 366.273 12.309 cv
366.309 12.285 366.355 12.273 366.41 12.27 cv
367.234 12.27 li
367.234 10.719 li
367.23 10.672 367.246 10.625 367.277 10.578 cv
367.305 10.539 367.355 10.504 367.434 10.473 cv
367.508 10.449 367.609 10.426 367.738 10.41 cv
367.863 10.398 368.02 10.395 368.211 10.391 cv
368.398 10.395 368.559 10.398 368.688 10.41 cv
368.813 10.426 368.914 10.449 368.988 10.473 cv
369.059 10.504 369.109 10.539 369.145 10.578 cv
369.172 10.625 369.188 10.672 369.191 10.719 cv
369.191 12.27 li
370.703 12.27 li
370.754 12.273 370.801 12.285 370.84 12.309 cv
370.879 12.336 370.91 12.379 370.938 12.437 cv
370.961 12.5 370.98 12.582 370.996 12.684 cv
371.008 12.785 371.016 12.914 371.016 13.062 cv
371.016 13.352 370.988 13.555 370.938 13.676 cv
370.883 13.801 370.809 13.863 370.711 13.859 cv
369.191 13.859 li
369.191 17.125 li
369.188 17.504 369.246 17.789 369.371 17.977 cv
369.488 18.168 369.703 18.262 370.008 18.262 cv
370.109 18.262 370.203 18.254 370.289 18.234 cv
370.371 18.219 370.445 18.199 370.512 18.172 cv
370.574 18.152 370.629 18.129 370.676 18.109 cv
370.719 18.094 370.758 18.086 370.797 18.082 cv
370.824 18.086 370.855 18.094 370.887 18.109 cv
370.914 18.129 370.934 18.168 370.953 18.219 cv
370.965 18.277 370.98 18.352 370.996 18.441 cv
371.008 18.539 371.016 18.656 371.016 18.801 cv
cp
f
374.402 19.484 mo
374.398 19.539 374.383 19.582 374.355 19.621 cv
374.32 19.66 374.266 19.695 374.195 19.719 cv
374.117 19.746 374.02 19.762 373.895 19.777 cv
373.77 19.789 373.609 19.797 373.422 19.797 cv
373.227 19.797 373.07 19.789 372.945 19.777 cv
372.82 19.762 372.719 19.746 372.645 19.719 cv
372.566 19.695 372.512 19.66 372.484 19.621 cv
372.449 19.582 372.434 19.539 372.438 19.484 cv
372.438 12.551 li
372.434 12.5 372.449 12.453 372.484 12.414 cv
372.512 12.375 372.566 12.344 372.645 12.312 cv
372.719 12.289 372.82 12.266 372.945 12.246 cv
373.07 12.234 373.227 12.227 373.422 12.223 cv
373.609 12.227 373.77 12.234 373.895 12.246 cv
374.02 12.266 374.117 12.289 374.195 12.312 cv
374.266 12.344 374.32 12.375 374.355 12.414 cv
374.383 12.453 374.398 12.5 374.402 12.551 cv
cp
374.551 10.18 mo
374.551 10.578 374.469 10.852 374.309 11 cv
374.145 11.152 373.848 11.227 373.414 11.223 cv
372.969 11.227 372.668 11.152 372.52 11.008 cv
372.363 10.863 372.289 10.602 372.289 10.219 cv
372.289 9.82397 372.367 9.55103 372.527 9.39801 cv
372.684 9.24597 372.984 9.16803 373.43 9.16803 cv
373.863 9.16803 374.16 9.242 374.316 9.39099 cv
374.473 9.539 374.551 9.80499 374.551 10.18 cv
cp
f
383.395 15.937 mo
383.391 16.535 383.313 17.078 383.16 17.562 cv
383 18.055 382.766 18.473 382.449 18.824 cv
382.133 19.176 381.734 19.449 381.258 19.641 cv
380.777 19.832 380.219 19.926 379.582 19.93 cv
378.961 19.926 378.422 19.844 377.969 19.672 cv
377.508 19.504 377.129 19.254 376.832 18.926 cv
376.527 18.602 376.305 18.199 376.16 17.719 cv
376.016 17.242 375.945 16.695 375.945 16.078 cv
375.945 15.488 376.023 14.949 376.18 14.457 cv
376.336 13.969 376.574 13.547 376.895 13.195 cv
377.211 12.848 377.605 12.574 378.082 12.379 cv
378.555 12.187 379.113 12.094 379.754 12.09 cv
380.379 12.094 380.918 12.176 381.375 12.344 cv
381.832 12.516 382.211 12.766 382.508 13.09 cv
382.805 13.418 383.027 13.82 383.176 14.297 cv
383.32 14.777 383.391 15.324 383.395 15.937 cv
cp
381.375 16.016 mo
381.371 15.68 381.344 15.363 381.293 15.07 cv
381.234 14.785 381.141 14.535 381.016 14.32 cv
380.883 14.109 380.711 13.941 380.5 13.82 cv
380.281 13.703 380.012 13.645 379.684 13.641 cv
379.395 13.645 379.141 13.699 378.922 13.801 cv
378.703 13.91 378.523 14.066 378.383 14.27 cv
378.242 14.477 378.137 14.723 378.066 15.008 cv
377.996 15.301 377.961 15.629 377.961 15.992 cv
377.961 16.34 377.988 16.656 378.047 16.941 cv
378.102 17.234 378.195 17.484 378.324 17.695 cv
378.449 17.91 378.621 18.074 378.844 18.187 cv
379.059 18.309 379.328 18.367 379.652 18.363 cv
379.945 18.367 380.203 18.312 380.426 18.203 cv
380.641 18.098 380.82 17.945 380.961 17.738 cv
381.102 17.539 381.203 17.293 381.273 17.004 cv
381.336 16.719 381.371 16.391 381.375 16.016 cv
cp
f
391.637 19.484 mo
391.633 19.539 391.617 19.582 391.59 19.621 cv
391.555 19.66 391.504 19.695 391.434 19.719 cv
391.359 19.746 391.258 19.762 391.133 19.777 cv
391.004 19.789 390.848 19.797 390.664 19.797 cv
390.469 19.797 390.309 19.789 390.184 19.777 cv
390.055 19.762 389.953 19.746 389.883 19.719 cv
389.805 19.695 389.754 19.66 389.727 19.621 cv
389.691 19.582 389.676 19.539 389.68 19.484 cv
389.68 15.52 li
389.676 15.184 389.652 14.918 389.605 14.723 cv
389.555 14.531 389.48 14.367 389.391 14.23 cv
389.297 14.094 389.18 13.988 389.031 13.91 cv
388.883 13.836 388.707 13.797 388.512 13.797 cv
388.258 13.797 388.008 13.891 387.754 14.07 cv
387.5 14.254 387.234 14.516 386.961 14.863 cv
386.961 19.484 li
386.957 19.539 386.941 19.582 386.914 19.621 cv
386.879 19.66 386.824 19.695 386.754 19.719 cv
386.676 19.746 386.578 19.762 386.453 19.777 cv
386.328 19.789 386.168 19.797 385.98 19.797 cv
385.785 19.797 385.629 19.789 385.504 19.777 cv
385.379 19.762 385.277 19.746 385.203 19.719 cv
385.125 19.695 385.07 19.66 385.043 19.621 cv
385.008 19.582 384.992 19.539 384.996 19.484 cv
384.996 12.535 li
384.992 12.488 385.008 12.441 385.035 12.398 cv
385.059 12.363 385.105 12.332 385.176 12.301 cv
385.242 12.277 385.328 12.258 385.438 12.242 cv
385.543 12.234 385.676 12.227 385.84 12.223 cv
386.004 12.227 386.141 12.234 386.25 12.242 cv
386.355 12.258 386.441 12.277 386.504 12.301 cv
386.563 12.332 386.605 12.363 386.633 12.398 cv
386.656 12.441 386.668 12.488 386.672 12.535 cv
386.672 13.336 li
387.055 12.926 387.445 12.613 387.844 12.402 cv
388.238 12.195 388.656 12.094 389.09 12.09 cv
389.559 12.094 389.957 12.172 390.285 12.324 cv
390.609 12.484 390.871 12.695 391.07 12.961 cv
391.27 13.23 391.414 13.543 391.504 13.898 cv
391.59 14.258 391.633 14.687 391.637 15.191 cv
cp
f
400.957 15.832 mo
400.953 16.133 400.926 16.344 400.871 16.461 cv
400.813 16.586 400.723 16.645 400.598 16.641 cv
397.355 16.641 li
397.227 16.645 397.133 16.582 397.078 16.457 cv
397.016 16.336 396.988 16.129 396.992 15.832 cv
396.988 15.543 397.016 15.336 397.078 15.215 cv
397.133 15.098 397.227 15.039 397.355 15.035 cv
400.598 15.035 li
400.66 15.039 400.711 15.051 400.758 15.074 cv
400.797 15.102 400.836 15.148 400.871 15.207 cv
400.898 15.273 400.922 15.355 400.938 15.457 cv
400.949 15.562 400.953 15.687 400.957 15.832 cv
cp
f
413.629 19.484 mo
413.629 19.547 413.617 19.594 413.598 19.629 cv
413.578 19.672 413.531 19.703 413.453 19.727 cv
413.375 19.75 413.258 19.766 413.109 19.781 cv
412.953 19.789 412.75 19.797 412.492 19.797 cv
412.273 19.797 412.098 19.789 411.969 19.781 cv
411.84 19.766 411.738 19.75 411.664 19.723 cv
411.586 19.695 411.531 19.66 411.504 19.613 cv
411.469 19.574 411.445 19.52 411.426 19.453 cv
410.52 17.203 li
410.41 16.949 410.305 16.723 410.203 16.523 cv
410.094 16.328 409.98 16.164 409.855 16.031 cv
409.727 15.902 409.578 15.801 409.414 15.73 cv
409.246 15.664 409.055 15.633 408.84 15.629 cv
408.199 15.629 li
408.199 19.469 li
408.195 19.523 408.18 19.57 408.148 19.609 cv
408.113 19.652 408.059 19.687 407.98 19.711 cv
407.902 19.738 407.797 19.758 407.668 19.773 cv
407.535 19.789 407.371 19.797 407.172 19.797 cv
406.973 19.797 406.805 19.789 406.676 19.773 cv
406.539 19.758 406.434 19.738 406.359 19.711 cv
406.277 19.687 406.223 19.652 406.195 19.609 cv
406.16 19.57 406.145 19.523 406.148 19.469 cv
406.148 10.312 li
406.145 10.086 406.203 9.922 406.324 9.81598 cv
406.438 9.71899 406.582 9.66803 406.758 9.664 cv
409.367 9.664 li
409.629 9.66803 409.848 9.672 410.023 9.67999 cv
410.191 9.69098 410.348 9.703 410.492 9.71899 cv
410.895 9.77698 411.258 9.87903 411.582 10.016 cv
411.906 10.16 412.184 10.344 412.41 10.566 cv
412.637 10.797 412.809 11.062 412.93 11.371 cv
413.047 11.68 413.105 12.035 413.109 12.434 cv
413.105 12.773 413.063 13.082 412.98 13.355 cv
412.891 13.637 412.766 13.883 412.602 14.102 cv
412.434 14.32 412.227 14.512 411.984 14.668 cv
411.738 14.832 411.461 14.961 411.152 15.059 cv
411.301 15.133 411.445 15.223 411.578 15.324 cv
411.711 15.434 411.832 15.559 411.949 15.703 cv
412.063 15.852 412.176 16.02 412.281 16.207 cv
412.383 16.398 412.484 16.613 412.586 16.852 cv
413.438 18.84 li
413.512 19.039 413.563 19.18 413.59 19.27 cv
413.613 19.363 413.629 19.437 413.629 19.484 cv
cp
410.988 12.645 mo
410.984 12.312 410.91 12.031 410.762 11.801 cv
410.609 11.574 410.363 11.414 410.023 11.316 cv
409.918 11.293 409.801 11.27 409.668 11.254 cv
409.535 11.238 409.352 11.23 409.117 11.23 cv
408.199 11.23 li
408.199 14.094 li
409.242 14.094 li
409.531 14.098 409.789 14.062 410.008 13.988 cv
410.227 13.922 410.406 13.82 410.551 13.691 cv
410.695 13.566 410.805 13.414 410.879 13.234 cv
410.949 13.059 410.984 12.863 410.988 12.645 cv
cp
f
421.215 15.809 mo
421.211 16.047 421.16 16.223 421.055 16.336 cv
420.945 16.453 420.797 16.512 420.617 16.508 cv
416.383 16.508 li
416.379 16.809 416.414 17.078 416.488 17.316 cv
416.555 17.559 416.668 17.762 416.824 17.93 cv
416.977 18.102 417.172 18.23 417.414 18.316 cv
417.652 18.406 417.941 18.449 418.285 18.449 cv
418.625 18.449 418.926 18.426 419.188 18.375 cv
419.445 18.328 419.672 18.273 419.863 18.211 cv
420.051 18.152 420.207 18.098 420.336 18.047 cv
420.457 18 420.559 17.977 420.641 17.973 cv
420.684 17.977 420.723 17.984 420.758 18 cv
420.785 18.02 420.813 18.051 420.832 18.098 cv
420.852 18.145 420.863 18.211 420.875 18.297 cv
420.879 18.383 420.883 18.492 420.887 18.621 cv
420.883 18.738 420.883 18.836 420.879 18.914 cv
420.871 18.996 420.863 19.062 420.855 19.117 cv
420.844 19.176 420.828 19.227 420.809 19.262 cv
420.789 19.305 420.762 19.34 420.73 19.375 cv
420.695 19.414 420.602 19.465 420.453 19.523 cv
420.297 19.59 420.105 19.652 419.875 19.707 cv
419.637 19.77 419.367 19.816 419.07 19.863 cv
418.766 19.902 418.445 19.926 418.105 19.93 cv
417.484 19.926 416.941 19.852 416.48 19.695 cv
416.012 19.543 415.625 19.305 415.316 18.988 cv
415 18.672 414.766 18.273 414.617 17.789 cv
414.461 17.309 414.387 16.742 414.391 16.086 cv
414.387 15.473 414.465 14.914 414.629 14.418 cv
414.785 13.922 415.02 13.504 415.332 13.156 cv
415.637 12.812 416.012 12.547 416.449 12.363 cv
416.887 12.184 417.379 12.094 417.934 12.09 cv
418.512 12.094 419.012 12.18 419.426 12.348 cv
419.84 12.523 420.176 12.762 420.441 13.062 cv
420.703 13.367 420.898 13.727 421.027 14.141 cv
421.148 14.559 421.211 15.008 421.215 15.496 cv
cp
419.313 15.246 mo
419.324 14.695 419.215 14.262 418.98 13.949 cv
418.746 13.637 418.379 13.48 417.887 13.477 cv
417.637 13.48 417.422 13.527 417.238 13.617 cv
417.051 13.715 416.898 13.84 416.777 13.996 cv
416.652 14.156 416.559 14.344 416.496 14.559 cv
416.43 14.773 416.391 15.004 416.383 15.246 cv
cp
f
433.879 19.484 mo
433.875 19.539 433.859 19.582 433.832 19.621 cv
433.797 19.66 433.746 19.695 433.676 19.719 cv
433.602 19.746 433.5 19.762 433.379 19.777 cv
433.254 19.789 433.098 19.797 432.906 19.797 cv
432.707 19.797 432.547 19.789 432.422 19.777 cv
432.297 19.762 432.195 19.746 432.121 19.719 cv
432.043 19.695 431.992 19.66 431.965 19.621 cv
431.938 19.582 431.922 19.539 431.926 19.484 cv
431.926 15.363 li
431.922 15.133 431.902 14.918 431.859 14.723 cv
431.813 14.531 431.742 14.367 431.656 14.23 cv
431.563 14.094 431.449 13.988 431.313 13.91 cv
431.172 13.836 431.008 13.797 430.816 13.797 cv
430.582 13.797 430.344 13.891 430.105 14.07 cv
429.867 14.254 429.609 14.516 429.328 14.863 cv
429.328 19.484 li
429.328 19.539 429.313 19.582 429.281 19.621 cv
429.25 19.66 429.195 19.695 429.121 19.719 cv
429.043 19.746 428.941 19.762 428.82 19.777 cv
428.695 19.789 428.543 19.797 428.355 19.797 cv
428.16 19.797 428 19.789 427.879 19.777 cv
427.75 19.762 427.648 19.746 427.578 19.719 cv
427.5 19.695 427.449 19.66 427.418 19.621 cv
427.387 19.582 427.371 19.539 427.371 19.484 cv
427.371 15.363 li
427.371 15.133 427.348 14.918 427.305 14.723 cv
427.262 14.531 427.195 14.367 427.109 14.23 cv
427.016 14.094 426.902 13.988 426.766 13.91 cv
426.621 13.836 426.457 13.797 426.273 13.797 cv
426.031 13.797 425.793 13.891 425.555 14.07 cv
425.316 14.254 425.059 14.516 424.785 14.863 cv
424.785 19.484 li
424.781 19.539 424.766 19.582 424.738 19.621 cv
424.703 19.66 424.648 19.695 424.578 19.719 cv
424.5 19.746 424.402 19.762 424.277 19.777 cv
424.152 19.789 423.992 19.797 423.805 19.797 cv
423.609 19.797 423.453 19.789 423.328 19.777 cv
423.203 19.762 423.102 19.746 423.027 19.719 cv
422.949 19.695 422.895 19.66 422.867 19.621 cv
422.832 19.582 422.816 19.539 422.82 19.484 cv
422.82 12.535 li
422.816 12.488 422.832 12.441 422.859 12.398 cv
422.883 12.363 422.93 12.332 423 12.301 cv
423.066 12.277 423.152 12.258 423.262 12.242 cv
423.367 12.234 423.5 12.227 423.664 12.223 cv
423.828 12.227 423.965 12.234 424.074 12.242 cv
424.18 12.258 424.266 12.277 424.328 12.301 cv
424.387 12.332 424.43 12.363 424.457 12.398 cv
424.48 12.441 424.492 12.488 424.496 12.535 cv
424.496 13.336 li
424.879 12.926 425.262 12.613 425.645 12.402 cv
426.023 12.195 426.426 12.094 426.844 12.09 cv
427.129 12.094 427.383 12.121 427.613 12.18 cv
427.84 12.242 428.047 12.328 428.227 12.437 cv
428.406 12.551 428.559 12.687 428.688 12.84 cv
428.816 12.996 428.926 13.168 429.016 13.359 cv
429.223 13.137 429.426 12.945 429.629 12.785 cv
429.824 12.625 430.023 12.492 430.219 12.391 cv
430.414 12.289 430.609 12.215 430.805 12.164 cv
431 12.117 431.199 12.094 431.402 12.09 cv
431.863 12.094 432.25 12.172 432.57 12.324 cv
432.883 12.484 433.141 12.695 433.336 12.961 cv
433.531 13.23 433.668 13.543 433.754 13.898 cv
433.832 14.258 433.875 14.637 433.879 15.035 cv
cp
f
442.828 15.937 mo
442.824 16.535 442.746 17.078 442.594 17.562 cv
442.434 18.055 442.199 18.473 441.883 18.824 cv
441.566 19.176 441.168 19.449 440.691 19.641 cv
440.211 19.832 439.652 19.926 439.016 19.93 cv
438.395 19.926 437.855 19.844 437.402 19.672 cv
436.941 19.504 436.563 19.254 436.266 18.926 cv
435.961 18.602 435.738 18.199 435.594 17.719 cv
435.449 17.242 435.379 16.695 435.379 16.078 cv
435.379 15.488 435.457 14.949 435.613 14.457 cv
435.77 13.969 436.008 13.547 436.328 13.195 cv
436.645 12.848 437.039 12.574 437.516 12.379 cv
437.988 12.187 438.547 12.094 439.188 12.09 cv
439.813 12.094 440.352 12.176 440.809 12.344 cv
441.266 12.516 441.645 12.766 441.941 13.09 cv
442.238 13.418 442.461 13.82 442.609 14.297 cv
442.754 14.777 442.824 15.324 442.828 15.937 cv
cp
440.809 16.016 mo
440.805 15.68 440.777 15.363 440.727 15.07 cv
440.668 14.785 440.574 14.535 440.449 14.32 cv
440.316 14.109 440.145 13.941 439.934 13.82 cv
439.715 13.703 439.445 13.645 439.117 13.641 cv
438.828 13.645 438.574 13.699 438.355 13.801 cv
438.137 13.91 437.957 14.066 437.816 14.27 cv
437.676 14.477 437.57 14.723 437.5 15.008 cv
437.43 15.301 437.395 15.629 437.395 15.992 cv
437.395 16.34 437.422 16.656 437.48 16.941 cv
437.535 17.234 437.629 17.484 437.758 17.695 cv
437.883 17.91 438.055 18.074 438.277 18.187 cv
438.492 18.309 438.762 18.367 439.086 18.363 cv
439.379 18.367 439.637 18.312 439.859 18.203 cv
440.074 18.098 440.254 17.945 440.395 17.738 cv
440.535 17.539 440.637 17.293 440.707 17.004 cv
440.77 16.719 440.805 16.391 440.809 16.016 cv
cp
f
448.531 18.801 mo
448.531 19.027 448.516 19.203 448.488 19.324 cv
448.457 19.449 448.418 19.535 448.375 19.582 cv
448.324 19.633 448.258 19.676 448.168 19.715 cv
448.074 19.754 447.965 19.785 447.848 19.816 cv
447.723 19.84 447.59 19.863 447.449 19.883 cv
447.305 19.895 447.164 19.902 447.02 19.906 cv
446.629 19.902 446.289 19.852 446.004 19.758 cv
445.719 19.656 445.484 19.508 445.297 19.301 cv
445.109 19.098 444.969 18.84 444.883 18.527 cv
444.789 18.219 444.746 17.848 444.75 17.418 cv
444.75 13.859 li
443.918 13.859 li
443.816 13.863 443.742 13.801 443.691 13.676 cv
443.637 13.555 443.609 13.352 443.613 13.062 cv
443.609 12.914 443.617 12.785 443.633 12.684 cv
443.645 12.582 443.664 12.5 443.691 12.437 cv
443.715 12.379 443.746 12.336 443.789 12.309 cv
443.824 12.285 443.871 12.273 443.926 12.27 cv
444.75 12.27 li
444.75 10.719 li
444.746 10.672 444.762 10.625 444.793 10.578 cv
444.82 10.539 444.871 10.504 444.949 10.473 cv
445.023 10.449 445.125 10.426 445.254 10.41 cv
445.379 10.398 445.535 10.395 445.727 10.391 cv
445.914 10.395 446.074 10.398 446.203 10.41 cv
446.328 10.426 446.43 10.449 446.504 10.473 cv
446.574 10.504 446.625 10.539 446.66 10.578 cv
446.688 10.625 446.703 10.672 446.707 10.719 cv
446.707 12.27 li
448.219 12.27 li
448.27 12.273 448.316 12.285 448.355 12.309 cv
448.395 12.336 448.426 12.379 448.453 12.437 cv
448.477 12.5 448.496 12.582 448.512 12.684 cv
448.523 12.785 448.531 12.914 448.531 13.062 cv
448.531 13.352 448.504 13.555 448.453 13.676 cv
448.398 13.801 448.324 13.863 448.227 13.859 cv
446.707 13.859 li
446.707 17.125 li
446.703 17.504 446.762 17.789 446.887 17.977 cv
447.004 18.168 447.219 18.262 447.523 18.262 cv
447.625 18.262 447.719 18.254 447.805 18.234 cv
447.887 18.219 447.961 18.199 448.027 18.172 cv
448.09 18.152 448.145 18.129 448.191 18.109 cv
448.234 18.094 448.273 18.086 448.313 18.082 cv
448.34 18.086 448.371 18.094 448.402 18.109 cv
448.43 18.129 448.449 18.168 448.469 18.219 cv
448.48 18.277 448.496 18.352 448.512 18.441 cv
448.523 18.539 448.531 18.656 448.531 18.801 cv
cp
f
456.117 15.809 mo
456.113 16.047 456.063 16.223 455.957 16.336 cv
455.848 16.453 455.699 16.512 455.52 16.508 cv
451.285 16.508 li
451.281 16.809 451.316 17.078 451.391 17.316 cv
451.457 17.559 451.57 17.762 451.727 17.93 cv
451.879 18.102 452.074 18.23 452.316 18.316 cv
452.555 18.406 452.844 18.449 453.188 18.449 cv
453.527 18.449 453.828 18.426 454.09 18.375 cv
454.348 18.328 454.574 18.273 454.766 18.211 cv
454.953 18.152 455.109 18.098 455.238 18.047 cv
455.359 18 455.461 17.977 455.543 17.973 cv
455.586 17.977 455.625 17.984 455.66 18 cv
455.688 18.02 455.715 18.051 455.734 18.098 cv
455.754 18.145 455.766 18.211 455.777 18.297 cv
455.781 18.383 455.785 18.492 455.789 18.621 cv
455.785 18.738 455.785 18.836 455.781 18.914 cv
455.773 18.996 455.766 19.062 455.758 19.117 cv
455.746 19.176 455.73 19.227 455.711 19.262 cv
455.691 19.305 455.664 19.34 455.633 19.375 cv
455.598 19.414 455.504 19.465 455.355 19.523 cv
455.199 19.59 455.008 19.652 454.777 19.707 cv
454.539 19.77 454.27 19.816 453.973 19.863 cv
453.668 19.902 453.348 19.926 453.008 19.93 cv
452.387 19.926 451.844 19.852 451.383 19.695 cv
450.914 19.543 450.527 19.305 450.219 18.988 cv
449.902 18.672 449.668 18.273 449.52 17.789 cv
449.363 17.309 449.289 16.742 449.293 16.086 cv
449.289 15.473 449.367 14.914 449.531 14.418 cv
449.688 13.922 449.922 13.504 450.234 13.156 cv
450.539 12.812 450.914 12.547 451.352 12.363 cv
451.789 12.184 452.281 12.094 452.836 12.09 cv
453.414 12.094 453.914 12.18 454.328 12.348 cv
454.742 12.523 455.078 12.762 455.344 13.062 cv
455.605 13.367 455.801 13.727 455.93 14.141 cv
456.051 14.559 456.113 15.008 456.117 15.496 cv
cp
454.215 15.246 mo
454.227 14.695 454.117 14.262 453.883 13.949 cv
453.648 13.637 453.281 13.48 452.789 13.477 cv
452.539 13.48 452.324 13.527 452.141 13.617 cv
451.953 13.715 451.801 13.84 451.68 13.996 cv
451.555 14.156 451.461 14.344 451.398 14.559 cv
451.332 14.773 451.293 15.004 451.285 15.246 cv
cp
f
473.426 19.469 mo
473.422 19.523 473.41 19.57 473.383 19.609 cv
473.352 19.652 473.297 19.687 473.227 19.711 cv
473.148 19.738 473.051 19.758 472.926 19.773 cv
472.801 19.789 472.641 19.797 472.449 19.797 cv
472.262 19.797 472.105 19.789 471.984 19.773 cv
471.855 19.758 471.758 19.738 471.688 19.711 cv
471.613 19.687 471.563 19.652 471.531 19.609 cv
471.5 19.57 471.484 19.523 471.484 19.469 cv
471.484 11.262 li
471.469 11.262 li
468.547 19.461 li
468.523 19.531 468.488 19.586 468.445 19.629 cv
468.395 19.676 468.332 19.711 468.254 19.734 cv
468.172 19.762 468.07 19.777 467.945 19.785 cv
467.82 19.793 467.668 19.797 467.496 19.797 cv
467.316 19.797 467.168 19.789 467.043 19.777 cv
466.918 19.762 466.813 19.742 466.734 19.715 cv
466.648 19.687 466.586 19.652 466.543 19.609 cv
466.492 19.57 466.461 19.523 466.449 19.461 cv
463.629 11.262 li
463.613 11.262 li
463.613 19.469 li
463.609 19.523 463.594 19.57 463.57 19.609 cv
463.539 19.652 463.488 19.687 463.41 19.711 cv
463.332 19.738 463.23 19.758 463.109 19.773 cv
462.984 19.789 462.828 19.797 462.641 19.797 cv
462.449 19.797 462.293 19.789 462.172 19.773 cv
462.043 19.758 461.941 19.738 461.871 19.711 cv
461.793 19.687 461.742 19.652 461.715 19.609 cv
461.684 19.57 461.668 19.523 461.672 19.469 cv
461.672 10.484 li
461.668 10.223 461.738 10.02 461.883 9.875 cv
462.02 9.73798 462.207 9.66803 462.445 9.664 cv
463.785 9.664 li
464.023 9.66803 464.227 9.68701 464.398 9.72302 cv
464.566 9.76599 464.715 9.828 464.844 9.91803 cv
464.965 10.012 465.07 10.133 465.156 10.277 cv
465.238 10.43 465.309 10.613 465.375 10.828 cv
467.559 16.836 li
467.59 16.836 li
469.848 10.844 li
469.914 10.625 469.988 10.441 470.07 10.289 cv
470.148 10.141 470.242 10.02 470.352 9.922 cv
470.457 9.83197 470.582 9.76599 470.727 9.72302 cv
470.871 9.68701 471.039 9.66803 471.234 9.664 cv
472.613 9.664 li
472.75 9.66803 472.871 9.68402 472.977 9.71899 cv
473.074 9.758 473.156 9.81201 473.227 9.87903 cv
473.289 9.953 473.34 10.039 473.375 10.137 cv
473.406 10.242 473.422 10.359 473.426 10.484 cv
cp
f
482.535 15.937 mo
482.531 16.535 482.453 17.078 482.301 17.562 cv
482.141 18.055 481.906 18.473 481.59 18.824 cv
481.273 19.176 480.875 19.449 480.398 19.641 cv
479.918 19.832 479.359 19.926 478.723 19.93 cv
478.102 19.926 477.563 19.844 477.109 19.672 cv
476.648 19.504 476.27 19.254 475.973 18.926 cv
475.668 18.602 475.445 18.199 475.301 17.719 cv
475.156 17.242 475.086 16.695 475.086 16.078 cv
475.086 15.488 475.164 14.949 475.32 14.457 cv
475.477 13.969 475.715 13.547 476.035 13.195 cv
476.352 12.848 476.746 12.574 477.223 12.379 cv
477.695 12.187 478.254 12.094 478.895 12.09 cv
479.52 12.094 480.059 12.176 480.516 12.344 cv
480.973 12.516 481.352 12.766 481.648 13.09 cv
481.945 13.418 482.168 13.82 482.316 14.297 cv
482.461 14.777 482.531 15.324 482.535 15.937 cv
cp
480.516 16.016 mo
480.512 15.68 480.484 15.363 480.434 15.07 cv
480.375 14.785 480.281 14.535 480.156 14.32 cv
480.023 14.109 479.852 13.941 479.641 13.82 cv
479.422 13.703 479.152 13.645 478.824 13.641 cv
478.535 13.645 478.281 13.699 478.063 13.801 cv
477.844 13.91 477.664 14.066 477.523 14.27 cv
477.383 14.477 477.277 14.723 477.207 15.008 cv
477.137 15.301 477.102 15.629 477.102 15.992 cv
477.102 16.34 477.129 16.656 477.188 16.941 cv
477.242 17.234 477.336 17.484 477.465 17.695 cv
477.59 17.91 477.762 18.074 477.984 18.187 cv
478.199 18.309 478.469 18.367 478.793 18.363 cv
479.086 18.367 479.344 18.312 479.566 18.203 cv
479.781 18.098 479.961 17.945 480.102 17.738 cv
480.242 17.539 480.344 17.293 480.414 17.004 cv
480.477 16.719 480.512 16.391 480.516 16.016 cv
cp
f
490.684 19.484 mo
490.68 19.547 490.668 19.594 490.645 19.629 cv
490.617 19.672 490.57 19.703 490.512 19.727 cv
490.445 19.75 490.363 19.766 490.258 19.781 cv
490.152 19.789 490.02 19.797 489.867 19.797 cv
489.695 19.797 489.563 19.789 489.461 19.781 cv
489.355 19.766 489.27 19.75 489.207 19.727 cv
489.141 19.703 489.094 19.672 489.066 19.629 cv
489.035 19.594 489.02 19.547 489.023 19.484 cv
489.023 18.715 li
488.664 19.102 488.289 19.398 487.898 19.609 cv
487.5 19.82 487.066 19.926 486.594 19.93 cv
486.059 19.926 485.609 19.824 485.246 19.621 cv
484.879 19.418 484.582 19.145 484.352 18.793 cv
484.117 18.449 483.949 18.043 483.848 17.574 cv
483.746 17.113 483.695 16.621 483.695 16.102 cv
483.695 15.488 483.758 14.934 483.891 14.437 cv
484.02 13.945 484.215 13.523 484.473 13.176 cv
484.727 12.828 485.043 12.562 485.422 12.371 cv
485.801 12.187 486.238 12.094 486.734 12.09 cv
487.121 12.094 487.473 12.172 487.793 12.328 cv
488.105 12.488 488.422 12.719 488.734 13.023 cv
488.734 9.26202 li
488.734 9.211 488.746 9.164 488.777 9.12097 cv
488.801 9.08197 488.855 9.047 488.934 9.01599 cv
489.008 8.98798 489.105 8.96899 489.234 8.94897 cv
489.355 8.93701 489.516 8.92999 489.711 8.92603 cv
489.902 8.92999 490.059 8.93701 490.184 8.94897 cv
490.305 8.96899 490.406 8.98798 490.48 9.01599 cv
490.551 9.047 490.602 9.08197 490.637 9.12097 cv
490.664 9.164 490.68 9.211 490.684 9.26202 cv
cp
488.734 14.84 mo
488.453 14.488 488.184 14.219 487.93 14.031 cv
487.668 13.844 487.398 13.75 487.121 13.75 cv
486.867 13.75 486.648 13.816 486.465 13.941 cv
486.277 14.074 486.129 14.242 486.02 14.453 cv
485.906 14.664 485.824 14.902 485.77 15.164 cv
485.715 15.43 485.688 15.699 485.688 15.969 cv
485.688 16.266 485.711 16.547 485.758 16.82 cv
485.805 17.098 485.879 17.344 485.988 17.559 cv
486.09 17.773 486.234 17.945 486.414 18.074 cv
486.59 18.207 486.813 18.273 487.082 18.27 cv
487.215 18.273 487.344 18.254 487.477 18.211 cv
487.602 18.176 487.734 18.113 487.867 18.02 cv
488 17.934 488.137 17.816 488.277 17.672 cv
488.418 17.531 488.57 17.355 488.734 17.148 cv
cp
f
499.082 15.809 mo
499.078 16.047 499.027 16.223 498.922 16.336 cv
498.813 16.453 498.664 16.512 498.484 16.508 cv
494.25 16.508 li
494.246 16.809 494.281 17.078 494.355 17.316 cv
494.422 17.559 494.535 17.762 494.691 17.93 cv
494.844 18.102 495.039 18.23 495.281 18.316 cv
495.52 18.406 495.809 18.449 496.152 18.449 cv
496.492 18.449 496.793 18.426 497.055 18.375 cv
497.313 18.328 497.539 18.273 497.73 18.211 cv
497.918 18.152 498.074 18.098 498.203 18.047 cv
498.324 18 498.426 17.977 498.508 17.973 cv
498.551 17.977 498.59 17.984 498.625 18 cv
498.652 18.02 498.68 18.051 498.699 18.098 cv
498.719 18.145 498.73 18.211 498.742 18.297 cv
498.746 18.383 498.75 18.492 498.754 18.621 cv
498.75 18.738 498.75 18.836 498.746 18.914 cv
498.738 18.996 498.73 19.062 498.723 19.117 cv
498.711 19.176 498.695 19.227 498.676 19.262 cv
498.656 19.305 498.629 19.34 498.598 19.375 cv
498.563 19.414 498.469 19.465 498.32 19.523 cv
498.164 19.59 497.973 19.652 497.742 19.707 cv
497.504 19.77 497.234 19.816 496.938 19.863 cv
496.633 19.902 496.313 19.926 495.973 19.93 cv
495.352 19.926 494.809 19.852 494.348 19.695 cv
493.879 19.543 493.492 19.305 493.184 18.988 cv
492.867 18.672 492.633 18.273 492.484 17.789 cv
492.328 17.309 492.254 16.742 492.258 16.086 cv
492.254 15.473 492.332 14.914 492.496 14.418 cv
492.652 13.922 492.887 13.504 493.199 13.156 cv
493.504 12.812 493.879 12.547 494.316 12.363 cv
494.754 12.184 495.246 12.094 495.801 12.09 cv
496.379 12.094 496.879 12.18 497.293 12.348 cv
497.707 12.523 498.043 12.762 498.309 13.062 cv
498.57 13.367 498.766 13.727 498.895 14.141 cv
499.016 14.559 499.078 15.008 499.082 15.496 cv
cp
497.18 15.246 mo
497.191 14.695 497.082 14.262 496.848 13.949 cv
496.613 13.637 496.246 13.48 495.754 13.477 cv
495.504 13.48 495.289 13.527 495.105 13.617 cv
494.918 13.715 494.766 13.84 494.645 13.996 cv
494.52 14.156 494.426 14.344 494.363 14.559 cv
494.297 14.773 494.258 15.004 494.25 15.246 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
