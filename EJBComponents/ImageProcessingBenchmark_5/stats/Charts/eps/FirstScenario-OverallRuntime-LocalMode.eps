%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-OverallRuntime-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:59:50 p.m.
%%BoundingBox: 0 0 666 552
%%HiResBoundingBox: 0 0 665.2500 551.5500
%%CropBox: 0 0 665.2500 551.5500
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -551.55 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 551.55 li
665.25 551.55 li
665.25 0 li
cp
clp
0 0 mo
665.25 0 li
665.25 551.551 li
0 551.551 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
71 493.75 mo
648.969 493.75 li
71 483.07 mo
648.969 483.07 li
71 472.449 mo
648.969 472.449 li
71 461.77 mo
648.969 461.77 li
71 440.469 mo
648.969 440.469 li
71 429.852 mo
648.969 429.852 li
71 419.172 mo
648.969 419.172 li
71 408.551 mo
648.969 408.551 li
71 387.25 mo
648.969 387.25 li
71 376.57 mo
648.969 376.57 li
71 365.949 mo
648.969 365.949 li
71 355.27 mo
648.969 355.27 li
71 333.969 mo
648.969 333.969 li
71 323.352 mo
648.969 323.352 li
71 312.672 mo
648.969 312.672 li
71 302.051 mo
648.969 302.051 li
71 280.75 mo
648.969 280.75 li
71 270.07 mo
648.969 270.07 li
71 259.449 mo
648.969 259.449 li
71 248.77 mo
648.969 248.77 li
71 227.469 mo
648.969 227.469 li
71 216.852 mo
648.969 216.852 li
71 206.172 mo
648.969 206.172 li
71 195.551 mo
648.969 195.551 li
71 174.25 mo
648.969 174.25 li
71 163.57 mo
648.969 163.57 li
71 152.949 mo
648.969 152.949 li
71 142.27 mo
648.969 142.27 li
71 120.969 mo
648.969 120.969 li
71 110.352 mo
648.969 110.352 li
71 99.672 mo
648.969 99.672 li
71 89.051 mo
648.969 89.051 li
71 67.75 mo
648.969 67.75 li
71 57.07 mo
648.969 57.07 li
71 46.449 mo
648.969 46.449 li
71 35.77 mo
648.969 35.77 li
.135805 .104005 .108583 0 cmyk
@
71 451.148 mo
648.969 451.148 li
71 397.871 mo
648.969 397.871 li
71 344.648 mo
648.969 344.648 li
71 291.371 mo
648.969 291.371 li
71 238.148 mo
648.969 238.148 li
71 184.871 mo
648.969 184.871 li
71 131.648 mo
648.969 131.648 li
71 78.371 mo
648.969 78.371 li
71 25.121 mo
648.969 25.121 li
.326574 .281529 .277562 0 cmyk
@
107.129 25.121 mo
107.129 504.395 li
179.371 25.121 mo
179.371 504.395 li
251.609 25.121 mo
251.609 504.395 li
323.852 25.121 mo
323.852 504.395 li
396.09 25.121 mo
396.09 504.395 li
468.328 25.121 mo
468.328 504.395 li
540.629 25.121 mo
540.629 504.395 li
612.871 25.121 mo
612.871 504.395 li
.175235 .144778 .143648 0 cmyk
@
71 25.121 mo
71 504.395 li
143.25 25.121 mo
143.25 504.395 li
215.488 25.121 mo
215.488 504.395 li
287.73 25.121 mo
287.73 504.395 li
359.969 25.121 mo
359.969 504.395 li
432.211 25.121 mo
432.211 504.395 li
504.449 25.121 mo
504.449 504.395 li
576.75 25.121 mo
576.75 504.395 li
648.969 25.121 mo
648.969 504.395 li
.326574 .281529 .277562 0 cmyk
@
37.125 495.078 mo
58.016 495.078 li
58.016 512.168 li
37.125 512.168 li
cp
0 0 0 0 cmyk
ef
37.125 441.828 mo
58.016 441.828 li
58.016 458.922 li
37.125 458.922 li
cp
ef
37.125 388.57 mo
58.016 388.57 li
58.016 405.66 li
37.125 405.66 li
cp
ef
37.125 335.32 mo
58.016 335.32 li
58.016 352.41 li
37.125 352.41 li
cp
ef
30.031 282.07 mo
58.015 282.07 li
58.015 299.16 li
30.031 299.16 li
cp
ef
30.031 228.809 mo
58.015 228.809 li
58.015 245.899 li
30.031 245.899 li
cp
ef
30.031 175.559 mo
58.015 175.559 li
58.015 192.649 li
30.031 192.649 li
cp
ef
30.031 122.309 mo
58.015 122.309 li
58.015 139.399 li
30.031 139.399 li
cp
ef
30.031 69.051 mo
58.015 69.051 li
58.015 86.141 li
30.031 86.141 li
cp
ef
30.031 15.801 mo
58.015 15.801 li
58.015 32.891 li
30.031 32.891 li
cp
ef
1 lw
71 504.395 mo
648.969 504.395 li
.369879 .299321 .304356 .000976577 cmyk
@
71 504.395 mo
71 508.84 li
143.25 504.395 mo
143.25 508.84 li
215.488 504.395 mo
215.488 508.84 li
287.73 504.395 mo
287.73 508.84 li
359.969 504.395 mo
359.969 508.84 li
432.211 504.395 mo
432.211 508.84 li
504.449 504.395 mo
504.449 508.84 li
576.75 504.395 mo
576.75 508.84 li
648.969 504.395 mo
648.969 508.84 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lc
71 44.719 mo
143.25 136.309 li
215.488 129.91 li
287.73 126.309 li
359.969 111.191 li
432.211 111.191 li
504.449 110.109 li
576.75 110.77 li
648.969 109.27 li
.62829 .284672 0 0 cmyk
@
grestore
1.02 lw
75.961 49.738 mo
65.941 39.719 li
65.941 49.738 mo
75.961 39.719 li
.62829 .284672 0 0 cmyk
@
148.199 141.301 mo
138.18 131.281 li
138.18 141.301 mo
148.199 131.281 li
@
220.5 134.941 mo
210.48 124.922 li
210.48 134.941 mo
220.5 124.922 li
@
292.738 131.281 mo
282.719 121.262 li
282.719 131.281 mo
292.738 121.262 li
@
364.98 116.16 mo
354.961 106.141 li
354.961 116.16 mo
364.98 106.141 li
@
437.219 116.16 mo
427.199 106.141 li
427.199 116.16 mo
437.219 106.141 li
@
509.461 115.141 mo
499.441 105.121 li
499.441 115.141 mo
509.461 105.121 li
@
581.699 115.738 mo
571.68 105.719 li
571.68 115.738 mo
581.699 105.719 li
@
653.941 114.238 mo
643.922 104.219 li
643.922 114.238 mo
653.941 104.219 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
71 262.629 mo
143.25 345.059 li
215.488 315.91 li
287.73 305.648 li
359.969 305.23 li
432.211 304.988 li
504.449 305.23 li
576.75 305.23 li
648.969 304.57 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
75.961 267.602 mo
65.941 257.578 li
65.941 267.602 mo
75.961 257.578 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.199 350.039 mo
138.18 340.02 li
138.18 350.039 mo
148.199 340.02 li
@
220.5 320.879 mo
210.48 310.859 li
210.48 320.879 mo
220.5 310.859 li
@
292.738 310.68 mo
282.719 300.66 li
282.719 310.68 mo
292.738 300.66 li
@
364.98 310.199 mo
354.961 300.18 li
354.961 310.199 mo
364.98 300.18 li
@
437.219 310.02 mo
427.199 300 li
427.199 310.02 mo
437.219 300 li
@
509.461 310.199 mo
499.441 300.18 li
499.441 310.199 mo
509.461 300.18 li
@
581.699 310.199 mo
571.68 300.18 li
571.68 310.199 mo
581.699 300.18 li
@
653.941 309.602 mo
643.922 299.578 li
643.922 309.602 mo
653.941 299.578 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
71 337.18 mo
143.25 373.18 li
215.488 350.828 li
287.73 351.012 li
359.969 345.07 li
432.211 344.648 li
504.449 345.488 li
576.75 344.648 li
648.969 344.648 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
75.961 342.18 mo
65.941 332.16 li
65.941 342.18 mo
75.961 332.16 li
.621118 .109194 .980743 .0040589 cmyk
@
148.199 378.18 mo
138.18 368.16 li
138.18 378.18 mo
148.199 368.16 li
@
220.5 355.801 mo
210.48 345.781 li
210.48 355.801 mo
220.5 345.781 li
@
292.738 356.039 mo
282.719 346.02 li
282.719 356.039 mo
292.738 346.02 li
@
364.98 350.039 mo
354.961 340.02 li
354.961 350.039 mo
364.98 340.02 li
@
437.219 349.621 mo
427.199 339.602 li
427.199 349.621 mo
437.219 339.602 li
@
509.461 350.461 mo
499.441 340.441 li
499.441 350.461 mo
509.461 340.441 li
@
581.699 349.621 mo
571.68 339.602 li
571.68 349.621 mo
581.699 339.602 li
@
653.941 349.621 mo
643.922 339.602 li
643.922 349.621 mo
653.941 339.602 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
71 370.621 mo
143.25 391.512 li
215.488 404.711 li
287.73 382.988 li
359.969 384.91 li
432.211 382.988 li
504.449 382.328 li
576.75 382.75 li
648.969 380.648 li
0 .993988 1 0 cmyk
@
grestore
75.961 375.602 mo
65.941 365.578 li
65.941 375.602 mo
75.961 365.578 li
0 .993988 1 0 cmyk
@
148.199 396.48 mo
138.18 386.461 li
138.18 396.48 mo
148.199 386.461 li
@
220.5 409.68 mo
210.48 399.66 li
210.48 409.68 mo
220.5 399.66 li
@
292.738 387.961 mo
282.719 377.941 li
282.719 387.961 mo
292.738 377.941 li
@
364.98 389.879 mo
354.961 379.859 li
354.961 389.879 mo
364.98 379.859 li
@
437.219 387.961 mo
427.199 377.941 li
427.199 387.961 mo
437.219 377.941 li
@
509.461 387.359 mo
499.441 377.34 li
499.441 387.359 mo
509.461 377.34 li
@
581.699 387.781 mo
571.68 377.762 li
571.68 387.781 mo
581.699 377.762 li
@
653.941 385.621 mo
643.922 375.602 li
643.922 385.621 mo
653.941 375.602 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
71 371.691 mo
143.25 392.352 li
215.488 388.75 li
287.73 381.73 li
359.969 382.988 li
432.211 380.828 li
504.449 382.75 li
576.75 382.328 li
648.969 381.73 li
.62829 .284672 0 0 cmyk
@
grestore
75.48 376.199 mo
66.422 367.141 li
66.422 376.199 mo
75.48 367.141 li
.62829 .284672 0 0 cmyk
@
147.719 396.898 mo
138.66 387.84 li
138.66 396.898 mo
147.719 387.84 li
@
220.02 393.238 mo
210.961 384.18 li
210.961 393.238 mo
220.02 384.18 li
@
292.262 386.219 mo
283.199 377.16 li
283.199 386.219 mo
292.262 377.16 li
@
364.5 387.48 mo
355.441 378.422 li
355.441 387.48 mo
364.5 378.422 li
@
436.738 385.379 mo
427.68 376.32 li
427.68 385.379 mo
436.738 376.32 li
@
508.98 387.301 mo
499.922 378.238 li
499.922 387.301 mo
508.98 378.238 li
@
581.219 386.879 mo
572.16 377.82 li
572.16 386.879 mo
581.219 377.82 li
@
653.461 386.219 mo
644.398 377.16 li
644.398 386.219 mo
653.461 377.16 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
71 370.199 mo
143.25 391.93 li
215.488 405.352 li
287.73 386.59 li
359.969 382.988 li
432.211 382.988 li
504.449 380.828 li
576.75 381.91 li
648.969 382.75 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
75.961 375.18 mo
65.941 365.16 li
65.941 375.18 mo
75.961 365.16 li
.0321965 .622736 .922606 .000579843 cmyk
@
148.199 396.898 mo
138.18 386.879 li
138.18 396.898 mo
148.199 386.879 li
@
220.5 410.34 mo
210.48 400.32 li
210.48 410.34 mo
220.5 400.32 li
@
292.738 391.621 mo
282.719 381.602 li
282.719 391.621 mo
292.738 381.602 li
@
364.98 387.961 mo
354.961 377.941 li
354.961 387.961 mo
364.98 377.941 li
@
437.219 387.961 mo
427.199 377.941 li
427.199 387.961 mo
437.219 377.941 li
@
509.461 385.859 mo
499.441 375.84 li
499.441 385.859 mo
509.461 375.84 li
@
581.699 386.941 mo
571.68 376.922 li
571.68 386.941 mo
581.699 376.922 li
@
653.941 387.781 mo
643.922 377.762 li
643.922 387.781 mo
653.941 377.762 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
71 370.199 mo
143.25 404.051 li
215.488 404.711 li
287.73 382.988 li
359.969 382.75 li
432.211 383.41 li
504.449 382.328 li
576.75 381.25 li
648.969 381.91 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
75.961 375.18 mo
65.941 365.16 li
65.941 375.18 mo
75.961 365.16 li
.621118 .109194 .980743 .0040589 cmyk
@
148.199 409.078 mo
138.18 399.059 li
138.18 409.078 mo
148.199 399.059 li
@
220.5 409.68 mo
210.48 399.66 li
210.48 409.68 mo
220.5 399.66 li
@
292.738 387.961 mo
282.719 377.941 li
282.719 387.961 mo
292.738 377.941 li
@
364.98 387.781 mo
354.961 377.762 li
354.961 387.781 mo
364.98 377.762 li
@
437.219 388.379 mo
427.199 378.359 li
427.199 388.379 mo
437.219 378.359 li
@
509.461 387.359 mo
499.441 377.34 li
499.441 387.359 mo
509.461 377.34 li
@
581.699 386.281 mo
571.68 376.262 li
571.68 386.281 mo
581.699 376.262 li
@
653.941 386.941 mo
643.922 376.922 li
643.922 386.941 mo
653.941 376.922 li
@
gsave
70.949 25.09 mo
649.711 25.09 li
649.711 505.09 li
70.949 505.09 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
71 375.309 mo
143.25 388.328 li
215.488 405.77 li
287.73 402.551 li
359.969 385.988 li
432.211 381.91 li
504.449 398.289 li
576.75 382.328 li
648.969 381.25 li
0 .993988 1 0 cmyk
@
grestore
75.961 380.34 mo
65.941 370.32 li
65.941 380.34 mo
75.961 370.32 li
0 .993988 1 0 cmyk
@
148.199 393.301 mo
138.18 383.281 li
138.18 393.301 mo
148.199 383.281 li
@
220.5 410.762 mo
210.48 400.738 li
210.48 410.762 mo
220.5 400.738 li
@
292.738 407.578 mo
282.719 397.559 li
282.719 407.578 mo
292.738 397.559 li
@
364.98 390.961 mo
354.961 380.941 li
354.961 390.961 mo
364.98 380.941 li
@
437.219 386.941 mo
427.199 376.922 li
427.199 386.941 mo
437.219 376.922 li
@
509.461 403.32 mo
499.441 393.301 li
499.441 403.32 mo
509.461 393.301 li
@
581.699 387.359 mo
571.68 377.34 li
571.68 387.359 mo
581.699 377.34 li
@
653.941 386.281 mo
643.922 376.262 li
643.922 386.281 mo
653.941 376.262 li
@
37.125 495.078 mo
58.016 495.078 li
58.016 512.168 li
37.125 512.168 li
cp
0 0 0 0 cmyk
ef
43.73 504.031 mo
43.727 504.715 43.672 505.332 43.57 505.891 cv
43.461 506.449 43.285 506.93 43.035 507.332 cv
42.785 507.738 42.461 508.051 42.063 508.27 cv
41.664 508.488 41.168 508.598 40.582 508.598 cv
40.023 508.598 39.559 508.5 39.18 508.301 cv
38.797 508.105 38.488 507.816 38.262 507.43 cv
38.027 507.047 37.863 506.57 37.766 506.008 cv
37.668 505.445 37.621 504.801 37.621 504.074 cv
37.621 503.402 37.676 502.785 37.785 502.219 cv
37.895 501.66 38.07 501.18 38.316 500.773 cv
38.559 500.375 38.883 500.062 39.285 499.84 cv
39.684 499.621 40.176 499.512 40.762 499.508 cv
41.32 499.512 41.789 499.609 42.168 499.805 cv
42.547 500.004 42.852 500.297 43.086 500.68 cv
43.316 501.066 43.48 501.539 43.582 502.098 cv
43.676 502.664 43.727 503.309 43.73 504.031 cv
cp
42.527 504.113 mo
42.523 503.676 42.508 503.277 42.48 502.926 cv
42.445 502.574 42.398 502.266 42.34 501.996 cv
42.277 501.73 42.199 501.5 42.102 501.305 cv
42 501.113 41.883 500.953 41.75 500.828 cv
41.613 500.703 41.457 500.613 41.281 500.555 cv
41.105 500.5 40.91 500.473 40.691 500.469 cv
40.305 500.473 39.988 500.562 39.75 500.742 cv
39.504 500.926 39.316 501.176 39.18 501.492 cv
39.039 501.812 38.941 502.187 38.895 502.613 cv
38.84 503.043 38.816 503.5 38.82 503.992 cv
38.816 504.652 38.852 505.215 38.922 505.676 cv
38.992 506.141 39.098 506.516 39.246 506.805 cv
39.391 507.094 39.582 507.305 39.813 507.437 cv
40.043 507.57 40.32 507.637 40.652 507.637 cv
40.902 507.637 41.129 507.598 41.324 507.516 cv
41.516 507.434 41.68 507.316 41.82 507.164 cv
41.957 507.012 42.074 506.828 42.168 506.613 cv
42.258 506.402 42.328 506.164 42.387 505.902 cv
42.438 505.645 42.477 505.363 42.496 505.059 cv
42.516 504.758 42.523 504.445 42.527 504.113 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.719 507.727 mo
46.715 508.051 46.66 508.266 46.555 508.371 cv
46.445 508.477 46.25 508.527 45.973 508.531 cv
45.695 508.527 45.508 508.477 45.406 508.375 cv
45.301 508.27 45.25 508.062 45.25 507.746 cv
45.25 507.426 45.301 507.211 45.41 507.102 cv
45.512 507 45.707 506.945 45.992 506.941 cv
46.262 506.945 46.449 506.996 46.559 507.098 cv
46.66 507.203 46.715 507.414 46.719 507.727 cv
cp
f
54.344 504.031 mo
54.34 504.715 54.285 505.332 54.184 505.891 cv
54.074 506.449 53.898 506.93 53.648 507.332 cv
53.398 507.738 53.074 508.051 52.676 508.27 cv
52.277 508.488 51.781 508.598 51.195 508.598 cv
50.637 508.598 50.172 508.5 49.793 508.301 cv
49.41 508.105 49.102 507.816 48.875 507.43 cv
48.641 507.047 48.477 506.57 48.379 506.008 cv
48.281 505.445 48.234 504.801 48.234 504.074 cv
48.234 503.402 48.289 502.785 48.398 502.219 cv
48.508 501.66 48.684 501.18 48.93 500.773 cv
49.172 500.375 49.496 500.062 49.898 499.84 cv
50.297 499.621 50.789 499.512 51.375 499.508 cv
51.934 499.512 52.402 499.609 52.781 499.805 cv
53.16 500.004 53.465 500.297 53.699 500.68 cv
53.93 501.066 54.094 501.539 54.195 502.098 cv
54.289 502.664 54.34 503.309 54.344 504.031 cv
cp
53.141 504.113 mo
53.137 503.676 53.121 503.277 53.094 502.926 cv
53.059 502.574 53.012 502.266 52.953 501.996 cv
52.891 501.73 52.813 501.5 52.715 501.305 cv
52.613 501.113 52.496 500.953 52.363 500.828 cv
52.227 500.703 52.07 500.613 51.895 500.555 cv
51.719 500.5 51.523 500.473 51.305 500.469 cv
50.918 500.473 50.602 500.562 50.363 500.742 cv
50.117 500.926 49.93 501.176 49.793 501.492 cv
49.652 501.812 49.555 502.187 49.508 502.613 cv
49.453 503.043 49.43 503.5 49.434 503.992 cv
49.43 504.652 49.465 505.215 49.535 505.676 cv
49.605 506.141 49.711 506.516 49.859 506.805 cv
50.004 507.094 50.195 507.305 50.426 507.437 cv
50.656 507.57 50.934 507.637 51.266 507.637 cv
51.516 507.637 51.742 507.598 51.938 507.516 cv
52.129 507.434 52.293 507.316 52.434 507.164 cv
52.57 507.012 52.688 506.828 52.781 506.613 cv
52.871 506.402 52.941 506.164 53 505.902 cv
53.051 505.645 53.09 505.363 53.109 505.059 cv
53.129 504.758 53.137 504.445 53.141 504.113 cv
cp
f
37.125 441.828 mo
58.016 441.828 li
58.016 458.922 li
37.125 458.922 li
cp
0 0 0 0 cmyk
ef
43.438 454.707 mo
43.434 454.789 43.426 454.863 43.418 454.926 cv
43.402 454.992 43.387 455.047 43.371 455.086 cv
43.348 455.133 43.32 455.164 43.289 455.18 cv
43.25 455.203 43.215 455.211 43.176 455.211 cv
38.297 455.211 li
38.227 455.211 38.172 455.203 38.129 455.187 cv
38.078 455.172 38.035 455.148 38.004 455.109 cv
37.965 455.078 37.941 455.023 37.93 454.953 cv
37.91 454.883 37.902 454.801 37.906 454.699 cv
37.902 454.613 37.906 454.531 37.918 454.461 cv
37.922 454.395 37.938 454.336 37.965 454.281 cv
37.984 454.23 38.012 454.176 38.051 454.121 cv
38.082 454.07 38.129 454.016 38.188 453.953 cv
39.953 452.141 li
40.359 451.723 40.684 451.348 40.934 451.016 cv
41.176 450.684 41.367 450.383 41.504 450.105 cv
41.637 449.836 41.727 449.586 41.77 449.363 cv
41.809 449.141 41.828 448.934 41.832 448.734 cv
41.828 448.539 41.797 448.352 41.734 448.176 cv
41.668 448.004 41.57 447.852 41.449 447.719 cv
41.32 447.59 41.164 447.484 40.98 447.402 cv
40.789 447.328 40.574 447.289 40.332 447.285 cv
40.043 447.289 39.785 447.328 39.559 447.402 cv
39.328 447.484 39.129 447.57 38.961 447.656 cv
38.785 447.75 38.641 447.832 38.531 447.906 cv
38.414 447.988 38.328 448.027 38.273 448.023 cv
38.238 448.027 38.211 448.02 38.188 447.996 cv
38.16 447.98 38.137 447.949 38.121 447.906 cv
38.102 447.867 38.09 447.812 38.082 447.742 cv
38.07 447.676 38.066 447.594 38.07 447.496 cv
38.066 447.43 38.07 447.371 38.078 447.32 cv
38.082 447.273 38.09 447.23 38.102 447.191 cv
38.109 447.156 38.121 447.121 38.145 447.09 cv
38.16 447.059 38.199 447.02 38.254 446.969 cv
38.309 446.926 38.402 446.863 38.535 446.777 cv
38.668 446.699 38.836 446.617 39.043 446.531 cv
39.242 446.453 39.465 446.387 39.711 446.332 cv
39.953 446.281 40.211 446.254 40.48 446.25 cv
40.906 446.254 41.277 446.312 41.602 446.43 cv
41.922 446.551 42.191 446.715 42.402 446.926 cv
42.613 447.137 42.77 447.383 42.875 447.656 cv
42.98 447.937 43.035 448.23 43.035 448.543 cv
43.035 448.824 43.008 449.105 42.957 449.387 cv
42.906 449.668 42.801 449.973 42.641 450.293 cv
42.477 450.621 42.242 450.98 41.941 451.379 cv
41.633 451.777 41.23 452.238 40.727 452.754 cv
39.328 454.215 li
43.172 454.215 li
43.203 454.215 43.238 454.227 43.277 454.246 cv
43.309 454.27 43.34 454.301 43.363 454.34 cv
43.387 454.383 43.402 454.434 43.418 454.492 cv
43.426 454.555 43.434 454.625 43.438 454.707 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.719 454.469 mo
46.715 454.793 46.66 455.008 46.555 455.113 cv
46.445 455.219 46.25 455.27 45.973 455.273 cv
45.695 455.27 45.508 455.219 45.406 455.117 cv
45.301 455.012 45.25 454.805 45.25 454.488 cv
45.25 454.168 45.301 453.953 45.41 453.844 cv
45.512 453.742 45.707 453.687 45.992 453.684 cv
46.262 453.687 46.449 453.738 46.559 453.84 cv
46.66 453.945 46.715 454.156 46.719 454.469 cv
cp
f
54.008 452.371 mo
54.004 452.848 53.926 453.27 53.77 453.637 cv
53.609 454.008 53.383 454.316 53.094 454.566 cv
52.797 454.82 52.449 455.016 52.051 455.145 cv
51.645 455.277 51.199 455.34 50.711 455.34 cv
50.434 455.34 50.176 455.32 49.934 455.281 cv
49.688 455.242 49.469 455.195 49.277 455.141 cv
49.086 455.086 48.926 455.031 48.805 454.973 cv
48.68 454.922 48.602 454.879 48.57 454.844 cv
48.531 454.812 48.508 454.781 48.5 454.754 cv
48.484 454.727 48.473 454.695 48.461 454.656 cv
48.449 454.621 48.441 454.57 48.438 454.508 cv
48.43 454.449 48.426 454.379 48.43 454.297 cv
48.426 454.219 48.43 454.152 48.441 454.09 cv
48.445 454.031 48.461 453.98 48.48 453.937 cv
48.496 453.902 48.516 453.871 48.543 453.852 cv
48.566 453.836 48.594 453.828 48.629 453.824 cv
48.672 453.828 48.742 453.855 48.84 453.91 cv
48.934 453.969 49.063 454.031 49.227 454.098 cv
49.383 454.164 49.586 454.227 49.828 454.285 cv
50.066 454.344 50.348 454.375 50.676 454.371 cv
50.98 454.375 51.262 454.336 51.516 454.262 cv
51.77 454.191 51.988 454.078 52.176 453.922 cv
52.359 453.766 52.504 453.57 52.609 453.336 cv
52.711 453.102 52.762 452.816 52.766 452.48 cv
52.762 452.199 52.719 451.953 52.633 451.734 cv
52.543 451.523 52.406 451.344 52.223 451.195 cv
52.035 451.055 51.801 450.945 51.523 450.875 cv
51.238 450.805 50.902 450.77 50.512 450.766 cv
50.234 450.77 49.996 450.785 49.797 450.809 cv
49.594 450.84 49.406 450.852 49.238 450.848 cv
49.105 450.852 49.016 450.824 48.965 450.762 cv
48.906 450.707 48.879 450.59 48.883 450.418 cv
48.883 446.82 li
48.879 446.672 48.914 446.562 48.988 446.488 cv
49.055 446.418 49.156 446.383 49.293 446.379 cv
53.203 446.379 li
53.238 446.383 53.273 446.391 53.309 446.41 cv
53.34 446.43 53.367 446.461 53.395 446.5 cv
53.414 446.543 53.43 446.598 53.445 446.66 cv
53.453 446.727 53.461 446.801 53.461 446.883 cv
53.461 447.051 53.438 447.176 53.395 447.266 cv
53.352 447.359 53.293 447.406 53.215 447.402 cv
50.055 447.402 li
50.055 449.879 li
50.207 449.855 50.363 449.844 50.523 449.84 cv
50.684 449.836 50.871 449.832 51.082 449.832 cv
51.566 449.832 51.988 449.895 52.355 450.016 cv
52.715 450.137 53.02 450.309 53.266 450.527 cv
53.508 450.75 53.691 451.016 53.82 451.328 cv
53.941 451.645 54.004 451.992 54.008 452.371 cv
cp
f
37.125 388.57 mo
58.016 388.57 li
58.016 405.66 li
37.125 405.66 li
cp
0 0 0 0 cmyk
ef
43.395 399.109 mo
43.391 399.586 43.313 400.008 43.156 400.375 cv
42.996 400.746 42.77 401.055 42.48 401.305 cv
42.184 401.559 41.836 401.754 41.438 401.883 cv
41.031 402.016 40.586 402.078 40.098 402.078 cv
39.82 402.078 39.563 402.059 39.32 402.02 cv
39.074 401.98 38.855 401.934 38.664 401.879 cv
38.473 401.824 38.313 401.77 38.191 401.711 cv
38.066 401.66 37.988 401.617 37.957 401.582 cv
37.918 401.551 37.895 401.52 37.887 401.492 cv
37.871 401.465 37.859 401.434 37.848 401.395 cv
37.836 401.359 37.828 401.309 37.824 401.246 cv
37.816 401.187 37.813 401.117 37.816 401.035 cv
37.813 400.957 37.816 400.891 37.828 400.828 cv
37.832 400.77 37.848 400.719 37.867 400.676 cv
37.883 400.641 37.902 400.609 37.93 400.59 cv
37.953 400.574 37.98 400.566 38.016 400.562 cv
38.059 400.566 38.129 400.594 38.227 400.648 cv
38.32 400.707 38.449 400.77 38.613 400.836 cv
38.77 400.902 38.973 400.965 39.215 401.023 cv
39.453 401.082 39.734 401.113 40.063 401.109 cv
40.367 401.113 40.648 401.074 40.902 401 cv
41.156 400.93 41.375 400.816 41.563 400.66 cv
41.746 400.504 41.891 400.309 41.996 400.074 cv
42.098 399.84 42.148 399.555 42.152 399.219 cv
42.148 398.937 42.105 398.691 42.02 398.473 cv
41.93 398.262 41.793 398.082 41.609 397.934 cv
41.422 397.793 41.188 397.684 40.91 397.613 cv
40.625 397.543 40.289 397.508 39.898 397.504 cv
39.621 397.508 39.383 397.523 39.184 397.547 cv
38.98 397.578 38.793 397.59 38.625 397.586 cv
38.492 397.59 38.402 397.562 38.352 397.5 cv
38.293 397.445 38.266 397.328 38.27 397.156 cv
38.27 393.559 li
38.266 393.41 38.301 393.301 38.375 393.227 cv
38.441 393.156 38.543 393.121 38.68 393.117 cv
42.59 393.117 li
42.625 393.121 42.66 393.129 42.695 393.148 cv
42.727 393.168 42.754 393.199 42.781 393.238 cv
42.801 393.281 42.816 393.336 42.832 393.398 cv
42.84 393.465 42.848 393.539 42.848 393.621 cv
42.848 393.789 42.824 393.914 42.781 394.004 cv
42.738 394.098 42.68 394.145 42.602 394.141 cv
39.441 394.141 li
39.441 396.617 li
39.594 396.594 39.75 396.582 39.91 396.578 cv
40.07 396.574 40.258 396.57 40.469 396.57 cv
40.953 396.57 41.375 396.633 41.742 396.754 cv
42.102 396.875 42.406 397.047 42.652 397.266 cv
42.895 397.488 43.078 397.754 43.207 398.066 cv
43.328 398.383 43.391 398.73 43.395 399.109 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.719 401.207 mo
46.715 401.531 46.66 401.746 46.555 401.852 cv
46.445 401.957 46.25 402.008 45.973 402.012 cv
45.695 402.008 45.508 401.957 45.406 401.855 cv
45.301 401.75 45.25 401.543 45.25 401.227 cv
45.25 400.906 45.301 400.691 45.41 400.582 cv
45.512 400.48 45.707 400.426 45.992 400.422 cv
46.262 400.426 46.449 400.477 46.559 400.578 cv
46.66 400.684 46.715 400.895 46.719 401.207 cv
cp
f
54.344 397.512 mo
54.34 398.195 54.285 398.812 54.184 399.371 cv
54.074 399.93 53.898 400.41 53.648 400.812 cv
53.398 401.219 53.074 401.531 52.676 401.75 cv
52.277 401.969 51.781 402.078 51.195 402.078 cv
50.637 402.078 50.172 401.98 49.793 401.781 cv
49.41 401.586 49.102 401.297 48.875 400.91 cv
48.641 400.527 48.477 400.051 48.379 399.488 cv
48.281 398.926 48.234 398.281 48.234 397.555 cv
48.234 396.883 48.289 396.266 48.398 395.699 cv
48.508 395.141 48.684 394.66 48.93 394.254 cv
49.172 393.855 49.496 393.543 49.898 393.32 cv
50.297 393.102 50.789 392.992 51.375 392.988 cv
51.934 392.992 52.402 393.09 52.781 393.285 cv
53.16 393.484 53.465 393.777 53.699 394.16 cv
53.93 394.547 54.094 395.02 54.195 395.578 cv
54.289 396.145 54.34 396.789 54.344 397.512 cv
cp
53.141 397.594 mo
53.137 397.156 53.121 396.758 53.094 396.406 cv
53.059 396.055 53.012 395.746 52.953 395.477 cv
52.891 395.211 52.813 394.98 52.715 394.785 cv
52.613 394.594 52.496 394.434 52.363 394.309 cv
52.227 394.184 52.07 394.094 51.895 394.035 cv
51.719 393.98 51.523 393.953 51.305 393.949 cv
50.918 393.953 50.602 394.043 50.363 394.223 cv
50.117 394.406 49.93 394.656 49.793 394.973 cv
49.652 395.293 49.555 395.668 49.508 396.094 cv
49.453 396.523 49.43 396.98 49.434 397.473 cv
49.43 398.133 49.465 398.695 49.535 399.156 cv
49.605 399.621 49.711 399.996 49.859 400.285 cv
50.004 400.574 50.195 400.785 50.426 400.918 cv
50.656 401.051 50.934 401.117 51.266 401.117 cv
51.516 401.117 51.742 401.078 51.938 400.996 cv
52.129 400.914 52.293 400.797 52.434 400.645 cv
52.57 400.492 52.688 400.309 52.781 400.094 cv
52.871 399.883 52.941 399.645 53 399.383 cv
53.051 399.125 53.09 398.844 53.109 398.539 cv
53.129 398.238 53.137 397.926 53.141 397.594 cv
cp
f
37.125 335.32 mo
58.016 335.32 li
58.016 352.41 li
37.125 352.41 li
cp
0 0 0 0 cmyk
ef
43.566 340.363 mo
43.563 340.449 43.559 340.523 43.555 340.586 cv
43.547 340.656 43.539 340.719 43.527 340.777 cv
43.516 340.84 43.5 340.898 43.48 340.953 cv
43.457 341.012 43.434 341.074 43.41 341.137 cv
40.227 348.465 li
40.203 348.523 40.176 348.57 40.141 348.602 cv
40.105 348.641 40.063 348.668 40.012 348.684 cv
39.957 348.703 39.887 348.711 39.809 348.719 cv
39.723 348.723 39.625 348.727 39.512 348.73 cv
39.352 348.727 39.23 348.719 39.148 348.711 cv
39.059 348.695 38.996 348.68 38.961 348.648 cv
38.918 348.621 38.902 348.582 38.91 348.539 cv
38.914 348.496 38.93 348.445 38.957 348.383 cv
42.305 340.891 li
38.063 340.891 li
37.973 340.895 37.91 340.848 37.867 340.754 cv
37.824 340.664 37.801 340.535 37.805 340.371 cv
37.801 340.285 37.809 340.211 37.82 340.148 cv
37.832 340.086 37.848 340.031 37.871 339.984 cv
37.891 339.941 37.918 339.91 37.953 339.891 cv
37.984 339.871 38.02 339.863 38.063 339.859 cv
43.211 339.859 li
43.273 339.863 43.328 339.867 43.375 339.879 cv
43.422 339.895 43.457 339.922 43.484 339.961 cv
43.508 340.004 43.527 340.059 43.543 340.121 cv
43.555 340.187 43.563 340.27 43.566 340.363 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
46.719 347.949 mo
46.715 348.273 46.66 348.488 46.555 348.594 cv
46.445 348.699 46.25 348.75 45.973 348.754 cv
45.695 348.75 45.508 348.699 45.406 348.598 cv
45.301 348.492 45.25 348.285 45.25 347.969 cv
45.25 347.648 45.301 347.434 45.41 347.324 cv
45.512 347.223 45.707 347.168 45.992 347.164 cv
46.262 347.168 46.449 347.219 46.559 347.32 cv
46.66 347.426 46.715 347.637 46.719 347.949 cv
cp
f
54.008 345.852 mo
54.004 346.328 53.926 346.75 53.77 347.117 cv
53.609 347.488 53.383 347.797 53.094 348.047 cv
52.797 348.301 52.449 348.496 52.051 348.625 cv
51.645 348.758 51.199 348.82 50.711 348.82 cv
50.434 348.82 50.176 348.801 49.934 348.762 cv
49.688 348.723 49.469 348.676 49.277 348.621 cv
49.086 348.566 48.926 348.512 48.805 348.453 cv
48.68 348.402 48.602 348.359 48.57 348.324 cv
48.531 348.293 48.508 348.262 48.5 348.234 cv
48.484 348.207 48.473 348.176 48.461 348.137 cv
48.449 348.102 48.441 348.051 48.438 347.988 cv
48.43 347.93 48.426 347.859 48.43 347.777 cv
48.426 347.699 48.43 347.633 48.441 347.57 cv
48.445 347.512 48.461 347.461 48.48 347.418 cv
48.496 347.383 48.516 347.352 48.543 347.332 cv
48.566 347.316 48.594 347.309 48.629 347.305 cv
48.672 347.309 48.742 347.336 48.84 347.391 cv
48.934 347.449 49.063 347.512 49.227 347.578 cv
49.383 347.645 49.586 347.707 49.828 347.766 cv
50.066 347.824 50.348 347.855 50.676 347.852 cv
50.98 347.855 51.262 347.816 51.516 347.742 cv
51.77 347.672 51.988 347.559 52.176 347.402 cv
52.359 347.246 52.504 347.051 52.609 346.816 cv
52.711 346.582 52.762 346.297 52.766 345.961 cv
52.762 345.68 52.719 345.434 52.633 345.215 cv
52.543 345.004 52.406 344.824 52.223 344.676 cv
52.035 344.535 51.801 344.426 51.523 344.355 cv
51.238 344.285 50.902 344.25 50.512 344.246 cv
50.234 344.25 49.996 344.266 49.797 344.289 cv
49.594 344.32 49.406 344.332 49.238 344.328 cv
49.105 344.332 49.016 344.305 48.965 344.242 cv
48.906 344.187 48.879 344.07 48.883 343.898 cv
48.883 340.301 li
48.879 340.152 48.914 340.043 48.988 339.969 cv
49.055 339.898 49.156 339.863 49.293 339.859 cv
53.203 339.859 li
53.238 339.863 53.273 339.871 53.309 339.891 cv
53.34 339.91 53.367 339.941 53.395 339.98 cv
53.414 340.023 53.43 340.078 53.445 340.141 cv
53.453 340.207 53.461 340.281 53.461 340.363 cv
53.461 340.531 53.438 340.656 53.395 340.746 cv
53.352 340.84 53.293 340.887 53.215 340.883 cv
50.055 340.883 li
50.055 343.359 li
50.207 343.336 50.363 343.324 50.523 343.32 cv
50.684 343.316 50.871 343.312 51.082 343.312 cv
51.566 343.312 51.988 343.375 52.355 343.496 cv
52.715 343.617 53.02 343.789 53.266 344.008 cv
53.508 344.23 53.691 344.496 53.82 344.809 cv
53.941 345.125 54.004 345.473 54.008 345.852 cv
cp
f
30.031 282.07 mo
58.015 282.07 li
58.015 299.16 li
30.031 299.16 li
cp
0 0 0 0 cmyk
ef
36.359 294.965 mo
36.359 295.055 36.352 295.125 36.336 295.184 cv
36.32 295.246 36.301 295.297 36.281 295.328 cv
36.258 295.367 36.23 295.391 36.203 295.406 cv
36.172 295.422 36.145 295.43 36.113 295.43 cv
31.5 295.43 li
31.465 295.43 31.434 295.422 31.41 295.406 cv
31.379 295.391 31.355 295.367 31.332 295.328 cv
31.305 295.297 31.285 295.246 31.273 295.184 cv
31.258 295.125 31.25 295.055 31.254 294.965 cv
31.25 294.887 31.258 294.816 31.273 294.754 cv
31.285 294.699 31.301 294.648 31.324 294.609 cv
31.344 294.57 31.367 294.543 31.398 294.52 cv
31.426 294.504 31.461 294.492 31.5 294.488 cv
33.344 294.488 li
33.344 287.77 li
31.637 288.789 li
31.547 288.836 31.477 288.863 31.426 288.871 cv
31.371 288.883 31.328 288.871 31.301 288.84 cv
31.266 288.812 31.242 288.762 31.234 288.691 cv
31.219 288.625 31.215 288.539 31.219 288.434 cv
31.215 288.355 31.219 288.289 31.227 288.234 cv
31.234 288.18 31.242 288.137 31.258 288.098 cv
31.27 288.066 31.289 288.035 31.316 288.004 cv
31.34 287.98 31.375 287.953 31.418 287.922 cv
33.449 286.617 li
33.465 286.605 33.488 286.598 33.516 286.586 cv
33.543 286.578 33.578 286.566 33.621 286.559 cv
33.66 286.551 33.707 286.547 33.766 286.539 cv
33.816 286.539 33.887 286.535 33.969 286.535 cv
34.078 286.535 34.168 286.543 34.242 286.551 cv
34.313 286.562 34.371 286.574 34.414 286.586 cv
34.453 286.605 34.48 286.625 34.496 286.648 cv
34.508 286.676 34.512 286.703 34.516 286.727 cv
34.516 294.488 li
36.113 294.488 li
36.148 294.492 36.18 294.504 36.215 294.52 cv
36.242 294.543 36.27 294.57 36.293 294.609 cv
36.313 294.648 36.328 294.699 36.34 294.754 cv
36.352 294.816 36.359 294.887 36.359 294.965 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.719 290.992 mo
43.715 291.676 43.66 292.293 43.559 292.852 cv
43.449 293.41 43.273 293.891 43.023 294.293 cv
42.773 294.699 42.449 295.012 42.051 295.23 cv
41.652 295.449 41.156 295.559 40.57 295.559 cv
40.012 295.559 39.547 295.461 39.168 295.262 cv
38.785 295.066 38.477 294.777 38.25 294.391 cv
38.016 294.008 37.852 293.531 37.754 292.969 cv
37.656 292.406 37.609 291.762 37.609 291.035 cv
37.609 290.363 37.664 289.746 37.773 289.18 cv
37.883 288.621 38.059 288.141 38.305 287.734 cv
38.547 287.336 38.871 287.023 39.273 286.801 cv
39.672 286.582 40.164 286.473 40.75 286.469 cv
41.309 286.473 41.777 286.57 42.156 286.766 cv
42.535 286.965 42.84 287.258 43.074 287.641 cv
43.305 288.027 43.469 288.5 43.57 289.059 cv
43.664 289.625 43.715 290.27 43.719 290.992 cv
cp
42.516 291.074 mo
42.512 290.637 42.496 290.238 42.469 289.887 cv
42.434 289.535 42.387 289.227 42.328 288.957 cv
42.266 288.691 42.188 288.461 42.09 288.266 cv
41.988 288.074 41.871 287.914 41.738 287.789 cv
41.602 287.664 41.445 287.574 41.27 287.516 cv
41.094 287.461 40.898 287.434 40.68 287.43 cv
40.293 287.434 39.977 287.523 39.738 287.703 cv
39.492 287.887 39.305 288.137 39.168 288.453 cv
39.027 288.773 38.93 289.148 38.883 289.574 cv
38.828 290.004 38.805 290.461 38.809 290.953 cv
38.805 291.613 38.84 292.176 38.91 292.637 cv
38.98 293.102 39.086 293.477 39.234 293.766 cv
39.379 294.055 39.57 294.266 39.801 294.398 cv
40.031 294.531 40.309 294.598 40.641 294.598 cv
40.891 294.598 41.117 294.559 41.313 294.477 cv
41.504 294.395 41.668 294.277 41.809 294.125 cv
41.945 293.973 42.063 293.789 42.156 293.574 cv
42.246 293.363 42.316 293.125 42.375 292.863 cv
42.426 292.605 42.465 292.324 42.484 292.02 cv
42.504 291.719 42.512 291.406 42.516 291.074 cv
cp
f
46.734 294.687 mo
46.73 295.012 46.676 295.227 46.57 295.332 cv
46.461 295.437 46.266 295.488 45.988 295.492 cv
45.711 295.488 45.523 295.437 45.422 295.336 cv
45.316 295.23 45.266 295.023 45.266 294.707 cv
45.266 294.387 45.316 294.172 45.426 294.062 cv
45.527 293.961 45.723 293.906 46.008 293.902 cv
46.277 293.906 46.465 293.957 46.574 294.059 cv
46.676 294.164 46.73 294.375 46.734 294.687 cv
cp
f
54.316 290.992 mo
54.313 291.676 54.258 292.293 54.156 292.852 cv
54.047 293.41 53.871 293.891 53.621 294.293 cv
53.371 294.699 53.047 295.012 52.648 295.23 cv
52.25 295.449 51.754 295.559 51.168 295.559 cv
50.609 295.559 50.145 295.461 49.766 295.262 cv
49.383 295.066 49.074 294.777 48.848 294.391 cv
48.613 294.008 48.449 293.531 48.352 292.969 cv
48.254 292.406 48.207 291.762 48.207 291.035 cv
48.207 290.363 48.262 289.746 48.371 289.18 cv
48.48 288.621 48.656 288.141 48.902 287.734 cv
49.145 287.336 49.469 287.023 49.871 286.801 cv
50.27 286.582 50.762 286.473 51.348 286.469 cv
51.906 286.473 52.375 286.57 52.754 286.766 cv
53.133 286.965 53.438 287.258 53.672 287.641 cv
53.902 288.027 54.066 288.5 54.168 289.059 cv
54.262 289.625 54.313 290.27 54.316 290.992 cv
cp
53.113 291.074 mo
53.109 290.637 53.094 290.238 53.066 289.887 cv
53.031 289.535 52.984 289.227 52.926 288.957 cv
52.863 288.691 52.785 288.461 52.688 288.266 cv
52.586 288.074 52.469 287.914 52.336 287.789 cv
52.199 287.664 52.043 287.574 51.867 287.516 cv
51.691 287.461 51.496 287.434 51.277 287.43 cv
50.891 287.434 50.574 287.523 50.336 287.703 cv
50.09 287.887 49.902 288.137 49.766 288.453 cv
49.625 288.773 49.527 289.148 49.48 289.574 cv
49.426 290.004 49.402 290.461 49.406 290.953 cv
49.402 291.613 49.438 292.176 49.508 292.637 cv
49.578 293.102 49.684 293.477 49.832 293.766 cv
49.977 294.055 50.168 294.266 50.398 294.398 cv
50.629 294.531 50.906 294.598 51.238 294.598 cv
51.488 294.598 51.715 294.559 51.91 294.477 cv
52.102 294.395 52.266 294.277 52.406 294.125 cv
52.543 293.973 52.66 293.789 52.754 293.574 cv
52.844 293.363 52.914 293.125 52.973 292.863 cv
53.023 292.605 53.063 292.324 53.082 292.02 cv
53.102 291.719 53.109 291.406 53.113 291.074 cv
cp
f
30.031 228.809 mo
58.015 228.809 li
58.015 245.899 li
30.031 245.899 li
cp
0 0 0 0 cmyk
ef
36.359 241.707 mo
36.359 241.797 36.352 241.867 36.336 241.926 cv
36.32 241.988 36.301 242.039 36.281 242.07 cv
36.258 242.109 36.23 242.133 36.203 242.148 cv
36.172 242.164 36.145 242.172 36.113 242.172 cv
31.5 242.172 li
31.465 242.172 31.434 242.164 31.41 242.148 cv
31.379 242.133 31.355 242.109 31.332 242.07 cv
31.305 242.039 31.285 241.988 31.273 241.926 cv
31.258 241.867 31.25 241.797 31.254 241.707 cv
31.25 241.629 31.258 241.559 31.273 241.496 cv
31.285 241.441 31.301 241.391 31.324 241.352 cv
31.344 241.312 31.367 241.285 31.398 241.262 cv
31.426 241.246 31.461 241.234 31.5 241.23 cv
33.344 241.23 li
33.344 234.512 li
31.637 235.531 li
31.547 235.578 31.477 235.605 31.426 235.613 cv
31.371 235.625 31.328 235.613 31.301 235.582 cv
31.266 235.555 31.242 235.504 31.234 235.434 cv
31.219 235.367 31.215 235.281 31.219 235.176 cv
31.215 235.098 31.219 235.031 31.227 234.977 cv
31.234 234.922 31.242 234.879 31.258 234.84 cv
31.27 234.809 31.289 234.777 31.316 234.746 cv
31.34 234.723 31.375 234.695 31.418 234.664 cv
33.449 233.359 li
33.465 233.348 33.488 233.34 33.516 233.328 cv
33.543 233.32 33.578 233.309 33.621 233.301 cv
33.66 233.293 33.707 233.289 33.766 233.281 cv
33.816 233.281 33.887 233.277 33.969 233.277 cv
34.078 233.277 34.168 233.285 34.242 233.293 cv
34.313 233.305 34.371 233.316 34.414 233.328 cv
34.453 233.348 34.48 233.367 34.496 233.391 cv
34.508 233.418 34.512 233.445 34.516 233.469 cv
34.516 241.23 li
36.113 241.23 li
36.148 241.234 36.18 241.246 36.215 241.262 cv
36.242 241.285 36.27 241.312 36.293 241.352 cv
36.313 241.391 36.328 241.441 36.34 241.496 cv
36.352 241.559 36.359 241.629 36.359 241.707 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.426 241.668 mo
43.422 241.75 43.414 241.824 43.406 241.887 cv
43.391 241.953 43.375 242.008 43.359 242.047 cv
43.336 242.094 43.309 242.125 43.277 242.141 cv
43.238 242.164 43.203 242.172 43.164 242.172 cv
38.285 242.172 li
38.215 242.172 38.16 242.164 38.117 242.148 cv
38.066 242.133 38.023 242.109 37.992 242.07 cv
37.953 242.039 37.93 241.984 37.918 241.914 cv
37.898 241.844 37.891 241.762 37.895 241.66 cv
37.891 241.574 37.895 241.492 37.906 241.422 cv
37.91 241.355 37.926 241.297 37.953 241.242 cv
37.973 241.191 38 241.137 38.039 241.082 cv
38.07 241.031 38.117 240.977 38.176 240.914 cv
39.941 239.102 li
40.348 238.684 40.672 238.309 40.922 237.977 cv
41.164 237.645 41.355 237.344 41.492 237.066 cv
41.625 236.797 41.715 236.547 41.758 236.324 cv
41.797 236.102 41.816 235.895 41.82 235.695 cv
41.816 235.5 41.785 235.312 41.723 235.137 cv
41.656 234.965 41.559 234.812 41.438 234.68 cv
41.309 234.551 41.152 234.445 40.969 234.363 cv
40.777 234.289 40.563 234.25 40.32 234.246 cv
40.031 234.25 39.773 234.289 39.547 234.363 cv
39.316 234.445 39.117 234.531 38.949 234.617 cv
38.773 234.711 38.629 234.793 38.52 234.867 cv
38.402 234.949 38.316 234.988 38.262 234.984 cv
38.227 234.988 38.199 234.98 38.176 234.957 cv
38.148 234.941 38.125 234.91 38.109 234.867 cv
38.09 234.828 38.078 234.773 38.07 234.703 cv
38.059 234.637 38.055 234.555 38.059 234.457 cv
38.055 234.391 38.059 234.332 38.066 234.281 cv
38.07 234.234 38.078 234.191 38.09 234.152 cv
38.098 234.117 38.109 234.082 38.133 234.051 cv
38.148 234.02 38.188 233.98 38.242 233.93 cv
38.297 233.887 38.391 233.824 38.523 233.738 cv
38.656 233.66 38.824 233.578 39.031 233.492 cv
39.23 233.414 39.453 233.348 39.699 233.293 cv
39.941 233.242 40.199 233.215 40.469 233.211 cv
40.895 233.215 41.266 233.273 41.59 233.391 cv
41.91 233.512 42.18 233.676 42.391 233.887 cv
42.602 234.098 42.758 234.344 42.863 234.617 cv
42.969 234.898 43.023 235.191 43.023 235.504 cv
43.023 235.785 42.996 236.066 42.945 236.348 cv
42.895 236.629 42.789 236.934 42.629 237.254 cv
42.465 237.582 42.23 237.941 41.93 238.34 cv
41.621 238.738 41.219 239.199 40.715 239.715 cv
39.316 241.176 li
43.16 241.176 li
43.191 241.176 43.227 241.187 43.266 241.207 cv
43.297 241.23 43.328 241.262 43.352 241.301 cv
43.375 241.344 43.391 241.395 43.406 241.453 cv
43.414 241.516 43.422 241.586 43.426 241.668 cv
cp
f
46.734 241.43 mo
46.73 241.754 46.676 241.969 46.57 242.074 cv
46.461 242.18 46.266 242.23 45.988 242.234 cv
45.711 242.23 45.523 242.18 45.422 242.078 cv
45.316 241.973 45.266 241.766 45.266 241.449 cv
45.266 241.129 45.316 240.914 45.426 240.805 cv
45.527 240.703 45.723 240.648 46.008 240.645 cv
46.277 240.648 46.465 240.699 46.574 240.801 cv
46.676 240.906 46.73 241.117 46.734 241.43 cv
cp
f
53.98 239.332 mo
53.977 239.809 53.898 240.23 53.742 240.598 cv
53.582 240.969 53.355 241.277 53.066 241.527 cv
52.77 241.781 52.422 241.977 52.023 242.105 cv
51.617 242.238 51.172 242.301 50.684 242.301 cv
50.406 242.301 50.148 242.281 49.906 242.242 cv
49.66 242.203 49.441 242.156 49.25 242.102 cv
49.059 242.047 48.898 241.992 48.777 241.934 cv
48.652 241.883 48.574 241.84 48.543 241.805 cv
48.504 241.773 48.48 241.742 48.473 241.715 cv
48.457 241.687 48.445 241.656 48.434 241.617 cv
48.422 241.582 48.414 241.531 48.41 241.469 cv
48.402 241.41 48.398 241.34 48.402 241.258 cv
48.398 241.18 48.402 241.113 48.414 241.051 cv
48.418 240.992 48.434 240.941 48.453 240.898 cv
48.469 240.863 48.488 240.832 48.516 240.812 cv
48.539 240.797 48.566 240.789 48.602 240.785 cv
48.645 240.789 48.715 240.816 48.813 240.871 cv
48.906 240.93 49.035 240.992 49.199 241.059 cv
49.355 241.125 49.559 241.187 49.801 241.246 cv
50.039 241.305 50.32 241.336 50.648 241.332 cv
50.953 241.336 51.234 241.297 51.488 241.223 cv
51.742 241.152 51.961 241.039 52.148 240.883 cv
52.332 240.727 52.477 240.531 52.582 240.297 cv
52.684 240.062 52.734 239.777 52.738 239.441 cv
52.734 239.16 52.691 238.914 52.605 238.695 cv
52.516 238.484 52.379 238.305 52.195 238.156 cv
52.008 238.016 51.773 237.906 51.496 237.836 cv
51.211 237.766 50.875 237.73 50.484 237.727 cv
50.207 237.73 49.969 237.746 49.77 237.77 cv
49.566 237.801 49.379 237.812 49.211 237.809 cv
49.078 237.812 48.988 237.785 48.938 237.723 cv
48.879 237.668 48.852 237.551 48.855 237.379 cv
48.855 233.781 li
48.852 233.633 48.887 233.523 48.961 233.449 cv
49.027 233.379 49.129 233.344 49.266 233.34 cv
53.176 233.34 li
53.211 233.344 53.246 233.352 53.281 233.371 cv
53.313 233.391 53.34 233.422 53.367 233.461 cv
53.387 233.504 53.402 233.559 53.418 233.621 cv
53.426 233.687 53.434 233.762 53.434 233.844 cv
53.434 234.012 53.41 234.137 53.367 234.227 cv
53.324 234.32 53.266 234.367 53.188 234.363 cv
50.027 234.363 li
50.027 236.84 li
50.18 236.816 50.336 236.805 50.496 236.801 cv
50.656 236.797 50.844 236.793 51.055 236.793 cv
51.539 236.793 51.961 236.855 52.328 236.977 cv
52.688 237.098 52.992 237.27 53.238 237.488 cv
53.48 237.711 53.664 237.977 53.793 238.289 cv
53.914 238.605 53.977 238.953 53.98 239.332 cv
cp
f
30.031 175.559 mo
58.015 175.559 li
58.015 192.649 li
30.031 192.649 li
cp
0 0 0 0 cmyk
ef
36.359 188.445 mo
36.359 188.535 36.352 188.605 36.336 188.664 cv
36.32 188.727 36.301 188.777 36.281 188.809 cv
36.258 188.848 36.23 188.871 36.203 188.887 cv
36.172 188.902 36.145 188.91 36.113 188.91 cv
31.5 188.91 li
31.465 188.91 31.434 188.902 31.41 188.887 cv
31.379 188.871 31.355 188.848 31.332 188.809 cv
31.305 188.777 31.285 188.727 31.273 188.664 cv
31.258 188.605 31.25 188.535 31.254 188.445 cv
31.25 188.367 31.258 188.297 31.273 188.234 cv
31.285 188.18 31.301 188.129 31.324 188.09 cv
31.344 188.051 31.367 188.023 31.398 188 cv
31.426 187.984 31.461 187.973 31.5 187.969 cv
33.344 187.969 li
33.344 181.25 li
31.637 182.27 li
31.547 182.316 31.477 182.344 31.426 182.352 cv
31.371 182.363 31.328 182.352 31.301 182.32 cv
31.266 182.293 31.242 182.242 31.234 182.172 cv
31.219 182.105 31.215 182.02 31.219 181.914 cv
31.215 181.836 31.219 181.77 31.227 181.715 cv
31.234 181.66 31.242 181.617 31.258 181.578 cv
31.27 181.547 31.289 181.516 31.316 181.484 cv
31.34 181.461 31.375 181.434 31.418 181.402 cv
33.449 180.098 li
33.465 180.086 33.488 180.078 33.516 180.066 cv
33.543 180.059 33.578 180.047 33.621 180.039 cv
33.66 180.031 33.707 180.027 33.766 180.02 cv
33.816 180.02 33.887 180.016 33.969 180.016 cv
34.078 180.016 34.168 180.023 34.242 180.031 cv
34.313 180.043 34.371 180.055 34.414 180.066 cv
34.453 180.086 34.48 180.105 34.496 180.129 cv
34.508 180.156 34.512 180.184 34.516 180.207 cv
34.516 187.969 li
36.113 187.969 li
36.148 187.973 36.18 187.984 36.215 188 cv
36.242 188.023 36.27 188.051 36.293 188.09 cv
36.313 188.129 36.328 188.18 36.34 188.234 cv
36.352 188.297 36.359 188.367 36.359 188.445 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.383 186.07 mo
43.379 186.547 43.301 186.969 43.145 187.336 cv
42.984 187.707 42.758 188.016 42.469 188.266 cv
42.172 188.52 41.824 188.715 41.426 188.844 cv
41.02 188.977 40.574 189.039 40.086 189.039 cv
39.809 189.039 39.551 189.02 39.309 188.98 cv
39.063 188.941 38.844 188.895 38.652 188.84 cv
38.461 188.785 38.301 188.73 38.18 188.672 cv
38.055 188.621 37.977 188.578 37.945 188.543 cv
37.906 188.512 37.883 188.48 37.875 188.453 cv
37.859 188.426 37.848 188.395 37.836 188.355 cv
37.824 188.32 37.816 188.27 37.813 188.207 cv
37.805 188.148 37.801 188.078 37.805 187.996 cv
37.801 187.918 37.805 187.852 37.816 187.789 cv
37.82 187.73 37.836 187.68 37.855 187.637 cv
37.871 187.602 37.891 187.57 37.918 187.551 cv
37.941 187.535 37.969 187.527 38.004 187.523 cv
38.047 187.527 38.117 187.555 38.215 187.609 cv
38.309 187.668 38.438 187.73 38.602 187.797 cv
38.758 187.863 38.961 187.926 39.203 187.984 cv
39.441 188.043 39.723 188.074 40.051 188.07 cv
40.355 188.074 40.637 188.035 40.891 187.961 cv
41.145 187.891 41.363 187.777 41.551 187.621 cv
41.734 187.465 41.879 187.27 41.984 187.035 cv
42.086 186.801 42.137 186.516 42.141 186.18 cv
42.137 185.898 42.094 185.652 42.008 185.434 cv
41.918 185.223 41.781 185.043 41.598 184.895 cv
41.41 184.754 41.176 184.645 40.898 184.574 cv
40.613 184.504 40.277 184.469 39.887 184.465 cv
39.609 184.469 39.371 184.484 39.172 184.508 cv
38.969 184.539 38.781 184.551 38.613 184.547 cv
38.48 184.551 38.391 184.523 38.34 184.461 cv
38.281 184.406 38.254 184.289 38.258 184.117 cv
38.258 180.52 li
38.254 180.371 38.289 180.262 38.363 180.187 cv
38.43 180.117 38.531 180.082 38.668 180.078 cv
42.578 180.078 li
42.613 180.082 42.648 180.09 42.684 180.109 cv
42.715 180.129 42.742 180.16 42.77 180.199 cv
42.789 180.242 42.805 180.297 42.82 180.359 cv
42.828 180.426 42.836 180.5 42.836 180.582 cv
42.836 180.75 42.813 180.875 42.77 180.965 cv
42.727 181.059 42.668 181.105 42.59 181.102 cv
39.43 181.102 li
39.43 183.578 li
39.582 183.555 39.738 183.543 39.898 183.539 cv
40.059 183.535 40.246 183.531 40.457 183.531 cv
40.941 183.531 41.363 183.594 41.73 183.715 cv
42.09 183.836 42.395 184.008 42.641 184.227 cv
42.883 184.449 43.066 184.715 43.195 185.027 cv
43.316 185.344 43.379 185.691 43.383 186.07 cv
cp
f
46.734 188.168 mo
46.73 188.492 46.676 188.707 46.57 188.812 cv
46.461 188.918 46.266 188.969 45.988 188.973 cv
45.711 188.969 45.523 188.918 45.422 188.816 cv
45.316 188.711 45.266 188.504 45.266 188.187 cv
45.266 187.867 45.316 187.652 45.426 187.543 cv
45.527 187.441 45.723 187.387 46.008 187.383 cv
46.277 187.387 46.465 187.437 46.574 187.539 cv
46.676 187.645 46.73 187.855 46.734 188.168 cv
cp
f
54.316 184.473 mo
54.313 185.156 54.258 185.773 54.156 186.332 cv
54.047 186.891 53.871 187.371 53.621 187.773 cv
53.371 188.18 53.047 188.492 52.648 188.711 cv
52.25 188.93 51.754 189.039 51.168 189.039 cv
50.609 189.039 50.145 188.941 49.766 188.742 cv
49.383 188.547 49.074 188.258 48.848 187.871 cv
48.613 187.488 48.449 187.012 48.352 186.449 cv
48.254 185.887 48.207 185.242 48.207 184.516 cv
48.207 183.844 48.262 183.227 48.371 182.66 cv
48.48 182.102 48.656 181.621 48.902 181.215 cv
49.145 180.816 49.469 180.504 49.871 180.281 cv
50.27 180.062 50.762 179.953 51.348 179.949 cv
51.906 179.953 52.375 180.051 52.754 180.246 cv
53.133 180.445 53.438 180.738 53.672 181.121 cv
53.902 181.508 54.066 181.98 54.168 182.539 cv
54.262 183.105 54.313 183.75 54.316 184.473 cv
cp
53.113 184.555 mo
53.109 184.117 53.094 183.719 53.066 183.367 cv
53.031 183.016 52.984 182.707 52.926 182.437 cv
52.863 182.172 52.785 181.941 52.688 181.746 cv
52.586 181.555 52.469 181.395 52.336 181.27 cv
52.199 181.145 52.043 181.055 51.867 180.996 cv
51.691 180.941 51.496 180.914 51.277 180.91 cv
50.891 180.914 50.574 181.004 50.336 181.184 cv
50.09 181.367 49.902 181.617 49.766 181.934 cv
49.625 182.254 49.527 182.629 49.48 183.055 cv
49.426 183.484 49.402 183.941 49.406 184.434 cv
49.402 185.094 49.438 185.656 49.508 186.117 cv
49.578 186.582 49.684 186.957 49.832 187.246 cv
49.977 187.535 50.168 187.746 50.398 187.879 cv
50.629 188.012 50.906 188.078 51.238 188.078 cv
51.488 188.078 51.715 188.039 51.91 187.957 cv
52.102 187.875 52.266 187.758 52.406 187.605 cv
52.543 187.453 52.66 187.27 52.754 187.055 cv
52.844 186.844 52.914 186.605 52.973 186.344 cv
53.023 186.086 53.063 185.805 53.082 185.5 cv
53.102 185.199 53.109 184.887 53.113 184.555 cv
cp
f
30.031 122.309 mo
58.015 122.309 li
58.015 139.399 li
30.031 139.399 li
cp
0 0 0 0 cmyk
ef
36.359 135.184 mo
36.359 135.273 36.352 135.344 36.336 135.402 cv
36.32 135.465 36.301 135.516 36.281 135.547 cv
36.258 135.586 36.23 135.609 36.203 135.625 cv
36.172 135.641 36.145 135.648 36.113 135.648 cv
31.5 135.648 li
31.465 135.648 31.434 135.641 31.41 135.625 cv
31.379 135.609 31.355 135.586 31.332 135.547 cv
31.305 135.516 31.285 135.465 31.273 135.402 cv
31.258 135.344 31.25 135.273 31.254 135.184 cv
31.25 135.105 31.258 135.035 31.273 134.973 cv
31.285 134.918 31.301 134.867 31.324 134.828 cv
31.344 134.789 31.367 134.762 31.398 134.738 cv
31.426 134.723 31.461 134.711 31.5 134.707 cv
33.344 134.707 li
33.344 127.988 li
31.637 129.008 li
31.547 129.055 31.477 129.082 31.426 129.09 cv
31.371 129.102 31.328 129.09 31.301 129.059 cv
31.266 129.031 31.242 128.98 31.234 128.91 cv
31.219 128.844 31.215 128.758 31.219 128.652 cv
31.215 128.574 31.219 128.508 31.227 128.453 cv
31.234 128.398 31.242 128.355 31.258 128.316 cv
31.27 128.285 31.289 128.254 31.316 128.223 cv
31.34 128.199 31.375 128.172 31.418 128.141 cv
33.449 126.836 li
33.465 126.824 33.488 126.816 33.516 126.805 cv
33.543 126.797 33.578 126.785 33.621 126.777 cv
33.66 126.77 33.707 126.766 33.766 126.758 cv
33.816 126.758 33.887 126.754 33.969 126.754 cv
34.078 126.754 34.168 126.762 34.242 126.77 cv
34.313 126.781 34.371 126.793 34.414 126.805 cv
34.453 126.824 34.48 126.844 34.496 126.867 cv
34.508 126.895 34.512 126.922 34.516 126.945 cv
34.516 134.707 li
36.113 134.707 li
36.148 134.711 36.18 134.723 36.215 134.738 cv
36.242 134.762 36.27 134.789 36.293 134.828 cv
36.313 134.867 36.328 134.918 36.34 134.973 cv
36.352 135.035 36.359 135.105 36.359 135.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.555 127.32 mo
43.551 127.406 43.547 127.48 43.543 127.543 cv
43.535 127.613 43.527 127.676 43.516 127.734 cv
43.504 127.797 43.488 127.855 43.469 127.91 cv
43.445 127.969 43.422 128.031 43.398 128.094 cv
40.215 135.422 li
40.191 135.48 40.164 135.527 40.129 135.559 cv
40.094 135.598 40.051 135.625 40 135.641 cv
39.945 135.66 39.875 135.668 39.797 135.676 cv
39.711 135.68 39.613 135.684 39.5 135.687 cv
39.34 135.684 39.219 135.676 39.137 135.668 cv
39.047 135.652 38.984 135.637 38.949 135.605 cv
38.906 135.578 38.891 135.539 38.898 135.496 cv
38.902 135.453 38.918 135.402 38.945 135.34 cv
42.293 127.848 li
38.051 127.848 li
37.961 127.852 37.898 127.805 37.855 127.711 cv
37.813 127.621 37.789 127.492 37.793 127.328 cv
37.789 127.242 37.797 127.168 37.809 127.105 cv
37.82 127.043 37.836 126.988 37.859 126.941 cv
37.879 126.898 37.906 126.867 37.941 126.848 cv
37.973 126.828 38.008 126.82 38.051 126.816 cv
43.199 126.816 li
43.262 126.82 43.316 126.824 43.363 126.836 cv
43.41 126.852 43.445 126.879 43.473 126.918 cv
43.496 126.961 43.516 127.016 43.531 127.078 cv
43.543 127.145 43.551 127.227 43.555 127.32 cv
cp
f
46.734 134.906 mo
46.73 135.23 46.676 135.445 46.57 135.551 cv
46.461 135.656 46.266 135.707 45.988 135.711 cv
45.711 135.707 45.523 135.656 45.422 135.555 cv
45.316 135.449 45.266 135.242 45.266 134.926 cv
45.266 134.605 45.316 134.391 45.426 134.281 cv
45.527 134.18 45.723 134.125 46.008 134.121 cv
46.277 134.125 46.465 134.176 46.574 134.277 cv
46.676 134.383 46.73 134.594 46.734 134.906 cv
cp
f
53.98 132.809 mo
53.977 133.285 53.898 133.707 53.742 134.074 cv
53.582 134.445 53.355 134.754 53.066 135.004 cv
52.77 135.258 52.422 135.453 52.023 135.582 cv
51.617 135.715 51.172 135.777 50.684 135.777 cv
50.406 135.777 50.148 135.758 49.906 135.719 cv
49.66 135.68 49.441 135.633 49.25 135.578 cv
49.059 135.523 48.898 135.469 48.777 135.41 cv
48.652 135.359 48.574 135.316 48.543 135.281 cv
48.504 135.25 48.48 135.219 48.473 135.191 cv
48.457 135.164 48.445 135.133 48.434 135.094 cv
48.422 135.059 48.414 135.008 48.41 134.945 cv
48.402 134.887 48.398 134.816 48.402 134.734 cv
48.398 134.656 48.402 134.59 48.414 134.527 cv
48.418 134.469 48.434 134.418 48.453 134.375 cv
48.469 134.34 48.488 134.309 48.516 134.289 cv
48.539 134.273 48.566 134.266 48.602 134.262 cv
48.645 134.266 48.715 134.293 48.813 134.348 cv
48.906 134.406 49.035 134.469 49.199 134.535 cv
49.355 134.602 49.559 134.664 49.801 134.723 cv
50.039 134.781 50.32 134.812 50.648 134.809 cv
50.953 134.812 51.234 134.773 51.488 134.699 cv
51.742 134.629 51.961 134.516 52.148 134.359 cv
52.332 134.203 52.477 134.008 52.582 133.773 cv
52.684 133.539 52.734 133.254 52.738 132.918 cv
52.734 132.637 52.691 132.391 52.605 132.172 cv
52.516 131.961 52.379 131.781 52.195 131.633 cv
52.008 131.492 51.773 131.383 51.496 131.312 cv
51.211 131.242 50.875 131.207 50.484 131.203 cv
50.207 131.207 49.969 131.223 49.77 131.246 cv
49.566 131.277 49.379 131.289 49.211 131.285 cv
49.078 131.289 48.988 131.262 48.938 131.199 cv
48.879 131.145 48.852 131.027 48.855 130.855 cv
48.855 127.258 li
48.852 127.109 48.887 127 48.961 126.926 cv
49.027 126.855 49.129 126.82 49.266 126.816 cv
53.176 126.816 li
53.211 126.82 53.246 126.828 53.281 126.848 cv
53.313 126.867 53.34 126.898 53.367 126.937 cv
53.387 126.98 53.402 127.035 53.418 127.098 cv
53.426 127.164 53.434 127.238 53.434 127.32 cv
53.434 127.488 53.41 127.613 53.367 127.703 cv
53.324 127.797 53.266 127.844 53.188 127.84 cv
50.027 127.84 li
50.027 130.316 li
50.18 130.293 50.336 130.281 50.496 130.277 cv
50.656 130.273 50.844 130.27 51.055 130.27 cv
51.539 130.27 51.961 130.332 52.328 130.453 cv
52.688 130.574 52.992 130.746 53.238 130.965 cv
53.48 131.187 53.664 131.453 53.793 131.766 cv
53.914 132.082 53.977 132.43 53.98 132.809 cv
cp
f
30.031 69.051 mo
58.015 69.051 li
58.015 86.141 li
30.031 86.141 li
cp
0 0 0 0 cmyk
ef
36.34 81.887 mo
36.336 81.969 36.328 82.043 36.32 82.105 cv
36.305 82.172 36.289 82.227 36.273 82.266 cv
36.25 82.312 36.223 82.344 36.191 82.359 cv
36.152 82.383 36.117 82.391 36.078 82.391 cv
31.199 82.391 li
31.129 82.391 31.074 82.383 31.031 82.367 cv
30.98 82.352 30.938 82.328 30.906 82.289 cv
30.867 82.258 30.844 82.203 30.832 82.133 cv
30.813 82.062 30.805 81.98 30.809 81.879 cv
30.805 81.793 30.809 81.711 30.82 81.641 cv
30.824 81.574 30.84 81.516 30.867 81.461 cv
30.887 81.41 30.914 81.355 30.953 81.301 cv
30.984 81.25 31.031 81.195 31.09 81.133 cv
32.855 79.32 li
33.262 78.902 33.586 78.527 33.836 78.195 cv
34.078 77.863 34.27 77.562 34.406 77.285 cv
34.539 77.016 34.629 76.766 34.672 76.543 cv
34.711 76.32 34.73 76.113 34.734 75.914 cv
34.73 75.719 34.699 75.531 34.637 75.355 cv
34.57 75.184 34.473 75.031 34.352 74.898 cv
34.223 74.77 34.066 74.664 33.883 74.582 cv
33.691 74.508 33.477 74.469 33.234 74.465 cv
32.945 74.469 32.688 74.508 32.461 74.582 cv
32.23 74.664 32.031 74.75 31.863 74.836 cv
31.688 74.93 31.543 75.012 31.434 75.086 cv
31.316 75.168 31.23 75.207 31.176 75.203 cv
31.141 75.207 31.113 75.199 31.09 75.176 cv
31.063 75.16 31.039 75.129 31.023 75.086 cv
31.004 75.047 30.992 74.992 30.984 74.922 cv
30.973 74.855 30.969 74.773 30.973 74.676 cv
30.969 74.609 30.973 74.551 30.98 74.5 cv
30.984 74.453 30.992 74.41 31.004 74.371 cv
31.012 74.336 31.023 74.301 31.047 74.27 cv
31.063 74.238 31.102 74.199 31.156 74.148 cv
31.211 74.105 31.305 74.043 31.438 73.957 cv
31.57 73.879 31.738 73.797 31.945 73.711 cv
32.145 73.633 32.367 73.566 32.613 73.512 cv
32.855 73.461 33.113 73.434 33.383 73.43 cv
33.809 73.434 34.18 73.492 34.504 73.609 cv
34.824 73.73 35.094 73.895 35.305 74.105 cv
35.516 74.316 35.672 74.562 35.777 74.836 cv
35.883 75.117 35.938 75.41 35.938 75.723 cv
35.938 76.004 35.91 76.285 35.859 76.566 cv
35.809 76.848 35.703 77.152 35.543 77.473 cv
35.379 77.801 35.145 78.16 34.844 78.559 cv
34.535 78.957 34.133 79.418 33.629 79.934 cv
32.23 81.395 li
36.074 81.395 li
36.105 81.395 36.141 81.406 36.18 81.426 cv
36.211 81.449 36.242 81.48 36.266 81.52 cv
36.289 81.562 36.305 81.613 36.32 81.672 cv
36.328 81.734 36.336 81.805 36.34 81.887 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.719 77.953 mo
43.715 78.637 43.66 79.254 43.559 79.812 cv
43.449 80.371 43.273 80.852 43.023 81.254 cv
42.773 81.66 42.449 81.973 42.051 82.191 cv
41.652 82.41 41.156 82.52 40.57 82.52 cv
40.012 82.52 39.547 82.422 39.168 82.223 cv
38.785 82.027 38.477 81.738 38.25 81.352 cv
38.016 80.969 37.852 80.492 37.754 79.93 cv
37.656 79.367 37.609 78.723 37.609 77.996 cv
37.609 77.324 37.664 76.707 37.773 76.141 cv
37.883 75.582 38.059 75.102 38.305 74.695 cv
38.547 74.297 38.871 73.984 39.273 73.762 cv
39.672 73.543 40.164 73.434 40.75 73.43 cv
41.309 73.434 41.777 73.531 42.156 73.727 cv
42.535 73.926 42.84 74.219 43.074 74.602 cv
43.305 74.988 43.469 75.461 43.57 76.02 cv
43.664 76.586 43.715 77.23 43.719 77.953 cv
cp
42.516 78.035 mo
42.512 77.598 42.496 77.199 42.469 76.848 cv
42.434 76.496 42.387 76.187 42.328 75.918 cv
42.266 75.652 42.188 75.422 42.09 75.227 cv
41.988 75.035 41.871 74.875 41.738 74.75 cv
41.602 74.625 41.445 74.535 41.27 74.477 cv
41.094 74.422 40.898 74.395 40.68 74.391 cv
40.293 74.395 39.977 74.484 39.738 74.664 cv
39.492 74.848 39.305 75.098 39.168 75.414 cv
39.027 75.734 38.93 76.109 38.883 76.535 cv
38.828 76.965 38.805 77.422 38.809 77.914 cv
38.805 78.574 38.84 79.137 38.91 79.598 cv
38.98 80.062 39.086 80.437 39.234 80.727 cv
39.379 81.016 39.57 81.227 39.801 81.359 cv
40.031 81.492 40.309 81.559 40.641 81.559 cv
40.891 81.559 41.117 81.52 41.313 81.437 cv
41.504 81.355 41.668 81.238 41.809 81.086 cv
41.945 80.934 42.063 80.75 42.156 80.535 cv
42.246 80.324 42.316 80.086 42.375 79.824 cv
42.426 79.566 42.465 79.285 42.484 78.98 cv
42.504 78.68 42.512 78.367 42.516 78.035 cv
cp
f
46.734 81.648 mo
46.73 81.973 46.676 82.187 46.57 82.293 cv
46.461 82.398 46.266 82.449 45.988 82.453 cv
45.711 82.449 45.523 82.398 45.422 82.297 cv
45.316 82.191 45.266 81.984 45.266 81.668 cv
45.266 81.348 45.316 81.133 45.426 81.023 cv
45.527 80.922 45.723 80.867 46.008 80.863 cv
46.277 80.867 46.465 80.918 46.574 81.02 cv
46.676 81.125 46.73 81.336 46.734 81.648 cv
cp
f
54.316 77.953 mo
54.313 78.637 54.258 79.254 54.156 79.812 cv
54.047 80.371 53.871 80.852 53.621 81.254 cv
53.371 81.66 53.047 81.973 52.648 82.191 cv
52.25 82.41 51.754 82.52 51.168 82.52 cv
50.609 82.52 50.145 82.422 49.766 82.223 cv
49.383 82.027 49.074 81.738 48.848 81.352 cv
48.613 80.969 48.449 80.492 48.352 79.93 cv
48.254 79.367 48.207 78.723 48.207 77.996 cv
48.207 77.324 48.262 76.707 48.371 76.141 cv
48.48 75.582 48.656 75.102 48.902 74.695 cv
49.145 74.297 49.469 73.984 49.871 73.762 cv
50.27 73.543 50.762 73.434 51.348 73.43 cv
51.906 73.434 52.375 73.531 52.754 73.727 cv
53.133 73.926 53.438 74.219 53.672 74.602 cv
53.902 74.988 54.066 75.461 54.168 76.02 cv
54.262 76.586 54.313 77.23 54.316 77.953 cv
cp
53.113 78.035 mo
53.109 77.598 53.094 77.199 53.066 76.848 cv
53.031 76.496 52.984 76.187 52.926 75.918 cv
52.863 75.652 52.785 75.422 52.688 75.227 cv
52.586 75.035 52.469 74.875 52.336 74.75 cv
52.199 74.625 52.043 74.535 51.867 74.477 cv
51.691 74.422 51.496 74.395 51.277 74.391 cv
50.891 74.395 50.574 74.484 50.336 74.664 cv
50.09 74.848 49.902 75.098 49.766 75.414 cv
49.625 75.734 49.527 76.109 49.48 76.535 cv
49.426 76.965 49.402 77.422 49.406 77.914 cv
49.402 78.574 49.438 79.137 49.508 79.598 cv
49.578 80.062 49.684 80.437 49.832 80.727 cv
49.977 81.016 50.168 81.227 50.398 81.359 cv
50.629 81.492 50.906 81.559 51.238 81.559 cv
51.488 81.559 51.715 81.52 51.91 81.437 cv
52.102 81.355 52.266 81.238 52.406 81.086 cv
52.543 80.934 52.66 80.75 52.754 80.535 cv
52.844 80.324 52.914 80.086 52.973 79.824 cv
53.023 79.566 53.063 79.285 53.082 78.98 cv
53.102 78.68 53.109 78.367 53.113 78.035 cv
cp
f
30.031 15.801 mo
58.015 15.801 li
58.015 32.891 li
30.031 32.891 li
cp
0 0 0 0 cmyk
ef
36.34 28.625 mo
36.336 28.707 36.328 28.781 36.32 28.844 cv
36.305 28.91 36.289 28.965 36.273 29.004 cv
36.25 29.051 36.223 29.082 36.191 29.098 cv
36.152 29.121 36.117 29.129 36.078 29.129 cv
31.199 29.129 li
31.129 29.129 31.074 29.121 31.031 29.105 cv
30.98 29.09 30.938 29.066 30.906 29.027 cv
30.867 28.996 30.844 28.941 30.832 28.871 cv
30.813 28.801 30.805 28.719 30.809 28.617 cv
30.805 28.531 30.809 28.449 30.82 28.379 cv
30.824 28.312 30.84 28.254 30.867 28.199 cv
30.887 28.148 30.914 28.094 30.953 28.039 cv
30.984 27.988 31.031 27.934 31.09 27.871 cv
32.855 26.059 li
33.262 25.641 33.586 25.266 33.836 24.934 cv
34.078 24.602 34.27 24.301 34.406 24.023 cv
34.539 23.754 34.629 23.504 34.672 23.281 cv
34.711 23.059 34.73 22.852 34.734 22.652 cv
34.73 22.457 34.699 22.27 34.637 22.094 cv
34.57 21.922 34.473 21.77 34.352 21.637 cv
34.223 21.508 34.066 21.402 33.883 21.32 cv
33.691 21.246 33.477 21.207 33.234 21.203 cv
32.945 21.207 32.688 21.246 32.461 21.32 cv
32.23 21.402 32.031 21.488 31.863 21.574 cv
31.688 21.668 31.543 21.75 31.434 21.824 cv
31.316 21.906 31.23 21.945 31.176 21.941 cv
31.141 21.945 31.113 21.937 31.09 21.914 cv
31.063 21.898 31.039 21.867 31.023 21.824 cv
31.004 21.785 30.992 21.73 30.984 21.66 cv
30.973 21.594 30.969 21.512 30.973 21.414 cv
30.969 21.348 30.973 21.289 30.98 21.238 cv
30.984 21.191 30.992 21.148 31.004 21.109 cv
31.012 21.074 31.023 21.039 31.047 21.008 cv
31.063 20.977 31.102 20.937 31.156 20.887 cv
31.211 20.844 31.305 20.781 31.438 20.695 cv
31.57 20.617 31.738 20.535 31.945 20.449 cv
32.145 20.371 32.367 20.305 32.613 20.25 cv
32.855 20.199 33.113 20.172 33.383 20.168 cv
33.809 20.172 34.18 20.23 34.504 20.348 cv
34.824 20.469 35.094 20.633 35.305 20.844 cv
35.516 21.055 35.672 21.301 35.777 21.574 cv
35.883 21.855 35.938 22.148 35.938 22.461 cv
35.938 22.742 35.91 23.023 35.859 23.305 cv
35.809 23.586 35.703 23.891 35.543 24.211 cv
35.379 24.539 35.145 24.898 34.844 25.297 cv
34.535 25.695 34.133 26.156 33.629 26.672 cv
32.23 28.133 li
36.074 28.133 li
36.105 28.133 36.141 28.145 36.18 28.164 cv
36.211 28.187 36.242 28.219 36.266 28.258 cv
36.289 28.301 36.305 28.352 36.32 28.41 cv
36.328 28.473 36.336 28.543 36.34 28.625 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
43.426 28.625 mo
43.422 28.707 43.414 28.781 43.406 28.844 cv
43.391 28.91 43.375 28.965 43.359 29.004 cv
43.336 29.051 43.309 29.082 43.277 29.098 cv
43.238 29.121 43.203 29.129 43.164 29.129 cv
38.285 29.129 li
38.215 29.129 38.16 29.121 38.117 29.105 cv
38.066 29.09 38.023 29.066 37.992 29.027 cv
37.953 28.996 37.93 28.941 37.918 28.871 cv
37.898 28.801 37.891 28.719 37.895 28.617 cv
37.891 28.531 37.895 28.449 37.906 28.379 cv
37.91 28.312 37.926 28.254 37.953 28.199 cv
37.973 28.148 38 28.094 38.039 28.039 cv
38.07 27.988 38.117 27.934 38.176 27.871 cv
39.941 26.059 li
40.348 25.641 40.672 25.266 40.922 24.934 cv
41.164 24.602 41.355 24.301 41.492 24.023 cv
41.625 23.754 41.715 23.504 41.758 23.281 cv
41.797 23.059 41.816 22.852 41.82 22.652 cv
41.816 22.457 41.785 22.27 41.723 22.094 cv
41.656 21.922 41.559 21.77 41.438 21.637 cv
41.309 21.508 41.152 21.402 40.969 21.32 cv
40.777 21.246 40.563 21.207 40.32 21.203 cv
40.031 21.207 39.773 21.246 39.547 21.32 cv
39.316 21.402 39.117 21.488 38.949 21.574 cv
38.773 21.668 38.629 21.75 38.52 21.824 cv
38.402 21.906 38.316 21.945 38.262 21.941 cv
38.227 21.945 38.199 21.937 38.176 21.914 cv
38.148 21.898 38.125 21.867 38.109 21.824 cv
38.09 21.785 38.078 21.73 38.07 21.66 cv
38.059 21.594 38.055 21.512 38.059 21.414 cv
38.055 21.348 38.059 21.289 38.066 21.238 cv
38.07 21.191 38.078 21.148 38.09 21.109 cv
38.098 21.074 38.109 21.039 38.133 21.008 cv
38.148 20.977 38.188 20.937 38.242 20.887 cv
38.297 20.844 38.391 20.781 38.523 20.695 cv
38.656 20.617 38.824 20.535 39.031 20.449 cv
39.23 20.371 39.453 20.305 39.699 20.25 cv
39.941 20.199 40.199 20.172 40.469 20.168 cv
40.895 20.172 41.266 20.23 41.59 20.348 cv
41.91 20.469 42.18 20.633 42.391 20.844 cv
42.602 21.055 42.758 21.301 42.863 21.574 cv
42.969 21.855 43.023 22.148 43.023 22.461 cv
43.023 22.742 42.996 23.023 42.945 23.305 cv
42.895 23.586 42.789 23.891 42.629 24.211 cv
42.465 24.539 42.23 24.898 41.93 25.297 cv
41.621 25.695 41.219 26.156 40.715 26.672 cv
39.316 28.133 li
43.16 28.133 li
43.191 28.133 43.227 28.145 43.266 28.164 cv
43.297 28.187 43.328 28.219 43.352 28.258 cv
43.375 28.301 43.391 28.352 43.406 28.41 cv
43.414 28.473 43.422 28.543 43.426 28.625 cv
cp
f
46.734 28.387 mo
46.73 28.711 46.676 28.926 46.57 29.031 cv
46.461 29.137 46.266 29.187 45.988 29.191 cv
45.711 29.187 45.523 29.137 45.422 29.035 cv
45.316 28.93 45.266 28.723 45.266 28.406 cv
45.266 28.086 45.316 27.871 45.426 27.762 cv
45.527 27.66 45.723 27.605 46.008 27.602 cv
46.277 27.605 46.465 27.656 46.574 27.758 cv
46.676 27.863 46.73 28.074 46.734 28.387 cv
cp
f
53.98 26.289 mo
53.977 26.766 53.898 27.187 53.742 27.555 cv
53.582 27.926 53.355 28.234 53.066 28.484 cv
52.77 28.738 52.422 28.934 52.023 29.062 cv
51.617 29.195 51.172 29.258 50.684 29.258 cv
50.406 29.258 50.148 29.238 49.906 29.199 cv
49.66 29.16 49.441 29.113 49.25 29.059 cv
49.059 29.004 48.898 28.949 48.777 28.891 cv
48.652 28.84 48.574 28.797 48.543 28.762 cv
48.504 28.73 48.48 28.699 48.473 28.672 cv
48.457 28.645 48.445 28.613 48.434 28.574 cv
48.422 28.539 48.414 28.488 48.41 28.426 cv
48.402 28.367 48.398 28.297 48.402 28.215 cv
48.398 28.137 48.402 28.07 48.414 28.008 cv
48.418 27.949 48.434 27.898 48.453 27.855 cv
48.469 27.82 48.488 27.789 48.516 27.77 cv
48.539 27.754 48.566 27.746 48.602 27.742 cv
48.645 27.746 48.715 27.773 48.813 27.828 cv
48.906 27.887 49.035 27.949 49.199 28.016 cv
49.355 28.082 49.559 28.145 49.801 28.203 cv
50.039 28.262 50.32 28.293 50.648 28.289 cv
50.953 28.293 51.234 28.254 51.488 28.18 cv
51.742 28.109 51.961 27.996 52.148 27.84 cv
52.332 27.684 52.477 27.488 52.582 27.254 cv
52.684 27.02 52.734 26.734 52.738 26.398 cv
52.734 26.117 52.691 25.871 52.605 25.652 cv
52.516 25.441 52.379 25.262 52.195 25.113 cv
52.008 24.973 51.773 24.863 51.496 24.793 cv
51.211 24.723 50.875 24.687 50.484 24.684 cv
50.207 24.687 49.969 24.703 49.77 24.727 cv
49.566 24.758 49.379 24.77 49.211 24.766 cv
49.078 24.77 48.988 24.742 48.938 24.68 cv
48.879 24.625 48.852 24.508 48.855 24.336 cv
48.855 20.738 li
48.852 20.59 48.887 20.48 48.961 20.406 cv
49.027 20.336 49.129 20.301 49.266 20.297 cv
53.176 20.297 li
53.211 20.301 53.246 20.309 53.281 20.328 cv
53.313 20.348 53.34 20.379 53.367 20.418 cv
53.387 20.461 53.402 20.516 53.418 20.578 cv
53.426 20.645 53.434 20.719 53.434 20.801 cv
53.434 20.969 53.41 21.094 53.367 21.184 cv
53.324 21.277 53.266 21.324 53.188 21.32 cv
50.027 21.32 li
50.027 23.797 li
50.18 23.773 50.336 23.762 50.496 23.758 cv
50.656 23.754 50.844 23.75 51.055 23.75 cv
51.539 23.75 51.961 23.812 52.328 23.934 cv
52.688 24.055 52.992 24.227 53.238 24.445 cv
53.48 24.668 53.664 24.934 53.793 25.246 cv
53.914 25.562 53.977 25.91 53.98 26.289 cv
cp
f
73.797 526.207 mo
73.797 526.297 73.789 526.367 73.773 526.426 cv
73.758 526.488 73.738 526.539 73.719 526.57 cv
73.695 526.609 73.668 526.633 73.641 526.648 cv
73.609 526.664 73.582 526.672 73.551 526.672 cv
68.938 526.672 li
68.902 526.672 68.871 526.664 68.848 526.648 cv
68.816 526.633 68.793 526.609 68.77 526.57 cv
68.742 526.539 68.723 526.488 68.711 526.426 cv
68.695 526.367 68.688 526.297 68.691 526.207 cv
68.688 526.129 68.695 526.059 68.711 525.996 cv
68.723 525.941 68.738 525.891 68.762 525.852 cv
68.781 525.812 68.805 525.785 68.836 525.762 cv
68.863 525.746 68.898 525.734 68.938 525.73 cv
70.781 525.73 li
70.781 519.012 li
69.074 520.031 li
68.984 520.078 68.914 520.105 68.863 520.113 cv
68.809 520.125 68.766 520.113 68.738 520.082 cv
68.703 520.055 68.68 520.004 68.672 519.934 cv
68.656 519.867 68.652 519.781 68.656 519.676 cv
68.652 519.598 68.656 519.531 68.664 519.477 cv
68.672 519.422 68.68 519.379 68.695 519.34 cv
68.707 519.309 68.727 519.277 68.754 519.246 cv
68.777 519.223 68.813 519.195 68.855 519.164 cv
70.887 517.859 li
70.902 517.848 70.926 517.84 70.953 517.828 cv
70.98 517.82 71.016 517.809 71.059 517.801 cv
71.098 517.793 71.145 517.789 71.203 517.781 cv
71.254 517.781 71.324 517.777 71.406 517.777 cv
71.516 517.777 71.605 517.785 71.68 517.793 cv
71.75 517.805 71.809 517.816 71.852 517.828 cv
71.891 517.848 71.918 517.867 71.934 517.891 cv
71.945 517.918 71.949 517.945 71.953 517.969 cv
71.953 525.73 li
73.551 525.73 li
73.586 525.734 73.617 525.746 73.652 525.762 cv
73.68 525.785 73.707 525.812 73.73 525.852 cv
73.75 525.891 73.766 525.941 73.777 525.996 cv
73.789 526.059 73.797 526.129 73.797 526.207 cv
cp
f
146.02 526.168 mo
146.016 526.25 146.008 526.324 146 526.387 cv
145.984 526.453 145.969 526.508 145.953 526.547 cv
145.93 526.594 145.902 526.625 145.871 526.641 cv
145.832 526.664 145.797 526.672 145.758 526.672 cv
140.879 526.672 li
140.809 526.672 140.754 526.664 140.711 526.648 cv
140.66 526.633 140.617 526.609 140.586 526.57 cv
140.547 526.539 140.523 526.484 140.512 526.414 cv
140.492 526.344 140.484 526.262 140.488 526.16 cv
140.484 526.074 140.488 525.992 140.5 525.922 cv
140.504 525.855 140.52 525.797 140.547 525.742 cv
140.566 525.691 140.594 525.637 140.633 525.582 cv
140.664 525.531 140.711 525.477 140.77 525.414 cv
142.535 523.602 li
142.941 523.184 143.266 522.809 143.516 522.477 cv
143.758 522.145 143.949 521.844 144.086 521.566 cv
144.219 521.297 144.309 521.047 144.352 520.824 cv
144.391 520.602 144.41 520.395 144.414 520.195 cv
144.41 520 144.379 519.812 144.316 519.637 cv
144.25 519.465 144.152 519.312 144.031 519.18 cv
143.902 519.051 143.746 518.945 143.563 518.863 cv
143.371 518.789 143.156 518.75 142.914 518.746 cv
142.625 518.75 142.367 518.789 142.141 518.863 cv
141.91 518.945 141.711 519.031 141.543 519.117 cv
141.367 519.211 141.223 519.293 141.113 519.367 cv
140.996 519.449 140.91 519.488 140.855 519.484 cv
140.82 519.488 140.793 519.48 140.77 519.457 cv
140.742 519.441 140.719 519.41 140.703 519.367 cv
140.684 519.328 140.672 519.273 140.664 519.203 cv
140.652 519.137 140.648 519.055 140.652 518.957 cv
140.648 518.891 140.652 518.832 140.66 518.781 cv
140.664 518.734 140.672 518.691 140.684 518.652 cv
140.691 518.617 140.703 518.582 140.727 518.551 cv
140.742 518.52 140.781 518.48 140.836 518.43 cv
140.891 518.387 140.984 518.324 141.117 518.238 cv
141.25 518.16 141.418 518.078 141.625 517.992 cv
141.824 517.914 142.047 517.848 142.293 517.793 cv
142.535 517.742 142.793 517.715 143.063 517.711 cv
143.488 517.715 143.859 517.773 144.184 517.891 cv
144.504 518.012 144.773 518.176 144.984 518.387 cv
145.195 518.598 145.352 518.844 145.457 519.117 cv
145.563 519.398 145.617 519.691 145.617 520.004 cv
145.617 520.285 145.59 520.566 145.539 520.848 cv
145.488 521.129 145.383 521.434 145.223 521.754 cv
145.059 522.082 144.824 522.441 144.523 522.84 cv
144.215 523.238 143.813 523.699 143.309 524.215 cv
141.91 525.676 li
145.754 525.676 li
145.785 525.676 145.82 525.687 145.859 525.707 cv
145.891 525.73 145.922 525.762 145.945 525.801 cv
145.969 525.844 145.984 525.895 146 525.953 cv
146.008 526.016 146.016 526.086 146.02 526.168 cv
cp
f
218.652 524.16 mo
218.648 524.312 218.625 524.43 218.582 524.516 cv
218.535 524.602 218.473 524.645 218.391 524.645 cv
217.395 524.645 li
217.395 526.5 li
217.395 526.539 217.383 526.57 217.367 526.594 cv
217.344 526.625 217.313 526.645 217.27 526.66 cv
217.219 526.676 217.156 526.687 217.086 526.695 cv
217.008 526.703 216.914 526.707 216.797 526.711 cv
216.684 526.707 216.59 526.703 216.516 526.695 cv
216.438 526.687 216.375 526.676 216.336 526.66 cv
216.289 526.645 216.262 526.625 216.246 526.594 cv
216.23 526.57 216.223 526.539 216.223 526.5 cv
216.223 524.645 li
212.609 524.645 li
212.551 524.645 212.508 524.641 212.473 524.625 cv
212.434 524.617 212.398 524.59 212.375 524.551 cv
212.344 524.516 212.324 524.465 212.313 524.395 cv
212.301 524.328 212.297 524.238 212.297 524.125 cv
212.297 524.043 212.297 523.965 212.301 523.895 cv
212.305 523.828 212.313 523.766 212.328 523.707 cv
212.34 523.652 212.359 523.598 212.383 523.543 cv
212.402 523.492 212.43 523.437 212.465 523.375 cv
215.613 518.008 li
215.637 517.973 215.668 517.941 215.715 517.914 cv
215.754 517.887 215.813 517.863 215.883 517.844 cv
215.953 517.828 216.039 517.816 216.141 517.809 cv
216.242 517.805 216.363 517.801 216.504 517.797 cv
216.656 517.801 216.789 517.809 216.902 517.816 cv
217.016 517.832 217.105 517.844 217.18 517.859 cv
217.246 517.879 217.301 517.906 217.34 517.934 cv
217.375 517.965 217.395 517.996 217.395 518.035 cv
217.395 523.676 li
218.391 523.676 li
218.469 523.68 218.531 523.719 218.578 523.797 cv
218.625 523.879 218.648 524 218.652 524.16 cv
cp
216.223 518.828 mo
216.207 518.828 li
213.367 523.676 li
216.223 523.676 li
cp
f
290.742 523.812 mo
290.738 524.199 290.68 524.574 290.563 524.934 cv
290.445 525.297 290.262 525.617 290.02 525.891 cv
289.77 526.172 289.461 526.391 289.086 526.555 cv
288.707 526.719 288.258 526.801 287.746 526.801 cv
287.375 526.801 287.051 526.758 286.77 526.664 cv
286.484 526.578 286.238 526.449 286.031 526.277 cv
285.82 526.113 285.648 525.906 285.512 525.656 cv
285.371 525.414 285.258 525.133 285.176 524.816 cv
285.09 524.504 285.031 524.16 284.996 523.785 cv
284.957 523.414 284.938 523.012 284.941 522.582 cv
284.938 522.207 284.957 521.828 285 521.437 cv
285.039 521.055 285.113 520.68 285.219 520.316 cv
285.324 519.961 285.465 519.625 285.648 519.305 cv
285.824 518.992 286.051 518.715 286.324 518.477 cv
286.594 518.246 286.918 518.062 287.297 517.922 cv
287.672 517.789 288.109 517.719 288.613 517.715 cv
288.777 517.719 288.949 517.73 289.125 517.746 cv
289.297 517.77 289.457 517.797 289.602 517.828 cv
289.746 517.867 289.867 517.902 289.969 517.941 cv
290.066 517.984 290.133 518.02 290.168 518.043 cv
290.199 518.07 290.223 518.098 290.242 518.125 cv
290.254 518.156 290.266 518.187 290.277 518.219 cv
290.285 518.254 290.293 518.293 290.301 518.336 cv
290.301 518.379 290.305 518.43 290.309 518.492 cv
290.305 518.578 290.305 518.652 290.305 518.707 cv
290.301 518.77 290.289 518.816 290.277 518.848 cv
290.258 518.887 290.238 518.914 290.215 518.93 cv
290.188 518.953 290.156 518.961 290.117 518.957 cv
290.063 518.961 289.992 518.945 289.91 518.91 cv
289.82 518.883 289.715 518.848 289.598 518.805 cv
289.473 518.77 289.324 518.734 289.148 518.699 cv
288.973 518.672 288.77 518.656 288.539 518.652 cv
288.113 518.656 287.75 518.742 287.445 518.91 cv
287.141 519.086 286.891 519.316 286.699 519.605 cv
286.504 519.898 286.359 520.238 286.27 520.621 cv
286.172 521.008 286.121 521.41 286.109 521.824 cv
286.227 521.762 286.359 521.691 286.508 521.621 cv
286.656 521.555 286.816 521.496 286.992 521.437 cv
287.164 521.387 287.348 521.34 287.547 521.305 cv
287.742 521.27 287.953 521.254 288.176 521.25 cv
288.652 521.254 289.055 521.316 289.383 521.445 cv
289.707 521.578 289.973 521.762 290.18 521.988 cv
290.379 522.223 290.523 522.492 290.613 522.801 cv
290.695 523.113 290.738 523.449 290.742 523.812 cv
cp
289.555 523.922 mo
289.555 523.66 289.527 523.418 289.477 523.199 cv
289.422 522.984 289.336 522.801 289.215 522.652 cv
289.09 522.504 288.926 522.391 288.723 522.305 cv
288.516 522.227 288.262 522.184 287.965 522.18 cv
287.793 522.184 287.625 522.199 287.457 522.227 cv
287.289 522.258 287.125 522.297 286.973 522.348 cv
286.813 522.402 286.664 522.465 286.52 522.531 cv
286.375 522.605 286.242 522.684 286.129 522.762 cv
286.125 523.352 286.164 523.84 286.242 524.234 cv
286.316 524.633 286.426 524.953 286.57 525.187 cv
286.711 525.43 286.891 525.598 287.105 525.699 cv
287.316 525.801 287.566 525.852 287.855 525.852 cv
288.145 525.852 288.395 525.797 288.613 525.687 cv
288.824 525.578 289.004 525.434 289.145 525.25 cv
289.285 525.066 289.387 524.859 289.457 524.629 cv
289.52 524.398 289.555 524.164 289.555 523.922 cv
cp
f
362.98 524.406 mo
362.977 524.793 362.91 525.133 362.773 525.43 cv
362.637 525.727 362.438 525.98 362.184 526.184 cv
361.926 526.391 361.609 526.543 361.234 526.645 cv
360.852 526.75 360.422 526.801 359.938 526.801 cv
359.48 526.801 359.07 526.754 358.715 526.66 cv
358.352 526.566 358.047 526.426 357.801 526.238 cv
357.547 526.051 357.355 525.82 357.227 525.547 cv
357.09 525.273 357.023 524.961 357.027 524.609 cv
357.023 524.336 357.07 524.082 357.164 523.848 cv
357.254 523.613 357.383 523.398 357.555 523.203 cv
357.723 523.008 357.934 522.828 358.188 522.656 cv
358.434 522.488 358.719 522.324 359.035 522.168 cv
358.762 522.027 358.52 521.879 358.309 521.719 cv
358.098 521.566 357.918 521.395 357.777 521.207 cv
357.629 521.023 357.52 520.828 357.449 520.617 cv
357.371 520.414 357.336 520.184 357.336 519.934 cv
357.336 519.625 357.391 519.336 357.504 519.062 cv
357.613 518.793 357.781 518.559 358.008 518.359 cv
358.23 518.16 358.516 518.004 358.867 517.887 cv
359.211 517.773 359.617 517.715 360.086 517.711 cv
360.527 517.715 360.914 517.766 361.242 517.871 cv
361.566 517.98 361.836 518.129 362.047 518.309 cv
362.258 518.496 362.414 518.711 362.516 518.957 cv
362.617 519.211 362.668 519.48 362.668 519.766 cv
362.668 520 362.629 520.223 362.555 520.434 cv
362.477 520.648 362.367 520.852 362.223 521.043 cv
362.074 521.234 361.895 521.414 361.688 521.578 cv
361.473 521.746 361.23 521.898 360.961 522.043 cv
361.281 522.203 361.57 522.367 361.824 522.535 cv
362.074 522.707 362.285 522.891 362.457 523.078 cv
362.629 523.273 362.758 523.477 362.848 523.691 cv
362.934 523.91 362.977 524.148 362.98 524.406 cv
cp
361.508 519.871 mo
361.508 519.684 361.473 519.512 361.406 519.355 cv
361.34 519.203 361.242 519.07 361.117 518.957 cv
360.984 518.852 360.828 518.77 360.641 518.711 cv
360.453 518.656 360.238 518.629 359.996 518.625 cv
359.504 518.629 359.133 518.738 358.883 518.961 cv
358.629 519.184 358.5 519.488 358.504 519.871 cv
358.5 520.055 358.531 520.223 358.594 520.371 cv
358.652 520.527 358.75 520.672 358.883 520.805 cv
359.012 520.945 359.176 521.078 359.375 521.203 cv
359.57 521.336 359.805 521.469 360.078 521.605 cv
360.539 521.371 360.891 521.109 361.137 520.82 cv
361.383 520.535 361.508 520.219 361.508 519.871 cv
cp
361.793 524.527 mo
361.789 524.32 361.75 524.133 361.676 523.961 cv
361.598 523.793 361.48 523.633 361.324 523.48 cv
361.164 523.336 360.969 523.191 360.738 523.051 cv
360.5 522.914 360.227 522.77 359.922 522.617 cv
359.633 522.758 359.383 522.902 359.168 523.043 cv
358.949 523.187 358.773 523.332 358.637 523.48 cv
358.496 523.633 358.391 523.789 358.32 523.953 cv
358.25 524.117 358.215 524.301 358.215 524.5 cv
358.215 524.945 358.363 525.289 358.668 525.527 cv
358.969 525.77 359.422 525.887 360.023 525.887 cv
360.605 525.887 361.047 525.766 361.344 525.523 cv
361.641 525.281 361.789 524.949 361.793 524.527 cv
cp
f
431.5 526.207 mo
431.5 526.297 431.492 526.367 431.477 526.426 cv
431.461 526.488 431.441 526.539 431.422 526.57 cv
431.398 526.609 431.371 526.633 431.344 526.648 cv
431.313 526.664 431.285 526.672 431.254 526.672 cv
426.641 526.672 li
426.605 526.672 426.574 526.664 426.551 526.648 cv
426.52 526.633 426.496 526.609 426.473 526.57 cv
426.445 526.539 426.426 526.488 426.414 526.426 cv
426.398 526.367 426.391 526.297 426.395 526.207 cv
426.391 526.129 426.398 526.059 426.414 525.996 cv
426.426 525.941 426.441 525.891 426.465 525.852 cv
426.484 525.812 426.508 525.785 426.539 525.762 cv
426.566 525.746 426.602 525.734 426.641 525.73 cv
428.484 525.73 li
428.484 519.012 li
426.777 520.031 li
426.688 520.078 426.617 520.105 426.566 520.113 cv
426.512 520.125 426.469 520.113 426.441 520.082 cv
426.406 520.055 426.383 520.004 426.375 519.934 cv
426.359 519.867 426.355 519.781 426.359 519.676 cv
426.355 519.598 426.359 519.531 426.367 519.477 cv
426.375 519.422 426.383 519.379 426.398 519.34 cv
426.41 519.309 426.43 519.277 426.457 519.246 cv
426.48 519.223 426.516 519.195 426.559 519.164 cv
428.59 517.859 li
428.605 517.848 428.629 517.84 428.656 517.828 cv
428.684 517.82 428.719 517.809 428.762 517.801 cv
428.801 517.793 428.848 517.789 428.906 517.781 cv
428.957 517.781 429.027 517.777 429.109 517.777 cv
429.219 517.777 429.309 517.785 429.383 517.793 cv
429.453 517.805 429.512 517.816 429.555 517.828 cv
429.594 517.848 429.621 517.867 429.637 517.891 cv
429.648 517.918 429.652 517.945 429.656 517.969 cv
429.656 525.73 li
431.254 525.73 li
431.289 525.734 431.32 525.746 431.355 525.762 cv
431.383 525.785 431.41 525.812 431.434 525.852 cv
431.453 525.891 431.469 525.941 431.48 525.996 cv
431.492 526.059 431.5 526.129 431.5 526.207 cv
cp
f
438.852 522.234 mo
438.848 522.918 438.793 523.535 438.691 524.094 cv
438.582 524.652 438.406 525.133 438.156 525.535 cv
437.906 525.941 437.582 526.254 437.184 526.473 cv
436.785 526.691 436.289 526.801 435.703 526.801 cv
435.145 526.801 434.68 526.703 434.301 526.504 cv
433.918 526.309 433.609 526.02 433.383 525.633 cv
433.148 525.25 432.984 524.773 432.887 524.211 cv
432.789 523.648 432.742 523.004 432.742 522.277 cv
432.742 521.605 432.797 520.988 432.906 520.422 cv
433.016 519.863 433.191 519.383 433.438 518.977 cv
433.68 518.578 434.004 518.266 434.406 518.043 cv
434.805 517.824 435.297 517.715 435.883 517.711 cv
436.441 517.715 436.91 517.812 437.289 518.008 cv
437.668 518.207 437.973 518.5 438.207 518.883 cv
438.438 519.27 438.602 519.742 438.703 520.301 cv
438.797 520.867 438.848 521.512 438.852 522.234 cv
cp
437.648 522.316 mo
437.645 521.879 437.629 521.48 437.602 521.129 cv
437.566 520.777 437.52 520.469 437.461 520.199 cv
437.398 519.934 437.32 519.703 437.223 519.508 cv
437.121 519.316 437.004 519.156 436.871 519.031 cv
436.734 518.906 436.578 518.816 436.402 518.758 cv
436.227 518.703 436.031 518.676 435.813 518.672 cv
435.426 518.676 435.109 518.766 434.871 518.945 cv
434.625 519.129 434.438 519.379 434.301 519.695 cv
434.16 520.016 434.063 520.391 434.016 520.816 cv
433.961 521.246 433.938 521.703 433.941 522.195 cv
433.938 522.855 433.973 523.418 434.043 523.879 cv
434.113 524.344 434.219 524.719 434.367 525.008 cv
434.512 525.297 434.703 525.508 434.934 525.641 cv
435.164 525.773 435.441 525.84 435.773 525.84 cv
436.023 525.84 436.25 525.801 436.445 525.719 cv
436.637 525.637 436.801 525.52 436.941 525.367 cv
437.078 525.215 437.195 525.031 437.289 524.816 cv
437.379 524.605 437.449 524.367 437.508 524.105 cv
437.559 523.848 437.598 523.566 437.617 523.262 cv
437.637 522.961 437.645 522.648 437.648 522.316 cv
cp
f
503.758 526.207 mo
503.758 526.297 503.75 526.367 503.734 526.426 cv
503.719 526.488 503.699 526.539 503.68 526.57 cv
503.656 526.609 503.629 526.633 503.602 526.648 cv
503.57 526.664 503.543 526.672 503.512 526.672 cv
498.898 526.672 li
498.863 526.672 498.832 526.664 498.809 526.648 cv
498.777 526.633 498.754 526.609 498.73 526.57 cv
498.703 526.539 498.684 526.488 498.672 526.426 cv
498.656 526.367 498.648 526.297 498.652 526.207 cv
498.648 526.129 498.656 526.059 498.672 525.996 cv
498.684 525.941 498.699 525.891 498.723 525.852 cv
498.742 525.812 498.766 525.785 498.797 525.762 cv
498.824 525.746 498.859 525.734 498.898 525.73 cv
500.742 525.73 li
500.742 519.012 li
499.035 520.031 li
498.945 520.078 498.875 520.105 498.824 520.113 cv
498.77 520.125 498.727 520.113 498.699 520.082 cv
498.664 520.055 498.641 520.004 498.633 519.934 cv
498.617 519.867 498.613 519.781 498.617 519.676 cv
498.613 519.598 498.617 519.531 498.625 519.477 cv
498.633 519.422 498.641 519.379 498.656 519.34 cv
498.668 519.309 498.688 519.277 498.715 519.246 cv
498.738 519.223 498.773 519.195 498.816 519.164 cv
500.848 517.859 li
500.863 517.848 500.887 517.84 500.914 517.828 cv
500.941 517.82 500.977 517.809 501.02 517.801 cv
501.059 517.793 501.105 517.789 501.164 517.781 cv
501.215 517.781 501.285 517.777 501.367 517.777 cv
501.477 517.777 501.566 517.785 501.641 517.793 cv
501.711 517.805 501.77 517.816 501.813 517.828 cv
501.852 517.848 501.879 517.867 501.895 517.891 cv
501.906 517.918 501.91 517.945 501.914 517.969 cv
501.914 525.73 li
503.512 525.73 li
503.547 525.734 503.578 525.746 503.613 525.762 cv
503.641 525.785 503.668 525.812 503.691 525.852 cv
503.711 525.891 503.727 525.941 503.738 525.996 cv
503.75 526.059 503.758 526.129 503.758 526.207 cv
cp
f
510.82 526.168 mo
510.816 526.25 510.809 526.324 510.801 526.387 cv
510.785 526.453 510.77 526.508 510.754 526.547 cv
510.73 526.594 510.703 526.625 510.672 526.641 cv
510.633 526.664 510.598 526.672 510.559 526.672 cv
505.68 526.672 li
505.609 526.672 505.555 526.664 505.512 526.648 cv
505.461 526.633 505.418 526.609 505.387 526.57 cv
505.348 526.539 505.324 526.484 505.313 526.414 cv
505.293 526.344 505.285 526.262 505.289 526.16 cv
505.285 526.074 505.289 525.992 505.301 525.922 cv
505.305 525.855 505.32 525.797 505.348 525.742 cv
505.367 525.691 505.395 525.637 505.434 525.582 cv
505.465 525.531 505.512 525.477 505.57 525.414 cv
507.336 523.602 li
507.742 523.184 508.066 522.809 508.316 522.477 cv
508.559 522.145 508.75 521.844 508.887 521.566 cv
509.02 521.297 509.109 521.047 509.152 520.824 cv
509.191 520.602 509.211 520.395 509.215 520.195 cv
509.211 520 509.18 519.812 509.117 519.637 cv
509.051 519.465 508.953 519.312 508.832 519.18 cv
508.703 519.051 508.547 518.945 508.363 518.863 cv
508.172 518.789 507.957 518.75 507.715 518.746 cv
507.426 518.75 507.168 518.789 506.941 518.863 cv
506.711 518.945 506.512 519.031 506.344 519.117 cv
506.168 519.211 506.023 519.293 505.914 519.367 cv
505.797 519.449 505.711 519.488 505.656 519.484 cv
505.621 519.488 505.594 519.48 505.57 519.457 cv
505.543 519.441 505.52 519.41 505.504 519.367 cv
505.484 519.328 505.473 519.273 505.465 519.203 cv
505.453 519.137 505.449 519.055 505.453 518.957 cv
505.449 518.891 505.453 518.832 505.461 518.781 cv
505.465 518.734 505.473 518.691 505.484 518.652 cv
505.492 518.617 505.504 518.582 505.527 518.551 cv
505.543 518.52 505.582 518.48 505.637 518.43 cv
505.691 518.387 505.785 518.324 505.918 518.238 cv
506.051 518.16 506.219 518.078 506.426 517.992 cv
506.625 517.914 506.848 517.848 507.094 517.793 cv
507.336 517.742 507.594 517.715 507.863 517.711 cv
508.289 517.715 508.66 517.773 508.984 517.891 cv
509.305 518.012 509.574 518.176 509.785 518.387 cv
509.996 518.598 510.152 518.844 510.258 519.117 cv
510.363 519.398 510.418 519.691 510.418 520.004 cv
510.418 520.285 510.391 520.566 510.34 520.848 cv
510.289 521.129 510.184 521.434 510.023 521.754 cv
509.859 522.082 509.625 522.441 509.324 522.84 cv
509.016 523.238 508.613 523.699 508.109 524.215 cv
506.711 525.676 li
510.555 525.676 li
510.586 525.676 510.621 525.687 510.66 525.707 cv
510.691 525.73 510.723 525.762 510.746 525.801 cv
510.77 525.844 510.785 525.895 510.801 525.953 cv
510.809 526.016 510.816 526.086 510.82 526.168 cv
cp
f
576 526.207 mo
576 526.297 575.992 526.367 575.977 526.426 cv
575.961 526.488 575.941 526.539 575.922 526.57 cv
575.898 526.609 575.871 526.633 575.844 526.648 cv
575.813 526.664 575.785 526.672 575.754 526.672 cv
571.141 526.672 li
571.105 526.672 571.074 526.664 571.051 526.648 cv
571.02 526.633 570.996 526.609 570.973 526.57 cv
570.945 526.539 570.926 526.488 570.914 526.426 cv
570.898 526.367 570.891 526.297 570.895 526.207 cv
570.891 526.129 570.898 526.059 570.914 525.996 cv
570.926 525.941 570.941 525.891 570.965 525.852 cv
570.984 525.812 571.008 525.785 571.039 525.762 cv
571.066 525.746 571.102 525.734 571.141 525.73 cv
572.984 525.73 li
572.984 519.012 li
571.277 520.031 li
571.188 520.078 571.117 520.105 571.066 520.113 cv
571.012 520.125 570.969 520.113 570.941 520.082 cv
570.906 520.055 570.883 520.004 570.875 519.934 cv
570.859 519.867 570.855 519.781 570.859 519.676 cv
570.855 519.598 570.859 519.531 570.867 519.477 cv
570.875 519.422 570.883 519.379 570.898 519.34 cv
570.91 519.309 570.93 519.277 570.957 519.246 cv
570.98 519.223 571.016 519.195 571.059 519.164 cv
573.09 517.859 li
573.105 517.848 573.129 517.84 573.156 517.828 cv
573.184 517.82 573.219 517.809 573.262 517.801 cv
573.301 517.793 573.348 517.789 573.406 517.781 cv
573.457 517.781 573.527 517.777 573.609 517.777 cv
573.719 517.777 573.809 517.785 573.883 517.793 cv
573.953 517.805 574.012 517.816 574.055 517.828 cv
574.094 517.848 574.121 517.867 574.137 517.891 cv
574.148 517.918 574.152 517.945 574.156 517.969 cv
574.156 525.73 li
575.754 525.73 li
575.789 525.734 575.82 525.746 575.855 525.762 cv
575.883 525.785 575.91 525.812 575.934 525.852 cv
575.953 525.891 575.969 525.941 575.98 525.996 cv
575.992 526.059 576 526.129 576 526.207 cv
cp
f
583.434 524.16 mo
583.43 524.312 583.406 524.43 583.363 524.516 cv
583.316 524.602 583.254 524.645 583.172 524.645 cv
582.176 524.645 li
582.176 526.5 li
582.176 526.539 582.164 526.57 582.148 526.594 cv
582.125 526.625 582.094 526.645 582.051 526.66 cv
582 526.676 581.938 526.687 581.867 526.695 cv
581.789 526.703 581.695 526.707 581.578 526.711 cv
581.465 526.707 581.371 526.703 581.297 526.695 cv
581.219 526.687 581.156 526.676 581.117 526.66 cv
581.07 526.645 581.043 526.625 581.027 526.594 cv
581.012 526.57 581.004 526.539 581.004 526.5 cv
581.004 524.645 li
577.391 524.645 li
577.332 524.645 577.289 524.641 577.254 524.625 cv
577.215 524.617 577.18 524.59 577.156 524.551 cv
577.125 524.516 577.105 524.465 577.094 524.395 cv
577.082 524.328 577.078 524.238 577.078 524.125 cv
577.078 524.043 577.078 523.965 577.082 523.895 cv
577.086 523.828 577.094 523.766 577.109 523.707 cv
577.121 523.652 577.141 523.598 577.164 523.543 cv
577.184 523.492 577.211 523.437 577.246 523.375 cv
580.395 518.008 li
580.418 517.973 580.449 517.941 580.496 517.914 cv
580.535 517.887 580.594 517.863 580.664 517.844 cv
580.734 517.828 580.82 517.816 580.922 517.809 cv
581.023 517.805 581.145 517.801 581.285 517.797 cv
581.438 517.801 581.57 517.809 581.684 517.816 cv
581.797 517.832 581.887 517.844 581.961 517.859 cv
582.027 517.879 582.082 517.906 582.121 517.934 cv
582.156 517.965 582.176 517.996 582.176 518.035 cv
582.176 523.676 li
583.172 523.676 li
583.25 523.68 583.313 523.719 583.359 523.797 cv
583.406 523.879 583.43 524 583.434 524.16 cv
cp
581.004 518.828 mo
580.988 518.828 li
578.148 523.676 li
581.004 523.676 li
cp
f
648.258 526.207 mo
648.258 526.297 648.25 526.367 648.234 526.426 cv
648.219 526.488 648.199 526.539 648.18 526.57 cv
648.156 526.609 648.129 526.633 648.102 526.648 cv
648.07 526.664 648.043 526.672 648.012 526.672 cv
643.398 526.672 li
643.363 526.672 643.332 526.664 643.309 526.648 cv
643.277 526.633 643.254 526.609 643.23 526.57 cv
643.203 526.539 643.184 526.488 643.172 526.426 cv
643.156 526.367 643.148 526.297 643.152 526.207 cv
643.148 526.129 643.156 526.059 643.172 525.996 cv
643.184 525.941 643.199 525.891 643.223 525.852 cv
643.242 525.812 643.266 525.785 643.297 525.762 cv
643.324 525.746 643.359 525.734 643.398 525.73 cv
645.242 525.73 li
645.242 519.012 li
643.535 520.031 li
643.445 520.078 643.375 520.105 643.324 520.113 cv
643.27 520.125 643.227 520.113 643.199 520.082 cv
643.164 520.055 643.141 520.004 643.133 519.934 cv
643.117 519.867 643.113 519.781 643.117 519.676 cv
643.113 519.598 643.117 519.531 643.125 519.477 cv
643.133 519.422 643.141 519.379 643.156 519.34 cv
643.168 519.309 643.188 519.277 643.215 519.246 cv
643.238 519.223 643.273 519.195 643.316 519.164 cv
645.348 517.859 li
645.363 517.848 645.387 517.84 645.414 517.828 cv
645.441 517.82 645.477 517.809 645.52 517.801 cv
645.559 517.793 645.605 517.789 645.664 517.781 cv
645.715 517.781 645.785 517.777 645.867 517.777 cv
645.977 517.777 646.066 517.785 646.141 517.793 cv
646.211 517.805 646.27 517.816 646.313 517.828 cv
646.352 517.848 646.379 517.867 646.395 517.891 cv
646.406 517.918 646.41 517.945 646.414 517.969 cv
646.414 525.73 li
648.012 525.73 li
648.047 525.734 648.078 525.746 648.113 525.762 cv
648.141 525.785 648.168 525.812 648.191 525.852 cv
648.211 525.891 648.227 525.941 648.238 525.996 cv
648.25 526.059 648.258 526.129 648.258 526.207 cv
cp
f
655.543 523.812 mo
655.539 524.199 655.48 524.574 655.363 524.934 cv
655.246 525.297 655.063 525.617 654.82 525.891 cv
654.57 526.172 654.262 526.391 653.887 526.555 cv
653.508 526.719 653.059 526.801 652.547 526.801 cv
652.176 526.801 651.852 526.758 651.57 526.664 cv
651.285 526.578 651.039 526.449 650.832 526.277 cv
650.621 526.113 650.449 525.906 650.313 525.656 cv
650.172 525.414 650.059 525.133 649.977 524.816 cv
649.891 524.504 649.832 524.16 649.797 523.785 cv
649.758 523.414 649.738 523.012 649.742 522.582 cv
649.738 522.207 649.758 521.828 649.801 521.437 cv
649.84 521.055 649.914 520.68 650.02 520.316 cv
650.125 519.961 650.266 519.625 650.449 519.305 cv
650.625 518.992 650.852 518.715 651.125 518.477 cv
651.395 518.246 651.719 518.062 652.098 517.922 cv
652.473 517.789 652.91 517.719 653.414 517.715 cv
653.578 517.719 653.75 517.73 653.926 517.746 cv
654.098 517.77 654.258 517.797 654.402 517.828 cv
654.547 517.867 654.668 517.902 654.77 517.941 cv
654.867 517.984 654.934 518.02 654.969 518.043 cv
655 518.07 655.023 518.098 655.043 518.125 cv
655.055 518.156 655.066 518.187 655.078 518.219 cv
655.086 518.254 655.094 518.293 655.102 518.336 cv
655.102 518.379 655.105 518.43 655.109 518.492 cv
655.105 518.578 655.105 518.652 655.105 518.707 cv
655.102 518.77 655.09 518.816 655.078 518.848 cv
655.059 518.887 655.039 518.914 655.016 518.93 cv
654.988 518.953 654.957 518.961 654.918 518.957 cv
654.863 518.961 654.793 518.945 654.711 518.91 cv
654.621 518.883 654.516 518.848 654.398 518.805 cv
654.273 518.77 654.125 518.734 653.949 518.699 cv
653.773 518.672 653.57 518.656 653.34 518.652 cv
652.914 518.656 652.551 518.742 652.246 518.91 cv
651.941 519.086 651.691 519.316 651.5 519.605 cv
651.305 519.898 651.16 520.238 651.07 520.621 cv
650.973 521.008 650.922 521.41 650.91 521.824 cv
651.027 521.762 651.16 521.691 651.309 521.621 cv
651.457 521.555 651.617 521.496 651.793 521.437 cv
651.965 521.387 652.148 521.34 652.348 521.305 cv
652.543 521.27 652.754 521.254 652.977 521.25 cv
653.453 521.254 653.855 521.316 654.184 521.445 cv
654.508 521.578 654.773 521.762 654.98 521.988 cv
655.18 522.223 655.324 522.492 655.414 522.801 cv
655.496 523.113 655.539 523.449 655.543 523.812 cv
cp
654.355 523.922 mo
654.355 523.66 654.328 523.418 654.277 523.199 cv
654.223 522.984 654.137 522.801 654.016 522.652 cv
653.891 522.504 653.727 522.391 653.523 522.305 cv
653.316 522.227 653.063 522.184 652.766 522.18 cv
652.594 522.184 652.426 522.199 652.258 522.227 cv
652.09 522.258 651.926 522.297 651.773 522.348 cv
651.613 522.402 651.465 522.465 651.32 522.531 cv
651.176 522.605 651.043 522.684 650.93 522.762 cv
650.926 523.352 650.965 523.84 651.043 524.234 cv
651.117 524.633 651.227 524.953 651.371 525.187 cv
651.512 525.43 651.691 525.598 651.906 525.699 cv
652.117 525.801 652.367 525.852 652.656 525.852 cv
652.945 525.852 653.195 525.797 653.414 525.687 cv
653.625 525.578 653.805 525.434 653.945 525.25 cv
654.086 525.066 654.188 524.859 654.258 524.629 cv
654.32 524.398 654.355 524.164 654.355 523.922 cv
cp
f
16.727 325.152 mo
16.77 325.152 16.805 325.16 16.836 325.176 cv
16.867 325.191 16.895 325.227 16.914 325.277 cv
16.934 325.332 16.945 325.406 16.961 325.5 cv
16.969 325.598 16.977 325.723 16.977 325.875 cv
16.977 326.012 16.969 326.121 16.961 326.207 cv
16.945 326.293 16.934 326.363 16.91 326.414 cv
16.891 326.469 16.855 326.508 16.813 326.535 cv
16.773 326.566 16.723 326.594 16.656 326.609 cv
14.27 327.539 li
14 327.652 13.754 327.766 13.523 327.879 cv
13.301 328 13.105 328.141 12.938 328.297 cv
12.777 328.461 12.648 328.652 12.555 328.871 cv
12.465 329.094 12.418 329.355 12.418 329.66 cv
12.418 330.559 li
16.727 330.559 li
16.77 330.562 16.805 330.574 16.836 330.594 cv
16.867 330.621 16.895 330.656 16.91 330.703 cv
16.93 330.754 16.941 330.82 16.957 330.906 cv
16.969 330.992 16.977 331.102 16.977 331.23 cv
16.977 331.363 16.969 331.473 16.957 331.559 cv
16.941 331.648 16.93 331.719 16.91 331.766 cv
16.895 331.82 16.867 331.855 16.836 331.875 cv
16.805 331.898 16.77 331.91 16.727 331.906 cv
7.355 331.906 li
7.152 331.91 7.012 331.855 6.93 331.746 cv
6.852 331.641 6.813 331.527 6.809 331.402 cv
6.809 329.254 li
6.813 329 6.816 328.789 6.828 328.617 cv
6.844 328.449 6.859 328.297 6.871 328.156 cv
6.941 327.77 7.047 327.422 7.191 327.121 cv
7.34 326.824 7.527 326.574 7.746 326.367 cv
7.973 326.168 8.227 326.016 8.516 325.91 cv
8.805 325.812 9.125 325.762 9.477 325.758 cv
9.816 325.762 10.121 325.809 10.387 325.895 cv
10.656 325.988 10.895 326.117 11.098 326.289 cv
11.309 326.461 11.484 326.668 11.633 326.906 cv
11.785 327.148 11.914 327.418 12.016 327.711 cv
12.09 327.547 12.184 327.395 12.297 327.258 cv
12.41 327.125 12.543 327 12.699 326.879 cv
12.855 326.766 13.035 326.652 13.238 326.547 cv
13.441 326.445 13.672 326.344 13.926 326.234 cv
16.156 325.324 li
16.344 325.254 16.477 325.207 16.551 325.184 cv
16.629 325.164 16.688 325.152 16.727 325.152 cv
cp
9.617 327.18 mo
9.219 327.18 8.883 327.27 8.609 327.445 cv
8.336 327.625 8.141 327.922 8.02 328.336 cv
7.984 328.469 7.957 328.617 7.941 328.781 cv
7.926 328.949 7.918 329.164 7.918 329.426 cv
7.918 330.559 li
11.328 330.559 li
11.328 329.246 li
11.328 328.895 11.285 328.586 11.199 328.328 cv
11.113 328.07 10.996 327.855 10.84 327.68 cv
10.691 327.512 10.508 327.387 10.297 327.301 cv
10.09 327.223 9.863 327.18 9.617 327.18 cv
cp
f
16.734 317.324 mo
16.781 317.328 16.816 317.336 16.84 317.352 cv
16.871 317.371 16.895 317.402 16.914 317.449 cv
16.934 317.496 16.945 317.559 16.961 317.633 cv
16.969 317.711 16.977 317.805 16.977 317.91 cv
16.977 318.035 16.969 318.133 16.961 318.203 cv
16.945 318.281 16.934 318.34 16.914 318.383 cv
16.895 318.43 16.871 318.461 16.84 318.473 cv
16.816 318.492 16.781 318.5 16.734 318.496 cv
15.805 318.496 li
16.25 318.902 16.574 319.297 16.773 319.687 cv
16.977 320.078 17.074 320.477 17.078 320.875 cv
17.074 321.348 17 321.742 16.844 322.059 cv
16.691 322.383 16.48 322.641 16.207 322.84 cv
15.941 323.039 15.629 323.184 15.27 323.266 cv
14.914 323.355 14.477 323.398 13.965 323.395 cv
9.695 323.395 li
9.656 323.398 9.621 323.387 9.59 323.367 cv
9.563 323.352 9.535 323.316 9.512 323.262 cv
9.488 323.211 9.473 323.145 9.465 323.059 cv
9.457 322.977 9.453 322.871 9.453 322.742 cv
9.453 322.621 9.457 322.516 9.465 322.43 cv
9.473 322.348 9.488 322.281 9.512 322.23 cv
9.535 322.184 9.563 322.148 9.59 322.125 cv
9.621 322.105 9.656 322.098 9.695 322.094 cv
13.793 322.094 li
14.207 322.098 14.535 322.066 14.781 322.004 cv
15.031 321.945 15.242 321.855 15.418 321.73 cv
15.594 321.613 15.73 321.457 15.824 321.266 cv
15.922 321.082 15.969 320.863 15.969 320.609 cv
15.969 320.289 15.855 319.969 15.625 319.645 cv
15.395 319.324 15.059 318.98 14.613 318.621 cv
9.695 318.621 li
9.656 318.621 9.621 318.613 9.59 318.594 cv
9.563 318.578 9.535 318.543 9.512 318.488 cv
9.488 318.437 9.473 318.371 9.465 318.289 cv
9.457 318.211 9.453 318.105 9.453 317.973 cv
9.453 317.852 9.457 317.746 9.465 317.66 cv
9.473 317.578 9.488 317.516 9.512 317.465 cv
9.535 317.422 9.563 317.387 9.59 317.359 cv
9.621 317.34 9.656 317.328 9.695 317.324 cv
cp
f
16.734 308.883 mo
16.781 308.887 16.816 308.898 16.84 308.914 cv
16.871 308.937 16.895 308.969 16.914 309.016 cv
16.934 309.062 16.945 309.129 16.961 309.211 cv
16.969 309.297 16.977 309.402 16.977 309.523 cv
16.977 309.656 16.969 309.762 16.961 309.844 cv
16.945 309.93 16.934 309.996 16.914 310.039 cv
16.895 310.09 16.871 310.121 16.84 310.141 cv
16.816 310.164 16.781 310.176 16.734 310.172 cv
12.613 310.172 li
12.211 310.176 11.887 310.207 11.641 310.266 cv
11.398 310.332 11.188 310.422 11.008 310.539 cv
10.832 310.66 10.695 310.816 10.602 311.004 cv
10.508 311.195 10.461 311.418 10.461 311.668 cv
10.461 311.996 10.578 312.316 10.805 312.637 cv
11.039 312.961 11.375 313.301 11.813 313.652 cv
16.734 313.652 li
16.781 313.656 16.816 313.668 16.84 313.684 cv
16.871 313.707 16.895 313.738 16.914 313.785 cv
16.934 313.832 16.945 313.898 16.961 313.98 cv
16.969 314.066 16.977 314.172 16.977 314.301 cv
16.977 314.426 16.969 314.531 16.961 314.617 cv
16.945 314.703 16.934 314.77 16.914 314.816 cv
16.895 314.867 16.871 314.902 16.84 314.918 cv
16.816 314.937 16.781 314.945 16.734 314.945 cv
9.695 314.945 li
9.656 314.945 9.621 314.937 9.59 314.922 cv
9.563 314.906 9.535 314.875 9.512 314.828 cv
9.488 314.781 9.473 314.723 9.465 314.648 cv
9.457 314.574 9.453 314.477 9.453 314.355 cv
9.453 314.242 9.457 314.148 9.465 314.07 cv
9.473 314 9.488 313.941 9.512 313.895 cv
9.535 313.855 9.563 313.824 9.59 313.805 cv
9.621 313.789 9.656 313.781 9.695 313.777 cv
10.625 313.777 li
10.184 313.387 9.859 312.992 9.652 312.594 cv
9.449 312.203 9.348 311.805 9.344 311.398 cv
9.348 310.934 9.426 310.539 9.582 310.215 cv
9.742 309.898 9.957 309.637 10.219 309.437 cv
10.488 309.242 10.797 309.102 11.152 309.012 cv
11.512 308.93 11.941 308.887 12.441 308.883 cv
cp
f
16.219 303.062 mo
16.375 303.066 16.492 303.074 16.578 303.094 cv
16.668 303.117 16.734 303.152 16.773 303.191 cv
16.816 303.238 16.855 303.301 16.891 303.379 cv
16.926 303.465 16.953 303.559 16.98 303.664 cv
17 303.773 17.02 303.887 17.039 304.004 cv
17.051 304.125 17.059 304.246 17.063 304.363 cv
17.059 304.73 17.012 305.043 16.918 305.301 cv
16.824 305.566 16.68 305.777 16.48 305.941 cv
16.289 306.109 16.043 306.234 15.738 306.309 cv
15.441 306.387 15.086 306.422 14.676 306.422 cv
10.563 306.422 li
10.563 307.406 li
10.566 307.484 10.523 307.547 10.438 307.594 cv
10.355 307.641 10.223 307.664 10.031 307.664 cv
9.938 307.664 9.852 307.66 9.781 307.645 cv
9.715 307.637 9.66 307.617 9.613 307.594 cv
9.57 307.574 9.539 307.547 9.52 307.512 cv
9.504 307.48 9.496 307.445 9.492 307.398 cv
9.492 306.422 li
7.816 306.422 li
7.785 306.422 7.75 306.414 7.715 306.395 cv
7.688 306.379 7.66 306.344 7.633 306.293 cv
7.613 306.242 7.598 306.176 7.582 306.09 cv
7.574 306.008 7.566 305.902 7.566 305.777 cv
7.566 305.648 7.574 305.543 7.582 305.457 cv
7.598 305.375 7.613 305.309 7.633 305.262 cv
7.66 305.215 7.688 305.184 7.715 305.16 cv
7.75 305.145 7.785 305.133 7.816 305.129 cv
9.492 305.129 li
9.492 303.324 li
9.496 303.285 9.504 303.25 9.52 303.215 cv
9.539 303.184 9.57 303.152 9.613 303.129 cv
9.66 303.105 9.715 303.09 9.781 303.078 cv
9.852 303.07 9.938 303.066 10.031 303.062 cv
10.223 303.066 10.355 303.09 10.438 303.133 cv
10.523 303.184 10.566 303.246 10.563 303.324 cv
10.563 305.129 li
14.488 305.129 li
14.977 305.133 15.344 305.062 15.59 304.914 cv
15.84 304.773 15.965 304.516 15.961 304.145 cv
15.965 304.027 15.953 303.922 15.926 303.824 cv
15.906 303.734 15.879 303.648 15.852 303.574 cv
15.828 303.504 15.805 303.441 15.777 303.387 cv
15.758 303.336 15.746 303.289 15.742 303.246 cv
15.746 303.219 15.754 303.195 15.762 303.168 cv
15.777 303.148 15.801 303.129 15.836 303.113 cv
15.875 303.102 15.926 303.09 15.984 303.078 cv
16.051 303.07 16.129 303.066 16.219 303.062 cv
cp
f
16.734 300.066 mo
16.781 300.07 16.816 300.082 16.84 300.098 cv
16.871 300.121 16.895 300.152 16.914 300.199 cv
16.934 300.246 16.945 300.312 16.961 300.395 cv
16.969 300.48 16.977 300.586 16.977 300.715 cv
16.977 300.84 16.969 300.945 16.961 301.031 cv
16.945 301.117 16.934 301.184 16.914 301.23 cv
16.895 301.281 16.871 301.316 16.84 301.332 cv
16.816 301.352 16.781 301.359 16.734 301.359 cv
9.695 301.359 li
9.66 301.359 9.625 301.352 9.594 301.332 cv
9.563 301.316 9.539 301.281 9.516 301.23 cv
9.5 301.184 9.484 301.117 9.469 301.031 cv
9.461 300.945 9.453 300.84 9.453 300.715 cv
9.453 300.586 9.461 300.48 9.469 300.395 cv
9.484 300.312 9.5 300.246 9.516 300.199 cv
9.539 300.152 9.563 300.121 9.594 300.098 cv
9.625 300.082 9.66 300.07 9.695 300.066 cv
cp
7.316 299.918 mo
7.621 299.918 7.828 299.977 7.934 300.09 cv
8.047 300.207 8.102 300.418 8.098 300.723 cv
8.102 301.031 8.047 301.238 7.938 301.348 cv
7.832 301.461 7.629 301.52 7.332 301.516 cv
7.031 301.52 6.828 301.461 6.715 301.344 cv
6.609 301.23 6.555 301.02 6.551 300.707 cv
6.555 300.41 6.605 300.203 6.711 300.086 cv
6.82 299.977 7.023 299.918 7.316 299.918 cv
cp
f
16.734 287.277 mo
16.781 287.281 16.816 287.293 16.84 287.309 cv
16.871 287.332 16.895 287.363 16.914 287.41 cv
16.934 287.457 16.945 287.523 16.961 287.605 cv
16.969 287.691 16.977 287.797 16.977 287.918 cv
16.977 288.055 16.969 288.16 16.961 288.242 cv
16.945 288.328 16.934 288.395 16.914 288.441 cv
16.895 288.492 16.871 288.527 16.84 288.547 cv
16.816 288.57 16.781 288.582 16.734 288.578 cv
12.457 288.578 li
12.16 288.582 11.887 288.609 11.641 288.656 cv
11.398 288.711 11.188 288.793 11.008 288.906 cv
10.832 289.023 10.695 289.168 10.602 289.344 cv
10.508 289.523 10.461 289.734 10.461 289.969 cv
10.461 290.27 10.578 290.566 10.805 290.867 cv
11.039 291.168 11.375 291.5 11.813 291.855 cv
16.734 291.855 li
16.781 291.859 16.816 291.867 16.84 291.887 cv
16.871 291.91 16.895 291.945 16.914 291.992 cv
16.934 292.043 16.945 292.109 16.961 292.191 cv
16.969 292.277 16.977 292.383 16.977 292.504 cv
16.977 292.625 16.969 292.727 16.961 292.812 cv
16.945 292.898 16.934 292.969 16.914 293.016 cv
16.895 293.07 16.871 293.102 16.84 293.117 cv
16.816 293.137 16.781 293.148 16.734 293.145 cv
12.457 293.145 li
12.16 293.148 11.887 293.176 11.641 293.23 cv
11.398 293.289 11.188 293.375 11.008 293.488 cv
10.832 293.605 10.695 293.75 10.602 293.922 cv
10.508 294.098 10.461 294.305 10.461 294.547 cv
10.461 294.844 10.578 295.145 10.805 295.445 cv
11.039 295.75 11.375 296.078 11.813 296.43 cv
16.734 296.43 li
16.781 296.434 16.816 296.445 16.84 296.461 cv
16.871 296.484 16.895 296.516 16.914 296.562 cv
16.934 296.609 16.945 296.676 16.961 296.758 cv
16.969 296.844 16.977 296.949 16.977 297.078 cv
16.977 297.203 16.969 297.309 16.961 297.395 cv
16.945 297.48 16.934 297.547 16.914 297.594 cv
16.895 297.645 16.871 297.68 16.84 297.695 cv
16.816 297.715 16.781 297.723 16.734 297.723 cv
9.695 297.723 li
9.656 297.723 9.621 297.715 9.59 297.699 cv
9.563 297.684 9.535 297.652 9.512 297.605 cv
9.488 297.559 9.473 297.5 9.465 297.426 cv
9.457 297.352 9.453 297.254 9.453 297.133 cv
9.453 297.02 9.457 296.926 9.465 296.848 cv
9.473 296.777 9.488 296.719 9.512 296.672 cv
9.535 296.633 9.563 296.602 9.59 296.582 cv
9.621 296.566 9.656 296.559 9.695 296.555 cv
10.625 296.555 li
10.184 296.164 9.859 295.777 9.652 295.402 cv
9.449 295.031 9.348 294.656 9.344 294.273 cv
9.348 293.98 9.383 293.719 9.445 293.484 cv
9.516 293.258 9.609 293.051 9.73 292.871 cv
9.855 292.695 10 292.547 10.168 292.418 cv
10.34 292.297 10.531 292.191 10.734 292.105 cv
10.484 291.875 10.266 291.652 10.086 291.437 cv
9.91 291.23 9.77 291.027 9.656 290.828 cv
9.551 290.633 9.469 290.441 9.418 290.254 cv
9.371 290.07 9.348 289.883 9.344 289.695 cv
9.348 289.242 9.426 288.863 9.582 288.555 cv
9.742 288.25 9.957 288 10.219 287.809 cv
10.488 287.617 10.797 287.48 11.152 287.398 cv
11.512 287.32 11.891 287.281 12.285 287.277 cv
cp
f
12.91 278.918 mo
13.113 278.922 13.258 278.973 13.344 279.07 cv
13.43 279.176 13.473 279.289 13.473 279.418 cv
13.473 284.055 li
13.863 284.059 14.215 284.02 14.527 283.937 cv
14.84 283.863 15.109 283.734 15.336 283.547 cv
15.563 283.367 15.734 283.129 15.852 282.832 cv
15.973 282.543 16.035 282.184 16.031 281.754 cv
16.035 281.422 16.008 281.121 15.949 280.859 cv
15.898 280.598 15.836 280.371 15.766 280.18 cv
15.699 279.988 15.637 279.832 15.582 279.707 cv
15.527 279.586 15.5 279.492 15.5 279.426 cv
15.5 279.391 15.512 279.359 15.527 279.328 cv
15.551 279.305 15.578 279.281 15.609 279.262 cv
15.648 279.25 15.699 279.238 15.762 279.227 cv
15.832 279.223 15.91 279.219 16 279.215 cv
16.07 279.219 16.129 279.223 16.176 279.223 cv
16.227 279.23 16.27 279.234 16.309 279.242 cv
16.348 279.25 16.383 279.266 16.414 279.281 cv
16.445 279.305 16.477 279.328 16.504 279.352 cv
16.535 279.383 16.582 279.465 16.645 279.605 cv
16.711 279.746 16.773 279.93 16.836 280.152 cv
16.898 280.379 16.953 280.637 17.004 280.93 cv
17.051 281.227 17.074 281.543 17.078 281.875 cv
17.074 282.457 16.996 282.965 16.836 283.395 cv
16.676 283.832 16.438 284.199 16.117 284.496 cv
15.801 284.797 15.402 285.02 14.922 285.168 cv
14.441 285.32 13.883 285.395 13.246 285.395 cv
12.645 285.395 12.102 285.316 11.617 285.16 cv
11.137 285.004 10.727 284.781 10.387 284.484 cv
10.055 284.191 9.797 283.832 9.613 283.414 cv
9.438 283 9.348 282.535 9.344 282.016 cv
9.348 281.465 9.438 280.992 9.609 280.602 cv
9.789 280.215 10.027 279.898 10.324 279.645 cv
10.629 279.398 10.98 279.215 11.379 279.094 cv
11.785 278.98 12.215 278.922 12.676 278.918 cv
cp
12.527 280.215 mo
11.852 280.199 11.316 280.352 10.93 280.668 cv
10.547 280.988 10.355 281.461 10.352 282.082 cv
10.355 282.406 10.414 282.687 10.531 282.926 cv
10.652 283.168 10.813 283.367 11.008 283.531 cv
11.207 283.695 11.438 283.82 11.699 283.906 cv
11.965 283.996 12.242 284.047 12.527 284.055 cv
cp
f
6.152 270.648 mo
7.203 271.145 8.277 271.512 9.379 271.754 cv
10.484 271.996 11.594 272.117 12.707 272.117 cv
13.828 272.117 14.938 271.996 16.039 271.746 cv
17.137 271.504 18.215 271.141 19.277 270.664 cv
19.336 270.641 19.391 270.629 19.438 270.621 cv
19.48 270.621 19.516 270.637 19.547 270.672 cv
19.574 270.711 19.594 270.766 19.609 270.84 cv
19.617 270.918 19.625 271.023 19.629 271.148 cv
19.625 271.246 19.621 271.324 19.621 271.391 cv
19.613 271.461 19.605 271.52 19.59 271.566 cv
19.574 271.617 19.555 271.66 19.535 271.687 cv
19.512 271.723 19.488 271.746 19.465 271.758 cv
18.93 272.043 18.391 272.289 17.848 272.5 cv
17.301 272.715 16.75 272.895 16.188 273.043 cv
15.625 273.191 15.055 273.301 14.477 273.371 cv
13.902 273.445 13.32 273.484 12.73 273.48 cv
12.141 273.484 11.559 273.441 10.984 273.359 cv
10.414 273.281 9.844 273.168 9.277 273.016 cv
8.711 272.867 8.156 272.684 7.605 272.469 cv
7.063 272.258 6.52 272.02 5.977 271.75 cv
5.961 271.746 5.941 271.73 5.922 271.707 cv
5.91 271.684 5.895 271.652 5.875 271.609 cv
5.863 271.57 5.852 271.512 5.84 271.437 cv
5.836 271.367 5.832 271.273 5.828 271.156 cv
5.832 271.039 5.84 270.945 5.852 270.867 cv
5.871 270.797 5.891 270.738 5.914 270.695 cv
5.941 270.656 5.977 270.633 6.02 270.625 cv
6.063 270.621 6.109 270.629 6.152 270.648 cv
cp
f
16.727 257.316 mo
16.77 257.316 16.805 257.328 16.836 257.352 cv
16.867 257.375 16.895 257.414 16.91 257.465 cv
16.93 257.52 16.941 257.586 16.957 257.668 cv
16.969 257.754 16.977 257.863 16.977 257.992 cv
16.977 258.121 16.969 258.227 16.957 258.312 cv
16.941 258.402 16.93 258.473 16.91 258.523 cv
16.895 258.574 16.867 258.609 16.836 258.629 cv
16.805 258.652 16.77 258.664 16.727 258.66 cv
7.91 258.66 li
7.91 258.676 li
16.766 262.246 li
16.805 262.266 16.836 262.289 16.859 262.312 cv
16.887 262.344 16.91 262.383 16.926 262.437 cv
16.945 262.492 16.957 262.559 16.965 262.633 cv
16.973 262.711 16.977 262.801 16.977 262.902 cv
16.977 263.016 16.969 263.109 16.961 263.184 cv
16.945 263.266 16.934 263.332 16.918 263.379 cv
16.902 263.434 16.883 263.473 16.852 263.5 cv
16.828 263.531 16.797 263.551 16.766 263.559 cv
7.91 266.969 li
7.91 266.977 li
16.727 266.977 li
16.77 266.98 16.805 266.992 16.836 267.012 cv
16.867 267.035 16.895 267.07 16.91 267.125 cv
16.93 267.18 16.941 267.25 16.957 267.332 cv
16.969 267.422 16.977 267.531 16.977 267.66 cv
16.977 267.793 16.969 267.902 16.957 267.984 cv
16.941 268.074 16.93 268.141 16.91 268.191 cv
16.895 268.242 16.867 268.277 16.836 268.297 cv
16.805 268.316 16.77 268.328 16.727 268.324 cv
7.418 268.324 li
7.203 268.328 7.047 268.27 6.949 268.148 cv
6.859 268.035 6.813 267.902 6.809 267.758 cv
6.809 266.934 li
6.813 266.766 6.828 266.617 6.855 266.488 cv
6.891 266.363 6.938 266.254 7.004 266.156 cv
7.074 266.062 7.16 265.98 7.262 265.918 cv
7.367 265.855 7.492 265.801 7.629 265.75 cv
14.957 262.855 li
14.957 262.816 li
7.652 259.805 li
7.5 259.75 7.367 259.684 7.254 259.613 cv
7.148 259.547 7.059 259.473 6.992 259.387 cv
6.93 259.305 6.883 259.215 6.852 259.113 cv
6.824 259.016 6.813 258.898 6.809 258.762 cv
6.809 257.898 li
6.813 257.82 6.824 257.746 6.844 257.672 cv
6.871 257.602 6.906 257.539 6.953 257.488 cv
7.004 257.437 7.066 257.395 7.141 257.363 cv
7.219 257.332 7.313 257.316 7.418 257.316 cv
cp
f
16.734 253.48 mo
16.781 253.484 16.816 253.496 16.84 253.512 cv
16.871 253.535 16.895 253.566 16.914 253.613 cv
16.934 253.66 16.945 253.727 16.961 253.809 cv
16.969 253.895 16.977 254 16.977 254.129 cv
16.977 254.254 16.969 254.359 16.961 254.445 cv
16.945 254.531 16.934 254.598 16.914 254.645 cv
16.895 254.695 16.871 254.73 16.84 254.746 cv
16.816 254.766 16.781 254.773 16.734 254.773 cv
9.695 254.773 li
9.66 254.773 9.625 254.766 9.594 254.746 cv
9.563 254.73 9.539 254.695 9.516 254.645 cv
9.5 254.598 9.484 254.531 9.469 254.445 cv
9.461 254.359 9.453 254.254 9.453 254.129 cv
9.453 254 9.461 253.895 9.469 253.809 cv
9.484 253.727 9.5 253.66 9.516 253.613 cv
9.539 253.566 9.563 253.535 9.594 253.512 cv
9.625 253.496 9.66 253.484 9.695 253.48 cv
cp
7.316 253.332 mo
7.621 253.332 7.828 253.391 7.934 253.504 cv
8.047 253.621 8.102 253.832 8.098 254.137 cv
8.102 254.445 8.047 254.652 7.938 254.762 cv
7.832 254.875 7.629 254.934 7.332 254.93 cv
7.031 254.934 6.828 254.875 6.715 254.758 cv
6.609 254.645 6.555 254.434 6.551 254.121 cv
6.555 253.824 6.605 253.617 6.711 253.5 cv
6.82 253.391 7.023 253.332 7.316 253.332 cv
cp
f
16.734 245.027 mo
16.781 245.031 16.816 245.043 16.84 245.059 cv
16.871 245.082 16.895 245.113 16.914 245.16 cv
16.934 245.207 16.945 245.273 16.961 245.355 cv
16.969 245.441 16.977 245.547 16.977 245.668 cv
16.977 245.801 16.969 245.906 16.961 245.988 cv
16.945 246.074 16.934 246.141 16.914 246.184 cv
16.895 246.234 16.871 246.266 16.84 246.285 cv
16.816 246.309 16.781 246.32 16.734 246.316 cv
12.613 246.316 li
12.211 246.32 11.887 246.352 11.641 246.41 cv
11.398 246.477 11.188 246.566 11.008 246.684 cv
10.832 246.805 10.695 246.961 10.602 247.148 cv
10.508 247.34 10.461 247.562 10.461 247.812 cv
10.461 248.141 10.578 248.461 10.805 248.781 cv
11.039 249.105 11.375 249.445 11.813 249.797 cv
16.734 249.797 li
16.781 249.801 16.816 249.812 16.84 249.828 cv
16.871 249.852 16.895 249.883 16.914 249.93 cv
16.934 249.977 16.945 250.043 16.961 250.125 cv
16.969 250.211 16.977 250.316 16.977 250.445 cv
16.977 250.57 16.969 250.676 16.961 250.762 cv
16.945 250.848 16.934 250.914 16.914 250.961 cv
16.895 251.012 16.871 251.047 16.84 251.062 cv
16.816 251.082 16.781 251.09 16.734 251.09 cv
9.695 251.09 li
9.656 251.09 9.621 251.082 9.59 251.066 cv
9.563 251.051 9.535 251.02 9.512 250.973 cv
9.488 250.926 9.473 250.867 9.465 250.793 cv
9.457 250.719 9.453 250.621 9.453 250.5 cv
9.453 250.387 9.457 250.293 9.465 250.215 cv
9.473 250.145 9.488 250.086 9.512 250.039 cv
9.535 250 9.563 249.969 9.59 249.949 cv
9.621 249.934 9.656 249.926 9.695 249.922 cv
10.625 249.922 li
10.184 249.531 9.859 249.137 9.652 248.738 cv
9.449 248.348 9.348 247.949 9.344 247.543 cv
9.348 247.078 9.426 246.684 9.582 246.359 cv
9.742 246.043 9.957 245.781 10.219 245.582 cv
10.488 245.387 10.797 245.246 11.152 245.156 cv
11.512 245.074 11.941 245.031 12.441 245.027 cv
cp
f
16.734 236.648 mo
16.781 236.652 16.816 236.66 16.84 236.676 cv
16.871 236.695 16.895 236.727 16.914 236.773 cv
16.934 236.82 16.945 236.883 16.961 236.957 cv
16.969 237.035 16.977 237.129 16.977 237.234 cv
16.977 237.359 16.969 237.457 16.961 237.527 cv
16.945 237.605 16.934 237.664 16.914 237.707 cv
16.895 237.754 16.871 237.785 16.84 237.797 cv
16.816 237.816 16.781 237.824 16.734 237.82 cv
15.805 237.82 li
16.25 238.227 16.574 238.621 16.773 239.012 cv
16.977 239.402 17.074 239.801 17.078 240.199 cv
17.074 240.672 17 241.066 16.844 241.383 cv
16.691 241.707 16.48 241.965 16.207 242.164 cv
15.941 242.363 15.629 242.508 15.27 242.59 cv
14.914 242.68 14.477 242.723 13.965 242.719 cv
9.695 242.719 li
9.656 242.723 9.621 242.711 9.59 242.691 cv
9.563 242.676 9.535 242.641 9.512 242.586 cv
9.488 242.535 9.473 242.469 9.465 242.383 cv
9.457 242.301 9.453 242.195 9.453 242.066 cv
9.453 241.945 9.457 241.84 9.465 241.754 cv
9.473 241.672 9.488 241.605 9.512 241.555 cv
9.535 241.508 9.563 241.473 9.59 241.449 cv
9.621 241.43 9.656 241.422 9.695 241.418 cv
13.793 241.418 li
14.207 241.422 14.535 241.391 14.781 241.328 cv
15.031 241.27 15.242 241.18 15.418 241.055 cv
15.594 240.937 15.73 240.781 15.824 240.59 cv
15.922 240.406 15.969 240.187 15.969 239.934 cv
15.969 239.613 15.855 239.293 15.625 238.969 cv
15.395 238.648 15.059 238.305 14.613 237.945 cv
9.695 237.945 li
9.656 237.945 9.621 237.937 9.59 237.918 cv
9.563 237.902 9.535 237.867 9.512 237.812 cv
9.488 237.762 9.473 237.695 9.465 237.613 cv
9.457 237.535 9.453 237.43 9.453 237.297 cv
9.453 237.176 9.457 237.07 9.465 236.984 cv
9.473 236.902 9.488 236.84 9.512 236.789 cv
9.535 236.746 9.563 236.711 9.59 236.684 cv
9.621 236.664 9.656 236.652 9.695 236.648 cv
cp
f
16.219 230.605 mo
16.375 230.609 16.492 230.617 16.578 230.637 cv
16.668 230.66 16.734 230.695 16.773 230.734 cv
16.816 230.781 16.855 230.844 16.891 230.922 cv
16.926 231.008 16.953 231.102 16.98 231.207 cv
17 231.316 17.02 231.43 17.039 231.547 cv
17.051 231.668 17.059 231.789 17.063 231.906 cv
17.059 232.273 17.012 232.586 16.918 232.844 cv
16.824 233.109 16.68 233.32 16.48 233.484 cv
16.289 233.652 16.043 233.777 15.738 233.852 cv
15.441 233.93 15.086 233.965 14.676 233.965 cv
10.563 233.965 li
10.563 234.949 li
10.566 235.027 10.523 235.09 10.438 235.137 cv
10.355 235.184 10.223 235.207 10.031 235.207 cv
9.938 235.207 9.852 235.203 9.781 235.187 cv
9.715 235.18 9.66 235.16 9.613 235.137 cv
9.57 235.117 9.539 235.09 9.52 235.055 cv
9.504 235.023 9.496 234.988 9.492 234.941 cv
9.492 233.965 li
7.816 233.965 li
7.785 233.965 7.75 233.957 7.715 233.937 cv
7.688 233.922 7.66 233.887 7.633 233.836 cv
7.613 233.785 7.598 233.719 7.582 233.633 cv
7.574 233.551 7.566 233.445 7.566 233.32 cv
7.566 233.191 7.574 233.086 7.582 233 cv
7.598 232.918 7.613 232.852 7.633 232.805 cv
7.66 232.758 7.688 232.727 7.715 232.703 cv
7.75 232.687 7.785 232.676 7.816 232.672 cv
9.492 232.672 li
9.492 230.867 li
9.496 230.828 9.504 230.793 9.52 230.758 cv
9.539 230.727 9.57 230.695 9.613 230.672 cv
9.66 230.648 9.715 230.633 9.781 230.621 cv
9.852 230.613 9.938 230.609 10.031 230.605 cv
10.223 230.609 10.355 230.633 10.438 230.676 cv
10.523 230.727 10.566 230.789 10.563 230.867 cv
10.563 232.672 li
14.488 232.672 li
14.977 232.676 15.344 232.605 15.59 232.457 cv
15.84 232.316 15.965 232.059 15.961 231.687 cv
15.965 231.57 15.953 231.465 15.926 231.367 cv
15.906 231.277 15.879 231.191 15.852 231.117 cv
15.828 231.047 15.805 230.984 15.777 230.93 cv
15.758 230.879 15.746 230.832 15.742 230.789 cv
15.746 230.762 15.754 230.738 15.762 230.711 cv
15.777 230.691 15.801 230.672 15.836 230.656 cv
15.875 230.645 15.926 230.633 15.984 230.621 cv
16.051 230.613 16.129 230.609 16.219 230.605 cv
cp
f
12.91 223.133 mo
13.113 223.137 13.258 223.187 13.344 223.285 cv
13.43 223.391 13.473 223.504 13.473 223.633 cv
13.473 228.27 li
13.863 228.273 14.215 228.234 14.527 228.152 cv
14.84 228.078 15.109 227.949 15.336 227.762 cv
15.563 227.582 15.734 227.344 15.852 227.047 cv
15.973 226.758 16.035 226.398 16.031 225.969 cv
16.035 225.637 16.008 225.336 15.949 225.074 cv
15.898 224.812 15.836 224.586 15.766 224.395 cv
15.699 224.203 15.637 224.047 15.582 223.922 cv
15.527 223.801 15.5 223.707 15.5 223.641 cv
15.5 223.605 15.512 223.574 15.527 223.543 cv
15.551 223.52 15.578 223.496 15.609 223.477 cv
15.648 223.465 15.699 223.453 15.762 223.441 cv
15.832 223.437 15.91 223.434 16 223.43 cv
16.07 223.434 16.129 223.437 16.176 223.437 cv
16.227 223.445 16.27 223.449 16.309 223.457 cv
16.348 223.465 16.383 223.48 16.414 223.496 cv
16.445 223.52 16.477 223.543 16.504 223.566 cv
16.535 223.598 16.582 223.68 16.645 223.82 cv
16.711 223.961 16.773 224.145 16.836 224.367 cv
16.898 224.594 16.953 224.852 17.004 225.145 cv
17.051 225.441 17.074 225.758 17.078 226.09 cv
17.074 226.672 16.996 227.18 16.836 227.609 cv
16.676 228.047 16.438 228.414 16.117 228.711 cv
15.801 229.012 15.402 229.234 14.922 229.383 cv
14.441 229.535 13.883 229.609 13.246 229.609 cv
12.645 229.609 12.102 229.531 11.617 229.375 cv
11.137 229.219 10.727 228.996 10.387 228.699 cv
10.055 228.406 9.797 228.047 9.613 227.629 cv
9.438 227.215 9.348 226.75 9.344 226.23 cv
9.348 225.68 9.438 225.207 9.609 224.816 cv
9.789 224.43 10.027 224.113 10.324 223.859 cv
10.629 223.613 10.98 223.43 11.379 223.309 cv
11.785 223.195 12.215 223.137 12.676 223.133 cv
cp
12.527 224.43 mo
11.852 224.414 11.316 224.566 10.93 224.883 cv
10.547 225.203 10.355 225.676 10.352 226.297 cv
10.355 226.621 10.414 226.902 10.531 227.141 cv
10.652 227.383 10.813 227.582 11.008 227.746 cv
11.207 227.91 11.438 228.035 11.699 228.121 cv
11.965 228.211 12.242 228.262 12.527 228.27 cv
cp
f
14.816 216.742 mo
15.18 216.746 15.5 216.812 15.781 216.941 cv
16.063 217.078 16.301 217.27 16.492 217.512 cv
16.688 217.762 16.832 218.051 16.93 218.387 cv
17.027 218.727 17.074 219.102 17.078 219.504 cv
17.074 219.758 17.055 219.996 17.02 220.219 cv
16.977 220.449 16.93 220.652 16.871 220.832 cv
16.813 221.016 16.75 221.168 16.684 221.289 cv
16.621 221.418 16.563 221.508 16.508 221.562 cv
16.457 221.621 16.387 221.664 16.289 221.687 cv
16.199 221.715 16.07 221.727 15.906 221.727 cv
15.809 221.727 15.727 221.723 15.656 221.711 cv
15.594 221.703 15.539 221.691 15.492 221.672 cv
15.453 221.66 15.422 221.637 15.402 221.605 cv
15.387 221.578 15.379 221.547 15.375 221.508 cv
15.379 221.453 15.414 221.367 15.48 221.254 cv
15.555 221.145 15.629 221.008 15.711 220.84 cv
15.797 220.676 15.875 220.48 15.941 220.254 cv
16.016 220.035 16.051 219.777 16.047 219.48 cv
16.051 219.266 16.027 219.066 15.977 218.887 cv
15.934 218.711 15.863 218.559 15.77 218.426 cv
15.68 218.301 15.566 218.199 15.422 218.125 cv
15.281 218.059 15.113 218.023 14.918 218.02 cv
14.723 218.023 14.555 218.074 14.418 218.172 cv
14.285 218.277 14.164 218.41 14.059 218.574 cv
13.957 218.742 13.867 218.93 13.781 219.137 cv
13.703 219.348 13.617 219.562 13.527 219.781 cv
13.441 220.004 13.34 220.223 13.227 220.43 cv
13.117 220.645 12.98 220.832 12.816 221 cv
12.656 221.168 12.465 221.305 12.238 221.402 cv
12.016 221.508 11.746 221.559 11.43 221.555 cv
11.156 221.559 10.891 221.504 10.637 221.395 cv
10.387 221.289 10.168 221.129 9.973 220.914 cv
9.785 220.699 9.633 220.43 9.516 220.109 cv
9.406 219.789 9.348 219.418 9.344 218.988 cv
9.348 218.805 9.363 218.617 9.391 218.426 cv
9.426 218.242 9.465 218.07 9.508 217.918 cv
9.559 217.77 9.609 217.641 9.66 217.531 cv
9.719 217.422 9.766 217.34 9.805 217.285 cv
9.848 217.23 9.887 217.195 9.914 217.176 cv
9.949 217.16 9.984 217.148 10.02 217.137 cv
10.063 217.133 10.109 217.125 10.164 217.113 cv
10.223 217.109 10.293 217.105 10.375 217.102 cv
10.465 217.105 10.543 217.109 10.605 217.113 cv
10.676 217.125 10.727 217.137 10.766 217.152 cv
10.809 217.172 10.84 217.195 10.855 217.219 cv
10.875 217.25 10.883 217.277 10.883 217.305 cv
10.883 217.355 10.855 217.422 10.797 217.508 cv
10.742 217.598 10.68 217.715 10.613 217.855 cv
10.551 218 10.492 218.164 10.43 218.352 cv
10.375 218.543 10.344 218.762 10.344 219.004 cv
10.344 219.227 10.371 219.418 10.418 219.582 cv
10.473 219.75 10.543 219.887 10.629 219.992 cv
10.723 220.102 10.828 220.184 10.953 220.234 cv
11.078 220.293 11.215 220.32 11.359 220.316 cv
11.566 220.32 11.738 220.27 11.871 220.16 cv
12.012 220.059 12.133 219.922 12.238 219.754 cv
12.344 219.59 12.438 219.398 12.52 219.184 cv
12.605 218.973 12.691 218.758 12.777 218.531 cv
12.867 218.312 12.965 218.094 13.074 217.875 cv
13.184 217.66 13.316 217.465 13.473 217.297 cv
13.629 217.133 13.816 217 14.035 216.895 cv
14.254 216.797 14.516 216.746 14.816 216.742 cv
cp
f
12.73 212.289 mo
13.32 212.289 13.902 212.328 14.477 212.398 cv
15.055 212.477 15.625 212.586 16.188 212.727 cv
16.75 212.875 17.301 213.051 17.848 213.262 cv
18.391 213.473 18.93 213.719 19.465 214 cv
19.488 214.016 19.512 214.039 19.535 214.07 cv
19.555 214.102 19.574 214.145 19.59 214.191 cv
19.605 214.246 19.613 214.305 19.621 214.367 cv
19.621 214.437 19.625 214.52 19.629 214.613 cv
19.625 214.754 19.617 214.859 19.609 214.93 cv
19.594 215.008 19.574 215.062 19.547 215.094 cv
19.516 215.133 19.48 215.148 19.438 215.141 cv
19.391 215.141 19.336 215.125 19.277 215.098 cv
18.219 214.617 17.145 214.254 16.043 214.008 cv
14.941 213.766 13.828 213.645 12.707 213.641 cv
11.594 213.645 10.484 213.766 9.379 214.008 cv
8.277 214.254 7.203 214.621 6.152 215.113 cv
6.109 215.137 6.063 215.145 6.02 215.137 cv
5.977 215.133 5.941 215.109 5.914 215.066 cv
5.891 215.027 5.871 214.973 5.852 214.895 cv
5.84 214.824 5.832 214.727 5.828 214.605 cv
5.832 214.496 5.836 214.402 5.84 214.328 cv
5.852 214.258 5.863 214.199 5.875 214.152 cv
5.895 214.109 5.91 214.078 5.922 214.055 cv
5.941 214.035 5.961 214.02 5.977 214.008 cv
7.051 213.473 8.148 213.051 9.277 212.746 cv
10.406 212.441 11.559 212.289 12.73 212.289 cv
cp
f
277.145 544.934 mo
277.141 545.039 277.125 545.129 277.09 545.199 cv
277.055 545.277 277.008 545.336 276.953 545.379 cv
276.895 545.43 276.832 545.465 276.762 545.48 cv
276.691 545.504 276.621 545.512 276.555 545.512 cv
276.109 545.512 li
275.965 545.512 275.84 545.5 275.738 545.469 cv
275.629 545.445 275.531 545.391 275.441 545.312 cv
275.344 545.238 275.25 545.137 275.156 545.004 cv
275.063 544.875 274.961 544.707 274.859 544.504 cv
271.77 538.746 li
271.605 538.453 271.441 538.141 271.281 537.812 cv
271.113 537.484 270.961 537.168 270.824 536.859 cv
270.809 536.859 li
270.816 537.238 270.824 537.621 270.832 538.012 cv
270.836 538.402 270.836 538.793 270.84 539.176 cv
270.84 545.285 li
270.836 545.324 270.824 545.359 270.805 545.391 cv
270.781 545.426 270.746 545.453 270.695 545.469 cv
270.641 545.488 270.57 545.5 270.488 545.516 cv
270.398 545.527 270.293 545.535 270.164 545.535 cv
270.031 545.535 269.922 545.527 269.836 545.516 cv
269.75 545.5 269.68 545.488 269.633 545.469 cv
269.578 545.453 269.543 545.426 269.523 545.391 cv
269.5 545.359 269.488 545.324 269.492 545.285 cv
269.492 535.945 li
269.488 535.738 269.547 535.59 269.668 535.5 cv
269.785 535.414 269.918 535.371 270.059 535.367 cv
270.723 535.367 li
270.875 535.371 271.008 535.383 271.113 535.406 cv
271.215 535.434 271.309 535.477 271.395 535.535 cv
271.477 535.598 271.555 535.68 271.637 535.785 cv
271.711 535.895 271.793 536.031 271.883 536.187 cv
274.258 540.629 li
274.402 540.906 274.543 541.172 274.68 541.426 cv
274.813 541.687 274.941 541.941 275.07 542.187 cv
275.195 542.441 275.32 542.687 275.445 542.926 cv
275.566 543.172 275.691 543.414 275.813 543.656 cv
275.82 543.656 li
275.805 543.246 275.801 542.816 275.801 542.371 cv
275.797 541.926 275.793 541.5 275.797 541.086 cv
275.797 535.594 li
275.793 535.559 275.805 535.523 275.828 535.492 cv
275.848 535.461 275.887 535.434 275.941 535.41 cv
275.992 535.387 276.059 535.371 276.148 535.359 cv
276.23 535.352 276.344 535.348 276.484 535.344 cv
276.602 535.348 276.707 535.352 276.797 535.359 cv
276.883 535.371 276.949 535.387 277.004 535.41 cv
277.051 535.434 277.086 535.461 277.109 535.492 cv
277.129 535.523 277.141 535.559 277.145 535.594 cv
cp
f
285.727 545.293 mo
285.723 545.34 285.715 545.375 285.699 545.398 cv
285.68 545.43 285.648 545.453 285.602 545.473 cv
285.555 545.492 285.492 545.504 285.418 545.52 cv
285.34 545.527 285.246 545.535 285.141 545.535 cv
285.016 545.535 284.918 545.527 284.848 545.52 cv
284.77 545.504 284.711 545.492 284.668 545.473 cv
284.621 545.453 284.59 545.43 284.578 545.398 cv
284.559 545.375 284.551 545.34 284.555 545.293 cv
284.555 544.363 li
284.148 544.809 283.754 545.133 283.363 545.332 cv
282.973 545.535 282.574 545.633 282.176 545.637 cv
281.703 545.633 281.309 545.559 280.992 545.402 cv
280.668 545.25 280.41 545.039 280.211 544.766 cv
280.012 544.5 279.867 544.187 279.785 543.828 cv
279.695 543.473 279.652 543.035 279.656 542.523 cv
279.656 538.254 li
279.652 538.215 279.664 538.18 279.684 538.148 cv
279.699 538.121 279.734 538.094 279.789 538.07 cv
279.84 538.047 279.906 538.031 279.992 538.023 cv
280.074 538.016 280.18 538.012 280.309 538.012 cv
280.43 538.012 280.535 538.016 280.621 538.023 cv
280.703 538.031 280.77 538.047 280.82 538.07 cv
280.867 538.094 280.902 538.121 280.926 538.148 cv
280.945 538.18 280.953 538.215 280.957 538.254 cv
280.957 542.352 li
280.953 542.766 280.984 543.094 281.047 543.34 cv
281.105 543.59 281.195 543.801 281.32 543.977 cv
281.438 544.152 281.594 544.289 281.785 544.383 cv
281.969 544.48 282.188 544.527 282.441 544.527 cv
282.762 544.527 283.082 544.414 283.406 544.184 cv
283.727 543.953 284.07 543.617 284.43 543.172 cv
284.43 538.254 li
284.43 538.215 284.438 538.18 284.457 538.148 cv
284.473 538.121 284.508 538.094 284.563 538.07 cv
284.613 538.047 284.68 538.031 284.762 538.023 cv
284.84 538.016 284.945 538.012 285.078 538.012 cv
285.199 538.012 285.305 538.016 285.391 538.023 cv
285.473 538.031 285.535 538.047 285.586 538.07 cv
285.629 538.094 285.664 538.121 285.691 538.148 cv
285.711 538.18 285.723 538.215 285.727 538.254 cv
cp
f
298.551 545.293 mo
298.547 545.34 298.535 545.375 298.52 545.398 cv
298.496 545.43 298.465 545.453 298.418 545.473 cv
298.371 545.492 298.305 545.504 298.223 545.52 cv
298.137 545.527 298.031 545.535 297.91 545.535 cv
297.773 545.535 297.668 545.527 297.586 545.52 cv
297.5 545.504 297.434 545.492 297.387 545.473 cv
297.336 545.453 297.301 545.43 297.281 545.398 cv
297.258 545.375 297.246 545.34 297.25 545.293 cv
297.25 541.016 li
297.246 540.719 297.219 540.445 297.172 540.199 cv
297.117 539.957 297.035 539.746 296.922 539.566 cv
296.805 539.391 296.66 539.254 296.484 539.16 cv
296.305 539.066 296.094 539.02 295.859 539.02 cv
295.559 539.02 295.262 539.137 294.961 539.363 cv
294.66 539.598 294.328 539.934 293.973 540.371 cv
293.973 545.293 li
293.969 545.34 293.961 545.375 293.941 545.398 cv
293.918 545.43 293.883 545.453 293.836 545.473 cv
293.785 545.492 293.719 545.504 293.637 545.52 cv
293.551 545.527 293.445 545.535 293.324 545.535 cv
293.203 545.535 293.102 545.527 293.016 545.52 cv
292.93 545.504 292.859 545.492 292.813 545.473 cv
292.758 545.453 292.727 545.43 292.711 545.398 cv
292.691 545.375 292.68 545.34 292.684 545.293 cv
292.684 541.016 li
292.68 540.719 292.652 540.445 292.598 540.199 cv
292.539 539.957 292.453 539.746 292.34 539.566 cv
292.223 539.391 292.078 539.254 291.906 539.16 cv
291.73 539.066 291.523 539.02 291.281 539.02 cv
290.984 539.02 290.684 539.137 290.383 539.363 cv
290.078 539.598 289.75 539.934 289.398 540.371 cv
289.398 545.293 li
289.395 545.34 289.383 545.375 289.367 545.398 cv
289.344 545.43 289.313 545.453 289.266 545.473 cv
289.219 545.492 289.152 545.504 289.07 545.52 cv
288.984 545.527 288.879 545.535 288.75 545.535 cv
288.625 545.535 288.52 545.527 288.434 545.52 cv
288.348 545.504 288.281 545.492 288.234 545.473 cv
288.184 545.453 288.148 545.43 288.133 545.398 cv
288.113 545.375 288.105 545.34 288.105 545.293 cv
288.105 538.254 li
288.105 538.215 288.113 538.18 288.129 538.148 cv
288.145 538.121 288.176 538.094 288.223 538.07 cv
288.27 538.047 288.328 538.031 288.402 538.023 cv
288.477 538.016 288.574 538.012 288.695 538.012 cv
288.809 538.012 288.902 538.016 288.98 538.023 cv
289.051 538.031 289.109 538.047 289.156 538.07 cv
289.195 538.094 289.227 538.121 289.246 538.148 cv
289.262 538.18 289.27 538.215 289.273 538.254 cv
289.273 539.184 li
289.664 538.742 290.051 538.418 290.426 538.211 cv
290.797 538.008 291.172 537.906 291.555 537.902 cv
291.848 537.906 292.109 537.941 292.344 538.004 cv
292.57 538.074 292.777 538.168 292.957 538.289 cv
293.133 538.414 293.281 538.559 293.41 538.727 cv
293.531 538.898 293.637 539.09 293.723 539.293 cv
293.953 539.043 294.176 538.824 294.391 538.645 cv
294.598 538.469 294.801 538.328 295 538.215 cv
295.195 538.109 295.387 538.027 295.574 537.977 cv
295.758 537.93 295.945 537.906 296.133 537.902 cv
296.586 537.906 296.965 537.984 297.273 538.141 cv
297.578 538.301 297.828 538.516 298.02 538.777 cv
298.211 539.047 298.348 539.355 298.43 539.711 cv
298.508 540.07 298.547 540.449 298.551 540.844 cv
cp
f
307.316 541.68 mo
307.313 542.289 307.246 542.84 307.117 543.328 cv
306.98 543.816 306.785 544.23 306.531 544.574 cv
306.27 544.918 305.953 545.184 305.582 545.363 cv
305.203 545.547 304.773 545.633 304.289 545.637 cv
304.063 545.633 303.855 545.613 303.668 545.57 cv
303.477 545.523 303.289 545.453 303.109 545.355 cv
302.922 545.258 302.742 545.133 302.563 544.98 cv
302.379 544.832 302.184 544.648 301.984 544.434 cv
301.984 545.293 li
301.98 545.34 301.973 545.375 301.953 545.402 cv
301.93 545.437 301.895 545.461 301.852 545.477 cv
301.801 545.492 301.742 545.504 301.676 545.52 cv
301.602 545.527 301.512 545.535 301.406 545.535 cv
301.301 545.535 301.211 545.527 301.137 545.52 cv
301.063 545.504 301.004 545.492 300.957 545.477 cv
300.91 545.461 300.879 545.437 300.863 545.402 cv
300.848 545.375 300.84 545.34 300.84 545.293 cv
300.84 534.844 li
300.84 534.805 300.848 534.77 300.867 534.734 cv
300.883 534.707 300.918 534.68 300.969 534.656 cv
301.016 534.637 301.082 534.621 301.168 534.609 cv
301.254 534.602 301.359 534.598 301.484 534.594 cv
301.613 534.598 301.719 534.602 301.805 534.609 cv
301.887 534.621 301.953 534.637 302 534.656 cv
302.047 534.68 302.078 534.707 302.102 534.734 cv
302.117 534.77 302.129 534.805 302.133 534.844 cv
302.133 539.059 li
302.34 538.848 302.543 538.668 302.738 538.52 cv
302.934 538.379 303.125 538.258 303.313 538.164 cv
303.5 538.074 303.688 538.008 303.875 537.965 cv
304.063 537.926 304.262 537.906 304.473 537.902 cv
304.98 537.906 305.414 538.008 305.781 538.207 cv
306.141 538.414 306.438 538.687 306.664 539.023 cv
306.891 539.367 307.055 539.766 307.16 540.227 cv
307.262 540.687 307.313 541.172 307.316 541.68 cv
cp
305.98 541.828 mo
305.977 541.473 305.949 541.125 305.898 540.781 cv
305.84 540.445 305.746 540.145 305.609 539.879 cv
305.473 539.621 305.289 539.41 305.066 539.25 cv
304.84 539.094 304.563 539.016 304.227 539.012 cv
304.055 539.016 303.887 539.039 303.727 539.082 cv
303.563 539.133 303.398 539.211 303.23 539.316 cv
303.063 539.43 302.887 539.57 302.707 539.738 cv
302.523 539.914 302.332 540.129 302.133 540.387 cv
302.133 543.195 li
302.488 543.633 302.828 543.961 303.156 544.187 cv
303.477 544.414 303.816 544.527 304.172 544.527 cv
304.496 544.527 304.773 544.449 305.004 544.293 cv
305.234 544.137 305.422 543.93 305.566 543.672 cv
305.711 543.414 305.816 543.125 305.883 542.801 cv
305.945 542.484 305.977 542.16 305.98 541.828 cv
cp
f
315.258 541.469 mo
315.254 541.672 315.203 541.816 315.105 541.902 cv
315 541.988 314.887 542.031 314.758 542.031 cv
310.121 542.031 li
310.117 542.422 310.156 542.773 310.238 543.086 cv
310.313 543.398 310.441 543.668 310.629 543.895 cv
310.809 544.121 311.047 544.293 311.344 544.41 cv
311.633 544.531 311.992 544.594 312.422 544.59 cv
312.754 544.594 313.055 544.566 313.316 544.508 cv
313.578 544.457 313.805 544.395 313.996 544.324 cv
314.188 544.258 314.344 544.195 314.469 544.141 cv
314.59 544.086 314.684 544.059 314.75 544.059 cv
314.785 544.059 314.816 544.07 314.848 544.086 cv
314.871 544.109 314.895 544.137 314.914 544.168 cv
314.926 544.207 314.938 544.258 314.949 544.32 cv
314.953 544.391 314.957 544.469 314.961 544.559 cv
314.957 544.629 314.953 544.687 314.953 544.734 cv
314.945 544.785 314.941 544.828 314.934 544.867 cv
314.926 544.906 314.91 544.941 314.895 544.973 cv
314.871 545.004 314.848 545.035 314.824 545.062 cv
314.793 545.094 314.711 545.141 314.57 545.203 cv
314.43 545.27 314.246 545.332 314.023 545.395 cv
313.797 545.457 313.539 545.512 313.246 545.562 cv
312.949 545.609 312.633 545.633 312.301 545.637 cv
311.719 545.633 311.211 545.555 310.781 545.395 cv
310.344 545.234 309.977 544.996 309.68 544.676 cv
309.379 544.359 309.156 543.961 309.008 543.48 cv
308.855 543 308.781 542.441 308.781 541.805 cv
308.781 541.203 308.859 540.66 309.016 540.176 cv
309.172 539.695 309.395 539.285 309.691 538.945 cv
309.984 538.613 310.344 538.355 310.762 538.172 cv
311.176 537.996 311.641 537.906 312.16 537.902 cv
312.711 537.906 313.184 537.996 313.574 538.168 cv
313.961 538.348 314.277 538.586 314.531 538.883 cv
314.777 539.187 314.961 539.539 315.082 539.937 cv
315.195 540.344 315.254 540.773 315.258 541.234 cv
cp
313.961 541.086 mo
313.977 540.41 313.824 539.875 313.508 539.488 cv
313.188 539.105 312.715 538.914 312.094 538.91 cv
311.77 538.914 311.488 538.973 311.25 539.09 cv
311.008 539.211 310.809 539.371 310.645 539.566 cv
310.48 539.766 310.355 539.996 310.27 540.258 cv
310.18 540.523 310.129 540.801 310.121 541.086 cv
cp
f
321.348 538.715 mo
321.344 538.832 321.34 538.93 321.34 539.004 cv
321.332 539.086 321.324 539.148 321.309 539.187 cv
321.293 539.234 321.273 539.266 321.25 539.289 cv
321.227 539.312 321.191 539.324 321.152 539.324 cv
321.105 539.324 321.055 539.312 321 539.289 cv
320.938 539.266 320.871 539.242 320.793 539.219 cv
320.715 539.195 320.629 539.176 320.539 539.152 cv
320.441 539.137 320.34 539.125 320.234 539.121 cv
320.102 539.125 319.973 539.152 319.852 539.199 cv
319.723 539.254 319.594 539.34 319.457 539.457 cv
319.316 539.582 319.172 539.738 319.023 539.934 cv
318.871 540.133 318.703 540.375 318.523 540.66 cv
318.523 545.293 li
318.52 545.34 318.508 545.375 318.492 545.398 cv
318.469 545.43 318.438 545.453 318.391 545.473 cv
318.344 545.492 318.277 545.504 318.195 545.52 cv
318.109 545.527 318.004 545.535 317.875 545.535 cv
317.75 545.535 317.645 545.527 317.559 545.52 cv
317.473 545.504 317.406 545.492 317.359 545.473 cv
317.309 545.453 317.273 545.43 317.258 545.398 cv
317.238 545.375 317.23 545.34 317.23 545.293 cv
317.23 538.254 li
317.23 538.215 317.238 538.18 317.254 538.148 cv
317.27 538.121 317.301 538.094 317.348 538.07 cv
317.395 538.047 317.453 538.031 317.527 538.023 cv
317.602 538.016 317.699 538.012 317.82 538.012 cv
317.934 538.012 318.027 538.016 318.105 538.023 cv
318.176 538.031 318.234 538.047 318.281 538.07 cv
318.32 538.094 318.352 538.121 318.371 538.148 cv
318.387 538.18 318.395 538.215 318.398 538.254 cv
318.398 539.277 li
318.586 538.996 318.77 538.77 318.941 538.59 cv
319.109 538.418 319.27 538.277 319.422 538.172 cv
319.57 538.074 319.719 538.004 319.871 537.961 cv
320.016 537.926 320.164 537.906 320.32 537.902 cv
320.383 537.906 320.461 537.91 320.551 537.914 cv
320.633 537.926 320.723 537.941 320.82 537.957 cv
320.914 537.98 321 538.004 321.078 538.027 cv
321.152 538.059 321.207 538.082 321.238 538.105 cv
321.27 538.133 321.289 538.16 321.301 538.18 cv
321.309 538.207 321.316 538.234 321.328 538.27 cv
321.332 538.309 321.34 538.363 321.344 538.43 cv
321.344 538.504 321.344 538.598 321.348 538.715 cv
cp
f
332.988 541.695 mo
332.984 542.273 332.91 542.801 332.762 543.281 cv
332.609 543.766 332.383 544.18 332.086 544.527 cv
331.781 544.879 331.406 545.152 330.961 545.344 cv
330.508 545.539 329.984 545.633 329.391 545.637 cv
328.809 545.633 328.305 545.551 327.879 545.379 cv
327.445 545.211 327.086 544.961 326.801 544.629 cv
326.512 544.305 326.301 543.906 326.16 543.434 cv
326.02 542.965 325.949 542.434 325.949 541.836 cv
325.949 541.266 326.023 540.738 326.172 540.254 cv
326.32 539.773 326.543 539.355 326.844 539.004 cv
327.145 538.656 327.52 538.387 327.969 538.191 cv
328.414 538.004 328.938 537.906 329.539 537.902 cv
330.117 537.906 330.621 537.992 331.055 538.16 cv
331.48 538.336 331.84 538.586 332.129 538.91 cv
332.414 539.242 332.629 539.641 332.773 540.109 cv
332.914 540.578 332.984 541.109 332.988 541.695 cv
cp
331.652 541.781 mo
331.648 541.402 331.613 541.043 331.543 540.703 cv
331.469 540.363 331.352 540.066 331.191 539.809 cv
331.027 539.559 330.809 539.355 330.531 539.203 cv
330.25 539.059 329.902 538.984 329.488 538.98 cv
329.105 538.984 328.773 539.051 328.5 539.184 cv
328.219 539.32 327.992 539.512 327.816 539.758 cv
327.633 540.008 327.5 540.305 327.418 540.641 cv
327.328 540.984 327.285 541.352 327.289 541.75 cv
327.285 542.137 327.32 542.5 327.395 542.836 cv
327.461 543.176 327.578 543.473 327.75 543.727 cv
327.914 543.98 328.137 544.18 328.418 544.328 cv
328.691 544.477 329.039 544.551 329.457 544.551 cv
329.836 544.551 330.164 544.484 330.445 544.348 cv
330.719 544.215 330.949 544.023 331.129 543.777 cv
331.309 543.531 331.438 543.238 331.523 542.898 cv
331.605 542.562 331.648 542.191 331.652 541.781 cv
cp
f
338.742 535.359 mo
338.738 535.461 338.734 535.539 338.727 535.598 cv
338.715 535.66 338.703 535.711 338.691 535.742 cv
338.676 535.781 338.656 535.805 338.641 535.816 cv
338.617 535.832 338.594 535.84 338.563 535.836 cv
338.523 535.84 338.477 535.828 338.422 535.801 cv
338.367 535.781 338.301 535.754 338.223 535.723 cv
338.145 535.695 338.051 535.668 337.945 535.645 cv
337.836 535.621 337.711 535.609 337.574 535.609 cv
337.379 535.609 337.215 535.641 337.082 535.703 cv
336.941 535.766 336.832 535.863 336.754 535.996 cv
336.668 536.129 336.609 536.301 336.574 536.512 cv
336.535 536.723 336.516 536.98 336.52 537.281 cv
336.52 538.051 li
338.09 538.051 li
338.129 538.055 338.164 538.062 338.195 538.078 cv
338.219 538.098 338.246 538.129 338.273 538.172 cv
338.293 538.219 338.313 538.273 338.328 538.34 cv
338.34 538.41 338.344 538.496 338.348 538.59 cv
338.344 538.781 338.32 538.914 338.277 538.996 cv
338.227 539.082 338.164 539.125 338.09 539.121 cv
336.52 539.121 li
336.52 545.293 li
336.516 545.34 336.508 545.375 336.488 545.398 cv
336.465 545.43 336.43 545.453 336.383 545.473 cv
336.332 545.492 336.266 545.504 336.184 545.52 cv
336.098 545.527 335.992 545.535 335.871 545.535 cv
335.742 545.535 335.637 545.527 335.559 545.52 cv
335.473 545.504 335.406 545.492 335.359 545.473 cv
335.305 545.453 335.27 545.43 335.25 545.398 cv
335.227 545.375 335.215 545.34 335.219 545.293 cv
335.219 539.121 li
334.227 539.121 li
334.141 539.125 334.078 539.082 334.039 538.996 cv
333.996 538.914 333.973 538.781 333.977 538.59 cv
333.973 538.496 333.98 538.41 333.992 538.34 cv
334 538.273 334.016 538.219 334.039 538.172 cv
334.059 538.129 334.082 538.098 334.117 538.078 cv
334.145 538.062 334.184 538.055 334.227 538.051 cv
335.219 538.051 li
335.219 537.32 li
335.215 536.832 335.262 536.414 335.355 536.059 cv
335.445 535.711 335.586 535.422 335.777 535.195 cv
335.961 534.973 336.195 534.809 336.484 534.699 cv
336.766 534.594 337.102 534.539 337.488 534.535 cv
337.668 534.539 337.844 534.555 338.02 534.59 cv
338.188 534.625 338.32 534.664 338.418 534.699 cv
338.512 534.742 338.578 534.777 338.609 534.805 cv
338.641 534.84 338.664 534.879 338.688 534.926 cv
338.703 534.977 338.719 535.035 338.73 535.105 cv
338.734 535.176 338.738 535.262 338.742 535.359 cv
cp
f
348.926 542.648 mo
348.922 543.125 348.836 543.547 348.664 543.918 cv
348.488 544.289 348.246 544.605 347.938 544.859 cv
347.625 545.121 347.258 545.312 346.84 545.441 cv
346.418 545.57 345.969 545.633 345.484 545.637 cv
345.145 545.633 344.828 545.605 344.543 545.551 cv
344.25 545.492 343.992 545.426 343.766 545.34 cv
343.535 545.262 343.344 545.176 343.195 545.082 cv
343.039 544.996 342.934 544.918 342.875 544.855 cv
342.813 544.793 342.77 544.715 342.742 544.617 cv
342.711 544.523 342.695 544.395 342.699 544.23 cv
342.695 544.117 342.699 544.023 342.715 543.945 cv
342.723 543.871 342.738 543.809 342.762 543.758 cv
342.777 543.715 342.805 543.68 342.84 543.66 cv
342.867 543.645 342.902 543.637 342.949 543.633 cv
343.02 543.637 343.125 543.68 343.258 543.766 cv
343.391 543.855 343.559 543.953 343.77 544.059 cv
343.977 544.164 344.23 544.262 344.527 544.352 cv
344.82 544.445 345.16 544.492 345.547 544.488 cv
345.836 544.492 346.102 544.453 346.348 544.371 cv
346.586 544.297 346.797 544.187 346.973 544.039 cv
347.148 543.898 347.281 543.719 347.379 543.508 cv
347.469 543.301 347.516 543.066 347.52 542.797 cv
347.516 542.516 347.453 542.27 347.324 542.062 cv
347.191 541.863 347.016 541.684 346.805 541.527 cv
346.586 541.375 346.344 541.234 346.074 541.105 cv
345.797 540.98 345.516 540.852 345.234 540.715 cv
344.945 540.582 344.668 540.434 344.398 540.27 cv
344.125 540.109 343.883 539.918 343.668 539.699 cv
343.453 539.48 343.277 539.227 343.148 538.93 cv
343.012 538.641 342.945 538.285 342.949 537.871 cv
342.945 537.449 343.023 537.074 343.18 536.738 cv
343.332 536.41 343.547 536.133 343.82 535.906 cv
344.094 535.687 344.418 535.516 344.801 535.395 cv
345.176 535.281 345.586 535.223 346.023 535.219 cv
346.246 535.223 346.469 535.242 346.699 535.277 cv
346.926 535.32 347.141 535.371 347.344 535.434 cv
347.539 535.5 347.719 535.574 347.879 535.652 cv
348.031 535.734 348.133 535.801 348.188 535.848 cv
348.234 535.902 348.27 535.941 348.285 535.965 cv
348.301 535.996 348.313 536.031 348.324 536.074 cv
348.332 536.121 348.34 536.176 348.348 536.234 cv
348.352 536.301 348.355 536.379 348.355 536.477 cv
348.355 536.57 348.352 536.656 348.344 536.727 cv
348.336 536.805 348.324 536.863 348.309 536.91 cv
348.293 536.961 348.27 537 348.242 537.02 cv
348.211 537.047 348.18 537.059 348.145 537.055 cv
348.086 537.059 347.996 537.02 347.875 536.945 cv
347.75 536.875 347.598 536.793 347.426 536.699 cv
347.246 536.609 347.035 536.527 346.793 536.449 cv
346.547 536.375 346.277 536.336 345.977 536.336 cv
345.695 536.336 345.449 536.375 345.242 536.449 cv
345.031 536.527 344.859 536.629 344.727 536.75 cv
344.59 536.879 344.488 537.027 344.422 537.195 cv
344.352 537.371 344.316 537.555 344.32 537.746 cv
344.316 538.031 344.383 538.273 344.516 538.473 cv
344.645 538.68 344.816 538.859 345.035 539.012 cv
345.246 539.172 345.492 539.312 345.773 539.441 cv
346.047 539.574 346.328 539.707 346.617 539.836 cv
346.902 539.973 347.188 540.117 347.465 540.273 cv
347.738 540.434 347.984 540.625 348.203 540.84 cv
348.418 541.059 348.59 541.312 348.727 541.605 cv
348.855 541.902 348.922 542.25 348.926 542.648 cv
cp
f
356.773 545.293 mo
356.77 545.34 356.762 545.375 356.746 545.398 cv
356.727 545.43 356.695 545.453 356.648 545.473 cv
356.602 545.492 356.539 545.504 356.465 545.52 cv
356.387 545.527 356.293 545.535 356.188 545.535 cv
356.063 545.535 355.965 545.527 355.895 545.52 cv
355.816 545.504 355.758 545.492 355.715 545.473 cv
355.668 545.453 355.637 545.43 355.625 545.398 cv
355.605 545.375 355.598 545.34 355.602 545.293 cv
355.602 544.363 li
355.195 544.809 354.801 545.133 354.41 545.332 cv
354.02 545.535 353.621 545.633 353.223 545.637 cv
352.75 545.633 352.355 545.559 352.039 545.402 cv
351.715 545.25 351.457 545.039 351.258 544.766 cv
351.059 544.5 350.914 544.187 350.832 543.828 cv
350.742 543.473 350.699 543.035 350.703 542.523 cv
350.703 538.254 li
350.699 538.215 350.711 538.18 350.73 538.148 cv
350.746 538.121 350.781 538.094 350.836 538.07 cv
350.887 538.047 350.953 538.031 351.039 538.023 cv
351.121 538.016 351.227 538.012 351.355 538.012 cv
351.477 538.012 351.582 538.016 351.668 538.023 cv
351.75 538.031 351.816 538.047 351.867 538.07 cv
351.914 538.094 351.949 538.121 351.973 538.148 cv
351.992 538.18 352 538.215 352.004 538.254 cv
352.004 542.352 li
352 542.766 352.031 543.094 352.094 543.34 cv
352.152 543.59 352.242 543.801 352.367 543.977 cv
352.484 544.152 352.641 544.289 352.832 544.383 cv
353.016 544.48 353.234 544.527 353.488 544.527 cv
353.809 544.527 354.129 544.414 354.453 544.184 cv
354.773 543.953 355.117 543.617 355.477 543.172 cv
355.477 538.254 li
355.477 538.215 355.484 538.18 355.504 538.148 cv
355.52 538.121 355.555 538.094 355.609 538.07 cv
355.66 538.047 355.727 538.031 355.809 538.023 cv
355.887 538.016 355.992 538.012 356.125 538.012 cv
356.246 538.012 356.352 538.016 356.438 538.023 cv
356.52 538.031 356.582 538.047 356.633 538.07 cv
356.676 538.094 356.711 538.121 356.738 538.148 cv
356.758 538.18 356.77 538.215 356.773 538.254 cv
cp
f
365.629 541.68 mo
365.625 542.289 365.559 542.84 365.43 543.328 cv
365.293 543.816 365.098 544.23 364.844 544.574 cv
364.582 544.918 364.266 545.184 363.895 545.363 cv
363.516 545.547 363.086 545.633 362.602 545.637 cv
362.375 545.633 362.168 545.613 361.98 545.57 cv
361.789 545.523 361.602 545.453 361.422 545.355 cv
361.234 545.258 361.055 545.133 360.875 544.98 cv
360.691 544.832 360.496 544.648 360.297 544.434 cv
360.297 545.293 li
360.293 545.34 360.285 545.375 360.266 545.402 cv
360.242 545.437 360.207 545.461 360.164 545.477 cv
360.113 545.492 360.055 545.504 359.988 545.52 cv
359.914 545.527 359.824 545.535 359.719 545.535 cv
359.613 545.535 359.523 545.527 359.449 545.52 cv
359.375 545.504 359.316 545.492 359.27 545.477 cv
359.223 545.461 359.191 545.437 359.176 545.402 cv
359.16 545.375 359.152 545.34 359.152 545.293 cv
359.152 534.844 li
359.152 534.805 359.16 534.77 359.18 534.734 cv
359.195 534.707 359.23 534.68 359.281 534.656 cv
359.328 534.637 359.395 534.621 359.48 534.609 cv
359.566 534.602 359.672 534.598 359.797 534.594 cv
359.926 534.598 360.031 534.602 360.117 534.609 cv
360.199 534.621 360.266 534.637 360.313 534.656 cv
360.359 534.68 360.391 534.707 360.414 534.734 cv
360.43 534.77 360.441 534.805 360.445 534.844 cv
360.445 539.059 li
360.652 538.848 360.855 538.668 361.051 538.52 cv
361.246 538.379 361.438 538.258 361.625 538.164 cv
361.813 538.074 362 538.008 362.188 537.965 cv
362.375 537.926 362.574 537.906 362.785 537.902 cv
363.293 537.906 363.727 538.008 364.094 538.207 cv
364.453 538.414 364.75 538.687 364.977 539.023 cv
365.203 539.367 365.367 539.766 365.473 540.227 cv
365.574 540.687 365.625 541.172 365.629 541.68 cv
cp
364.293 541.828 mo
364.289 541.473 364.262 541.125 364.211 540.781 cv
364.152 540.445 364.059 540.145 363.922 539.879 cv
363.785 539.621 363.602 539.41 363.379 539.25 cv
363.152 539.094 362.875 539.016 362.539 539.012 cv
362.367 539.016 362.199 539.039 362.039 539.082 cv
361.875 539.133 361.711 539.211 361.543 539.316 cv
361.375 539.43 361.199 539.57 361.02 539.738 cv
360.836 539.914 360.645 540.129 360.445 540.387 cv
360.445 543.195 li
360.801 543.633 361.141 543.961 361.469 544.187 cv
361.789 544.414 362.129 544.527 362.484 544.527 cv
362.809 544.527 363.086 544.449 363.316 544.293 cv
363.547 544.137 363.734 543.93 363.879 543.672 cv
364.023 543.414 364.129 543.125 364.195 542.801 cv
364.258 542.484 364.289 542.16 364.293 541.828 cv
cp
f
370.734 541.539 mo
370.73 541.742 370.707 541.883 370.664 541.961 cv
370.613 542.039 370.547 542.078 370.461 542.078 cv
367.191 542.078 li
367.098 542.078 367.027 542.039 366.98 541.957 cv
366.934 541.879 366.91 541.738 366.91 541.539 cv
366.91 541.344 366.934 541.207 366.98 541.125 cv
367.027 541.051 367.098 541.012 367.191 541.008 cv
370.461 541.008 li
370.5 541.012 370.535 541.02 370.574 541.031 cv
370.605 541.051 370.637 541.082 370.66 541.121 cv
370.684 541.168 370.699 541.223 370.715 541.289 cv
370.723 541.359 370.73 541.441 370.734 541.539 cv
cp
f
373.98 545.285 mo
373.977 545.328 373.969 545.363 373.949 545.395 cv
373.926 545.426 373.887 545.453 373.84 545.469 cv
373.785 545.488 373.719 545.5 373.633 545.516 cv
373.547 545.527 373.438 545.535 373.309 545.535 cv
373.18 545.535 373.07 545.527 372.984 545.516 cv
372.891 545.5 372.82 545.488 372.773 545.469 cv
372.719 545.453 372.684 545.426 372.664 545.395 cv
372.641 545.363 372.629 545.328 372.633 545.285 cv
372.633 535.57 li
372.629 535.531 372.641 535.496 372.668 535.461 cv
372.688 535.434 372.727 535.406 372.785 535.387 cv
372.84 535.371 372.914 535.355 373 535.34 cv
373.086 535.328 373.188 535.324 373.309 535.32 cv
373.438 535.324 373.547 535.328 373.633 535.34 cv
373.719 535.355 373.785 535.371 373.84 535.387 cv
373.887 535.406 373.926 535.434 373.949 535.461 cv
373.969 535.496 373.977 535.531 373.98 535.57 cv
cp
f
386.969 545.293 mo
386.965 545.34 386.953 545.375 386.938 545.398 cv
386.914 545.43 386.883 545.453 386.836 545.473 cv
386.789 545.492 386.723 545.504 386.641 545.52 cv
386.555 545.527 386.449 545.535 386.328 545.535 cv
386.191 545.535 386.086 545.527 386.004 545.52 cv
385.918 545.504 385.852 545.492 385.805 545.473 cv
385.754 545.453 385.719 545.43 385.699 545.398 cv
385.676 545.375 385.664 545.34 385.668 545.293 cv
385.668 541.016 li
385.664 540.719 385.637 540.445 385.59 540.199 cv
385.535 539.957 385.453 539.746 385.34 539.566 cv
385.223 539.391 385.078 539.254 384.902 539.16 cv
384.723 539.066 384.512 539.02 384.277 539.02 cv
383.977 539.02 383.68 539.137 383.379 539.363 cv
383.078 539.598 382.746 539.934 382.391 540.371 cv
382.391 545.293 li
382.387 545.34 382.379 545.375 382.359 545.398 cv
382.336 545.43 382.301 545.453 382.254 545.473 cv
382.203 545.492 382.137 545.504 382.055 545.52 cv
381.969 545.527 381.863 545.535 381.742 545.535 cv
381.621 545.535 381.52 545.527 381.434 545.52 cv
381.348 545.504 381.277 545.492 381.23 545.473 cv
381.176 545.453 381.145 545.43 381.129 545.398 cv
381.109 545.375 381.098 545.34 381.102 545.293 cv
381.102 541.016 li
381.098 540.719 381.07 540.445 381.016 540.199 cv
380.957 539.957 380.871 539.746 380.758 539.566 cv
380.641 539.391 380.496 539.254 380.324 539.16 cv
380.148 539.066 379.941 539.02 379.699 539.02 cv
379.402 539.02 379.102 539.137 378.801 539.363 cv
378.496 539.598 378.168 539.934 377.816 540.371 cv
377.816 545.293 li
377.813 545.34 377.801 545.375 377.785 545.398 cv
377.762 545.43 377.73 545.453 377.684 545.473 cv
377.637 545.492 377.57 545.504 377.488 545.52 cv
377.402 545.527 377.297 545.535 377.168 545.535 cv
377.043 545.535 376.938 545.527 376.852 545.52 cv
376.766 545.504 376.699 545.492 376.652 545.473 cv
376.602 545.453 376.566 545.43 376.551 545.398 cv
376.531 545.375 376.523 545.34 376.523 545.293 cv
376.523 538.254 li
376.523 538.215 376.531 538.18 376.547 538.148 cv
376.563 538.121 376.594 538.094 376.641 538.07 cv
376.688 538.047 376.746 538.031 376.82 538.023 cv
376.895 538.016 376.992 538.012 377.113 538.012 cv
377.227 538.012 377.32 538.016 377.398 538.023 cv
377.469 538.031 377.527 538.047 377.574 538.07 cv
377.613 538.094 377.645 538.121 377.664 538.148 cv
377.68 538.18 377.688 538.215 377.691 538.254 cv
377.691 539.184 li
378.082 538.742 378.469 538.418 378.844 538.211 cv
379.215 538.008 379.59 537.906 379.973 537.902 cv
380.266 537.906 380.527 537.941 380.762 538.004 cv
380.988 538.074 381.195 538.168 381.375 538.289 cv
381.551 538.414 381.699 538.559 381.828 538.727 cv
381.949 538.898 382.055 539.09 382.141 539.293 cv
382.371 539.043 382.594 538.824 382.809 538.645 cv
383.016 538.469 383.219 538.328 383.418 538.215 cv
383.613 538.109 383.805 538.027 383.992 537.977 cv
384.176 537.93 384.363 537.906 384.551 537.902 cv
385.004 537.906 385.383 537.984 385.691 538.141 cv
385.996 538.301 386.246 538.516 386.438 538.777 cv
386.629 539.047 386.766 539.355 386.848 539.711 cv
386.926 540.07 386.965 540.449 386.969 540.844 cv
cp
f
394.629 545.301 mo
394.625 545.363 394.605 545.41 394.566 545.441 cv
394.523 545.473 394.465 545.496 394.395 545.512 cv
394.316 545.527 394.211 545.535 394.074 545.535 cv
393.938 545.535 393.828 545.527 393.75 545.512 cv
393.664 545.496 393.605 545.473 393.574 545.441 cv
393.535 545.41 393.52 545.363 393.52 545.301 cv
393.52 544.598 li
393.211 544.926 392.867 545.184 392.488 545.363 cv
392.109 545.547 391.707 545.633 391.289 545.637 cv
390.914 545.633 390.582 545.586 390.285 545.492 cv
389.984 545.395 389.727 545.258 389.516 545.074 cv
389.301 544.895 389.137 544.672 389.023 544.402 cv
388.902 544.141 388.844 543.836 388.848 543.492 cv
388.844 543.098 388.926 542.754 389.09 542.461 cv
389.25 542.172 389.48 541.93 389.785 541.734 cv
390.086 541.543 390.457 541.398 390.898 541.301 cv
391.332 541.207 391.824 541.16 392.375 541.156 cv
393.348 541.156 li
393.348 540.605 li
393.344 540.34 393.316 540.098 393.262 539.887 cv
393.203 539.68 393.109 539.508 392.98 539.367 cv
392.852 539.23 392.684 539.125 392.484 539.055 cv
392.277 538.984 392.027 538.949 391.734 538.949 cv
391.414 538.949 391.129 538.988 390.879 539.062 cv
390.621 539.141 390.402 539.223 390.215 539.312 cv
390.023 539.406 389.863 539.492 389.734 539.562 cv
389.605 539.641 389.508 539.676 389.449 539.676 cv
389.402 539.676 389.367 539.668 389.34 539.645 cv
389.305 539.629 389.277 539.598 389.258 539.551 cv
389.23 539.512 389.215 539.457 389.207 539.391 cv
389.195 539.328 389.188 539.258 389.191 539.176 cv
389.188 539.051 389.199 538.945 389.219 538.867 cv
389.234 538.793 389.277 538.723 389.352 538.652 cv
389.418 538.586 389.539 538.508 389.715 538.414 cv
389.887 538.328 390.086 538.242 390.313 538.164 cv
390.535 538.09 390.781 538.027 391.047 537.977 cv
391.313 537.93 391.578 537.906 391.852 537.902 cv
392.352 537.906 392.781 537.965 393.141 538.074 cv
393.492 538.191 393.781 538.359 394.004 538.578 cv
394.219 538.805 394.379 539.078 394.48 539.402 cv
394.578 539.734 394.625 540.117 394.629 540.551 cv
cp
393.348 542.086 mo
392.242 542.086 li
391.887 542.09 391.578 542.121 391.32 542.176 cv
391.059 542.238 390.844 542.324 390.672 542.441 cv
390.5 542.559 390.371 542.699 390.293 542.863 cv
390.207 543.027 390.168 543.219 390.172 543.43 cv
390.168 543.801 390.285 544.09 390.52 544.305 cv
390.75 544.523 391.074 544.633 391.492 544.629 cv
391.828 544.633 392.141 544.547 392.434 544.371 cv
392.723 544.203 393.027 543.937 393.348 543.578 cv
cp
f
402.879 538.574 mo
402.879 538.758 402.852 538.891 402.805 538.969 cv
402.75 539.051 402.688 539.09 402.613 539.09 cv
401.605 539.09 li
401.785 539.277 401.914 539.484 401.988 539.711 cv
402.059 539.937 402.094 540.176 402.098 540.418 cv
402.094 540.832 402.027 541.191 401.902 541.5 cv
401.77 541.816 401.586 542.082 401.344 542.293 cv
401.102 542.512 400.813 542.676 400.477 542.789 cv
400.141 542.906 399.77 542.965 399.367 542.961 cv
399.078 542.965 398.805 542.926 398.551 542.848 cv
398.289 542.773 398.09 542.68 397.953 542.562 cv
397.855 542.66 397.781 542.766 397.723 542.883 cv
397.66 543.004 397.629 543.141 397.633 543.297 cv
397.629 543.48 397.715 543.633 397.887 543.754 cv
398.055 543.875 398.277 543.941 398.563 543.949 cv
400.398 544.027 li
400.746 544.043 401.066 544.09 401.363 544.172 cv
401.652 544.262 401.906 544.383 402.121 544.539 cv
402.332 544.699 402.5 544.895 402.621 545.125 cv
402.738 545.359 402.797 545.629 402.801 545.934 cv
402.797 546.254 402.73 546.559 402.598 546.855 cv
402.461 547.145 402.254 547.402 401.977 547.629 cv
401.695 547.848 401.336 548.023 400.906 548.152 cv
400.469 548.277 399.961 548.34 399.375 548.344 cv
398.805 548.34 398.32 548.293 397.922 548.199 cv
397.523 548.102 397.195 547.969 396.941 547.805 cv
396.684 547.633 396.5 547.434 396.387 547.203 cv
396.27 546.969 396.211 546.719 396.215 546.449 cv
396.211 546.277 396.23 546.109 396.277 545.949 cv
396.316 545.785 396.383 545.633 396.469 545.488 cv
396.555 545.344 396.66 545.207 396.789 545.07 cv
396.914 544.941 397.063 544.809 397.23 544.676 cv
396.973 544.547 396.781 544.383 396.664 544.184 cv
396.539 543.984 396.48 543.77 396.48 543.539 cv
396.48 543.223 396.543 542.937 396.676 542.687 cv
396.801 542.437 396.965 542.215 397.16 542.016 cv
396.996 541.824 396.867 541.605 396.777 541.363 cv
396.68 541.121 396.633 540.828 396.637 540.48 cv
396.633 540.082 396.699 539.723 396.84 539.402 cv
396.973 539.086 397.16 538.816 397.402 538.598 cv
397.641 538.379 397.93 538.211 398.27 538.094 cv
398.602 537.977 398.969 537.918 399.367 537.918 cv
399.578 537.918 399.777 537.93 399.965 537.953 cv
400.148 537.977 400.32 538.012 400.484 538.051 cv
402.613 538.051 li
402.699 538.055 402.766 538.098 402.813 538.18 cv
402.855 538.27 402.879 538.398 402.879 538.574 cv
cp
400.863 540.426 mo
400.863 539.949 400.73 539.578 400.465 539.305 cv
400.199 539.039 399.824 538.902 399.344 538.902 cv
399.09 538.902 398.871 538.945 398.691 539.027 cv
398.504 539.113 398.352 539.227 398.23 539.371 cv
398.105 539.52 398.016 539.687 397.957 539.875 cv
397.895 540.066 397.863 540.266 397.867 540.473 cv
397.863 540.941 397.996 541.309 398.262 541.57 cv
398.523 541.84 398.891 541.973 399.367 541.969 cv
399.621 541.973 399.844 541.934 400.031 541.848 cv
400.219 541.77 400.371 541.656 400.496 541.512 cv
400.617 541.371 400.711 541.207 400.773 541.016 cv
400.832 540.828 400.863 540.629 400.863 540.426 cv
cp
401.512 546.004 mo
401.508 545.699 401.383 545.469 401.141 545.305 cv
400.891 545.145 400.555 545.055 400.133 545.043 cv
398.313 544.98 li
398.145 545.113 398.008 545.238 397.902 545.352 cv
397.793 545.469 397.707 545.578 397.648 545.687 cv
397.582 545.793 397.539 545.898 397.52 546.004 cv
397.492 546.105 397.48 546.211 397.484 546.324 cv
397.48 546.66 397.652 546.918 398 547.094 cv
398.34 547.27 398.82 547.355 399.438 547.359 cv
399.824 547.355 400.152 547.32 400.418 547.246 cv
400.684 547.168 400.895 547.066 401.059 546.941 cv
401.215 546.816 401.332 546.672 401.406 546.512 cv
401.473 546.348 401.508 546.18 401.512 546.004 cv
cp
f
410.422 541.469 mo
410.418 541.672 410.367 541.816 410.27 541.902 cv
410.164 541.988 410.051 542.031 409.922 542.031 cv
405.285 542.031 li
405.281 542.422 405.32 542.773 405.402 543.086 cv
405.477 543.398 405.605 543.668 405.793 543.895 cv
405.973 544.121 406.211 544.293 406.508 544.41 cv
406.797 544.531 407.156 544.594 407.586 544.59 cv
407.918 544.594 408.219 544.566 408.48 544.508 cv
408.742 544.457 408.969 544.395 409.16 544.324 cv
409.352 544.258 409.508 544.195 409.633 544.141 cv
409.754 544.086 409.848 544.059 409.914 544.059 cv
409.949 544.059 409.98 544.07 410.012 544.086 cv
410.035 544.109 410.059 544.137 410.078 544.168 cv
410.09 544.207 410.102 544.258 410.113 544.32 cv
410.117 544.391 410.121 544.469 410.125 544.559 cv
410.121 544.629 410.117 544.687 410.117 544.734 cv
410.109 544.785 410.105 544.828 410.098 544.867 cv
410.09 544.906 410.074 544.941 410.059 544.973 cv
410.035 545.004 410.012 545.035 409.988 545.062 cv
409.957 545.094 409.875 545.141 409.734 545.203 cv
409.594 545.27 409.41 545.332 409.188 545.395 cv
408.961 545.457 408.703 545.512 408.41 545.562 cv
408.113 545.609 407.797 545.633 407.465 545.637 cv
406.883 545.633 406.375 545.555 405.945 545.395 cv
405.508 545.234 405.141 544.996 404.844 544.676 cv
404.543 544.359 404.32 543.961 404.172 543.48 cv
404.02 543 403.945 542.441 403.945 541.805 cv
403.945 541.203 404.023 540.66 404.18 540.176 cv
404.336 539.695 404.559 539.285 404.855 538.945 cv
405.148 538.613 405.508 538.355 405.926 538.172 cv
406.34 537.996 406.805 537.906 407.324 537.902 cv
407.875 537.906 408.348 537.996 408.738 538.168 cv
409.125 538.348 409.441 538.586 409.695 538.883 cv
409.941 539.187 410.125 539.539 410.246 539.937 cv
410.359 540.344 410.418 540.773 410.422 541.234 cv
cp
409.125 541.086 mo
409.141 540.41 408.988 539.875 408.672 539.488 cv
408.352 539.105 407.879 538.914 407.258 538.91 cv
406.934 538.914 406.652 538.973 406.414 539.09 cv
406.172 539.211 405.973 539.371 405.809 539.566 cv
405.645 539.766 405.52 539.996 405.434 540.258 cv
405.344 540.523 405.293 540.801 405.285 541.086 cv
cp
f
416.813 543.375 mo
416.809 543.738 416.742 544.059 416.613 544.34 cv
416.477 544.621 416.285 544.859 416.043 545.051 cv
415.793 545.246 415.504 545.391 415.168 545.488 cv
414.828 545.586 414.453 545.633 414.051 545.637 cv
413.797 545.633 413.559 545.613 413.336 545.578 cv
413.105 545.535 412.902 545.488 412.723 545.43 cv
412.539 545.371 412.387 545.309 412.266 545.242 cv
412.137 545.18 412.047 545.121 411.992 545.066 cv
411.934 545.016 411.891 544.945 411.867 544.848 cv
411.84 544.758 411.828 544.629 411.828 544.465 cv
411.828 544.367 411.832 544.285 411.844 544.215 cv
411.852 544.152 411.863 544.098 411.883 544.051 cv
411.895 544.012 411.918 543.98 411.949 543.961 cv
411.977 543.945 412.008 543.937 412.047 543.934 cv
412.102 543.937 412.188 543.973 412.301 544.039 cv
412.41 544.113 412.547 544.187 412.715 544.27 cv
412.879 544.355 413.074 544.434 413.301 544.5 cv
413.52 544.574 413.777 544.609 414.074 544.605 cv
414.289 544.609 414.488 544.586 414.668 544.535 cv
414.844 544.492 414.996 544.422 415.129 544.328 cv
415.254 544.238 415.355 544.125 415.43 543.98 cv
415.496 543.84 415.531 543.672 415.535 543.477 cv
415.531 543.281 415.48 543.113 415.383 542.977 cv
415.277 542.844 415.145 542.723 414.98 542.617 cv
414.813 542.516 414.625 542.426 414.418 542.34 cv
414.207 542.262 413.992 542.176 413.773 542.086 cv
413.551 542 413.332 541.898 413.125 541.785 cv
412.91 541.676 412.723 541.539 412.555 541.375 cv
412.387 541.215 412.25 541.023 412.152 540.797 cv
412.047 540.574 411.996 540.305 412 539.988 cv
411.996 539.715 412.051 539.449 412.16 539.195 cv
412.266 538.945 412.426 538.727 412.641 538.531 cv
412.855 538.344 413.125 538.191 413.445 538.074 cv
413.766 537.965 414.137 537.906 414.566 537.902 cv
414.75 537.906 414.938 537.922 415.129 537.949 cv
415.313 537.984 415.484 538.023 415.637 538.066 cv
415.785 538.117 415.914 538.168 416.023 538.219 cv
416.133 538.277 416.215 538.324 416.27 538.363 cv
416.324 538.406 416.359 538.445 416.379 538.473 cv
416.395 538.508 416.406 538.543 416.418 538.578 cv
416.422 538.621 416.43 538.668 416.441 538.723 cv
416.445 538.781 416.449 538.852 416.453 538.934 cv
416.449 539.023 416.445 539.102 416.441 539.164 cv
416.43 539.234 416.418 539.285 416.402 539.324 cv
416.383 539.367 416.359 539.398 416.336 539.414 cv
416.305 539.434 416.277 539.441 416.25 539.441 cv
416.199 539.441 416.133 539.414 416.047 539.355 cv
415.957 539.301 415.84 539.238 415.699 539.172 cv
415.555 539.109 415.391 539.051 415.203 538.988 cv
415.012 538.934 414.793 538.902 414.551 538.902 cv
414.328 538.902 414.137 538.93 413.973 538.977 cv
413.805 539.031 413.668 539.102 413.563 539.187 cv
413.453 539.281 413.371 539.387 413.32 539.512 cv
413.262 539.637 413.234 539.773 413.238 539.918 cv
413.234 540.125 413.285 540.297 413.395 540.43 cv
413.496 540.57 413.633 540.691 413.801 540.797 cv
413.965 540.902 414.156 540.996 414.371 541.078 cv
414.582 541.164 414.797 541.25 415.023 541.336 cv
415.242 541.426 415.461 541.523 415.68 541.633 cv
415.895 541.742 416.09 541.875 416.258 542.031 cv
416.422 542.187 416.555 542.375 416.66 542.594 cv
416.758 542.812 416.809 543.074 416.813 543.375 cv
cp
f
235.496 11.691 mo
235.496 12.535 235.391 13.289 235.184 13.945 cv
234.973 14.609 234.664 15.172 234.254 15.633 cv
233.84 16.098 233.328 16.449 232.723 16.687 cv
232.113 16.93 231.41 17.047 230.617 17.051 cv
229.824 17.047 229.137 16.945 228.555 16.742 cv
227.965 16.539 227.477 16.227 227.086 15.801 cv
226.691 15.379 226.398 14.84 226.207 14.187 cv
226.008 13.539 225.91 12.77 225.914 11.871 cv
225.91 11.059 226.016 10.32 226.227 9.664 cv
226.434 9.008 226.742 8.453 227.156 7.992 cv
227.566 7.539 228.078 7.18701 228.688 6.93701 cv
229.293 6.69501 229.996 6.57001 230.805 6.57001 cv
231.566 6.57001 232.242 6.672 232.832 6.875 cv
233.418 7.078 233.91 7.39099 234.305 7.81201 cv
234.695 8.23401 234.992 8.77002 235.195 9.414 cv
235.395 10.059 235.496 10.816 235.496 11.691 cv
cp
233.34 11.801 mo
233.34 11.273 233.297 10.789 233.211 10.352 cv
233.125 9.91803 232.98 9.547 232.785 9.23401 cv
232.582 8.92603 232.316 8.68402 231.984 8.51202 cv
231.648 8.34399 231.23 8.258 230.734 8.258 cv
230.223 8.258 229.801 8.35498 229.465 8.54303 cv
229.125 8.73798 228.852 8.992 228.645 9.30902 cv
228.434 9.62903 228.285 10 228.203 10.422 cv
228.113 10.848 228.07 11.297 228.074 11.77 cv
228.07 12.328 228.113 12.824 228.199 13.262 cv
228.281 13.703 228.422 14.082 228.621 14.391 cv
228.816 14.707 229.082 14.945 229.418 15.109 cv
229.75 15.277 230.172 15.359 230.68 15.355 cv
231.184 15.359 231.605 15.266 231.945 15.074 cv
232.281 14.887 232.555 14.629 232.766 14.305 cv
232.973 13.984 233.117 13.609 233.207 13.176 cv
233.293 12.75 233.34 12.293 233.34 11.801 cv
cp
f
243.527 9.62097 mo
243.527 9.65198 243.523 9.68402 243.523 9.71503 cv
243.516 9.75403 243.512 9.79303 243.508 9.836 cv
243.496 9.883 243.484 9.93402 243.477 9.98798 cv
243.461 10.047 243.445 10.113 243.426 10.184 cv
241.332 16.496 li
241.301 16.586 241.266 16.66 241.227 16.711 cv
241.18 16.77 241.109 16.812 241.008 16.84 cv
240.906 16.871 240.766 16.887 240.59 16.902 cv
240.414 16.91 240.188 16.918 239.906 16.918 cv
239.629 16.918 239.402 16.91 239.23 16.898 cv
239.055 16.883 238.918 16.863 238.82 16.832 cv
238.719 16.805 238.648 16.762 238.605 16.703 cv
238.559 16.652 238.523 16.582 238.5 16.496 cv
236.402 10.184 li
236.371 10.082 236.344 9.98798 236.328 9.90198 cv
236.305 9.82397 236.297 9.76202 236.297 9.72302 cv
236.293 9.68701 236.289 9.65601 236.293 9.62097 cv
236.289 9.57397 236.305 9.52698 236.336 9.48401 cv
236.363 9.44897 236.414 9.41803 236.488 9.38702 cv
236.559 9.36298 236.66 9.34399 236.789 9.33197 cv
236.914 9.32397 237.074 9.32001 237.27 9.31598 cv
237.48 9.32001 237.652 9.32397 237.785 9.336 cv
237.918 9.35199 238.02 9.37097 238.098 9.39099 cv
238.168 9.41803 238.223 9.453 238.258 9.492 cv
238.285 9.539 238.313 9.59003 238.336 9.65198 cv
239.922 14.773 li
239.969 14.969 li
240.016 14.773 li
241.582 9.65198 li
241.598 9.59003 241.621 9.539 241.656 9.492 cv
241.688 9.453 241.742 9.41803 241.816 9.39099 cv
241.887 9.37097 241.984 9.35199 242.109 9.336 cv
242.23 9.32397 242.391 9.32001 242.59 9.31598 cv
242.781 9.32001 242.938 9.32397 243.063 9.33197 cv
243.184 9.34399 243.277 9.36298 243.348 9.38702 cv
243.41 9.41803 243.457 9.44897 243.488 9.48401 cv
243.512 9.52698 243.527 9.57397 243.527 9.62097 cv
cp
f
250.965 12.914 mo
250.965 13.156 250.91 13.332 250.805 13.445 cv
250.695 13.562 250.547 13.621 250.363 13.617 cv
246.117 13.617 li
246.113 13.918 246.148 14.187 246.223 14.426 cv
246.289 14.672 246.402 14.875 246.559 15.043 cv
246.711 15.215 246.906 15.348 247.152 15.434 cv
247.391 15.527 247.684 15.57 248.023 15.566 cv
248.367 15.57 248.668 15.547 248.934 15.492 cv
249.191 15.445 249.418 15.391 249.609 15.328 cv
249.797 15.27 249.953 15.211 250.082 15.16 cv
250.203 15.113 250.305 15.09 250.387 15.086 cv
250.43 15.09 250.469 15.098 250.504 15.113 cv
250.531 15.133 250.559 15.168 250.582 15.211 cv
250.602 15.262 250.617 15.328 250.625 15.414 cv
250.633 15.504 250.637 15.613 250.637 15.738 cv
250.637 15.855 250.633 15.953 250.629 16.031 cv
250.621 16.117 250.613 16.184 250.605 16.238 cv
250.594 16.297 250.578 16.348 250.559 16.383 cv
250.535 16.426 250.508 16.461 250.477 16.496 cv
250.441 16.535 250.348 16.586 250.199 16.645 cv
250.043 16.711 249.852 16.773 249.621 16.828 cv
249.383 16.891 249.113 16.937 248.816 16.984 cv
248.512 17.023 248.188 17.047 247.844 17.051 cv
247.219 17.047 246.676 16.973 246.215 16.816 cv
245.746 16.664 245.355 16.426 245.043 16.105 cv
244.727 15.789 244.496 15.387 244.344 14.902 cv
244.188 14.418 244.109 13.852 244.113 13.195 cv
244.109 12.578 244.191 12.02 244.355 11.52 cv
244.516 11.023 244.75 10.598 245.059 10.25 cv
245.367 9.90601 245.742 9.64502 246.184 9.45697 cv
246.621 9.27698 247.117 9.18402 247.672 9.18402 cv
248.258 9.18402 248.758 9.27002 249.172 9.44098 cv
249.586 9.61298 249.926 9.85199 250.191 10.156 cv
250.457 10.461 250.652 10.824 250.777 11.238 cv
250.902 11.66 250.965 12.113 250.965 12.602 cv
cp
249.059 12.352 mo
249.07 11.801 248.961 11.363 248.727 11.047 cv
248.488 10.734 248.121 10.578 247.625 10.574 cv
247.375 10.578 247.156 10.625 246.973 10.715 cv
246.785 10.812 246.633 10.937 246.512 11.094 cv
246.387 11.254 246.293 11.441 246.23 11.656 cv
246.164 11.875 246.125 12.109 246.117 12.352 cv
cp
f
257.063 10.277 mo
257.059 10.469 257.055 10.621 257.047 10.738 cv
257.035 10.859 257.02 10.953 257 11.02 cv
256.977 11.09 256.949 11.137 256.918 11.16 cv
256.883 11.187 256.84 11.199 256.789 11.199 cv
256.746 11.199 256.699 11.191 256.648 11.172 cv
256.594 11.156 256.535 11.137 256.473 11.113 cv
256.406 11.094 256.332 11.074 256.254 11.055 cv
256.172 11.039 256.086 11.031 255.996 11.027 cv
255.883 11.031 255.773 11.051 255.668 11.094 cv
255.555 11.141 255.441 11.211 255.328 11.301 cv
255.207 11.398 255.086 11.523 254.961 11.676 cv
254.832 11.836 254.695 12.031 254.551 12.258 cv
254.551 16.605 li
254.547 16.66 254.531 16.703 254.504 16.742 cv
254.469 16.781 254.414 16.816 254.344 16.84 cv
254.266 16.867 254.168 16.883 254.043 16.898 cv
253.918 16.91 253.758 16.918 253.566 16.918 cv
253.371 16.918 253.211 16.91 253.086 16.898 cv
252.957 16.883 252.855 16.867 252.785 16.84 cv
252.707 16.816 252.656 16.781 252.625 16.742 cv
252.594 16.703 252.578 16.66 252.578 16.605 cv
252.578 9.62903 li
252.578 9.578 252.59 9.53497 252.617 9.492 cv
252.641 9.45697 252.688 9.422 252.758 9.39502 cv
252.824 9.37097 252.91 9.35199 253.02 9.336 cv
253.125 9.32397 253.262 9.32001 253.426 9.31598 cv
253.59 9.32001 253.727 9.32397 253.84 9.336 cv
253.945 9.35199 254.031 9.37097 254.094 9.39502 cv
254.152 9.422 254.195 9.45697 254.223 9.492 cv
254.246 9.53497 254.258 9.578 254.262 9.62903 cv
254.262 10.496 li
254.441 10.238 254.613 10.023 254.777 9.85199 cv
254.934 9.68402 255.09 9.55103 255.238 9.44897 cv
255.383 9.35199 255.527 9.28101 255.676 9.242 cv
255.82 9.203 255.965 9.18402 256.113 9.18402 cv
256.176 9.18402 256.25 9.18701 256.332 9.19501 cv
256.41 9.203 256.492 9.21899 256.578 9.23401 cv
256.66 9.258 256.734 9.27698 256.797 9.297 cv
256.859 9.32397 256.902 9.34802 256.934 9.37097 cv
256.957 9.39801 256.98 9.42999 256.996 9.45697 cv
257.008 9.492 257.02 9.53497 257.031 9.586 cv
257.039 9.64502 257.047 9.72699 257.055 9.83197 cv
257.059 9.94501 257.059 10.094 257.063 10.277 cv
cp
f
263.844 16.629 mo
263.84 16.707 263.813 16.762 263.766 16.801 cv
263.711 16.844 263.629 16.871 263.52 16.891 cv
263.402 16.906 263.238 16.918 263.023 16.918 cv
262.785 16.918 262.613 16.906 262.512 16.891 cv
262.402 16.871 262.328 16.844 262.285 16.801 cv
262.238 16.762 262.215 16.707 262.219 16.629 cv
262.219 16.074 li
261.93 16.383 261.602 16.625 261.234 16.793 cv
260.863 16.965 260.457 17.047 260.012 17.051 cv
259.641 17.047 259.301 17 258.992 16.906 cv
258.68 16.812 258.41 16.672 258.184 16.477 cv
257.953 16.289 257.777 16.051 257.656 15.77 cv
257.527 15.488 257.465 15.16 257.469 14.781 cv
257.465 14.379 257.543 14.027 257.707 13.723 cv
257.863 13.426 258.102 13.176 258.418 12.98 cv
258.734 12.785 259.129 12.641 259.598 12.547 cv
260.066 12.453 260.609 12.406 261.23 12.406 cv
261.914 12.406 li
261.914 11.98 li
261.91 11.766 261.891 11.574 261.848 11.406 cv
261.801 11.246 261.727 11.109 261.625 10.996 cv
261.523 10.891 261.387 10.809 261.219 10.754 cv
261.047 10.703 260.836 10.68 260.59 10.676 cv
260.258 10.68 259.965 10.715 259.711 10.785 cv
259.449 10.859 259.223 10.941 259.027 11.027 cv
258.828 11.121 258.66 11.199 258.527 11.27 cv
258.391 11.344 258.285 11.383 258.203 11.379 cv
258.145 11.383 258.094 11.363 258.051 11.324 cv
258.004 11.289 257.965 11.238 257.941 11.168 cv
257.91 11.105 257.891 11.02 257.875 10.918 cv
257.859 10.82 257.852 10.711 257.852 10.59 cv
257.852 10.43 257.863 10.305 257.891 10.207 cv
257.914 10.117 257.965 10.031 258.039 9.953 cv
258.109 9.87903 258.234 9.797 258.422 9.703 cv
258.602 9.617 258.816 9.53101 259.066 9.44897 cv
259.309 9.375 259.578 9.31201 259.867 9.258 cv
260.156 9.211 260.453 9.18402 260.762 9.18402 cv
261.305 9.18402 261.773 9.23798 262.164 9.34399 cv
262.555 9.453 262.875 9.617 263.125 9.836 cv
263.375 10.059 263.555 10.344 263.672 10.691 cv
263.781 11.043 263.84 11.457 263.844 11.934 cv
cp
261.914 13.641 mo
261.16 13.641 li
260.84 13.645 260.57 13.668 260.348 13.711 cv
260.121 13.762 259.938 13.832 259.801 13.922 cv
259.656 14.02 259.555 14.133 259.492 14.262 cv
259.426 14.398 259.391 14.551 259.395 14.719 cv
259.391 15.016 259.484 15.246 259.672 15.41 cv
259.855 15.582 260.113 15.664 260.441 15.66 cv
260.715 15.664 260.969 15.594 261.203 15.449 cv
261.434 15.309 261.668 15.102 261.914 14.828 cv
cp
f
267.785 16.605 mo
267.781 16.66 267.766 16.703 267.738 16.742 cv
267.703 16.781 267.648 16.816 267.578 16.84 cv
267.5 16.867 267.402 16.883 267.277 16.898 cv
267.152 16.91 266.992 16.918 266.801 16.918 cv
266.605 16.918 266.445 16.91 266.32 16.898 cv
266.191 16.883 266.09 16.867 266.02 16.84 cv
265.941 16.816 265.891 16.781 265.859 16.742 cv
265.828 16.703 265.813 16.66 265.813 16.605 cv
265.813 6.32001 li
265.813 6.27002 265.828 6.22302 265.859 6.17999 cv
265.891 6.14099 265.941 6.10498 266.02 6.07397 cv
266.09 6.047 266.191 6.02301 266.32 6.008 cv
266.445 5.992 266.605 5.98401 266.801 5.98401 cv
266.992 5.98401 267.152 5.992 267.277 6.008 cv
267.402 6.02301 267.5 6.047 267.578 6.07397 cv
267.648 6.10498 267.703 6.14099 267.738 6.17999 cv
267.766 6.22302 267.781 6.27002 267.785 6.32001 cv
cp
f
271.727 16.605 mo
271.723 16.66 271.707 16.703 271.68 16.742 cv
271.645 16.781 271.59 16.816 271.52 16.84 cv
271.441 16.867 271.344 16.883 271.219 16.898 cv
271.094 16.91 270.934 16.918 270.742 16.918 cv
270.547 16.918 270.387 16.91 270.262 16.898 cv
270.133 16.883 270.031 16.867 269.961 16.84 cv
269.883 16.816 269.832 16.781 269.801 16.742 cv
269.77 16.703 269.754 16.66 269.754 16.605 cv
269.754 6.32001 li
269.754 6.27002 269.77 6.22302 269.801 6.17999 cv
269.832 6.14099 269.883 6.10498 269.961 6.07397 cv
270.031 6.047 270.133 6.02301 270.262 6.008 cv
270.387 5.992 270.547 5.98401 270.742 5.98401 cv
270.934 5.98401 271.094 5.992 271.219 6.008 cv
271.344 6.02301 271.441 6.047 271.52 6.07397 cv
271.59 6.10498 271.645 6.14099 271.68 6.17999 cv
271.707 6.22302 271.723 6.27002 271.727 6.32001 cv
cp
f
284.941 16.605 mo
284.941 16.668 284.93 16.715 284.91 16.75 cv
284.887 16.793 284.836 16.824 284.762 16.848 cv
284.68 16.871 284.566 16.887 284.418 16.902 cv
284.266 16.91 284.059 16.918 283.797 16.918 cv
283.574 16.918 283.398 16.91 283.273 16.902 cv
283.141 16.887 283.039 16.871 282.965 16.844 cv
282.887 16.816 282.832 16.781 282.805 16.734 cv
282.77 16.695 282.746 16.641 282.727 16.574 cv
281.82 14.312 li
281.707 14.059 281.602 13.832 281.5 13.633 cv
281.395 13.437 281.277 13.273 281.148 13.137 cv
281.02 13.008 280.871 12.906 280.707 12.836 cv
280.535 12.77 280.344 12.734 280.129 12.734 cv
279.488 12.734 li
279.488 16.59 li
279.484 16.645 279.469 16.691 279.438 16.73 cv
279.402 16.773 279.348 16.809 279.27 16.832 cv
279.191 16.859 279.086 16.879 278.957 16.895 cv
278.824 16.91 278.656 16.918 278.457 16.918 cv
278.254 16.918 278.09 16.91 277.957 16.895 cv
277.824 16.879 277.719 16.859 277.641 16.832 cv
277.563 16.809 277.508 16.773 277.477 16.73 cv
277.445 16.691 277.43 16.645 277.43 16.59 cv
277.43 7.39801 li
277.43 7.172 277.488 7.008 277.605 6.90198 cv
277.723 6.80499 277.867 6.75403 278.043 6.75 cv
280.66 6.75 li
280.926 6.75403 281.148 6.758 281.32 6.76599 cv
281.492 6.77698 281.648 6.789 281.789 6.80499 cv
282.195 6.86298 282.559 6.96503 282.887 7.10199 cv
283.207 7.24597 283.484 7.42999 283.715 7.65198 cv
283.938 7.883 284.109 8.14801 284.234 8.45697 cv
284.352 8.77002 284.414 9.12903 284.418 9.52698 cv
284.414 9.87097 284.371 10.18 284.289 10.453 cv
284.199 10.734 284.07 10.98 283.906 11.199 cv
283.734 11.418 283.531 11.609 283.289 11.77 cv
283.043 11.934 282.762 12.062 282.453 12.16 cv
282.602 12.238 282.746 12.328 282.879 12.43 cv
283.012 12.535 283.137 12.664 283.254 12.809 cv
283.371 12.961 283.48 13.129 283.586 13.316 cv
283.688 13.508 283.789 13.723 283.891 13.961 cv
284.746 15.957 li
284.82 16.156 284.871 16.301 284.902 16.391 cv
284.926 16.484 284.941 16.559 284.941 16.605 cv
cp
282.289 9.73798 mo
282.285 9.40997 282.211 9.12903 282.063 8.89502 cv
281.91 8.66803 281.664 8.50403 281.32 8.40601 cv
281.215 8.383 281.094 8.36298 280.961 8.34399 cv
280.824 8.33197 280.641 8.32397 280.41 8.32001 cv
279.488 8.32001 li
279.488 11.191 li
280.535 11.191 li
280.824 11.195 281.078 11.16 281.301 11.086 cv
281.52 11.02 281.703 10.918 281.852 10.789 cv
281.996 10.664 282.105 10.512 282.18 10.332 cv
282.25 10.156 282.285 9.961 282.289 9.73798 cv
cp
f
292.902 16.605 mo
292.898 16.66 292.887 16.703 292.863 16.742 cv
292.836 16.781 292.789 16.816 292.727 16.84 cv
292.656 16.867 292.57 16.883 292.469 16.898 cv
292.359 16.91 292.227 16.918 292.066 16.918 cv
291.891 16.918 291.75 16.91 291.648 16.898 cv
291.539 16.883 291.457 16.867 291.395 16.84 cv
291.332 16.816 291.285 16.781 291.262 16.742 cv
291.23 16.703 291.219 16.66 291.223 16.605 cv
291.223 15.801 li
290.836 16.219 290.441 16.531 290.043 16.738 cv
289.641 16.945 289.23 17.047 288.805 17.051 cv
288.324 17.047 287.922 16.973 287.598 16.816 cv
287.27 16.664 287.004 16.449 286.805 16.176 cv
286.602 15.906 286.457 15.594 286.375 15.234 cv
286.285 14.879 286.242 14.434 286.246 13.898 cv
286.246 9.62903 li
286.242 9.578 286.258 9.53497 286.289 9.492 cv
286.316 9.45697 286.367 9.422 286.445 9.39502 cv
286.516 9.37097 286.617 9.35199 286.75 9.336 cv
286.875 9.32397 287.035 9.32001 287.227 9.31598 cv
287.418 9.32001 287.578 9.32397 287.703 9.336 cv
287.828 9.35199 287.926 9.37097 288.004 9.39502 cv
288.074 9.422 288.129 9.45697 288.164 9.492 cv
288.191 9.53497 288.207 9.578 288.211 9.62903 cv
288.211 13.57 li
288.207 13.937 288.23 14.215 288.281 14.406 cv
288.324 14.602 288.395 14.766 288.496 14.902 cv
288.59 15.043 288.715 15.152 288.863 15.227 cv
289.012 15.305 289.184 15.344 289.383 15.34 cv
289.629 15.344 289.879 15.25 290.137 15.066 cv
290.387 14.883 290.66 14.617 290.949 14.266 cv
290.949 9.62903 li
290.949 9.578 290.961 9.53497 290.992 9.492 cv
291.016 9.45697 291.07 9.422 291.148 9.39502 cv
291.223 9.37097 291.32 9.35199 291.449 9.336 cv
291.57 9.32397 291.73 9.32001 291.926 9.31598 cv
292.117 9.32001 292.277 9.32397 292.402 9.336 cv
292.527 9.35199 292.625 9.37097 292.699 9.39502 cv
292.77 9.422 292.82 9.45697 292.855 9.492 cv
292.883 9.53497 292.898 9.578 292.902 9.62903 cv
cp
f
301.551 16.605 mo
301.547 16.66 301.531 16.703 301.504 16.742 cv
301.469 16.781 301.418 16.816 301.348 16.84 cv
301.273 16.867 301.172 16.883 301.047 16.898 cv
300.914 16.91 300.758 16.918 300.574 16.918 cv
300.379 16.918 300.219 16.91 300.094 16.898 cv
299.965 16.883 299.863 16.867 299.793 16.84 cv
299.715 16.816 299.664 16.781 299.637 16.742 cv
299.602 16.703 299.586 16.66 299.59 16.605 cv
299.59 12.625 li
299.586 12.285 299.563 12.02 299.516 11.824 cv
299.465 11.637 299.391 11.469 299.301 11.328 cv
299.203 11.191 299.082 11.086 298.938 11.008 cv
298.785 10.934 298.613 10.895 298.414 10.895 cv
298.164 10.895 297.91 10.988 297.656 11.168 cv
297.398 11.355 297.133 11.621 296.859 11.965 cv
296.859 16.605 li
296.855 16.66 296.84 16.703 296.813 16.742 cv
296.777 16.781 296.723 16.816 296.652 16.84 cv
296.574 16.867 296.477 16.883 296.352 16.898 cv
296.227 16.91 296.066 16.918 295.875 16.918 cv
295.68 16.918 295.52 16.91 295.395 16.898 cv
295.266 16.883 295.164 16.867 295.094 16.84 cv
295.016 16.816 294.965 16.781 294.934 16.742 cv
294.902 16.703 294.887 16.66 294.887 16.605 cv
294.887 9.62903 li
294.887 9.578 294.898 9.53497 294.926 9.492 cv
294.949 9.45697 294.996 9.422 295.066 9.39502 cv
295.133 9.37097 295.219 9.35199 295.328 9.336 cv
295.434 9.32397 295.57 9.32001 295.734 9.31598 cv
295.898 9.32001 296.035 9.32397 296.148 9.336 cv
296.254 9.35199 296.34 9.37097 296.402 9.39502 cv
296.461 9.422 296.504 9.45697 296.531 9.492 cv
296.555 9.53497 296.566 9.578 296.57 9.62903 cv
296.57 10.434 li
296.953 10.02 297.348 9.70697 297.746 9.49597 cv
298.145 9.289 298.559 9.18402 298.996 9.18402 cv
299.465 9.18402 299.867 9.26202 300.195 9.41803 cv
300.52 9.57397 300.781 9.789 300.984 10.055 cv
301.184 10.328 301.328 10.641 301.418 10.996 cv
301.504 11.359 301.547 11.793 301.551 12.297 cv
cp
f
307.398 15.918 mo
307.395 16.148 307.383 16.324 307.355 16.445 cv
307.324 16.57 307.285 16.656 307.242 16.703 cv
307.191 16.754 307.121 16.797 307.031 16.836 cv
306.938 16.875 306.832 16.906 306.711 16.937 cv
306.586 16.961 306.453 16.984 306.313 17.004 cv
306.168 17.016 306.023 17.023 305.879 17.027 cv
305.488 17.023 305.148 16.973 304.863 16.879 cv
304.574 16.777 304.336 16.629 304.152 16.422 cv
303.961 16.219 303.824 15.961 303.734 15.645 cv
303.645 15.332 303.598 14.961 303.602 14.531 cv
303.602 10.957 li
302.766 10.957 li
302.664 10.961 302.59 10.898 302.539 10.773 cv
302.484 10.652 302.457 10.449 302.461 10.16 cv
302.457 10.012 302.465 9.883 302.48 9.77698 cv
302.492 9.67603 302.512 9.59399 302.539 9.53101 cv
302.563 9.47302 302.594 9.42999 302.637 9.40198 cv
302.672 9.37903 302.719 9.367 302.773 9.36298 cv
303.602 9.36298 li
303.602 7.80499 li
303.598 7.758 303.613 7.711 303.645 7.664 cv
303.672 7.625 303.723 7.59003 303.801 7.55902 cv
303.875 7.53497 303.98 7.51202 304.109 7.49597 cv
304.234 7.48401 304.391 7.47998 304.582 7.47699 cv
304.773 7.47998 304.934 7.48401 305.063 7.49597 cv
305.188 7.51202 305.289 7.53497 305.363 7.55902 cv
305.434 7.59003 305.484 7.625 305.52 7.664 cv
305.547 7.711 305.563 7.758 305.566 7.80499 cv
305.566 9.36298 li
307.086 9.36298 li
307.137 9.367 307.18 9.37903 307.223 9.40198 cv
307.258 9.42999 307.293 9.47302 307.32 9.53101 cv
307.344 9.59399 307.363 9.67603 307.379 9.77698 cv
307.391 9.883 307.395 10.012 307.398 10.16 cv
307.395 10.449 307.371 10.652 307.32 10.773 cv
307.266 10.898 307.188 10.961 307.094 10.957 cv
305.566 10.957 li
305.566 14.234 li
305.563 14.617 305.621 14.906 305.746 15.094 cv
305.863 15.289 306.078 15.383 306.387 15.379 cv
306.488 15.383 306.582 15.375 306.668 15.352 cv
306.75 15.336 306.824 15.312 306.891 15.289 cv
306.957 15.266 307.012 15.246 307.059 15.223 cv
307.098 15.207 307.141 15.195 307.18 15.195 cv
307.211 15.195 307.238 15.207 307.27 15.223 cv
307.293 15.246 307.316 15.281 307.336 15.336 cv
307.348 15.391 307.363 15.465 307.379 15.559 cv
307.391 15.652 307.395 15.773 307.398 15.918 cv
cp
f
310.797 16.605 mo
310.793 16.66 310.777 16.703 310.75 16.742 cv
310.715 16.781 310.66 16.816 310.59 16.84 cv
310.512 16.867 310.414 16.883 310.289 16.898 cv
310.164 16.91 310.004 16.918 309.813 16.918 cv
309.617 16.918 309.457 16.91 309.332 16.898 cv
309.203 16.883 309.102 16.867 309.031 16.84 cv
308.953 16.816 308.902 16.781 308.871 16.742 cv
308.84 16.703 308.824 16.66 308.824 16.605 cv
308.824 9.64502 li
308.824 9.59802 308.84 9.55103 308.871 9.508 cv
308.902 9.47302 308.953 9.43701 309.031 9.40601 cv
309.102 9.37903 309.203 9.35901 309.332 9.34003 cv
309.457 9.328 309.617 9.32001 309.813 9.31598 cv
310.004 9.32001 310.164 9.328 310.289 9.34003 cv
310.414 9.35901 310.512 9.37903 310.59 9.40601 cv
310.66 9.43701 310.715 9.47302 310.75 9.508 cv
310.777 9.55103 310.793 9.59802 310.797 9.64502 cv
cp
310.945 7.26599 mo
310.945 7.664 310.863 7.93701 310.703 8.086 cv
310.539 8.242 310.238 8.31598 309.805 8.31201 cv
309.355 8.31598 309.059 8.242 308.906 8.09399 cv
308.75 7.94897 308.672 7.68701 308.676 7.30499 cv
308.672 6.90997 308.75 6.63702 308.914 6.47998 cv
309.07 6.33197 309.375 6.25403 309.82 6.25 cv
310.258 6.25403 310.555 6.328 310.711 6.47302 cv
310.867 6.625 310.945 6.89099 310.945 7.26599 cv
cp
f
323.867 16.605 mo
323.863 16.66 323.848 16.703 323.82 16.742 cv
323.785 16.781 323.734 16.816 323.664 16.84 cv
323.59 16.867 323.488 16.883 323.367 16.898 cv
323.238 16.91 323.082 16.918 322.891 16.918 cv
322.688 16.918 322.523 16.91 322.402 16.898 cv
322.273 16.883 322.172 16.867 322.102 16.84 cv
322.023 16.816 321.973 16.781 321.945 16.742 cv
321.914 16.703 321.898 16.66 321.902 16.605 cv
321.902 12.469 li
321.898 12.234 321.879 12.02 321.836 11.824 cv
321.789 11.637 321.719 11.469 321.633 11.328 cv
321.539 11.191 321.426 11.086 321.289 11.008 cv
321.148 10.934 320.984 10.895 320.793 10.895 cv
320.559 10.895 320.32 10.988 320.082 11.168 cv
319.84 11.355 319.578 11.621 319.297 11.965 cv
319.297 16.605 li
319.293 16.66 319.277 16.703 319.25 16.742 cv
319.215 16.781 319.16 16.816 319.09 16.84 cv
319.012 16.867 318.914 16.883 318.789 16.898 cv
318.664 16.91 318.508 16.918 318.32 16.918 cv
318.125 16.918 317.965 16.91 317.844 16.898 cv
317.715 16.883 317.613 16.867 317.543 16.84 cv
317.465 16.816 317.414 16.781 317.383 16.742 cv
317.352 16.703 317.336 16.66 317.336 16.605 cv
317.336 12.469 li
317.336 12.234 317.313 12.02 317.27 11.824 cv
317.223 11.637 317.156 11.469 317.07 11.328 cv
316.98 11.191 316.867 11.086 316.727 11.008 cv
316.586 10.934 316.418 10.895 316.23 10.895 cv
315.988 10.895 315.75 10.988 315.512 11.168 cv
315.27 11.355 315.012 11.621 314.738 11.965 cv
314.738 16.605 li
314.734 16.66 314.719 16.703 314.691 16.742 cv
314.656 16.781 314.602 16.816 314.531 16.84 cv
314.453 16.867 314.355 16.883 314.23 16.898 cv
314.105 16.91 313.945 16.918 313.754 16.918 cv
313.559 16.918 313.398 16.91 313.273 16.898 cv
313.145 16.883 313.043 16.867 312.973 16.84 cv
312.895 16.816 312.844 16.781 312.813 16.742 cv
312.781 16.703 312.766 16.66 312.766 16.605 cv
312.766 9.62903 li
312.766 9.578 312.777 9.53497 312.805 9.492 cv
312.828 9.45697 312.875 9.422 312.945 9.39502 cv
313.012 9.37097 313.098 9.35199 313.207 9.336 cv
313.313 9.32397 313.449 9.32001 313.613 9.31598 cv
313.777 9.32001 313.914 9.32397 314.027 9.336 cv
314.133 9.35199 314.219 9.37097 314.281 9.39502 cv
314.34 9.422 314.383 9.45697 314.41 9.492 cv
314.434 9.53497 314.445 9.578 314.449 9.62903 cv
314.449 10.434 li
314.832 10.02 315.219 9.70697 315.602 9.49597 cv
315.984 9.289 316.383 9.18402 316.805 9.18402 cv
317.086 9.18402 317.344 9.21503 317.578 9.27301 cv
317.805 9.336 318.012 9.422 318.191 9.53101 cv
318.371 9.64502 318.523 9.77698 318.656 9.93402 cv
318.781 10.09 318.891 10.266 318.984 10.457 cv
319.188 10.234 319.395 10.043 319.598 9.87903 cv
319.801 9.72302 320 9.59003 320.195 9.48401 cv
320.391 9.38702 320.586 9.31201 320.781 9.258 cv
320.977 9.211 321.176 9.18402 321.379 9.18402 cv
321.84 9.18402 322.23 9.26202 322.551 9.41803 cv
322.871 9.57397 323.129 9.789 323.324 10.055 cv
323.52 10.328 323.656 10.641 323.742 10.996 cv
323.82 11.359 323.863 11.738 323.867 12.137 cv
cp
f
332.234 12.914 mo
332.234 13.156 332.18 13.332 332.074 13.445 cv
331.965 13.562 331.816 13.621 331.633 13.617 cv
327.387 13.617 li
327.383 13.918 327.418 14.187 327.492 14.426 cv
327.559 14.672 327.672 14.875 327.828 15.043 cv
327.98 15.215 328.176 15.348 328.422 15.434 cv
328.66 15.527 328.953 15.57 329.293 15.566 cv
329.637 15.57 329.938 15.547 330.203 15.492 cv
330.461 15.445 330.688 15.391 330.879 15.328 cv
331.066 15.27 331.223 15.211 331.352 15.16 cv
331.473 15.113 331.574 15.09 331.656 15.086 cv
331.699 15.09 331.738 15.098 331.773 15.113 cv
331.801 15.133 331.828 15.168 331.852 15.211 cv
331.871 15.262 331.887 15.328 331.895 15.414 cv
331.902 15.504 331.906 15.613 331.906 15.738 cv
331.906 15.855 331.902 15.953 331.898 16.031 cv
331.891 16.117 331.883 16.184 331.875 16.238 cv
331.863 16.297 331.848 16.348 331.828 16.383 cv
331.805 16.426 331.777 16.461 331.746 16.496 cv
331.711 16.535 331.617 16.586 331.469 16.645 cv
331.313 16.711 331.121 16.773 330.891 16.828 cv
330.652 16.891 330.383 16.937 330.086 16.984 cv
329.781 17.023 329.457 17.047 329.113 17.051 cv
328.488 17.047 327.945 16.973 327.484 16.816 cv
327.016 16.664 326.625 16.426 326.313 16.105 cv
325.996 15.789 325.766 15.387 325.613 14.902 cv
325.457 14.418 325.379 13.852 325.383 13.195 cv
325.379 12.578 325.461 12.02 325.625 11.52 cv
325.785 11.023 326.02 10.598 326.328 10.25 cv
326.637 9.90601 327.012 9.64502 327.453 9.45697 cv
327.891 9.27698 328.387 9.18402 328.941 9.18402 cv
329.527 9.18402 330.027 9.27002 330.441 9.44098 cv
330.855 9.61298 331.195 9.85199 331.461 10.156 cv
331.727 10.461 331.922 10.824 332.047 11.238 cv
332.172 11.66 332.234 12.113 332.234 12.602 cv
cp
330.328 12.352 mo
330.34 11.801 330.23 11.363 329.996 11.047 cv
329.758 10.734 329.391 10.578 328.895 10.574 cv
328.645 10.578 328.426 10.625 328.242 10.715 cv
328.055 10.812 327.902 10.937 327.781 11.094 cv
327.656 11.254 327.563 11.441 327.5 11.656 cv
327.434 11.875 327.395 12.109 327.387 12.352 cv
cp
f
338.762 14.633 mo
338.758 15.031 338.684 15.383 338.539 15.684 cv
338.387 15.988 338.176 16.242 337.906 16.441 cv
337.633 16.648 337.313 16.797 336.945 16.898 cv
336.574 16.996 336.172 17.047 335.742 17.051 cv
335.477 17.047 335.23 17.027 334.996 16.992 cv
334.758 16.949 334.543 16.902 334.355 16.844 cv
334.164 16.785 334.008 16.723 333.887 16.66 cv
333.758 16.598 333.668 16.539 333.613 16.484 cv
333.555 16.43 333.508 16.344 333.48 16.227 cv
333.445 16.109 333.43 15.937 333.434 15.707 cv
333.43 15.559 333.438 15.437 333.449 15.344 cv
333.457 15.254 333.473 15.18 333.496 15.121 cv
333.516 15.07 333.539 15.035 333.574 15.012 cv
333.602 14.996 333.641 14.984 333.691 14.984 cv
333.746 14.984 333.832 15.02 333.945 15.082 cv
334.055 15.152 334.195 15.223 334.363 15.301 cv
334.531 15.379 334.727 15.453 334.949 15.52 cv
335.168 15.59 335.418 15.625 335.703 15.621 cv
335.879 15.625 336.035 15.605 336.176 15.566 cv
336.309 15.531 336.43 15.48 336.535 15.41 cv
336.633 15.348 336.711 15.262 336.766 15.152 cv
336.816 15.051 336.84 14.93 336.844 14.789 cv
336.84 14.637 336.793 14.5 336.699 14.387 cv
336.602 14.277 336.473 14.18 336.316 14.094 cv
336.152 14.012 335.973 13.934 335.777 13.859 cv
335.574 13.789 335.371 13.711 335.16 13.617 cv
334.949 13.531 334.742 13.43 334.539 13.312 cv
334.336 13.203 334.156 13.062 334 12.891 cv
333.84 12.727 333.711 12.523 333.617 12.289 cv
333.52 12.055 333.473 11.773 333.473 11.441 cv
333.473 11.109 333.535 10.805 333.668 10.523 cv
333.793 10.25 333.98 10.012 334.23 9.80902 cv
334.473 9.61298 334.773 9.45697 335.129 9.34802 cv
335.477 9.23798 335.871 9.18402 336.313 9.18402 cv
336.527 9.18402 336.738 9.19897 336.949 9.22998 cv
337.152 9.26202 337.34 9.30103 337.508 9.34802 cv
337.676 9.39502 337.816 9.44501 337.934 9.5 cv
338.043 9.55499 338.125 9.60199 338.18 9.64099 cv
338.227 9.67999 338.262 9.71899 338.285 9.758 cv
338.301 9.797 338.316 9.84399 338.332 9.89801 cv
338.34 9.953 338.352 10.023 338.359 10.102 cv
338.367 10.187 338.371 10.285 338.371 10.402 cv
338.371 10.543 338.367 10.66 338.359 10.746 cv
338.352 10.84 338.336 10.91 338.32 10.957 cv
338.297 11.012 338.273 11.047 338.246 11.062 cv
338.211 11.086 338.176 11.094 338.137 11.09 cv
338.09 11.094 338.016 11.066 337.918 11.008 cv
337.816 10.957 337.691 10.898 337.543 10.832 cv
337.391 10.773 337.219 10.715 337.027 10.656 cv
336.828 10.605 336.605 10.578 336.359 10.574 cv
336.18 10.578 336.027 10.598 335.898 10.629 cv
335.766 10.668 335.656 10.719 335.578 10.785 cv
335.492 10.855 335.43 10.934 335.391 11.023 cv
335.344 11.117 335.324 11.215 335.328 11.316 cv
335.324 11.48 335.375 11.617 335.477 11.723 cv
335.574 11.836 335.703 11.934 335.867 12.012 cv
336.027 12.098 336.211 12.176 336.418 12.25 cv
336.621 12.324 336.828 12.402 337.043 12.488 cv
337.25 12.574 337.461 12.676 337.668 12.789 cv
337.875 12.906 338.059 13.047 338.223 13.211 cv
338.383 13.379 338.512 13.578 338.613 13.809 cv
338.707 14.043 338.758 14.316 338.762 14.633 cv
cp
f
347.352 12.937 mo
347.352 13.242 347.32 13.453 347.266 13.57 cv
347.203 13.695 347.113 13.754 346.992 13.75 cv
343.738 13.75 li
343.605 13.754 343.512 13.691 343.457 13.566 cv
343.395 13.445 343.367 13.238 343.371 12.937 cv
343.367 12.648 343.395 12.441 343.457 12.32 cv
343.512 12.199 343.605 12.137 343.738 12.137 cv
346.992 12.137 li
347.051 12.137 347.105 12.152 347.152 12.18 cv
347.195 12.207 347.23 12.25 347.266 12.312 cv
347.293 12.375 347.316 12.461 347.332 12.562 cv
347.344 12.672 347.352 12.797 347.352 12.937 cv
cp
f
358.094 16.012 mo
358.09 16.172 358.086 16.305 358.074 16.406 cv
358.059 16.516 358.039 16.602 358.016 16.672 cv
357.988 16.742 357.953 16.793 357.918 16.824 cv
357.875 16.855 357.832 16.871 357.781 16.871 cv
353.145 16.871 li
352.969 16.871 352.824 16.82 352.707 16.719 cv
352.59 16.617 352.531 16.453 352.531 16.223 cv
352.531 7.03101 li
352.531 6.98401 352.547 6.93701 352.582 6.89099 cv
352.613 6.85199 352.668 6.81598 352.75 6.789 cv
352.824 6.76599 352.93 6.74597 353.066 6.72699 cv
353.199 6.71503 353.367 6.70697 353.566 6.703 cv
353.766 6.70697 353.934 6.71503 354.066 6.72699 cv
354.195 6.74597 354.297 6.76599 354.379 6.789 cv
354.453 6.81598 354.512 6.85199 354.547 6.89099 cv
354.578 6.93701 354.594 6.98401 354.598 7.03101 cv
354.598 15.172 li
357.781 15.172 li
357.832 15.172 357.875 15.187 357.918 15.215 cv
357.953 15.246 357.988 15.293 358.016 15.359 cv
358.039 15.426 358.059 15.512 358.074 15.617 cv
358.086 15.727 358.09 15.859 358.094 16.012 cv
cp
f
366.25 13.047 mo
366.246 13.645 366.168 14.187 366.012 14.676 cv
365.855 15.168 365.617 15.59 365.301 15.941 cv
364.98 16.297 364.582 16.57 364.105 16.762 cv
363.625 16.953 363.063 17.047 362.422 17.051 cv
361.797 17.047 361.258 16.965 360.805 16.793 cv
360.344 16.625 359.965 16.375 359.66 16.043 cv
359.355 15.719 359.129 15.312 358.988 14.832 cv
358.84 14.352 358.77 13.805 358.77 13.187 cv
358.77 12.598 358.848 12.055 359.008 11.559 cv
359.164 11.066 359.402 10.645 359.723 10.289 cv
360.039 9.94098 360.438 9.66803 360.918 9.47302 cv
361.391 9.28101 361.949 9.18402 362.594 9.18402 cv
363.219 9.18402 363.762 9.27002 364.223 9.43701 cv
364.68 9.60901 365.059 9.85901 365.359 10.184 cv
365.656 10.516 365.879 10.918 366.027 11.395 cv
366.172 11.875 366.246 12.426 366.25 13.047 cv
cp
364.223 13.125 mo
364.219 12.785 364.191 12.469 364.141 12.176 cv
364.082 11.887 363.988 11.633 363.863 11.418 cv
363.73 11.207 363.559 11.039 363.344 10.918 cv
363.125 10.801 362.852 10.742 362.523 10.738 cv
362.23 10.742 361.977 10.797 361.758 10.898 cv
361.539 11.008 361.359 11.164 361.219 11.367 cv
361.078 11.578 360.973 11.824 360.902 12.113 cv
360.832 12.402 360.797 12.734 360.797 13.102 cv
360.797 13.449 360.824 13.766 360.883 14.051 cv
360.938 14.344 361.031 14.594 361.16 14.805 cv
361.285 15.02 361.457 15.187 361.68 15.305 cv
361.895 15.426 362.164 15.484 362.492 15.48 cv
362.789 15.484 363.051 15.43 363.27 15.32 cv
363.488 15.215 363.668 15.059 363.809 14.852 cv
363.949 14.652 364.051 14.406 364.121 14.113 cv
364.184 13.828 364.219 13.5 364.223 13.125 cv
cp
f
373.09 15.496 mo
373.086 15.633 373.082 15.746 373.078 15.836 cv
373.066 15.93 373.059 16.008 373.047 16.066 cv
373.031 16.133 373.016 16.184 373 16.219 cv
372.98 16.262 372.938 16.309 372.879 16.367 cv
372.813 16.43 372.707 16.504 372.559 16.586 cv
372.406 16.676 372.234 16.754 372.043 16.816 cv
371.848 16.887 371.637 16.937 371.41 16.98 cv
371.18 17.02 370.945 17.039 370.711 17.043 cv
370.172 17.039 369.699 16.961 369.285 16.793 cv
368.871 16.629 368.52 16.383 368.238 16.055 cv
367.953 15.734 367.742 15.336 367.602 14.863 cv
367.457 14.395 367.387 13.855 367.387 13.25 cv
367.387 12.555 367.473 11.953 367.648 11.441 cv
367.82 10.934 368.063 10.512 368.379 10.176 cv
368.691 9.84399 369.063 9.59802 369.492 9.43402 cv
369.914 9.27698 370.383 9.19501 370.898 9.19098 cv
371.102 9.19501 371.309 9.21503 371.512 9.24597 cv
371.715 9.28497 371.902 9.33197 372.078 9.39502 cv
372.25 9.45697 372.406 9.52698 372.547 9.60498 cv
372.684 9.68402 372.781 9.75403 372.84 9.80902 cv
372.895 9.87097 372.934 9.91803 372.961 9.953 cv
372.98 9.99597 373 10.047 373.016 10.105 cv
373.027 10.172 373.039 10.25 373.047 10.336 cv
373.055 10.43 373.059 10.539 373.059 10.668 cv
373.059 10.973 373.031 11.184 372.98 11.305 cv
372.926 11.43 372.859 11.492 372.777 11.488 cv
372.688 11.492 372.594 11.457 372.496 11.379 cv
372.395 11.309 372.277 11.227 372.145 11.137 cv
372.008 11.051 371.844 10.969 371.656 10.895 cv
371.465 10.824 371.242 10.789 370.984 10.785 cv
370.473 10.789 370.082 10.984 369.813 11.375 cv
369.539 11.77 369.402 12.348 369.406 13.109 cv
369.402 13.484 369.438 13.816 369.508 14.102 cv
369.574 14.391 369.672 14.629 369.809 14.82 cv
369.938 15.016 370.105 15.164 370.309 15.258 cv
370.508 15.359 370.742 15.406 371.008 15.402 cv
371.277 15.406 371.508 15.367 371.707 15.281 cv
371.902 15.203 372.074 15.109 372.223 15.008 cv
372.363 14.91 372.488 14.82 372.59 14.738 cv
372.688 14.66 372.77 14.621 372.84 14.617 cv
372.883 14.621 372.922 14.633 372.957 14.656 cv
372.984 14.684 373.008 14.734 373.031 14.801 cv
373.047 14.875 373.063 14.965 373.074 15.07 cv
373.082 15.184 373.086 15.324 373.09 15.496 cv
cp
f
380.387 16.629 mo
380.383 16.707 380.355 16.762 380.309 16.801 cv
380.254 16.844 380.172 16.871 380.063 16.891 cv
379.945 16.906 379.781 16.918 379.566 16.918 cv
379.328 16.918 379.156 16.906 379.055 16.891 cv
378.945 16.871 378.871 16.844 378.828 16.801 cv
378.781 16.762 378.758 16.707 378.762 16.629 cv
378.762 16.074 li
378.473 16.383 378.145 16.625 377.777 16.793 cv
377.406 16.965 377 17.047 376.555 17.051 cv
376.184 17.047 375.844 17 375.535 16.906 cv
375.223 16.812 374.953 16.672 374.727 16.477 cv
374.496 16.289 374.32 16.051 374.199 15.77 cv
374.07 15.488 374.008 15.16 374.012 14.781 cv
374.008 14.379 374.086 14.027 374.25 13.723 cv
374.406 13.426 374.645 13.176 374.961 12.98 cv
375.277 12.785 375.672 12.641 376.141 12.547 cv
376.609 12.453 377.152 12.406 377.773 12.406 cv
378.457 12.406 li
378.457 11.98 li
378.453 11.766 378.434 11.574 378.391 11.406 cv
378.344 11.246 378.27 11.109 378.168 10.996 cv
378.066 10.891 377.93 10.809 377.762 10.754 cv
377.59 10.703 377.379 10.68 377.133 10.676 cv
376.801 10.68 376.508 10.715 376.254 10.785 cv
375.992 10.859 375.766 10.941 375.57 11.027 cv
375.371 11.121 375.203 11.199 375.07 11.27 cv
374.934 11.344 374.828 11.383 374.746 11.379 cv
374.688 11.383 374.637 11.363 374.594 11.324 cv
374.547 11.289 374.508 11.238 374.484 11.168 cv
374.453 11.105 374.434 11.02 374.418 10.918 cv
374.402 10.82 374.395 10.711 374.395 10.59 cv
374.395 10.43 374.406 10.305 374.434 10.207 cv
374.457 10.117 374.508 10.031 374.582 9.953 cv
374.652 9.87903 374.777 9.797 374.965 9.703 cv
375.145 9.617 375.359 9.53101 375.609 9.44897 cv
375.852 9.375 376.121 9.31201 376.41 9.258 cv
376.699 9.211 376.996 9.18402 377.305 9.18402 cv
377.848 9.18402 378.316 9.23798 378.707 9.34399 cv
379.098 9.453 379.418 9.617 379.668 9.836 cv
379.918 10.059 380.098 10.344 380.215 10.691 cv
380.324 11.043 380.383 11.457 380.387 11.934 cv
cp
378.457 13.641 mo
377.703 13.641 li
377.383 13.645 377.113 13.668 376.891 13.711 cv
376.664 13.762 376.48 13.832 376.344 13.922 cv
376.199 14.02 376.098 14.133 376.035 14.262 cv
375.969 14.398 375.934 14.551 375.938 14.719 cv
375.934 15.016 376.027 15.246 376.215 15.41 cv
376.398 15.582 376.656 15.664 376.984 15.66 cv
377.258 15.664 377.512 15.594 377.746 15.449 cv
377.977 15.309 378.211 15.102 378.457 14.828 cv
cp
f
384.328 16.605 mo
384.324 16.66 384.309 16.703 384.281 16.742 cv
384.246 16.781 384.191 16.816 384.121 16.84 cv
384.043 16.867 383.945 16.883 383.82 16.898 cv
383.695 16.91 383.535 16.918 383.344 16.918 cv
383.148 16.918 382.988 16.91 382.863 16.898 cv
382.734 16.883 382.633 16.867 382.563 16.84 cv
382.484 16.816 382.434 16.781 382.402 16.742 cv
382.371 16.703 382.355 16.66 382.355 16.605 cv
382.355 6.32001 li
382.355 6.27002 382.371 6.22302 382.402 6.17999 cv
382.434 6.14099 382.484 6.10498 382.563 6.07397 cv
382.633 6.047 382.734 6.02301 382.863 6.008 cv
382.988 5.992 383.148 5.98401 383.344 5.98401 cv
383.535 5.98401 383.695 5.992 383.82 6.008 cv
383.945 6.02301 384.043 6.047 384.121 6.07397 cv
384.191 6.10498 384.246 6.14099 384.281 6.17999 cv
384.309 6.22302 384.324 6.27002 384.328 6.32001 cv
cp
f
401.719 16.59 mo
401.715 16.645 401.703 16.691 401.676 16.73 cv
401.645 16.773 401.59 16.809 401.52 16.832 cv
401.441 16.859 401.344 16.879 401.219 16.895 cv
401.094 16.91 400.934 16.918 400.742 16.918 cv
400.551 16.918 400.395 16.91 400.273 16.895 cv
400.145 16.879 400.047 16.859 399.977 16.832 cv
399.902 16.809 399.848 16.773 399.82 16.73 cv
399.785 16.691 399.77 16.645 399.773 16.59 cv
399.773 8.35199 li
399.754 8.35199 li
396.824 16.582 li
396.801 16.652 396.766 16.707 396.723 16.75 cv
396.672 16.797 396.605 16.832 396.527 16.855 cv
396.441 16.883 396.34 16.898 396.219 16.906 cv
396.09 16.914 395.938 16.918 395.766 16.918 cv
395.586 16.918 395.438 16.91 395.313 16.898 cv
395.188 16.883 395.082 16.863 395.004 16.836 cv
394.918 16.809 394.855 16.773 394.813 16.73 cv
394.762 16.691 394.73 16.645 394.719 16.582 cv
391.887 8.35199 li
391.871 8.35199 li
391.871 16.59 li
391.867 16.645 391.852 16.691 391.828 16.73 cv
391.797 16.773 391.746 16.809 391.668 16.832 cv
391.59 16.859 391.488 16.879 391.367 16.895 cv
391.242 16.91 391.086 16.918 390.895 16.918 cv
390.707 16.918 390.547 16.91 390.422 16.895 cv
390.293 16.879 390.195 16.859 390.121 16.832 cv
390.043 16.809 389.988 16.773 389.965 16.73 cv
389.934 16.691 389.922 16.645 389.922 16.59 cv
389.922 7.57001 li
389.922 7.30902 389.992 7.10498 390.133 6.961 cv
390.273 6.82397 390.461 6.75403 390.699 6.75 cv
392.043 6.75 li
392.281 6.75403 392.484 6.77301 392.66 6.80902 cv
392.828 6.85199 392.977 6.914 393.105 7.00403 cv
393.227 7.09802 393.332 7.21899 393.418 7.36298 cv
393.5 7.51599 393.574 7.69897 393.641 7.914 cv
395.828 13.945 li
395.859 13.945 li
398.129 7.92999 li
398.195 7.711 398.27 7.52698 398.352 7.375 cv
398.43 7.22699 398.523 7.10498 398.633 7.008 cv
398.738 6.91803 398.863 6.85199 399.012 6.80902 cv
399.152 6.77301 399.324 6.75403 399.52 6.75 cv
400.906 6.75 li
401.043 6.75403 401.164 6.77002 401.27 6.80499 cv
401.367 6.84399 401.449 6.89801 401.52 6.96503 cv
401.582 7.039 401.633 7.125 401.668 7.22302 cv
401.699 7.328 401.715 7.44501 401.719 7.57001 cv
cp
f
410.863 13.047 mo
410.859 13.645 410.781 14.187 410.625 14.676 cv
410.469 15.168 410.23 15.59 409.914 15.941 cv
409.594 16.297 409.195 16.57 408.719 16.762 cv
408.238 16.953 407.676 17.047 407.035 17.051 cv
406.41 17.047 405.871 16.965 405.418 16.793 cv
404.957 16.625 404.578 16.375 404.273 16.043 cv
403.969 15.719 403.742 15.312 403.602 14.832 cv
403.453 14.352 403.383 13.805 403.383 13.187 cv
403.383 12.598 403.461 12.055 403.621 11.559 cv
403.777 11.066 404.016 10.645 404.336 10.289 cv
404.652 9.94098 405.051 9.66803 405.531 9.47302 cv
406.004 9.28101 406.563 9.18402 407.207 9.18402 cv
407.832 9.18402 408.375 9.27002 408.836 9.43701 cv
409.293 9.60901 409.672 9.85901 409.973 10.184 cv
410.27 10.516 410.492 10.918 410.641 11.395 cv
410.785 11.875 410.859 12.426 410.863 13.047 cv
cp
408.836 13.125 mo
408.832 12.785 408.805 12.469 408.754 12.176 cv
408.695 11.887 408.602 11.633 408.477 11.418 cv
408.344 11.207 408.172 11.039 407.957 10.918 cv
407.738 10.801 407.465 10.742 407.137 10.738 cv
406.844 10.742 406.59 10.797 406.371 10.898 cv
406.152 11.008 405.973 11.164 405.832 11.367 cv
405.691 11.578 405.586 11.824 405.516 12.113 cv
405.445 12.402 405.41 12.734 405.41 13.102 cv
405.41 13.449 405.438 13.766 405.496 14.051 cv
405.551 14.344 405.645 14.594 405.773 14.805 cv
405.898 15.02 406.07 15.187 406.293 15.305 cv
406.508 15.426 406.777 15.484 407.105 15.48 cv
407.402 15.484 407.664 15.43 407.883 15.32 cv
408.102 15.215 408.281 15.059 408.422 14.852 cv
408.563 14.652 408.664 14.406 408.734 14.113 cv
408.797 13.828 408.832 13.5 408.836 13.125 cv
cp
f
419.043 16.605 mo
419.039 16.668 419.027 16.715 419.004 16.75 cv
418.977 16.793 418.934 16.824 418.871 16.848 cv
418.809 16.871 418.723 16.887 418.617 16.902 cv
418.508 16.91 418.375 16.918 418.223 16.918 cv
418.051 16.918 417.918 16.91 417.816 16.902 cv
417.711 16.887 417.625 16.871 417.563 16.848 cv
417.496 16.824 417.449 16.793 417.422 16.75 cv
417.391 16.715 417.375 16.668 417.379 16.605 cv
417.379 15.832 li
417.016 16.223 416.641 16.52 416.246 16.73 cv
415.852 16.941 415.414 17.047 414.938 17.051 cv
414.402 17.047 413.953 16.945 413.59 16.742 cv
413.219 16.539 412.918 16.262 412.688 15.91 cv
412.453 15.562 412.285 15.156 412.184 14.687 cv
412.078 14.223 412.027 13.73 412.027 13.211 cv
412.027 12.594 412.094 12.035 412.227 11.539 cv
412.359 11.043 412.551 10.621 412.809 10.27 cv
413.063 9.922 413.383 9.65198 413.766 9.46503 cv
414.145 9.27698 414.582 9.18402 415.078 9.18402 cv
415.465 9.18402 415.82 9.26599 416.141 9.422 cv
416.461 9.586 416.777 9.81598 417.09 10.121 cv
417.09 6.34399 li
417.09 6.29303 417.102 6.24597 417.133 6.203 cv
417.156 6.164 417.211 6.12903 417.289 6.09802 cv
417.363 6.07001 417.461 6.047 417.59 6.03101 cv
417.711 6.01599 417.871 6.008 418.066 6.008 cv
418.258 6.008 418.418 6.01599 418.543 6.03101 cv
418.668 6.047 418.766 6.07001 418.84 6.09802 cv
418.91 6.12903 418.961 6.164 418.996 6.203 cv
419.023 6.24597 419.039 6.29303 419.043 6.34399 cv
cp
417.09 11.941 mo
416.809 11.59 416.535 11.316 416.277 11.129 cv
416.016 10.941 415.746 10.848 415.469 10.848 cv
415.211 10.848 414.992 10.914 414.809 11.039 cv
414.621 11.172 414.473 11.34 414.363 11.551 cv
414.25 11.766 414.168 12.008 414.113 12.27 cv
414.059 12.535 414.031 12.805 414.031 13.078 cv
414.031 13.375 414.055 13.656 414.102 13.93 cv
414.148 14.207 414.223 14.453 414.332 14.668 cv
414.434 14.887 414.578 15.062 414.758 15.191 cv
414.934 15.324 415.156 15.391 415.43 15.387 cv
415.563 15.391 415.695 15.371 415.824 15.328 cv
415.949 15.289 416.078 15.223 416.215 15.133 cv
416.348 15.047 416.484 14.93 416.629 14.785 cv
416.766 14.645 416.922 14.469 417.09 14.258 cv
cp
f
427.473 12.914 mo
427.473 13.156 427.418 13.332 427.313 13.445 cv
427.203 13.562 427.055 13.621 426.871 13.617 cv
422.625 13.617 li
422.621 13.918 422.656 14.187 422.73 14.426 cv
422.797 14.672 422.91 14.875 423.066 15.043 cv
423.219 15.215 423.414 15.348 423.66 15.434 cv
423.898 15.527 424.191 15.57 424.531 15.566 cv
424.875 15.57 425.176 15.547 425.441 15.492 cv
425.699 15.445 425.926 15.391 426.117 15.328 cv
426.305 15.27 426.461 15.211 426.59 15.16 cv
426.711 15.113 426.813 15.09 426.895 15.086 cv
426.938 15.09 426.977 15.098 427.012 15.113 cv
427.039 15.133 427.066 15.168 427.09 15.211 cv
427.109 15.262 427.125 15.328 427.133 15.414 cv
427.141 15.504 427.145 15.613 427.145 15.738 cv
427.145 15.855 427.141 15.953 427.137 16.031 cv
427.129 16.117 427.121 16.184 427.113 16.238 cv
427.102 16.297 427.086 16.348 427.066 16.383 cv
427.043 16.426 427.016 16.461 426.984 16.496 cv
426.949 16.535 426.855 16.586 426.707 16.645 cv
426.551 16.711 426.359 16.773 426.129 16.828 cv
425.891 16.891 425.621 16.937 425.324 16.984 cv
425.02 17.023 424.695 17.047 424.352 17.051 cv
423.727 17.047 423.184 16.973 422.723 16.816 cv
422.254 16.664 421.863 16.426 421.551 16.105 cv
421.234 15.789 421.004 15.387 420.852 14.902 cv
420.695 14.418 420.617 13.852 420.621 13.195 cv
420.617 12.578 420.699 12.02 420.863 11.52 cv
421.023 11.023 421.258 10.598 421.566 10.25 cv
421.875 9.90601 422.25 9.64502 422.691 9.45697 cv
423.129 9.27698 423.625 9.18402 424.18 9.18402 cv
424.766 9.18402 425.266 9.27002 425.68 9.44098 cv
426.094 9.61298 426.434 9.85199 426.699 10.156 cv
426.965 10.461 427.16 10.824 427.285 11.238 cv
427.41 11.66 427.473 12.113 427.473 12.602 cv
cp
425.566 12.352 mo
425.578 11.801 425.469 11.363 425.234 11.047 cv
424.996 10.734 424.629 10.578 424.133 10.574 cv
423.883 10.578 423.664 10.625 423.48 10.715 cv
423.293 10.812 423.141 10.937 423.02 11.094 cv
422.895 11.254 422.801 11.441 422.738 11.656 cv
422.672 11.875 422.633 12.109 422.625 12.352 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
