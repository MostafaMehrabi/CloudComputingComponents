%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PreparationTimesOfImages-RemoteMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:43:23 p.m.
%%BoundingBox: 0 0 633 521
%%HiResBoundingBox: 0 0 633 520.0800
%%CropBox: 0 0 633 520.0800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -520.08 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 520.08 li
633 520.08 li
633 0 li
cp
clp
gsave
0 520.08 mo
633 520.08 li
633 -.920044 li
0 -.920044 li
cp
clp
0 -6.10352e-5 mo
633 -6.10352e-5 li
633 520.078 li
0 520.078 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
53.52 454.199 mo
617.398 454.199 li
53.52 413.52 mo
617.398 413.52 li
53.52 372.84 mo
617.398 372.84 li
53.52 332.16 mo
617.398 332.16 li
53.52 291.481 mo
617.398 291.481 li
53.52 250.922 mo
617.398 250.922 li
53.52 210.238 mo
617.398 210.238 li
53.52 169.559 mo
617.398 169.559 li
53.52 128.879 mo
617.398 128.879 li
53.52 88.1989 mo
617.398 88.1989 li
53.52 47.52 mo
617.398 47.52 li
.135805 .104005 .108583 0 cmyk
@
53.52 433.922 mo
617.398 433.922 li
53.52 393.238 mo
617.398 393.238 li
53.52 352.559 mo
617.398 352.559 li
53.52 311.879 mo
617.398 311.879 li
53.52 271.199 mo
617.398 271.199 li
53.52 230.52 mo
617.398 230.52 li
53.52 189.84 mo
617.398 189.84 li
53.52 149.16 mo
617.398 149.16 li
53.52 108.481 mo
617.398 108.481 li
53.52 67.801 mo
617.398 67.801 li
53.52 27.2379 mo
617.398 27.2379 li
.326574 .281529 .277562 0 cmyk
@
88.801 27.2379 mo
88.801 474.602 li
159.238 27.2379 mo
159.238 474.602 li
229.801 27.2379 mo
229.801 474.602 li
300.238 27.2379 mo
300.238 474.602 li
370.801 27.2379 mo
370.801 474.602 li
441.238 27.2379 mo
441.238 474.602 li
511.68 27.2379 mo
511.68 474.602 li
582.238 27.2379 mo
582.238 474.602 li
.175235 .144778 .143648 0 cmyk
@
53.52 27.2379 mo
53.52 474.602 li
124.078 27.2379 mo
124.078 474.602 li
194.52 27.2379 mo
194.52 474.602 li
265.078 27.2379 mo
265.078 474.602 li
335.52 27.2379 mo
335.52 474.602 li
405.961 27.2379 mo
405.961 474.602 li
476.52 27.2379 mo
476.52 474.602 li
546.961 27.2379 mo
546.961 474.602 li
617.398 27.2379 mo
617.398 474.602 li
.326574 .281529 .277562 0 cmyk
@
33.48 465.238 mo
40.558 465.238 li
40.558 482.281 li
33.48 482.281 li
cp
0 0 0 0 cmyk
ef
33.48 424.559 mo
40.558 424.559 li
40.558 441.602 li
33.48 441.602 li
cp
ef
33.48 383.879 mo
40.558 383.879 li
40.558 401.039 li
33.48 401.039 li
cp
ef
33.48 343.199 mo
40.558 343.199 li
40.558 360.359 li
33.48 360.359 li
cp
ef
33.48 302.52 mo
40.558 302.52 li
40.558 319.68 li
33.48 319.68 li
cp
ef
26.398 261.84 mo
40.558 261.84 li
40.558 279 li
26.398 279 li
cp
ef
26.398 221.16 mo
40.558 221.16 li
40.558 238.32 li
26.398 238.32 li
cp
ef
26.398 180.602 mo
40.558 180.602 li
40.558 197.641 li
26.398 197.641 li
cp
ef
26.398 139.922 mo
40.558 139.922 li
40.558 156.961 li
26.398 156.961 li
cp
ef
26.398 99.2379 mo
40.558 99.2379 li
40.558 116.281 li
26.398 116.281 li
cp
ef
26.398 58.559 mo
40.558 58.559 li
40.558 75.602 li
26.398 75.602 li
cp
ef
26.398 17.879 mo
40.558 17.879 li
40.558 34.922 li
26.398 34.922 li
cp
ef
.96 lw
53.52 474.602 mo
617.398 474.602 li
.369879 .299321 .304356 .000976577 cmyk
@
53.52 474.602 mo
53.52 479.039 li
124.078 474.602 mo
124.078 479.039 li
194.52 474.602 mo
194.52 479.039 li
265.078 474.602 mo
265.078 479.039 li
335.52 474.602 mo
335.52 479.039 li
405.961 474.602 mo
405.961 479.039 li
476.52 474.602 mo
476.52 479.039 li
546.961 474.602 mo
546.961 479.039 li
617.398 474.602 mo
617.398 479.039 li
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
1 lc
53.52 398.039 mo
124.078 397.078 li
194.52 412.199 li
265.078 412.32 li
335.52 397.32 li
405.961 398.398 li
476.52 397.922 li
546.961 413.641 li
617.398 397.922 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
48.422 392.898 mo
58.379 392.898 li
58.379 402.859 li
48.422 402.859 li
cp
.62829 .284672 0 0 cmyk
@
118.859 391.941 mo
128.82 391.941 li
128.82 401.898 li
118.859 401.898 li
cp
@
189.422 407.059 mo
199.379 407.059 li
199.379 417.02 li
189.422 417.02 li
cp
@
259.859 407.18 mo
269.82 407.18 li
269.82 417.141 li
259.859 417.141 li
cp
@
330.301 392.301 mo
340.262 392.301 li
340.262 402.262 li
330.301 402.262 li
cp
@
400.859 393.262 mo
410.82 393.262 li
410.82 403.219 li
400.859 403.219 li
cp
@
471.301 392.781 mo
481.262 392.781 li
481.262 402.738 li
471.301 402.738 li
cp
@
541.859 408.621 mo
551.82 408.621 li
551.82 418.578 li
541.859 418.578 li
cp
@
612.301 392.898 mo
622.262 392.898 li
622.262 402.859 li
612.301 402.859 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
53.52 396.121 mo
124.078 435.48 li
194.52 443.641 li
265.078 436.441 li
335.52 436.559 li
476.52 436.559 li
546.961 436.441 li
617.398 436.441 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
48.422 391.102 mo
58.379 391.102 li
58.379 401.059 li
48.422 401.059 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
118.859 430.461 mo
128.82 430.461 li
128.82 440.422 li
118.859 440.422 li
cp
@
189.422 438.621 mo
199.379 438.621 li
199.379 448.578 li
189.422 448.578 li
cp
@
259.859 431.422 mo
269.82 431.422 li
269.82 441.379 li
259.859 441.379 li
cp
@
330.301 431.422 mo
340.262 431.422 li
340.262 441.379 li
330.301 441.379 li
cp
@
400.859 431.539 mo
410.82 431.539 li
410.82 441.5 li
400.859 441.5 li
cp
@
471.301 431.539 mo
481.262 431.539 li
481.262 441.5 li
471.301 441.5 li
cp
@
541.859 431.301 mo
551.82 431.301 li
551.82 441.262 li
541.859 441.262 li
cp
@
612.301 431.301 mo
622.262 431.301 li
622.262 441.262 li
612.301 441.262 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
53.52 386.16 mo
124.078 434.641 li
194.52 435.48 li
265.078 448.559 li
335.52 445.559 li
405.961 443.52 li
476.52 448.559 li
546.961 446.762 li
617.398 445.441 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
48.422 381.141 mo
58.379 381.141 li
58.379 391.102 li
48.422 391.102 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
118.859 429.5 mo
128.82 429.5 li
128.82 439.461 li
118.859 439.461 li
cp
@
189.422 430.34 mo
199.379 430.34 li
199.379 440.301 li
189.422 440.301 li
cp
@
259.859 443.539 mo
269.82 443.539 li
269.82 453.5 li
259.859 453.5 li
cp
@
330.301 440.422 mo
340.262 440.422 li
340.262 450.379 li
330.301 450.379 li
cp
@
400.859 438.379 mo
410.82 438.379 li
410.82 448.34 li
400.859 448.34 li
cp
@
471.301 443.422 mo
481.262 443.422 li
481.262 453.379 li
471.301 453.379 li
cp
@
541.859 441.621 mo
551.82 441.621 li
551.82 451.578 li
541.859 451.578 li
cp
@
612.301 440.422 mo
622.262 440.422 li
622.262 450.379 li
612.301 450.379 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
53.52 386.16 mo
124.078 434.52 li
194.52 455.281 li
265.078 448.559 li
335.52 454.922 li
405.961 451.32 li
476.52 455.039 li
546.961 452.398 li
617.398 458.641 li
0 .993988 1 0 cmyk
@
grestore
48.422 381.141 mo
58.379 381.141 li
58.379 391.102 li
48.422 391.102 li
cp
0 .993988 1 0 cmyk
@
118.859 429.5 mo
128.82 429.5 li
128.82 439.461 li
118.859 439.461 li
cp
@
189.422 450.262 mo
199.379 450.262 li
199.379 460.219 li
189.422 460.219 li
cp
@
259.859 443.539 mo
269.82 443.539 li
269.82 453.5 li
259.859 453.5 li
cp
@
330.301 449.898 mo
340.262 449.898 li
340.262 459.859 li
330.301 459.859 li
cp
@
400.859 446.18 mo
410.82 446.18 li
410.82 456.141 li
400.859 456.141 li
cp
@
471.301 449.898 mo
481.262 449.898 li
481.262 459.859 li
471.301 459.859 li
cp
@
541.859 447.379 mo
551.82 447.379 li
551.82 457.34 li
541.859 457.34 li
cp
@
612.301 453.5 mo
622.262 453.5 li
622.262 463.461 li
612.301 463.461 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.52 396 mo
124.078 435.602 li
194.52 454.801 li
265.078 446.039 li
335.52 456.84 li
405.961 453.602 li
476.52 452.281 li
546.961 454.441 li
617.398 456.121 li
.62829 .284672 0 0 cmyk
@
grestore
48.422 390.859 mo
58.379 390.859 li
58.379 400.82 li
48.422 400.82 li
cp
.62829 .284672 0 0 cmyk
@
118.859 430.461 mo
128.82 430.461 li
128.82 440.422 li
118.859 440.422 li
cp
@
189.422 449.781 mo
199.379 449.781 li
199.379 459.738 li
189.422 459.738 li
cp
@
259.859 440.898 mo
269.82 440.898 li
269.82 450.859 li
259.859 450.859 li
cp
@
330.301 451.699 mo
340.262 451.699 li
340.262 461.66 li
330.301 461.66 li
cp
@
400.859 448.461 mo
410.82 448.461 li
410.82 458.422 li
400.859 458.422 li
cp
@
471.301 447.262 mo
481.262 447.262 li
481.262 457.219 li
471.301 457.219 li
cp
@
541.859 449.422 mo
551.82 449.422 li
551.82 459.379 li
541.859 459.379 li
cp
@
612.301 450.981 mo
622.262 450.981 li
622.262 460.942 li
612.301 460.942 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.52 398.039 mo
124.078 435.48 li
194.52 455.281 li
265.078 454.32 li
335.52 450.719 li
405.961 454.801 li
476.52 458.039 li
546.961 452.879 li
617.398 454.68 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
48.422 392.898 mo
58.379 392.898 li
58.379 402.859 li
48.422 402.859 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
118.859 430.461 mo
128.82 430.461 li
128.82 440.422 li
118.859 440.422 li
cp
@
189.422 450.262 mo
199.379 450.262 li
199.379 460.219 li
189.422 460.219 li
cp
@
259.859 449.18 mo
269.82 449.18 li
269.82 459.141 li
259.859 459.141 li
cp
@
330.301 445.578 mo
340.262 445.578 li
340.262 455.539 li
330.301 455.539 li
cp
@
400.859 449.781 mo
410.82 449.781 li
410.82 459.738 li
400.859 459.738 li
cp
@
471.301 452.898 mo
481.262 452.898 li
481.262 462.859 li
471.301 462.859 li
cp
@
541.859 447.738 mo
551.82 447.738 li
551.82 457.699 li
541.859 457.699 li
cp
@
612.301 449.66 mo
622.262 449.66 li
622.262 459.621 li
612.301 459.621 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.52 396 mo
124.078 434.641 li
194.52 455.281 li
265.078 453.961 li
335.52 448.441 li
405.961 453.359 li
476.52 454.441 li
546.961 454.559 li
617.398 453.238 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
48.422 390.981 mo
58.379 390.981 li
58.379 400.942 li
48.422 400.942 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
118.859 429.5 mo
128.82 429.5 li
128.82 439.461 li
118.859 439.461 li
cp
@
189.422 450.262 mo
199.379 450.262 li
199.379 460.219 li
189.422 460.219 li
cp
@
259.859 448.82 mo
269.82 448.82 li
269.82 458.781 li
259.859 458.781 li
cp
@
330.301 443.301 mo
340.262 443.301 li
340.262 453.262 li
330.301 453.262 li
cp
@
400.859 448.219 mo
410.82 448.219 li
410.82 458.18 li
400.859 458.18 li
cp
@
471.301 449.422 mo
481.262 449.422 li
481.262 459.379 li
471.301 459.379 li
cp
@
541.859 449.539 mo
551.82 449.539 li
551.82 459.5 li
541.859 459.5 li
cp
@
612.301 448.102 mo
622.262 448.102 li
622.262 458.059 li
612.301 458.059 li
cp
@
gsave
53.52 27.1209 mo
618.122 27.1209 li
618.122 475.199 li
53.52 475.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
53.52 386.281 mo
124.078 435.602 li
194.52 455.281 li
265.078 454.559 li
335.52 457.922 li
405.961 451.68 li
476.52 458.52 li
546.961 457.922 li
617.398 454.559 li
0 .993988 1 0 cmyk
@
grestore
48.422 381.141 mo
58.379 381.141 li
58.379 391.102 li
48.422 391.102 li
cp
0 .993988 1 0 cmyk
@
118.859 430.578 mo
128.82 430.578 li
128.82 440.539 li
118.859 440.539 li
cp
@
189.422 450.262 mo
199.379 450.262 li
199.379 460.219 li
189.422 460.219 li
cp
@
259.859 449.422 mo
269.82 449.422 li
269.82 459.379 li
259.859 459.379 li
cp
@
330.301 452.898 mo
340.262 452.898 li
340.262 462.859 li
330.301 462.859 li
cp
@
400.859 446.539 mo
410.82 446.539 li
410.82 456.5 li
400.859 456.5 li
cp
@
471.301 453.5 mo
481.262 453.5 li
481.262 463.461 li
471.301 463.461 li
cp
@
541.859 452.898 mo
551.82 452.898 li
551.82 462.859 li
541.859 462.859 li
cp
@
612.301 449.422 mo
622.262 449.422 li
622.262 459.379 li
612.301 459.379 li
cp
@
33.43 465.25 mo
40.524 465.25 li
40.524 482.34 li
33.43 482.34 li
cp
0 0 0 0 cmyk
ef
40.059 474.199 mo
40.055 474.883 40.004 475.504 39.898 476.066 cv
39.789 476.629 39.609 477.113 39.363 477.516 cv
39.109 477.922 38.781 478.234 38.383 478.453 cv
37.977 478.676 37.484 478.785 36.898 478.785 cv
36.34 478.785 35.867 478.687 35.488 478.488 cv
35.105 478.293 34.801 478 34.566 477.613 cv
34.332 477.227 34.164 476.754 34.07 476.187 cv
33.969 475.625 33.922 474.977 33.922 474.242 cv
33.922 473.57 33.977 472.949 34.086 472.383 cv
34.195 471.82 34.371 471.336 34.621 470.93 cv
34.863 470.527 35.188 470.215 35.594 469.988 cv
35.992 469.77 36.488 469.656 37.078 469.656 cv
37.637 469.656 38.109 469.758 38.492 469.953 cv
38.875 470.156 39.18 470.449 39.414 470.832 cv
39.645 471.223 39.813 471.695 39.91 472.258 cv
40.008 472.82 40.055 473.469 40.059 474.199 cv
cp
38.852 474.281 mo
38.848 473.84 38.832 473.441 38.805 473.09 cv
38.77 472.738 38.723 472.43 38.664 472.16 cv
38.598 471.891 38.52 471.66 38.422 471.465 cv
38.324 471.273 38.207 471.113 38.07 470.984 cv
37.93 470.859 37.77 470.766 37.598 470.707 cv
37.418 470.652 37.223 470.625 37.008 470.621 cv
36.617 470.625 36.301 470.715 36.063 470.898 cv
35.816 471.082 35.625 471.336 35.488 471.652 cv
35.348 471.973 35.254 472.344 35.203 472.773 cv
35.152 473.203 35.129 473.668 35.129 474.16 cv
35.129 474.824 35.16 475.387 35.23 475.848 cv
35.297 476.316 35.406 476.695 35.559 476.984 cv
35.703 477.281 35.895 477.492 36.125 477.621 cv
36.355 477.758 36.637 477.824 36.969 477.82 cv
37.223 477.824 37.445 477.785 37.641 477.699 cv
37.832 477.621 38 477.5 38.141 477.344 cv
38.281 477.191 38.395 477.008 38.488 476.793 cv
38.574 476.578 38.648 476.34 38.707 476.078 cv
38.758 475.82 38.797 475.539 38.82 475.234 cv
38.84 474.93 38.848 474.613 38.852 474.281 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.43 424.578 mo
40.524 424.578 li
40.524 441.672 li
33.43 441.672 li
cp
0 0 0 0 cmyk
ef
39.773 437.492 mo
39.77 437.578 39.766 437.652 39.758 437.715 cv
39.746 437.781 39.73 437.836 39.711 437.875 cv
39.688 437.922 39.656 437.953 39.625 437.969 cv
39.586 437.992 39.551 438 39.516 438 cv
34.605 438 li
34.539 438 34.48 437.992 34.434 437.977 cv
34.383 437.961 34.344 437.937 34.313 437.898 cv
34.277 437.867 34.25 437.812 34.234 437.742 cv
34.215 437.672 34.207 437.586 34.211 437.484 cv
34.207 437.395 34.211 437.316 34.223 437.246 cv
34.227 437.18 34.242 437.117 34.27 437.062 cv
34.289 437.012 34.32 436.961 34.355 436.906 cv
34.391 436.855 34.438 436.801 34.496 436.738 cv
36.273 434.91 li
36.68 434.492 37.008 434.113 37.258 433.777 cv
37.5 433.445 37.691 433.141 37.832 432.863 cv
37.965 432.594 38.055 432.344 38.098 432.117 cv
38.137 431.891 38.156 431.68 38.16 431.484 cv
38.156 431.289 38.125 431.105 38.059 430.926 cv
37.992 430.754 37.895 430.598 37.773 430.461 cv
37.645 430.332 37.488 430.227 37.301 430.145 cv
37.109 430.07 36.895 430.031 36.652 430.027 cv
36.363 430.031 36.102 430.07 35.875 430.145 cv
35.641 430.227 35.441 430.312 35.273 430.398 cv
35.098 430.492 34.953 430.574 34.84 430.652 cv
34.723 430.73 34.637 430.77 34.582 430.77 cv
34.547 430.77 34.52 430.762 34.496 430.742 cv
34.469 430.727 34.445 430.695 34.43 430.652 cv
34.41 430.613 34.398 430.559 34.391 430.488 cv
34.383 430.418 34.379 430.336 34.379 430.238 cv
34.379 430.172 34.379 430.113 34.383 430.062 cv
34.387 430.012 34.395 429.969 34.406 429.93 cv
34.418 429.898 34.434 429.863 34.453 429.828 cv
34.469 429.801 34.504 429.762 34.563 429.711 cv
34.613 429.664 34.711 429.598 34.848 429.512 cv
34.98 429.43 35.148 429.348 35.355 429.27 cv
35.555 429.191 35.777 429.125 36.027 429.066 cv
36.27 429.016 36.527 428.988 36.801 428.984 cv
37.227 428.988 37.605 429.051 37.93 429.168 cv
38.25 429.293 38.516 429.457 38.734 429.664 cv
38.945 429.879 39.105 430.125 39.211 430.398 cv
39.316 430.68 39.371 430.977 39.371 431.289 cv
39.371 431.578 39.344 431.859 39.293 432.141 cv
39.242 432.422 39.137 432.727 38.973 433.055 cv
38.809 433.383 38.574 433.746 38.27 434.145 cv
37.965 434.547 37.555 435.008 37.047 435.527 cv
35.641 436.996 li
39.508 436.996 li
39.539 437 39.574 437.008 39.613 437.027 cv
39.645 437.051 39.676 437.082 39.703 437.121 cv
39.727 437.164 39.746 437.219 39.758 437.277 cv
39.766 437.34 39.77 437.41 39.773 437.492 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.43 383.91 mo
40.524 383.91 li
40.524 401 li
33.43 401 li
cp
0 0 0 0 cmyk
ef
40.141 394.797 mo
40.137 394.949 40.113 395.07 40.07 395.156 cv
40.023 395.246 39.961 395.289 39.879 395.285 cv
38.879 395.285 li
38.879 397.148 li
38.879 397.187 38.867 397.219 38.852 397.242 cv
38.828 397.27 38.797 397.289 38.754 397.309 cv
38.703 397.324 38.641 397.336 38.57 397.348 cv
38.492 397.355 38.398 397.359 38.281 397.363 cv
38.164 397.359 38.066 397.355 37.996 397.348 cv
37.918 397.336 37.859 397.324 37.816 397.309 cv
37.77 397.289 37.738 397.27 37.723 397.242 cv
37.703 397.219 37.695 397.187 37.699 397.148 cv
37.699 395.285 li
34.07 395.285 li
34.012 395.289 33.969 395.281 33.934 395.266 cv
33.898 395.254 33.863 395.227 33.836 395.187 cv
33.805 395.152 33.785 395.102 33.773 395.031 cv
33.762 394.965 33.758 394.875 33.758 394.762 cv
33.758 394.68 33.758 394.602 33.766 394.531 cv
33.766 394.461 33.777 394.398 33.793 394.344 cv
33.805 394.289 33.82 394.234 33.848 394.18 cv
33.867 394.125 33.895 394.07 33.93 394.008 cv
37.09 388.621 li
37.109 388.586 37.145 388.555 37.191 388.527 cv
37.234 388.5 37.289 388.477 37.363 388.457 cv
37.43 388.441 37.516 388.43 37.621 388.418 cv
37.723 388.414 37.844 388.41 37.984 388.406 cv
38.133 388.41 38.27 388.414 38.387 388.426 cv
38.5 388.437 38.59 388.453 38.664 388.469 cv
38.73 388.488 38.785 388.512 38.824 388.543 cv
38.859 388.574 38.879 388.609 38.879 388.648 cv
38.879 394.312 li
39.879 394.312 li
39.953 394.316 40.016 394.355 40.066 394.434 cv
40.113 394.516 40.137 394.637 40.141 394.797 cv
cp
37.699 389.445 mo
37.688 389.445 li
34.836 394.312 li
37.699 394.312 li
cp
.629236 .549432 .540154 .282963 cmyk
f
33.43 343.238 mo
40.524 343.238 li
40.524 360.328 li
33.43 360.328 li
cp
0 0 0 0 cmyk
ef
39.992 353.77 mo
39.992 354.16 39.93 354.539 39.813 354.898 cv
39.688 355.266 39.504 355.582 39.262 355.855 cv
39.012 356.133 38.699 356.355 38.324 356.52 cv
37.941 356.687 37.496 356.77 36.98 356.77 cv
36.609 356.77 36.281 356.727 36 356.633 cv
35.715 356.547 35.469 356.414 35.258 356.242 cv
35.047 356.074 34.871 355.867 34.734 355.621 cv
34.594 355.375 34.48 355.094 34.398 354.777 cv
34.313 354.465 34.254 354.121 34.219 353.742 cv
34.18 353.371 34.16 352.969 34.164 352.535 cv
34.16 352.156 34.18 351.773 34.223 351.383 cv
34.262 351 34.336 350.625 34.441 350.258 cv
34.547 349.898 34.691 349.559 34.871 349.242 cv
35.051 348.926 35.277 348.648 35.551 348.414 cv
35.824 348.18 36.148 347.992 36.527 347.852 cv
36.906 347.715 37.348 347.648 37.852 347.645 cv
38.02 347.648 38.191 347.656 38.363 347.676 cv
38.535 347.699 38.695 347.73 38.844 347.762 cv
38.992 347.801 39.113 347.836 39.215 347.875 cv
39.313 347.914 39.379 347.949 39.414 347.973 cv
39.441 348 39.465 348.027 39.484 348.055 cv
39.5 348.086 39.516 348.117 39.523 348.152 cv
39.531 348.187 39.535 348.227 39.543 348.27 cv
39.543 348.312 39.547 348.367 39.551 348.43 cv
39.547 348.516 39.547 348.586 39.547 348.641 cv
39.543 348.703 39.531 348.75 39.52 348.785 cv
39.5 348.824 39.48 348.852 39.457 348.867 cv
39.43 348.887 39.398 348.895 39.359 348.895 cv
39.309 348.895 39.238 348.879 39.152 348.848 cv
39.063 348.816 38.957 348.781 38.836 348.738 cv
38.711 348.703 38.563 348.668 38.387 348.633 cv
38.211 348.605 38.008 348.59 37.777 348.586 cv
37.348 348.59 36.98 348.676 36.676 348.848 cv
36.371 349.02 36.121 349.254 35.926 349.547 cv
35.73 349.84 35.586 350.18 35.496 350.562 cv
35.398 350.953 35.344 351.355 35.336 351.773 cv
35.453 351.707 35.59 351.641 35.738 351.57 cv
35.887 351.504 36.047 351.441 36.223 351.383 cv
36.398 351.332 36.586 351.285 36.781 351.25 cv
36.977 351.219 37.188 351.203 37.414 351.199 cv
37.891 351.203 38.293 351.27 38.625 351.395 cv
38.953 351.527 39.219 351.707 39.426 351.937 cv
39.625 352.168 39.77 352.437 39.859 352.75 cv
39.945 353.062 39.992 353.402 39.992 353.77 cv
cp
38.797 353.879 mo
38.797 353.617 38.77 353.375 38.719 353.156 cv
38.664 352.941 38.574 352.758 38.453 352.602 cv
38.328 352.453 38.164 352.336 37.961 352.254 cv
37.75 352.172 37.496 352.129 37.199 352.129 cv
37.027 352.129 36.859 352.145 36.691 352.176 cv
36.52 352.207 36.355 352.25 36.199 352.297 cv
36.039 352.352 35.891 352.414 35.75 352.484 cv
35.605 352.559 35.473 352.633 35.355 352.711 cv
35.352 353.305 35.391 353.801 35.469 354.195 cv
35.543 354.594 35.652 354.91 35.797 355.148 cv
35.941 355.391 36.121 355.562 36.336 355.664 cv
36.551 355.77 36.801 355.82 37.09 355.816 cv
37.379 355.82 37.633 355.766 37.848 355.652 cv
38.063 355.547 38.238 355.398 38.383 355.211 cv
38.523 355.027 38.629 354.82 38.695 354.59 cv
38.762 354.359 38.797 354.125 38.797 353.879 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.43 302.57 mo
40.524 302.57 li
40.524 319.66 li
33.43 319.66 li
cp
0 0 0 0 cmyk
ef
39.969 313.684 mo
39.969 314.07 39.898 314.414 39.762 314.711 cv
39.625 315.016 39.43 315.266 39.172 315.469 cv
38.914 315.676 38.594 315.832 38.215 315.934 cv
37.832 316.039 37.398 316.09 36.914 316.09 cv
36.453 316.09 36.043 316.043 35.684 315.949 cv
35.32 315.855 35.016 315.715 34.766 315.523 cv
34.516 315.34 34.324 315.109 34.191 314.832 cv
34.059 314.559 33.992 314.246 33.992 313.891 cv
33.992 313.617 34.035 313.359 34.129 313.125 cv
34.215 312.891 34.348 312.676 34.523 312.48 cv
34.691 312.285 34.902 312.102 35.156 311.926 cv
35.406 311.758 35.691 311.594 36.008 311.437 cv
35.734 311.297 35.492 311.148 35.281 310.988 cv
35.07 310.832 34.891 310.66 34.746 310.473 cv
34.598 310.289 34.488 310.094 34.414 309.883 cv
34.336 309.676 34.297 309.445 34.301 309.195 cv
34.297 308.887 34.352 308.594 34.469 308.32 cv
34.578 308.051 34.75 307.816 34.977 307.613 cv
35.203 307.414 35.488 307.254 35.84 307.137 cv
36.184 307.02 36.594 306.961 37.063 306.961 cv
37.508 306.961 37.895 307.016 38.223 307.121 cv
38.551 307.23 38.82 307.375 39.031 307.559 cv
39.242 307.746 39.398 307.965 39.504 308.215 cv
39.602 308.465 39.652 308.734 39.656 309.023 cv
39.652 309.258 39.613 309.484 39.543 309.695 cv
39.465 309.914 39.355 310.117 39.207 310.305 cv
39.059 310.5 38.879 310.68 38.668 310.844 cv
38.457 311.016 38.215 311.172 37.941 311.312 cv
38.262 311.477 38.547 311.641 38.805 311.809 cv
39.055 311.977 39.27 312.156 39.445 312.352 cv
39.613 312.547 39.742 312.754 39.836 312.969 cv
39.922 313.187 39.969 313.426 39.969 313.684 cv
cp
38.488 309.133 mo
38.484 308.945 38.453 308.77 38.387 308.613 cv
38.32 308.457 38.223 308.324 38.098 308.215 cv
37.969 308.105 37.809 308.023 37.621 307.965 cv
37.426 307.91 37.211 307.883 36.973 307.879 cv
36.477 307.883 36.102 307.992 35.852 308.215 cv
35.594 308.441 35.469 308.75 35.473 309.133 cv
35.469 309.312 35.5 309.477 35.563 309.629 cv
35.625 309.785 35.719 309.93 35.852 310.066 cv
35.977 310.203 36.141 310.336 36.344 310.465 cv
36.539 310.598 36.777 310.734 37.055 310.875 cv
37.516 310.641 37.871 310.379 38.117 310.086 cv
38.363 309.801 38.484 309.484 38.488 309.133 cv
cp
38.777 313.809 mo
38.773 313.602 38.734 313.41 38.66 313.238 cv
38.578 313.07 38.461 312.91 38.305 312.758 cv
38.148 312.609 37.949 312.465 37.715 312.324 cv
37.477 312.187 37.207 312.043 36.898 311.891 cv
36.609 312.035 36.355 312.176 36.141 312.316 cv
35.922 312.457 35.742 312.605 35.605 312.754 cv
35.465 312.91 35.359 313.066 35.289 313.23 cv
35.215 313.398 35.18 313.582 35.184 313.781 cv
35.18 314.227 35.332 314.57 35.641 314.809 cv
35.941 315.055 36.395 315.176 37 315.172 cv
37.582 315.176 38.027 315.055 38.328 314.805 cv
38.625 314.562 38.773 314.23 38.777 313.809 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
26.328 261.91 mo
40.519 261.91 li
40.519 279 li
26.328 279 li
cp
0 0 0 0 cmyk
ef
32.707 274.816 mo
32.703 274.906 32.695 274.977 32.684 275.035 cv
32.668 275.098 32.648 275.148 32.629 275.18 cv
32.605 275.219 32.582 275.242 32.551 275.258 cv
32.52 275.273 32.488 275.281 32.461 275.281 cv
27.824 275.281 li
27.789 275.281 27.762 275.273 27.734 275.258 cv
27.707 275.242 27.68 275.219 27.656 275.18 cv
27.629 275.148 27.609 275.098 27.598 275.035 cv
27.582 274.977 27.574 274.906 27.578 274.816 cv
27.574 274.738 27.582 274.664 27.598 274.602 cv
27.609 274.543 27.625 274.496 27.648 274.457 cv
27.664 274.422 27.691 274.391 27.723 274.367 cv
27.754 274.348 27.785 274.34 27.824 274.336 cv
29.676 274.336 li
29.676 267.59 li
27.961 268.609 li
27.871 268.66 27.801 268.687 27.754 268.695 cv
27.699 268.703 27.656 268.695 27.625 268.664 cv
27.59 268.637 27.57 268.586 27.559 268.516 cv
27.547 268.449 27.539 268.363 27.543 268.254 cv
27.539 268.18 27.543 268.113 27.555 268.055 cv
27.559 268.004 27.57 267.957 27.586 267.918 cv
27.598 267.883 27.617 267.852 27.641 267.824 cv
27.664 267.797 27.695 267.77 27.742 267.742 cv
29.785 266.43 li
29.801 266.418 29.82 266.406 29.852 266.398 cv
29.875 266.391 29.91 266.383 29.957 266.371 cv
29.996 266.363 30.047 266.355 30.102 266.352 cv
30.156 266.352 30.223 266.352 30.309 266.348 cv
30.414 266.352 30.508 266.355 30.582 266.363 cv
30.652 266.371 30.707 266.387 30.754 266.402 cv
30.793 266.422 30.82 266.441 30.836 266.465 cv
30.844 266.492 30.852 266.516 30.855 266.539 cv
30.855 274.336 li
32.461 274.336 li
32.496 274.34 32.531 274.348 32.563 274.367 cv
32.594 274.391 32.617 274.422 32.641 274.457 cv
32.656 274.496 32.672 274.543 32.688 274.602 cv
32.695 274.664 32.703 274.738 32.707 274.816 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.059 270.824 mo
40.055 271.508 40.004 272.129 39.898 272.691 cv
39.789 273.254 39.609 273.738 39.363 274.141 cv
39.109 274.547 38.781 274.859 38.383 275.078 cv
37.977 275.301 37.484 275.41 36.898 275.41 cv
36.34 275.41 35.867 275.312 35.488 275.113 cv
35.105 274.918 34.801 274.625 34.566 274.238 cv
34.332 273.852 34.164 273.379 34.07 272.812 cv
33.969 272.25 33.922 271.602 33.922 270.867 cv
33.922 270.195 33.977 269.574 34.086 269.008 cv
34.195 268.445 34.371 267.961 34.621 267.555 cv
34.863 267.152 35.188 266.84 35.594 266.613 cv
35.992 266.395 36.488 266.281 37.078 266.281 cv
37.637 266.281 38.109 266.383 38.492 266.578 cv
38.875 266.781 39.18 267.074 39.414 267.457 cv
39.645 267.848 39.813 268.32 39.91 268.883 cv
40.008 269.445 40.055 270.094 40.059 270.824 cv
cp
38.852 270.906 mo
38.848 270.465 38.832 270.066 38.805 269.715 cv
38.77 269.363 38.723 269.055 38.664 268.785 cv
38.598 268.516 38.52 268.285 38.422 268.09 cv
38.324 267.898 38.207 267.738 38.07 267.609 cv
37.93 267.484 37.77 267.391 37.598 267.332 cv
37.418 267.277 37.223 267.25 37.008 267.246 cv
36.617 267.25 36.301 267.34 36.063 267.523 cv
35.816 267.707 35.625 267.961 35.488 268.277 cv
35.348 268.598 35.254 268.969 35.203 269.398 cv
35.152 269.828 35.129 270.293 35.129 270.785 cv
35.129 271.449 35.16 272.012 35.23 272.473 cv
35.297 272.941 35.406 273.32 35.559 273.609 cv
35.703 273.906 35.895 274.117 36.125 274.246 cv
36.355 274.383 36.637 274.449 36.969 274.445 cv
37.223 274.449 37.445 274.41 37.641 274.324 cv
37.832 274.246 38 274.125 38.141 273.969 cv
38.281 273.816 38.395 273.633 38.488 273.418 cv
38.574 273.203 38.648 272.965 38.707 272.703 cv
38.758 272.445 38.797 272.164 38.82 271.859 cv
38.84 271.555 38.848 271.238 38.852 270.906 cv
cp
f
26.328 221.238 mo
40.519 221.238 li
40.519 238.328 li
26.328 238.328 li
cp
0 0 0 0 cmyk
ef
32.707 234.137 mo
32.703 234.227 32.695 234.297 32.684 234.355 cv
32.668 234.418 32.648 234.469 32.629 234.5 cv
32.605 234.539 32.582 234.562 32.551 234.578 cv
32.52 234.594 32.488 234.602 32.461 234.602 cv
27.824 234.602 li
27.789 234.602 27.762 234.594 27.734 234.578 cv
27.707 234.562 27.68 234.539 27.656 234.5 cv
27.629 234.469 27.609 234.418 27.598 234.355 cv
27.582 234.297 27.574 234.227 27.578 234.137 cv
27.574 234.059 27.582 233.984 27.598 233.922 cv
27.609 233.863 27.625 233.816 27.648 233.777 cv
27.664 233.742 27.691 233.711 27.723 233.687 cv
27.754 233.668 27.785 233.66 27.824 233.656 cv
29.676 233.656 li
29.676 226.91 li
27.961 227.93 li
27.871 227.98 27.801 228.008 27.754 228.016 cv
27.699 228.023 27.656 228.016 27.625 227.984 cv
27.59 227.957 27.57 227.906 27.559 227.836 cv
27.547 227.77 27.539 227.684 27.543 227.574 cv
27.539 227.5 27.543 227.434 27.555 227.375 cv
27.559 227.324 27.57 227.277 27.586 227.238 cv
27.598 227.203 27.617 227.172 27.641 227.145 cv
27.664 227.117 27.695 227.09 27.742 227.062 cv
29.785 225.75 li
29.801 225.738 29.82 225.727 29.852 225.719 cv
29.875 225.711 29.91 225.703 29.957 225.691 cv
29.996 225.684 30.047 225.676 30.102 225.672 cv
30.156 225.672 30.223 225.672 30.309 225.668 cv
30.414 225.672 30.508 225.676 30.582 225.684 cv
30.652 225.691 30.707 225.707 30.754 225.723 cv
30.793 225.742 30.82 225.762 30.836 225.785 cv
30.844 225.812 30.852 225.836 30.855 225.859 cv
30.855 233.656 li
32.461 233.656 li
32.496 233.66 32.531 233.668 32.563 233.687 cv
32.594 233.711 32.617 233.742 32.641 233.777 cv
32.656 233.816 32.672 233.863 32.688 233.922 cv
32.695 233.984 32.703 234.059 32.707 234.137 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.766 234.094 mo
39.762 234.18 39.758 234.254 39.746 234.316 cv
39.734 234.383 39.719 234.437 39.699 234.477 cv
39.676 234.523 39.648 234.555 39.617 234.57 cv
39.582 234.594 39.543 234.602 39.504 234.602 cv
34.602 234.602 li
34.539 234.602 34.48 234.594 34.434 234.578 cv
34.383 234.562 34.344 234.539 34.309 234.5 cv
34.273 234.469 34.246 234.414 34.234 234.344 cv
34.215 234.273 34.207 234.187 34.211 234.086 cv
34.207 233.996 34.211 233.918 34.219 233.848 cv
34.223 233.781 34.238 233.723 34.266 233.668 cv
34.289 233.617 34.32 233.562 34.355 233.508 cv
34.391 233.457 34.434 233.402 34.492 233.34 cv
36.266 231.516 li
36.676 231.098 37.004 230.723 37.254 230.387 cv
37.5 230.059 37.691 229.754 37.824 229.477 cv
37.957 229.203 38.043 228.953 38.09 228.727 cv
38.129 228.504 38.152 228.293 38.152 228.098 cv
38.152 227.902 38.117 227.719 38.051 227.539 cv
37.984 227.367 37.891 227.211 37.766 227.074 cv
37.641 226.945 37.484 226.84 37.297 226.758 cv
37.109 226.684 36.891 226.645 36.645 226.641 cv
36.355 226.645 36.098 226.684 35.871 226.758 cv
35.641 226.84 35.441 226.926 35.27 227.012 cv
35.098 227.105 34.953 227.187 34.836 227.266 cv
34.719 227.344 34.633 227.383 34.582 227.383 cv
34.547 227.383 34.516 227.375 34.492 227.355 cv
34.461 227.34 34.441 227.309 34.426 227.266 cv
34.41 227.227 34.395 227.172 34.387 227.102 cv
34.375 227.035 34.371 226.953 34.375 226.855 cv
34.371 226.789 34.375 226.73 34.383 226.68 cv
34.387 226.629 34.395 226.586 34.406 226.547 cv
34.414 226.512 34.43 226.477 34.449 226.445 cv
34.469 226.414 34.504 226.375 34.563 226.324 cv
34.613 226.277 34.707 226.211 34.844 226.129 cv
34.977 226.047 35.148 225.969 35.352 225.887 cv
35.555 225.809 35.777 225.738 36.023 225.684 cv
36.266 225.629 36.523 225.602 36.797 225.602 cv
37.223 225.602 37.598 225.664 37.922 225.785 cv
38.242 225.906 38.508 226.07 38.723 226.281 cv
38.934 226.492 39.094 226.738 39.199 227.012 cv
39.305 227.293 39.359 227.59 39.359 227.902 cv
39.359 228.191 39.332 228.473 39.281 228.75 cv
39.23 229.035 39.125 229.34 38.965 229.664 cv
38.801 229.992 38.566 230.355 38.262 230.754 cv
37.953 231.156 37.547 231.617 37.043 232.133 cv
35.637 233.602 li
39.496 233.602 li
39.527 233.605 39.563 233.617 39.602 233.633 cv
39.633 233.656 39.664 233.687 39.691 233.727 cv
39.715 233.77 39.734 233.82 39.746 233.879 cv
39.758 233.945 39.762 234.016 39.766 234.094 cv
cp
f
26.328 180.57 mo
40.519 180.57 li
40.519 197.66 li
26.328 197.66 li
cp
0 0 0 0 cmyk
ef
32.707 193.457 mo
32.703 193.547 32.695 193.617 32.684 193.676 cv
32.668 193.738 32.648 193.789 32.629 193.82 cv
32.605 193.859 32.582 193.883 32.551 193.898 cv
32.52 193.914 32.488 193.922 32.461 193.922 cv
27.824 193.922 li
27.789 193.922 27.762 193.914 27.734 193.898 cv
27.707 193.883 27.68 193.859 27.656 193.82 cv
27.629 193.789 27.609 193.738 27.598 193.676 cv
27.582 193.617 27.574 193.547 27.578 193.457 cv
27.574 193.379 27.582 193.305 27.598 193.242 cv
27.609 193.184 27.625 193.137 27.648 193.098 cv
27.664 193.062 27.691 193.031 27.723 193.008 cv
27.754 192.988 27.785 192.98 27.824 192.977 cv
29.676 192.977 li
29.676 186.23 li
27.961 187.25 li
27.871 187.301 27.801 187.328 27.754 187.336 cv
27.699 187.344 27.656 187.336 27.625 187.305 cv
27.59 187.277 27.57 187.227 27.559 187.156 cv
27.547 187.09 27.539 187.004 27.543 186.895 cv
27.539 186.82 27.543 186.754 27.555 186.695 cv
27.559 186.645 27.57 186.598 27.586 186.559 cv
27.598 186.523 27.617 186.492 27.641 186.465 cv
27.664 186.437 27.695 186.41 27.742 186.383 cv
29.785 185.07 li
29.801 185.059 29.82 185.047 29.852 185.039 cv
29.875 185.031 29.91 185.023 29.957 185.012 cv
29.996 185.004 30.047 184.996 30.102 184.992 cv
30.156 184.992 30.223 184.992 30.309 184.988 cv
30.414 184.992 30.508 184.996 30.582 185.004 cv
30.652 185.012 30.707 185.027 30.754 185.043 cv
30.793 185.062 30.82 185.082 30.836 185.105 cv
30.844 185.133 30.852 185.156 30.855 185.18 cv
30.855 192.977 li
32.461 192.977 li
32.496 192.98 32.531 192.988 32.563 193.008 cv
32.594 193.031 32.617 193.062 32.641 193.098 cv
32.656 193.137 32.672 193.184 32.688 193.242 cv
32.695 193.305 32.703 193.379 32.707 193.457 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.141 191.398 mo
40.137 191.551 40.113 191.672 40.07 191.758 cv
40.023 191.848 39.961 191.891 39.879 191.887 cv
38.879 191.887 li
38.879 193.75 li
38.879 193.789 38.867 193.82 38.852 193.844 cv
38.828 193.871 38.797 193.891 38.754 193.91 cv
38.703 193.926 38.641 193.937 38.57 193.949 cv
38.492 193.957 38.398 193.961 38.281 193.965 cv
38.164 193.961 38.066 193.957 37.996 193.949 cv
37.918 193.937 37.859 193.926 37.816 193.91 cv
37.77 193.891 37.738 193.871 37.723 193.844 cv
37.703 193.82 37.695 193.789 37.699 193.75 cv
37.699 191.887 li
34.07 191.887 li
34.012 191.891 33.969 191.883 33.934 191.867 cv
33.898 191.855 33.863 191.828 33.836 191.789 cv
33.805 191.754 33.785 191.703 33.773 191.633 cv
33.762 191.566 33.758 191.477 33.758 191.363 cv
33.758 191.281 33.758 191.203 33.766 191.133 cv
33.766 191.062 33.777 191 33.793 190.945 cv
33.805 190.891 33.82 190.836 33.848 190.781 cv
33.867 190.727 33.895 190.672 33.93 190.609 cv
37.09 185.223 li
37.109 185.187 37.145 185.156 37.191 185.129 cv
37.234 185.102 37.289 185.078 37.363 185.059 cv
37.43 185.043 37.516 185.031 37.621 185.02 cv
37.723 185.016 37.844 185.012 37.984 185.008 cv
38.133 185.012 38.27 185.016 38.387 185.027 cv
38.5 185.039 38.59 185.055 38.664 185.07 cv
38.73 185.09 38.785 185.113 38.824 185.145 cv
38.859 185.176 38.879 185.211 38.879 185.25 cv
38.879 190.914 li
39.879 190.914 li
39.953 190.918 40.016 190.957 40.066 191.035 cv
40.113 191.117 40.137 191.238 40.141 191.398 cv
cp
37.699 186.047 mo
37.688 186.047 li
34.836 190.914 li
37.699 190.914 li
cp
f
26.328 139.898 mo
40.519 139.898 li
40.519 156.988 li
26.328 156.988 li
cp
0 0 0 0 cmyk
ef
32.707 152.797 mo
32.703 152.887 32.695 152.957 32.684 153.016 cv
32.668 153.078 32.648 153.129 32.629 153.16 cv
32.605 153.199 32.582 153.223 32.551 153.238 cv
32.52 153.254 32.488 153.262 32.461 153.262 cv
27.824 153.262 li
27.789 153.262 27.762 153.254 27.734 153.238 cv
27.707 153.223 27.68 153.199 27.656 153.16 cv
27.629 153.129 27.609 153.078 27.598 153.016 cv
27.582 152.957 27.574 152.887 27.578 152.797 cv
27.574 152.719 27.582 152.645 27.598 152.582 cv
27.609 152.523 27.625 152.477 27.648 152.437 cv
27.664 152.402 27.691 152.371 27.723 152.348 cv
27.754 152.328 27.785 152.32 27.824 152.316 cv
29.676 152.316 li
29.676 145.57 li
27.961 146.59 li
27.871 146.641 27.801 146.668 27.754 146.676 cv
27.699 146.684 27.656 146.676 27.625 146.645 cv
27.59 146.617 27.57 146.566 27.559 146.496 cv
27.547 146.43 27.539 146.344 27.543 146.234 cv
27.539 146.16 27.543 146.094 27.555 146.035 cv
27.559 145.984 27.57 145.937 27.586 145.898 cv
27.598 145.863 27.617 145.832 27.641 145.805 cv
27.664 145.777 27.695 145.75 27.742 145.723 cv
29.785 144.41 li
29.801 144.398 29.82 144.387 29.852 144.379 cv
29.875 144.371 29.91 144.363 29.957 144.352 cv
29.996 144.344 30.047 144.336 30.102 144.332 cv
30.156 144.332 30.223 144.332 30.309 144.328 cv
30.414 144.332 30.508 144.336 30.582 144.344 cv
30.652 144.352 30.707 144.367 30.754 144.383 cv
30.793 144.402 30.82 144.422 30.836 144.445 cv
30.844 144.473 30.852 144.496 30.855 144.52 cv
30.855 152.316 li
32.461 152.316 li
32.496 152.32 32.531 152.328 32.563 152.348 cv
32.594 152.371 32.617 152.402 32.641 152.437 cv
32.656 152.477 32.672 152.523 32.688 152.582 cv
32.695 152.645 32.703 152.719 32.707 152.797 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.992 150.391 mo
39.992 150.781 39.93 151.16 39.813 151.52 cv
39.688 151.887 39.504 152.203 39.262 152.477 cv
39.012 152.754 38.699 152.977 38.324 153.141 cv
37.941 153.309 37.496 153.391 36.98 153.391 cv
36.609 153.391 36.281 153.348 36 153.254 cv
35.715 153.168 35.469 153.035 35.258 152.863 cv
35.047 152.695 34.871 152.488 34.734 152.242 cv
34.594 151.996 34.48 151.715 34.398 151.398 cv
34.313 151.086 34.254 150.742 34.219 150.363 cv
34.18 149.992 34.16 149.59 34.164 149.156 cv
34.16 148.777 34.18 148.395 34.223 148.004 cv
34.262 147.621 34.336 147.246 34.441 146.879 cv
34.547 146.52 34.691 146.18 34.871 145.863 cv
35.051 145.547 35.277 145.27 35.551 145.035 cv
35.824 144.801 36.148 144.613 36.527 144.473 cv
36.906 144.336 37.348 144.27 37.852 144.266 cv
38.02 144.27 38.191 144.277 38.363 144.297 cv
38.535 144.32 38.695 144.352 38.844 144.383 cv
38.992 144.422 39.113 144.457 39.215 144.496 cv
39.313 144.535 39.379 144.57 39.414 144.594 cv
39.441 144.621 39.465 144.648 39.484 144.676 cv
39.5 144.707 39.516 144.738 39.523 144.773 cv
39.531 144.809 39.535 144.848 39.543 144.891 cv
39.543 144.934 39.547 144.988 39.551 145.051 cv
39.547 145.137 39.547 145.207 39.547 145.262 cv
39.543 145.324 39.531 145.371 39.52 145.406 cv
39.5 145.445 39.48 145.473 39.457 145.488 cv
39.43 145.508 39.398 145.516 39.359 145.516 cv
39.309 145.516 39.238 145.5 39.152 145.469 cv
39.063 145.437 38.957 145.402 38.836 145.359 cv
38.711 145.324 38.563 145.289 38.387 145.254 cv
38.211 145.227 38.008 145.211 37.777 145.207 cv
37.348 145.211 36.98 145.297 36.676 145.469 cv
36.371 145.641 36.121 145.875 35.926 146.168 cv
35.73 146.461 35.586 146.801 35.496 147.184 cv
35.398 147.574 35.344 147.977 35.336 148.395 cv
35.453 148.328 35.59 148.262 35.738 148.191 cv
35.887 148.125 36.047 148.062 36.223 148.004 cv
36.398 147.953 36.586 147.906 36.781 147.871 cv
36.977 147.84 37.188 147.824 37.414 147.82 cv
37.891 147.824 38.293 147.891 38.625 148.016 cv
38.953 148.148 39.219 148.328 39.426 148.559 cv
39.625 148.789 39.77 149.059 39.859 149.371 cv
39.945 149.684 39.992 150.023 39.992 150.391 cv
cp
38.797 150.5 mo
38.797 150.238 38.77 149.996 38.719 149.777 cv
38.664 149.562 38.574 149.379 38.453 149.223 cv
38.328 149.074 38.164 148.957 37.961 148.875 cv
37.75 148.793 37.496 148.75 37.199 148.75 cv
37.027 148.75 36.859 148.766 36.691 148.797 cv
36.52 148.828 36.355 148.871 36.199 148.918 cv
36.039 148.973 35.891 149.035 35.75 149.105 cv
35.605 149.18 35.473 149.254 35.355 149.332 cv
35.352 149.926 35.391 150.422 35.469 150.816 cv
35.543 151.215 35.652 151.531 35.797 151.77 cv
35.941 152.012 36.121 152.184 36.336 152.285 cv
36.551 152.391 36.801 152.441 37.09 152.437 cv
37.379 152.441 37.633 152.387 37.848 152.273 cv
38.063 152.168 38.238 152.02 38.383 151.832 cv
38.523 151.648 38.629 151.441 38.695 151.211 cv
38.762 150.98 38.797 150.746 38.797 150.5 cv
cp
f
26.328 99.231 mo
40.519 99.231 li
40.519 116.321 li
26.328 116.321 li
cp
0 0 0 0 cmyk
ef
32.707 112.113 mo
32.703 112.203 32.695 112.273 32.684 112.332 cv
32.668 112.395 32.648 112.445 32.629 112.477 cv
32.605 112.516 32.582 112.539 32.551 112.555 cv
32.52 112.57 32.488 112.578 32.461 112.578 cv
27.824 112.578 li
27.789 112.578 27.762 112.57 27.734 112.555 cv
27.707 112.539 27.68 112.516 27.656 112.477 cv
27.629 112.445 27.609 112.395 27.598 112.332 cv
27.582 112.273 27.574 112.203 27.578 112.113 cv
27.574 112.035 27.582 111.961 27.598 111.898 cv
27.609 111.84 27.625 111.793 27.648 111.754 cv
27.664 111.719 27.691 111.687 27.723 111.664 cv
27.754 111.645 27.785 111.637 27.824 111.633 cv
29.676 111.633 li
29.676 104.887 li
27.961 105.906 li
27.871 105.957 27.801 105.984 27.754 105.992 cv
27.699 106 27.656 105.992 27.625 105.961 cv
27.59 105.934 27.57 105.883 27.559 105.812 cv
27.547 105.746 27.539 105.66 27.543 105.551 cv
27.539 105.477 27.543 105.41 27.555 105.352 cv
27.559 105.301 27.57 105.254 27.586 105.215 cv
27.598 105.18 27.617 105.148 27.641 105.121 cv
27.664 105.094 27.695 105.066 27.742 105.039 cv
29.785 103.727 li
29.801 103.715 29.82 103.703 29.852 103.695 cv
29.875 103.687 29.91 103.68 29.957 103.668 cv
29.996 103.66 30.047 103.652 30.102 103.648 cv
30.156 103.648 30.223 103.648 30.309 103.645 cv
30.414 103.648 30.508 103.652 30.582 103.66 cv
30.652 103.668 30.707 103.684 30.754 103.699 cv
30.793 103.719 30.82 103.738 30.836 103.762 cv
30.844 103.789 30.852 103.812 30.855 103.836 cv
30.855 111.633 li
32.461 111.633 li
32.496 111.637 32.531 111.645 32.563 111.664 cv
32.594 111.687 32.617 111.719 32.641 111.754 cv
32.656 111.793 32.672 111.84 32.688 111.898 cv
32.695 111.961 32.703 112.035 32.707 112.113 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.969 110.301 mo
39.969 110.687 39.898 111.031 39.762 111.328 cv
39.625 111.633 39.43 111.883 39.172 112.086 cv
38.914 112.293 38.594 112.449 38.215 112.551 cv
37.832 112.656 37.398 112.707 36.914 112.707 cv
36.453 112.707 36.043 112.66 35.684 112.566 cv
35.32 112.473 35.016 112.332 34.766 112.141 cv
34.516 111.957 34.324 111.727 34.191 111.449 cv
34.059 111.176 33.992 110.863 33.992 110.508 cv
33.992 110.234 34.035 109.977 34.129 109.742 cv
34.215 109.508 34.348 109.293 34.523 109.098 cv
34.691 108.902 34.902 108.719 35.156 108.543 cv
35.406 108.375 35.691 108.211 36.008 108.055 cv
35.734 107.914 35.492 107.766 35.281 107.605 cv
35.07 107.449 34.891 107.277 34.746 107.09 cv
34.598 106.906 34.488 106.711 34.414 106.5 cv
34.336 106.293 34.297 106.062 34.301 105.812 cv
34.297 105.504 34.352 105.211 34.469 104.937 cv
34.578 104.668 34.75 104.434 34.977 104.23 cv
35.203 104.031 35.488 103.871 35.84 103.754 cv
36.184 103.637 36.594 103.578 37.063 103.578 cv
37.508 103.578 37.895 103.633 38.223 103.738 cv
38.551 103.848 38.82 103.992 39.031 104.176 cv
39.242 104.363 39.398 104.582 39.504 104.832 cv
39.602 105.082 39.652 105.352 39.656 105.641 cv
39.652 105.875 39.613 106.102 39.543 106.312 cv
39.465 106.531 39.355 106.734 39.207 106.922 cv
39.059 107.117 38.879 107.297 38.668 107.461 cv
38.457 107.633 38.215 107.789 37.941 107.93 cv
38.262 108.094 38.547 108.258 38.805 108.426 cv
39.055 108.594 39.27 108.773 39.445 108.969 cv
39.613 109.164 39.742 109.371 39.836 109.586 cv
39.922 109.805 39.969 110.043 39.969 110.301 cv
cp
38.488 105.75 mo
38.484 105.562 38.453 105.387 38.387 105.23 cv
38.32 105.074 38.223 104.941 38.098 104.832 cv
37.969 104.723 37.809 104.641 37.621 104.582 cv
37.426 104.527 37.211 104.5 36.973 104.496 cv
36.477 104.5 36.102 104.609 35.852 104.832 cv
35.594 105.059 35.469 105.367 35.473 105.75 cv
35.469 105.93 35.5 106.094 35.563 106.246 cv
35.625 106.402 35.719 106.547 35.852 106.684 cv
35.977 106.82 36.141 106.953 36.344 107.082 cv
36.539 107.215 36.777 107.352 37.055 107.492 cv
37.516 107.258 37.871 106.996 38.117 106.703 cv
38.363 106.418 38.484 106.102 38.488 105.75 cv
cp
38.777 110.426 mo
38.773 110.219 38.734 110.027 38.66 109.855 cv
38.578 109.687 38.461 109.527 38.305 109.375 cv
38.148 109.227 37.949 109.082 37.715 108.941 cv
37.477 108.805 37.207 108.66 36.898 108.508 cv
36.609 108.652 36.355 108.793 36.141 108.934 cv
35.922 109.074 35.742 109.223 35.605 109.371 cv
35.465 109.527 35.359 109.684 35.289 109.848 cv
35.215 110.016 35.18 110.199 35.184 110.398 cv
35.18 110.844 35.332 111.187 35.641 111.426 cv
35.941 111.672 36.395 111.793 37 111.789 cv
37.582 111.793 38.027 111.672 38.328 111.422 cv
38.625 111.18 38.773 110.848 38.777 110.426 cv
cp
f
26.328 58.559 mo
40.519 58.559 li
40.519 75.649 li
26.328 75.649 li
cp
0 0 0 0 cmyk
ef
32.688 71.391 mo
32.684 71.477 32.68 71.551 32.668 71.613 cv
32.656 71.68 32.641 71.734 32.621 71.773 cv
32.598 71.82 32.57 71.852 32.539 71.867 cv
32.504 71.891 32.465 71.898 32.426 71.898 cv
27.523 71.898 li
27.461 71.898 27.402 71.891 27.355 71.875 cv
27.305 71.859 27.266 71.836 27.23 71.797 cv
27.195 71.766 27.168 71.711 27.156 71.641 cv
27.137 71.57 27.129 71.484 27.133 71.383 cv
27.129 71.293 27.133 71.215 27.141 71.145 cv
27.145 71.078 27.16 71.02 27.188 70.965 cv
27.211 70.914 27.242 70.859 27.277 70.805 cv
27.313 70.754 27.355 70.699 27.414 70.637 cv
29.188 68.812 li
29.598 68.395 29.926 68.02 30.176 67.684 cv
30.422 67.355 30.613 67.051 30.746 66.773 cv
30.879 66.5 30.965 66.25 31.012 66.023 cv
31.051 65.801 31.074 65.59 31.074 65.395 cv
31.074 65.199 31.039 65.016 30.973 64.836 cv
30.906 64.664 30.813 64.508 30.688 64.371 cv
30.563 64.242 30.406 64.137 30.219 64.055 cv
30.031 63.98 29.813 63.941 29.566 63.937 cv
29.277 63.941 29.02 63.98 28.793 64.055 cv
28.563 64.137 28.363 64.223 28.191 64.309 cv
28.02 64.402 27.875 64.484 27.758 64.562 cv
27.641 64.641 27.555 64.68 27.504 64.68 cv
27.469 64.68 27.438 64.672 27.414 64.652 cv
27.383 64.637 27.363 64.605 27.348 64.562 cv
27.332 64.523 27.316 64.469 27.309 64.398 cv
27.297 64.332 27.293 64.25 27.297 64.152 cv
27.293 64.086 27.297 64.027 27.305 63.977 cv
27.309 63.926 27.316 63.883 27.328 63.844 cv
27.336 63.809 27.352 63.773 27.371 63.742 cv
27.391 63.711 27.426 63.672 27.484 63.621 cv
27.535 63.574 27.629 63.508 27.766 63.426 cv
27.898 63.344 28.07 63.266 28.273 63.184 cv
28.477 63.105 28.699 63.035 28.945 62.98 cv
29.188 62.926 29.445 62.898 29.719 62.898 cv
30.145 62.898 30.52 62.961 30.844 63.082 cv
31.164 63.203 31.43 63.367 31.645 63.578 cv
31.855 63.789 32.016 64.035 32.121 64.309 cv
32.227 64.59 32.281 64.887 32.281 65.199 cv
32.281 65.488 32.254 65.77 32.203 66.047 cv
32.152 66.332 32.047 66.637 31.887 66.961 cv
31.723 67.289 31.488 67.652 31.184 68.051 cv
30.875 68.453 30.469 68.914 29.965 69.43 cv
28.559 70.898 li
32.418 70.898 li
32.449 70.902 32.484 70.914 32.523 70.93 cv
32.555 70.953 32.586 70.984 32.613 71.023 cv
32.637 71.066 32.656 71.117 32.668 71.176 cv
32.68 71.242 32.684 71.312 32.688 71.391 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.059 67.441 mo
40.055 68.125 40.004 68.746 39.898 69.309 cv
39.789 69.871 39.609 70.355 39.363 70.758 cv
39.109 71.164 38.781 71.477 38.383 71.695 cv
37.977 71.918 37.484 72.027 36.898 72.027 cv
36.34 72.027 35.867 71.93 35.488 71.73 cv
35.105 71.535 34.801 71.242 34.566 70.855 cv
34.332 70.469 34.164 69.996 34.07 69.43 cv
33.969 68.867 33.922 68.219 33.922 67.484 cv
33.922 66.812 33.977 66.191 34.086 65.625 cv
34.195 65.062 34.371 64.578 34.621 64.172 cv
34.863 63.77 35.188 63.457 35.594 63.23 cv
35.992 63.012 36.488 62.898 37.078 62.898 cv
37.637 62.898 38.109 63 38.492 63.195 cv
38.875 63.398 39.18 63.691 39.414 64.074 cv
39.645 64.465 39.813 64.937 39.91 65.5 cv
40.008 66.062 40.055 66.711 40.059 67.441 cv
cp
38.852 67.523 mo
38.848 67.082 38.832 66.684 38.805 66.332 cv
38.77 65.98 38.723 65.672 38.664 65.402 cv
38.598 65.133 38.52 64.902 38.422 64.707 cv
38.324 64.516 38.207 64.355 38.07 64.227 cv
37.93 64.102 37.77 64.008 37.598 63.949 cv
37.418 63.895 37.223 63.867 37.008 63.863 cv
36.617 63.867 36.301 63.957 36.063 64.141 cv
35.816 64.324 35.625 64.578 35.488 64.895 cv
35.348 65.215 35.254 65.586 35.203 66.016 cv
35.152 66.445 35.129 66.91 35.129 67.402 cv
35.129 68.066 35.16 68.629 35.23 69.09 cv
35.297 69.559 35.406 69.937 35.559 70.227 cv
35.703 70.523 35.895 70.734 36.125 70.863 cv
36.355 71 36.637 71.066 36.969 71.062 cv
37.223 71.066 37.445 71.027 37.641 70.941 cv
37.832 70.863 38 70.742 38.141 70.586 cv
38.281 70.434 38.395 70.25 38.488 70.035 cv
38.574 69.82 38.648 69.582 38.707 69.32 cv
38.758 69.062 38.797 68.781 38.82 68.477 cv
38.84 68.172 38.848 67.855 38.852 67.523 cv
cp
f
26.328 17.891 mo
40.519 17.891 li
40.519 34.981 li
26.328 34.981 li
cp
0 0 0 0 cmyk
ef
32.688 30.711 mo
32.684 30.797 32.68 30.871 32.668 30.934 cv
32.656 31 32.641 31.055 32.621 31.094 cv
32.598 31.141 32.57 31.172 32.539 31.187 cv
32.504 31.211 32.465 31.219 32.426 31.219 cv
27.523 31.219 li
27.461 31.219 27.402 31.211 27.355 31.195 cv
27.305 31.18 27.266 31.156 27.23 31.117 cv
27.195 31.086 27.168 31.031 27.156 30.961 cv
27.137 30.891 27.129 30.805 27.133 30.703 cv
27.129 30.613 27.133 30.535 27.141 30.465 cv
27.145 30.398 27.16 30.34 27.188 30.285 cv
27.211 30.234 27.242 30.18 27.277 30.125 cv
27.313 30.074 27.355 30.02 27.414 29.957 cv
29.188 28.133 li
29.598 27.715 29.926 27.34 30.176 27.004 cv
30.422 26.676 30.613 26.371 30.746 26.094 cv
30.879 25.82 30.965 25.57 31.012 25.344 cv
31.051 25.121 31.074 24.91 31.074 24.715 cv
31.074 24.52 31.039 24.336 30.973 24.156 cv
30.906 23.984 30.813 23.828 30.688 23.691 cv
30.563 23.562 30.406 23.457 30.219 23.375 cv
30.031 23.301 29.813 23.262 29.566 23.258 cv
29.277 23.262 29.02 23.301 28.793 23.375 cv
28.563 23.457 28.363 23.543 28.191 23.629 cv
28.02 23.723 27.875 23.805 27.758 23.883 cv
27.641 23.961 27.555 24 27.504 24 cv
27.469 24 27.438 23.992 27.414 23.973 cv
27.383 23.957 27.363 23.926 27.348 23.883 cv
27.332 23.844 27.316 23.789 27.309 23.719 cv
27.297 23.652 27.293 23.57 27.297 23.473 cv
27.293 23.406 27.297 23.348 27.305 23.297 cv
27.309 23.246 27.316 23.203 27.328 23.164 cv
27.336 23.129 27.352 23.094 27.371 23.062 cv
27.391 23.031 27.426 22.992 27.484 22.941 cv
27.535 22.895 27.629 22.828 27.766 22.746 cv
27.898 22.664 28.07 22.586 28.273 22.504 cv
28.477 22.426 28.699 22.355 28.945 22.301 cv
29.188 22.246 29.445 22.219 29.719 22.219 cv
30.145 22.219 30.52 22.281 30.844 22.402 cv
31.164 22.523 31.43 22.687 31.645 22.898 cv
31.855 23.109 32.016 23.355 32.121 23.629 cv
32.227 23.91 32.281 24.207 32.281 24.52 cv
32.281 24.809 32.254 25.09 32.203 25.367 cv
32.152 25.652 32.047 25.957 31.887 26.281 cv
31.723 26.609 31.488 26.973 31.184 27.371 cv
30.875 27.773 30.469 28.234 29.965 28.75 cv
28.559 30.219 li
32.418 30.219 li
32.449 30.223 32.484 30.234 32.523 30.25 cv
32.555 30.273 32.586 30.305 32.613 30.344 cv
32.637 30.387 32.656 30.437 32.668 30.496 cv
32.68 30.562 32.684 30.633 32.688 30.711 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
39.766 30.711 mo
39.762 30.797 39.758 30.871 39.746 30.934 cv
39.734 31 39.719 31.055 39.699 31.094 cv
39.676 31.141 39.648 31.172 39.617 31.187 cv
39.582 31.211 39.543 31.219 39.504 31.219 cv
34.602 31.219 li
34.539 31.219 34.48 31.211 34.434 31.195 cv
34.383 31.18 34.344 31.156 34.309 31.117 cv
34.273 31.086 34.246 31.031 34.234 30.961 cv
34.215 30.891 34.207 30.805 34.211 30.703 cv
34.207 30.613 34.211 30.535 34.219 30.465 cv
34.223 30.398 34.238 30.34 34.266 30.285 cv
34.289 30.234 34.32 30.18 34.355 30.125 cv
34.391 30.074 34.434 30.02 34.492 29.957 cv
36.266 28.133 li
36.676 27.715 37.004 27.34 37.254 27.004 cv
37.5 26.676 37.691 26.371 37.824 26.094 cv
37.957 25.82 38.043 25.57 38.09 25.344 cv
38.129 25.121 38.152 24.91 38.152 24.715 cv
38.152 24.52 38.117 24.336 38.051 24.156 cv
37.984 23.984 37.891 23.828 37.766 23.691 cv
37.641 23.562 37.484 23.457 37.297 23.375 cv
37.109 23.301 36.891 23.262 36.645 23.258 cv
36.355 23.262 36.098 23.301 35.871 23.375 cv
35.641 23.457 35.441 23.543 35.27 23.629 cv
35.098 23.723 34.953 23.805 34.836 23.883 cv
34.719 23.961 34.633 24 34.582 24 cv
34.547 24 34.516 23.992 34.492 23.973 cv
34.461 23.957 34.441 23.926 34.426 23.883 cv
34.41 23.844 34.395 23.789 34.387 23.719 cv
34.375 23.652 34.371 23.57 34.375 23.473 cv
34.371 23.406 34.375 23.348 34.383 23.297 cv
34.387 23.246 34.395 23.203 34.406 23.164 cv
34.414 23.129 34.43 23.094 34.449 23.062 cv
34.469 23.031 34.504 22.992 34.563 22.941 cv
34.613 22.895 34.707 22.828 34.844 22.746 cv
34.977 22.664 35.148 22.586 35.352 22.504 cv
35.555 22.426 35.777 22.355 36.023 22.301 cv
36.266 22.246 36.523 22.219 36.797 22.219 cv
37.223 22.219 37.598 22.281 37.922 22.402 cv
38.242 22.523 38.508 22.687 38.723 22.898 cv
38.934 23.109 39.094 23.355 39.199 23.629 cv
39.305 23.91 39.359 24.207 39.359 24.52 cv
39.359 24.809 39.332 25.09 39.281 25.367 cv
39.23 25.652 39.125 25.957 38.965 26.281 cv
38.801 26.609 38.566 26.973 38.262 27.371 cv
37.953 27.773 37.547 28.234 37.043 28.75 cv
35.637 30.219 li
39.496 30.219 li
39.527 30.223 39.563 30.234 39.602 30.25 cv
39.633 30.273 39.664 30.305 39.691 30.344 cv
39.715 30.387 39.734 30.437 39.746 30.496 cv
39.758 30.562 39.762 30.633 39.766 30.711 cv
cp
f
56.344 496.406 mo
56.34 496.496 56.332 496.566 56.32 496.625 cv
56.305 496.687 56.285 496.738 56.266 496.77 cv
56.242 496.809 56.219 496.832 56.188 496.848 cv
56.156 496.863 56.125 496.871 56.098 496.871 cv
51.461 496.871 li
51.426 496.871 51.398 496.863 51.371 496.848 cv
51.344 496.832 51.316 496.809 51.293 496.77 cv
51.266 496.738 51.246 496.687 51.234 496.625 cv
51.219 496.566 51.211 496.496 51.215 496.406 cv
51.211 496.328 51.219 496.254 51.234 496.191 cv
51.246 496.133 51.262 496.086 51.285 496.047 cv
51.301 496.012 51.328 495.98 51.359 495.957 cv
51.391 495.937 51.422 495.93 51.461 495.926 cv
53.313 495.926 li
53.313 489.18 li
51.598 490.199 li
51.508 490.25 51.438 490.277 51.391 490.285 cv
51.336 490.293 51.293 490.285 51.262 490.254 cv
51.227 490.227 51.207 490.176 51.195 490.105 cv
51.184 490.039 51.176 489.953 51.18 489.844 cv
51.176 489.77 51.18 489.703 51.191 489.645 cv
51.195 489.594 51.207 489.547 51.223 489.508 cv
51.234 489.473 51.254 489.441 51.277 489.414 cv
51.301 489.387 51.332 489.359 51.379 489.332 cv
53.422 488.02 li
53.438 488.008 53.457 487.996 53.488 487.988 cv
53.512 487.98 53.547 487.973 53.594 487.961 cv
53.633 487.953 53.684 487.945 53.738 487.941 cv
53.793 487.941 53.859 487.941 53.945 487.937 cv
54.051 487.941 54.145 487.945 54.219 487.953 cv
54.289 487.961 54.344 487.977 54.391 487.992 cv
54.43 488.012 54.457 488.031 54.473 488.055 cv
54.48 488.082 54.488 488.105 54.492 488.129 cv
54.492 495.926 li
56.098 495.926 li
56.133 495.93 56.168 495.937 56.199 495.957 cv
56.23 495.98 56.254 496.012 56.277 496.047 cv
56.293 496.086 56.309 496.133 56.324 496.191 cv
56.332 496.254 56.34 496.328 56.344 496.406 cv
cp
f
126.816 496.363 mo
126.813 496.449 126.809 496.523 126.797 496.586 cv
126.785 496.652 126.77 496.707 126.75 496.746 cv
126.727 496.793 126.699 496.824 126.668 496.84 cv
126.633 496.863 126.594 496.871 126.555 496.871 cv
121.652 496.871 li
121.59 496.871 121.531 496.863 121.484 496.848 cv
121.434 496.832 121.395 496.809 121.359 496.77 cv
121.324 496.738 121.297 496.684 121.285 496.613 cv
121.266 496.543 121.258 496.457 121.262 496.355 cv
121.258 496.266 121.262 496.187 121.27 496.117 cv
121.273 496.051 121.289 495.992 121.316 495.937 cv
121.34 495.887 121.371 495.832 121.406 495.777 cv
121.441 495.727 121.484 495.672 121.543 495.609 cv
123.316 493.785 li
123.727 493.367 124.055 492.992 124.305 492.656 cv
124.551 492.328 124.742 492.023 124.875 491.746 cv
125.008 491.473 125.094 491.223 125.141 490.996 cv
125.18 490.773 125.203 490.562 125.203 490.367 cv
125.203 490.172 125.168 489.988 125.102 489.809 cv
125.035 489.637 124.941 489.48 124.816 489.344 cv
124.691 489.215 124.535 489.109 124.348 489.027 cv
124.16 488.953 123.941 488.914 123.695 488.91 cv
123.406 488.914 123.148 488.953 122.922 489.027 cv
122.691 489.109 122.492 489.195 122.32 489.281 cv
122.148 489.375 122.004 489.457 121.887 489.535 cv
121.77 489.613 121.684 489.652 121.633 489.652 cv
121.598 489.652 121.566 489.645 121.543 489.625 cv
121.512 489.609 121.492 489.578 121.477 489.535 cv
121.461 489.496 121.445 489.441 121.438 489.371 cv
121.426 489.305 121.422 489.223 121.426 489.125 cv
121.422 489.059 121.426 489 121.434 488.949 cv
121.438 488.898 121.445 488.855 121.457 488.816 cv
121.465 488.781 121.48 488.746 121.5 488.715 cv
121.52 488.684 121.555 488.645 121.613 488.594 cv
121.664 488.547 121.758 488.48 121.895 488.398 cv
122.027 488.316 122.199 488.238 122.402 488.156 cv
122.605 488.078 122.828 488.008 123.074 487.953 cv
123.316 487.898 123.574 487.871 123.848 487.871 cv
124.273 487.871 124.648 487.934 124.973 488.055 cv
125.293 488.176 125.559 488.34 125.773 488.551 cv
125.984 488.762 126.145 489.008 126.25 489.281 cv
126.355 489.562 126.41 489.859 126.41 490.172 cv
126.41 490.461 126.383 490.742 126.332 491.02 cv
126.281 491.305 126.176 491.609 126.016 491.934 cv
125.852 492.262 125.617 492.625 125.313 493.023 cv
125.004 493.426 124.598 493.887 124.094 494.402 cv
122.688 495.871 li
126.547 495.871 li
126.578 495.875 126.613 495.887 126.652 495.902 cv
126.684 495.926 126.715 495.957 126.742 495.996 cv
126.766 496.039 126.785 496.09 126.797 496.148 cv
126.809 496.215 126.813 496.285 126.816 496.363 cv
cp
f
197.68 494.348 mo
197.676 494.5 197.652 494.621 197.609 494.707 cv
197.563 494.797 197.5 494.84 197.418 494.836 cv
196.418 494.836 li
196.418 496.699 li
196.418 496.738 196.406 496.77 196.391 496.793 cv
196.367 496.82 196.336 496.84 196.293 496.859 cv
196.242 496.875 196.18 496.887 196.109 496.898 cv
196.031 496.906 195.938 496.91 195.82 496.914 cv
195.703 496.91 195.605 496.906 195.535 496.898 cv
195.457 496.887 195.398 496.875 195.355 496.859 cv
195.309 496.84 195.277 496.82 195.262 496.793 cv
195.242 496.77 195.234 496.738 195.238 496.699 cv
195.238 494.836 li
191.609 494.836 li
191.551 494.84 191.508 494.832 191.473 494.816 cv
191.438 494.805 191.402 494.777 191.375 494.738 cv
191.344 494.703 191.324 494.652 191.313 494.582 cv
191.301 494.516 191.297 494.426 191.297 494.312 cv
191.297 494.23 191.297 494.152 191.305 494.082 cv
191.305 494.012 191.316 493.949 191.332 493.895 cv
191.344 493.84 191.359 493.785 191.387 493.73 cv
191.406 493.676 191.434 493.621 191.469 493.559 cv
194.629 488.172 li
194.648 488.137 194.684 488.105 194.73 488.078 cv
194.773 488.051 194.828 488.027 194.902 488.008 cv
194.969 487.992 195.055 487.98 195.16 487.969 cv
195.262 487.965 195.383 487.961 195.523 487.957 cv
195.672 487.961 195.809 487.965 195.926 487.977 cv
196.039 487.988 196.129 488.004 196.203 488.02 cv
196.27 488.039 196.324 488.062 196.363 488.094 cv
196.398 488.125 196.418 488.16 196.418 488.199 cv
196.418 493.863 li
197.418 493.863 li
197.492 493.867 197.555 493.906 197.605 493.984 cv
197.652 494.066 197.676 494.187 197.68 494.348 cv
cp
195.238 488.996 mo
195.227 488.996 li
192.375 493.863 li
195.238 493.863 li
cp
f
268.023 494 mo
268.023 494.391 267.961 494.77 267.844 495.129 cv
267.719 495.496 267.535 495.812 267.293 496.086 cv
267.043 496.363 266.73 496.586 266.355 496.75 cv
265.973 496.918 265.527 497 265.012 497 cv
264.641 497 264.313 496.957 264.031 496.863 cv
263.746 496.777 263.5 496.645 263.289 496.473 cv
263.078 496.305 262.902 496.098 262.766 495.852 cv
262.625 495.605 262.512 495.324 262.43 495.008 cv
262.344 494.695 262.285 494.352 262.25 493.973 cv
262.211 493.602 262.191 493.199 262.195 492.766 cv
262.191 492.387 262.211 492.004 262.254 491.613 cv
262.293 491.23 262.367 490.855 262.473 490.488 cv
262.578 490.129 262.723 489.789 262.902 489.473 cv
263.082 489.156 263.309 488.879 263.582 488.645 cv
263.855 488.41 264.18 488.223 264.559 488.082 cv
264.938 487.945 265.379 487.879 265.883 487.875 cv
266.051 487.879 266.223 487.887 266.395 487.906 cv
266.566 487.93 266.727 487.961 266.875 487.992 cv
267.023 488.031 267.145 488.066 267.246 488.105 cv
267.344 488.145 267.41 488.18 267.445 488.203 cv
267.473 488.23 267.496 488.258 267.516 488.285 cv
267.531 488.316 267.547 488.348 267.555 488.383 cv
267.563 488.418 267.566 488.457 267.574 488.5 cv
267.574 488.543 267.578 488.598 267.582 488.66 cv
267.578 488.746 267.578 488.816 267.578 488.871 cv
267.574 488.934 267.563 488.98 267.551 489.016 cv
267.531 489.055 267.512 489.082 267.488 489.098 cv
267.461 489.117 267.43 489.125 267.391 489.125 cv
267.34 489.125 267.27 489.109 267.184 489.078 cv
267.094 489.047 266.988 489.012 266.867 488.969 cv
266.742 488.934 266.594 488.898 266.418 488.863 cv
266.242 488.836 266.039 488.82 265.809 488.816 cv
265.379 488.82 265.012 488.906 264.707 489.078 cv
264.402 489.25 264.152 489.484 263.957 489.777 cv
263.762 490.07 263.617 490.41 263.527 490.793 cv
263.43 491.184 263.375 491.586 263.367 492.004 cv
263.484 491.937 263.621 491.871 263.77 491.801 cv
263.918 491.734 264.078 491.672 264.254 491.613 cv
264.43 491.562 264.617 491.516 264.813 491.48 cv
265.008 491.449 265.219 491.434 265.445 491.43 cv
265.922 491.434 266.324 491.5 266.656 491.625 cv
266.984 491.758 267.25 491.937 267.457 492.168 cv
267.656 492.398 267.801 492.668 267.891 492.98 cv
267.977 493.293 268.023 493.633 268.023 494 cv
cp
266.828 494.109 mo
266.828 493.848 266.801 493.605 266.75 493.387 cv
266.695 493.172 266.605 492.988 266.484 492.832 cv
266.359 492.684 266.195 492.566 265.992 492.484 cv
265.781 492.402 265.527 492.359 265.23 492.359 cv
265.059 492.359 264.891 492.375 264.723 492.406 cv
264.551 492.437 264.387 492.48 264.23 492.527 cv
264.07 492.582 263.922 492.645 263.781 492.715 cv
263.637 492.789 263.504 492.863 263.387 492.941 cv
263.383 493.535 263.422 494.031 263.5 494.426 cv
263.574 494.824 263.684 495.141 263.828 495.379 cv
263.973 495.621 264.152 495.793 264.367 495.895 cv
264.582 496 264.832 496.051 265.121 496.047 cv
265.41 496.051 265.664 495.996 265.879 495.883 cv
266.094 495.777 266.27 495.629 266.414 495.441 cv
266.555 495.258 266.66 495.051 266.727 494.82 cv
266.793 494.59 266.828 494.355 266.828 494.109 cv
cp
f
338.508 494.594 mo
338.508 494.98 338.438 495.324 338.301 495.621 cv
338.164 495.926 337.969 496.176 337.711 496.379 cv
337.453 496.586 337.133 496.742 336.754 496.844 cv
336.371 496.949 335.938 497 335.453 497 cv
334.992 497 334.582 496.953 334.223 496.859 cv
333.859 496.766 333.555 496.625 333.305 496.434 cv
333.055 496.25 332.863 496.02 332.73 495.742 cv
332.598 495.469 332.531 495.156 332.531 494.801 cv
332.531 494.527 332.574 494.27 332.668 494.035 cv
332.754 493.801 332.887 493.586 333.063 493.391 cv
333.23 493.195 333.441 493.012 333.695 492.836 cv
333.945 492.668 334.23 492.504 334.547 492.348 cv
334.273 492.207 334.031 492.059 333.82 491.898 cv
333.609 491.742 333.43 491.57 333.285 491.383 cv
333.137 491.199 333.027 491.004 332.953 490.793 cv
332.875 490.586 332.836 490.355 332.84 490.105 cv
332.836 489.797 332.891 489.504 333.008 489.23 cv
333.117 488.961 333.289 488.727 333.516 488.523 cv
333.742 488.324 334.027 488.164 334.379 488.047 cv
334.723 487.93 335.133 487.871 335.602 487.871 cv
336.047 487.871 336.434 487.926 336.762 488.031 cv
337.09 488.141 337.359 488.285 337.57 488.469 cv
337.781 488.656 337.938 488.875 338.043 489.125 cv
338.141 489.375 338.191 489.645 338.195 489.934 cv
338.191 490.168 338.152 490.395 338.082 490.605 cv
338.004 490.824 337.895 491.027 337.746 491.215 cv
337.598 491.41 337.418 491.59 337.207 491.754 cv
336.996 491.926 336.754 492.082 336.48 492.223 cv
336.801 492.387 337.086 492.551 337.344 492.719 cv
337.594 492.887 337.809 493.066 337.984 493.262 cv
338.152 493.457 338.281 493.664 338.375 493.879 cv
338.461 494.098 338.508 494.336 338.508 494.594 cv
cp
337.027 490.043 mo
337.023 489.855 336.992 489.68 336.926 489.523 cv
336.859 489.367 336.762 489.234 336.637 489.125 cv
336.508 489.016 336.348 488.934 336.16 488.875 cv
335.965 488.82 335.75 488.793 335.512 488.789 cv
335.016 488.793 334.641 488.902 334.391 489.125 cv
334.133 489.352 334.008 489.66 334.012 490.043 cv
334.008 490.223 334.039 490.387 334.102 490.539 cv
334.164 490.695 334.258 490.84 334.391 490.977 cv
334.516 491.113 334.68 491.246 334.883 491.375 cv
335.078 491.508 335.316 491.645 335.594 491.785 cv
336.055 491.551 336.41 491.289 336.656 490.996 cv
336.902 490.711 337.023 490.395 337.027 490.043 cv
cp
337.316 494.719 mo
337.313 494.512 337.273 494.32 337.199 494.148 cv
337.117 493.98 337 493.82 336.844 493.668 cv
336.688 493.52 336.488 493.375 336.254 493.234 cv
336.016 493.098 335.746 492.953 335.438 492.801 cv
335.148 492.945 334.895 493.086 334.68 493.227 cv
334.461 493.367 334.281 493.516 334.145 493.664 cv
334.004 493.82 333.898 493.977 333.828 494.141 cv
333.754 494.309 333.719 494.492 333.723 494.691 cv
333.719 495.137 333.871 495.48 334.18 495.719 cv
334.48 495.965 334.934 496.086 335.539 496.082 cv
336.121 496.086 336.566 495.965 336.867 495.715 cv
337.164 495.473 337.313 495.141 337.316 494.719 cv
cp
f
405.254 496.406 mo
405.25 496.496 405.242 496.566 405.23 496.625 cv
405.215 496.687 405.195 496.738 405.176 496.77 cv
405.152 496.809 405.129 496.832 405.098 496.848 cv
405.066 496.863 405.035 496.871 405.008 496.871 cv
400.371 496.871 li
400.336 496.871 400.309 496.863 400.281 496.848 cv
400.254 496.832 400.227 496.809 400.203 496.77 cv
400.176 496.738 400.156 496.687 400.145 496.625 cv
400.129 496.566 400.121 496.496 400.125 496.406 cv
400.121 496.328 400.129 496.254 400.145 496.191 cv
400.156 496.133 400.172 496.086 400.195 496.047 cv
400.211 496.012 400.238 495.98 400.27 495.957 cv
400.301 495.937 400.332 495.93 400.371 495.926 cv
402.223 495.926 li
402.223 489.18 li
400.508 490.199 li
400.418 490.25 400.348 490.277 400.301 490.285 cv
400.246 490.293 400.203 490.285 400.172 490.254 cv
400.137 490.227 400.117 490.176 400.105 490.105 cv
400.094 490.039 400.086 489.953 400.09 489.844 cv
400.086 489.77 400.09 489.703 400.102 489.645 cv
400.105 489.594 400.117 489.547 400.133 489.508 cv
400.145 489.473 400.164 489.441 400.188 489.414 cv
400.211 489.387 400.242 489.359 400.289 489.332 cv
402.332 488.02 li
402.348 488.008 402.367 487.996 402.398 487.988 cv
402.422 487.98 402.457 487.973 402.504 487.961 cv
402.543 487.953 402.594 487.945 402.648 487.941 cv
402.703 487.941 402.77 487.941 402.855 487.937 cv
402.961 487.941 403.055 487.945 403.129 487.953 cv
403.199 487.961 403.254 487.977 403.301 487.992 cv
403.34 488.012 403.367 488.031 403.383 488.055 cv
403.391 488.082 403.398 488.105 403.402 488.129 cv
403.402 495.926 li
405.008 495.926 li
405.043 495.93 405.078 495.937 405.109 495.957 cv
405.141 495.98 405.164 496.012 405.188 496.047 cv
405.203 496.086 405.219 496.133 405.234 496.191 cv
405.242 496.254 405.25 496.328 405.254 496.406 cv
cp
f
412.609 492.414 mo
412.605 493.098 412.555 493.719 412.449 494.281 cv
412.34 494.844 412.16 495.328 411.914 495.73 cv
411.66 496.137 411.332 496.449 410.934 496.668 cv
410.527 496.891 410.035 497 409.449 497 cv
408.891 497 408.418 496.902 408.039 496.703 cv
407.656 496.508 407.352 496.215 407.117 495.828 cv
406.883 495.441 406.715 494.969 406.621 494.402 cv
406.52 493.84 406.473 493.191 406.473 492.457 cv
406.473 491.785 406.527 491.164 406.637 490.598 cv
406.746 490.035 406.922 489.551 407.172 489.145 cv
407.414 488.742 407.738 488.43 408.145 488.203 cv
408.543 487.984 409.039 487.871 409.629 487.871 cv
410.188 487.871 410.66 487.973 411.043 488.168 cv
411.426 488.371 411.73 488.664 411.965 489.047 cv
412.195 489.437 412.363 489.91 412.461 490.473 cv
412.559 491.035 412.605 491.684 412.609 492.414 cv
cp
411.402 492.496 mo
411.398 492.055 411.383 491.656 411.355 491.305 cv
411.32 490.953 411.273 490.645 411.215 490.375 cv
411.148 490.105 411.07 489.875 410.973 489.68 cv
410.875 489.488 410.758 489.328 410.621 489.199 cv
410.48 489.074 410.32 488.98 410.148 488.922 cv
409.969 488.867 409.773 488.84 409.559 488.836 cv
409.168 488.84 408.852 488.93 408.613 489.113 cv
408.367 489.297 408.176 489.551 408.039 489.867 cv
407.898 490.187 407.805 490.559 407.754 490.988 cv
407.703 491.418 407.68 491.883 407.68 492.375 cv
407.68 493.039 407.711 493.602 407.781 494.062 cv
407.848 494.531 407.957 494.91 408.109 495.199 cv
408.254 495.496 408.445 495.707 408.676 495.836 cv
408.906 495.973 409.188 496.039 409.52 496.035 cv
409.773 496.039 409.996 496 410.191 495.914 cv
410.383 495.836 410.551 495.715 410.691 495.559 cv
410.832 495.406 410.945 495.223 411.039 495.008 cv
411.125 494.793 411.199 494.555 411.258 494.293 cv
411.309 494.035 411.348 493.754 411.371 493.449 cv
411.391 493.145 411.398 492.828 411.402 492.496 cv
cp
f
475.746 496.406 mo
475.742 496.496 475.734 496.566 475.723 496.625 cv
475.707 496.687 475.688 496.738 475.668 496.77 cv
475.645 496.809 475.621 496.832 475.59 496.848 cv
475.559 496.863 475.527 496.871 475.5 496.871 cv
470.863 496.871 li
470.828 496.871 470.801 496.863 470.773 496.848 cv
470.746 496.832 470.719 496.809 470.695 496.77 cv
470.668 496.738 470.648 496.687 470.637 496.625 cv
470.621 496.566 470.613 496.496 470.617 496.406 cv
470.613 496.328 470.621 496.254 470.637 496.191 cv
470.648 496.133 470.664 496.086 470.688 496.047 cv
470.703 496.012 470.73 495.98 470.762 495.957 cv
470.793 495.937 470.824 495.93 470.863 495.926 cv
472.715 495.926 li
472.715 489.18 li
471 490.199 li
470.91 490.25 470.84 490.277 470.793 490.285 cv
470.738 490.293 470.695 490.285 470.664 490.254 cv
470.629 490.227 470.609 490.176 470.598 490.105 cv
470.586 490.039 470.578 489.953 470.582 489.844 cv
470.578 489.77 470.582 489.703 470.594 489.645 cv
470.598 489.594 470.609 489.547 470.625 489.508 cv
470.637 489.473 470.656 489.441 470.68 489.414 cv
470.703 489.387 470.734 489.359 470.781 489.332 cv
472.824 488.02 li
472.84 488.008 472.859 487.996 472.891 487.988 cv
472.914 487.98 472.949 487.973 472.996 487.961 cv
473.035 487.953 473.086 487.945 473.141 487.941 cv
473.195 487.941 473.262 487.941 473.348 487.937 cv
473.453 487.941 473.547 487.945 473.621 487.953 cv
473.691 487.961 473.746 487.977 473.793 487.992 cv
473.832 488.012 473.859 488.031 473.875 488.055 cv
473.883 488.082 473.891 488.105 473.895 488.129 cv
473.895 495.926 li
475.5 495.926 li
475.535 495.93 475.57 495.937 475.602 495.957 cv
475.633 495.98 475.656 496.012 475.68 496.047 cv
475.695 496.086 475.711 496.133 475.727 496.191 cv
475.734 496.254 475.742 496.328 475.746 496.406 cv
cp
f
482.805 496.363 mo
482.801 496.449 482.797 496.523 482.785 496.586 cv
482.773 496.652 482.758 496.707 482.738 496.746 cv
482.715 496.793 482.688 496.824 482.656 496.84 cv
482.621 496.863 482.582 496.871 482.543 496.871 cv
477.641 496.871 li
477.578 496.871 477.52 496.863 477.473 496.848 cv
477.422 496.832 477.383 496.809 477.348 496.77 cv
477.313 496.738 477.285 496.684 477.273 496.613 cv
477.254 496.543 477.246 496.457 477.25 496.355 cv
477.246 496.266 477.25 496.187 477.258 496.117 cv
477.262 496.051 477.277 495.992 477.305 495.937 cv
477.328 495.887 477.359 495.832 477.395 495.777 cv
477.43 495.727 477.473 495.672 477.531 495.609 cv
479.305 493.785 li
479.715 493.367 480.043 492.992 480.293 492.656 cv
480.539 492.328 480.73 492.023 480.863 491.746 cv
480.996 491.473 481.082 491.223 481.129 490.996 cv
481.168 490.773 481.191 490.562 481.191 490.367 cv
481.191 490.172 481.156 489.988 481.09 489.809 cv
481.023 489.637 480.93 489.48 480.805 489.344 cv
480.68 489.215 480.523 489.109 480.336 489.027 cv
480.148 488.953 479.93 488.914 479.684 488.91 cv
479.395 488.914 479.137 488.953 478.91 489.027 cv
478.68 489.109 478.48 489.195 478.309 489.281 cv
478.137 489.375 477.992 489.457 477.875 489.535 cv
477.758 489.613 477.672 489.652 477.621 489.652 cv
477.586 489.652 477.555 489.645 477.531 489.625 cv
477.5 489.609 477.48 489.578 477.465 489.535 cv
477.449 489.496 477.434 489.441 477.426 489.371 cv
477.414 489.305 477.41 489.223 477.414 489.125 cv
477.41 489.059 477.414 489 477.422 488.949 cv
477.426 488.898 477.434 488.855 477.445 488.816 cv
477.453 488.781 477.469 488.746 477.488 488.715 cv
477.508 488.684 477.543 488.645 477.602 488.594 cv
477.652 488.547 477.746 488.48 477.883 488.398 cv
478.016 488.316 478.188 488.238 478.391 488.156 cv
478.594 488.078 478.816 488.008 479.063 487.953 cv
479.305 487.898 479.563 487.871 479.836 487.871 cv
480.262 487.871 480.637 487.934 480.961 488.055 cv
481.281 488.176 481.547 488.34 481.762 488.551 cv
481.973 488.762 482.133 489.008 482.238 489.281 cv
482.344 489.562 482.398 489.859 482.398 490.172 cv
482.398 490.461 482.371 490.742 482.32 491.02 cv
482.27 491.305 482.164 491.609 482.004 491.934 cv
481.84 492.262 481.605 492.625 481.301 493.023 cv
480.992 493.426 480.586 493.887 480.082 494.402 cv
478.676 495.871 li
482.535 495.871 li
482.566 495.875 482.602 495.887 482.641 495.902 cv
482.672 495.926 482.703 495.957 482.73 495.996 cv
482.754 496.039 482.773 496.09 482.785 496.148 cv
482.797 496.215 482.801 496.285 482.805 496.363 cv
cp
f
546.254 496.406 mo
546.25 496.496 546.242 496.566 546.23 496.625 cv
546.215 496.687 546.195 496.738 546.176 496.77 cv
546.152 496.809 546.129 496.832 546.098 496.848 cv
546.066 496.863 546.035 496.871 546.008 496.871 cv
541.371 496.871 li
541.336 496.871 541.309 496.863 541.281 496.848 cv
541.254 496.832 541.227 496.809 541.203 496.77 cv
541.176 496.738 541.156 496.687 541.145 496.625 cv
541.129 496.566 541.121 496.496 541.125 496.406 cv
541.121 496.328 541.129 496.254 541.145 496.191 cv
541.156 496.133 541.172 496.086 541.195 496.047 cv
541.211 496.012 541.238 495.98 541.27 495.957 cv
541.301 495.937 541.332 495.93 541.371 495.926 cv
543.223 495.926 li
543.223 489.18 li
541.508 490.199 li
541.418 490.25 541.348 490.277 541.301 490.285 cv
541.246 490.293 541.203 490.285 541.172 490.254 cv
541.137 490.227 541.117 490.176 541.105 490.105 cv
541.094 490.039 541.086 489.953 541.09 489.844 cv
541.086 489.77 541.09 489.703 541.102 489.645 cv
541.105 489.594 541.117 489.547 541.133 489.508 cv
541.145 489.473 541.164 489.441 541.188 489.414 cv
541.211 489.387 541.242 489.359 541.289 489.332 cv
543.332 488.02 li
543.348 488.008 543.367 487.996 543.398 487.988 cv
543.422 487.98 543.457 487.973 543.504 487.961 cv
543.543 487.953 543.594 487.945 543.648 487.941 cv
543.703 487.941 543.77 487.941 543.855 487.937 cv
543.961 487.941 544.055 487.945 544.129 487.953 cv
544.199 487.961 544.254 487.977 544.301 487.992 cv
544.34 488.012 544.367 488.031 544.383 488.055 cv
544.391 488.082 544.398 488.105 544.402 488.129 cv
544.402 495.926 li
546.008 495.926 li
546.043 495.93 546.078 495.937 546.109 495.957 cv
546.141 495.98 546.164 496.012 546.188 496.047 cv
546.203 496.086 546.219 496.133 546.234 496.191 cv
546.242 496.254 546.25 496.328 546.254 496.406 cv
cp
f
553.691 494.348 mo
553.688 494.5 553.664 494.621 553.621 494.707 cv
553.574 494.797 553.512 494.84 553.43 494.836 cv
552.43 494.836 li
552.43 496.699 li
552.43 496.738 552.418 496.77 552.402 496.793 cv
552.379 496.82 552.348 496.84 552.305 496.859 cv
552.254 496.875 552.191 496.887 552.121 496.898 cv
552.043 496.906 551.949 496.91 551.832 496.914 cv
551.715 496.91 551.617 496.906 551.547 496.898 cv
551.469 496.887 551.41 496.875 551.367 496.859 cv
551.32 496.84 551.289 496.82 551.273 496.793 cv
551.254 496.77 551.246 496.738 551.25 496.699 cv
551.25 494.836 li
547.621 494.836 li
547.563 494.84 547.52 494.832 547.484 494.816 cv
547.449 494.805 547.414 494.777 547.387 494.738 cv
547.355 494.703 547.336 494.652 547.324 494.582 cv
547.313 494.516 547.309 494.426 547.309 494.312 cv
547.309 494.23 547.309 494.152 547.316 494.082 cv
547.316 494.012 547.328 493.949 547.344 493.895 cv
547.355 493.84 547.371 493.785 547.398 493.73 cv
547.418 493.676 547.445 493.621 547.48 493.559 cv
550.641 488.172 li
550.66 488.137 550.695 488.105 550.742 488.078 cv
550.785 488.051 550.84 488.027 550.914 488.008 cv
550.98 487.992 551.066 487.98 551.172 487.969 cv
551.273 487.965 551.395 487.961 551.535 487.957 cv
551.684 487.961 551.82 487.965 551.938 487.977 cv
552.051 487.988 552.141 488.004 552.215 488.02 cv
552.281 488.039 552.336 488.062 552.375 488.094 cv
552.41 488.125 552.43 488.16 552.43 488.199 cv
552.43 493.863 li
553.43 493.863 li
553.504 493.867 553.566 493.906 553.617 493.984 cv
553.664 494.066 553.688 494.187 553.691 494.348 cv
cp
551.25 488.996 mo
551.238 488.996 li
548.387 493.863 li
551.25 493.863 li
cp
f
616.746 496.406 mo
616.742 496.496 616.734 496.566 616.723 496.625 cv
616.707 496.687 616.688 496.738 616.668 496.77 cv
616.645 496.809 616.621 496.832 616.59 496.848 cv
616.559 496.863 616.527 496.871 616.5 496.871 cv
611.863 496.871 li
611.828 496.871 611.801 496.863 611.773 496.848 cv
611.746 496.832 611.719 496.809 611.695 496.77 cv
611.668 496.738 611.648 496.687 611.637 496.625 cv
611.621 496.566 611.613 496.496 611.617 496.406 cv
611.613 496.328 611.621 496.254 611.637 496.191 cv
611.648 496.133 611.664 496.086 611.688 496.047 cv
611.703 496.012 611.73 495.98 611.762 495.957 cv
611.793 495.937 611.824 495.93 611.863 495.926 cv
613.715 495.926 li
613.715 489.18 li
612 490.199 li
611.91 490.25 611.84 490.277 611.793 490.285 cv
611.738 490.293 611.695 490.285 611.664 490.254 cv
611.629 490.227 611.609 490.176 611.598 490.105 cv
611.586 490.039 611.578 489.953 611.582 489.844 cv
611.578 489.77 611.582 489.703 611.594 489.645 cv
611.598 489.594 611.609 489.547 611.625 489.508 cv
611.637 489.473 611.656 489.441 611.68 489.414 cv
611.703 489.387 611.734 489.359 611.781 489.332 cv
613.824 488.02 li
613.84 488.008 613.859 487.996 613.891 487.988 cv
613.914 487.98 613.949 487.973 613.996 487.961 cv
614.035 487.953 614.086 487.945 614.141 487.941 cv
614.195 487.941 614.262 487.941 614.348 487.937 cv
614.453 487.941 614.547 487.945 614.621 487.953 cv
614.691 487.961 614.746 487.977 614.793 487.992 cv
614.832 488.012 614.859 488.031 614.875 488.055 cv
614.883 488.082 614.891 488.105 614.895 488.129 cv
614.895 495.926 li
616.5 495.926 li
616.535 495.93 616.57 495.937 616.602 495.957 cv
616.633 495.98 616.656 496.012 616.68 496.047 cv
616.695 496.086 616.711 496.133 616.727 496.191 cv
616.734 496.254 616.742 496.328 616.746 496.406 cv
cp
f
624.031 494 mo
624.031 494.391 623.969 494.77 623.852 495.129 cv
623.727 495.496 623.543 495.812 623.301 496.086 cv
623.051 496.363 622.738 496.586 622.363 496.75 cv
621.98 496.918 621.535 497 621.02 497 cv
620.648 497 620.32 496.957 620.039 496.863 cv
619.754 496.777 619.508 496.645 619.297 496.473 cv
619.086 496.305 618.91 496.098 618.773 495.852 cv
618.633 495.605 618.52 495.324 618.438 495.008 cv
618.352 494.695 618.293 494.352 618.258 493.973 cv
618.219 493.602 618.199 493.199 618.203 492.766 cv
618.199 492.387 618.219 492.004 618.262 491.613 cv
618.301 491.23 618.375 490.855 618.48 490.488 cv
618.586 490.129 618.73 489.789 618.91 489.473 cv
619.09 489.156 619.316 488.879 619.59 488.645 cv
619.863 488.41 620.188 488.223 620.566 488.082 cv
620.945 487.945 621.387 487.879 621.891 487.875 cv
622.059 487.879 622.23 487.887 622.402 487.906 cv
622.574 487.93 622.734 487.961 622.883 487.992 cv
623.031 488.031 623.152 488.066 623.254 488.105 cv
623.352 488.145 623.418 488.18 623.453 488.203 cv
623.48 488.23 623.504 488.258 623.523 488.285 cv
623.539 488.316 623.555 488.348 623.563 488.383 cv
623.57 488.418 623.574 488.457 623.582 488.5 cv
623.582 488.543 623.586 488.598 623.59 488.66 cv
623.586 488.746 623.586 488.816 623.586 488.871 cv
623.582 488.934 623.57 488.98 623.559 489.016 cv
623.539 489.055 623.52 489.082 623.496 489.098 cv
623.469 489.117 623.438 489.125 623.398 489.125 cv
623.348 489.125 623.277 489.109 623.191 489.078 cv
623.102 489.047 622.996 489.012 622.875 488.969 cv
622.75 488.934 622.602 488.898 622.426 488.863 cv
622.25 488.836 622.047 488.82 621.816 488.816 cv
621.387 488.82 621.02 488.906 620.715 489.078 cv
620.41 489.25 620.16 489.484 619.965 489.777 cv
619.77 490.07 619.625 490.41 619.535 490.793 cv
619.438 491.184 619.383 491.586 619.375 492.004 cv
619.492 491.937 619.629 491.871 619.777 491.801 cv
619.926 491.734 620.086 491.672 620.262 491.613 cv
620.438 491.562 620.625 491.516 620.82 491.48 cv
621.016 491.449 621.227 491.434 621.453 491.43 cv
621.93 491.434 622.332 491.5 622.664 491.625 cv
622.992 491.758 623.258 491.937 623.465 492.168 cv
623.664 492.398 623.809 492.668 623.898 492.98 cv
623.984 493.293 624.031 493.633 624.031 494 cv
cp
622.836 494.109 mo
622.836 493.848 622.809 493.605 622.758 493.387 cv
622.703 493.172 622.613 492.988 622.492 492.832 cv
622.367 492.684 622.203 492.566 622 492.484 cv
621.789 492.402 621.535 492.359 621.238 492.359 cv
621.066 492.359 620.898 492.375 620.73 492.406 cv
620.559 492.437 620.395 492.48 620.238 492.527 cv
620.078 492.582 619.93 492.645 619.789 492.715 cv
619.645 492.789 619.512 492.863 619.395 492.941 cv
619.391 493.535 619.43 494.031 619.508 494.426 cv
619.582 494.824 619.691 495.141 619.836 495.379 cv
619.98 495.621 620.16 495.793 620.375 495.895 cv
620.59 496 620.84 496.051 621.129 496.047 cv
621.418 496.051 621.672 495.996 621.887 495.883 cv
622.102 495.777 622.277 495.629 622.422 495.441 cv
622.563 495.258 622.668 495.051 622.734 494.82 cv
622.801 494.59 622.836 494.355 622.836 494.109 cv
cp
f
7.605 291.039 mo
7.707 291.043 7.793 291.047 7.863 291.055 cv
7.938 291.066 7.996 291.082 8.039 291.105 cv
8.086 291.129 8.117 291.16 8.137 291.191 cv
8.16 291.23 8.172 291.266 8.168 291.305 cv
8.168 294.141 li
16.91 294.141 li
16.953 294.141 16.988 294.152 17.02 294.172 cv
17.051 294.195 17.078 294.23 17.094 294.281 cv
17.113 294.336 17.125 294.406 17.141 294.488 cv
17.152 294.578 17.16 294.684 17.16 294.809 cv
17.16 294.934 17.152 295.043 17.141 295.129 cv
17.125 295.223 17.113 295.293 17.094 295.34 cv
17.078 295.395 17.051 295.43 17.02 295.449 cv
16.988 295.473 16.953 295.484 16.91 295.48 cv
8.168 295.48 li
8.168 298.316 li
8.172 298.363 8.16 298.398 8.137 298.43 cv
8.117 298.465 8.086 298.492 8.039 298.512 cv
7.996 298.535 7.938 298.555 7.863 298.562 cv
7.793 298.578 7.707 298.582 7.605 298.582 cv
7.508 298.582 7.422 298.578 7.344 298.562 cv
7.273 298.555 7.211 298.535 7.16 298.512 cv
7.117 298.492 7.082 298.465 7.059 298.43 cv
7.039 298.398 7.031 298.363 7.027 298.316 cv
7.027 291.305 li
7.031 291.266 7.039 291.23 7.059 291.191 cv
7.082 291.16 7.117 291.129 7.16 291.105 cv
7.211 291.082 7.273 291.066 7.344 291.055 cv
7.422 291.047 7.508 291.043 7.605 291.039 cv
cp
f
16.918 288.449 mo
16.965 288.453 17 288.465 17.023 288.48 cv
17.055 288.504 17.078 288.535 17.098 288.582 cv
17.117 288.629 17.129 288.695 17.145 288.773 cv
17.152 288.859 17.16 288.965 17.16 289.094 cv
17.16 289.223 17.152 289.328 17.145 289.406 cv
17.129 289.492 17.117 289.559 17.098 289.605 cv
17.078 289.66 17.055 289.691 17.023 289.707 cv
17 289.727 16.965 289.738 16.918 289.734 cv
9.906 289.734 li
9.871 289.738 9.84 289.727 9.805 289.707 cv
9.777 289.691 9.75 289.66 9.727 289.605 cv
9.707 289.559 9.691 289.492 9.68 289.406 cv
9.672 289.328 9.668 289.223 9.664 289.094 cv
9.668 288.965 9.672 288.859 9.68 288.773 cv
9.691 288.695 9.707 288.629 9.727 288.582 cv
9.75 288.535 9.777 288.504 9.805 288.48 cv
9.84 288.465 9.871 288.453 9.906 288.449 cv
cp
7.535 288.301 mo
7.84 288.301 8.047 288.359 8.152 288.473 cv
8.266 288.586 8.32 288.797 8.316 289.102 cv
8.32 289.406 8.266 289.613 8.156 289.723 cv
8.051 289.84 7.848 289.895 7.551 289.891 cv
7.25 289.895 7.047 289.836 6.938 289.719 cv
6.832 289.605 6.777 289.395 6.773 289.086 cv
6.777 288.785 6.832 288.582 6.934 288.469 cv
7.043 288.359 7.242 288.301 7.535 288.301 cv
cp
f
16.918 275.594 mo
16.965 275.598 17 275.605 17.023 275.625 cv
17.055 275.648 17.078 275.684 17.098 275.727 cv
17.117 275.777 17.129 275.844 17.145 275.922 cv
17.152 276.008 17.16 276.109 17.16 276.234 cv
17.16 276.367 17.152 276.477 17.145 276.555 cv
17.129 276.641 17.117 276.707 17.098 276.754 cv
17.078 276.809 17.055 276.844 17.023 276.859 cv
17 276.883 16.965 276.891 16.918 276.891 cv
12.656 276.891 li
12.363 276.891 12.094 276.918 11.848 276.969 cv
11.605 277.023 11.395 277.105 11.215 277.219 cv
11.039 277.332 10.902 277.477 10.809 277.652 cv
10.715 277.832 10.668 278.043 10.668 278.277 cv
10.668 278.574 10.785 278.871 11.012 279.168 cv
11.246 279.473 11.578 279.801 12.016 280.156 cv
16.918 280.156 li
16.965 280.16 17 280.172 17.023 280.187 cv
17.055 280.211 17.078 280.242 17.098 280.289 cv
17.117 280.34 17.129 280.406 17.145 280.488 cv
17.152 280.574 17.16 280.68 17.16 280.801 cv
17.16 280.922 17.152 281.023 17.145 281.109 cv
17.129 281.195 17.117 281.266 17.098 281.312 cv
17.078 281.367 17.055 281.398 17.023 281.414 cv
17 281.434 16.965 281.445 16.918 281.441 cv
12.656 281.441 li
12.363 281.445 12.094 281.473 11.848 281.527 cv
11.605 281.586 11.395 281.672 11.215 281.785 cv
11.039 281.898 10.902 282.043 10.809 282.215 cv
10.715 282.395 10.668 282.602 10.668 282.836 cv
10.668 283.137 10.785 283.434 11.012 283.734 cv
11.246 284.035 11.578 284.363 12.016 284.715 cv
16.918 284.715 li
16.965 284.719 17 284.73 17.023 284.746 cv
17.055 284.77 17.078 284.801 17.098 284.848 cv
17.117 284.895 17.129 284.961 17.145 285.039 cv
17.152 285.125 17.16 285.23 17.16 285.359 cv
17.16 285.488 17.152 285.594 17.145 285.672 cv
17.129 285.758 17.117 285.824 17.098 285.871 cv
17.078 285.926 17.055 285.957 17.023 285.973 cv
17 285.992 16.965 286.004 16.918 286 cv
9.906 286 li
9.867 286.004 9.832 285.996 9.801 285.977 cv
9.773 285.965 9.75 285.934 9.723 285.883 cv
9.703 285.84 9.688 285.777 9.676 285.703 cv
9.672 285.633 9.668 285.539 9.664 285.414 cv
9.668 285.305 9.672 285.207 9.676 285.129 cv
9.688 285.055 9.703 284.996 9.723 284.953 cv
9.75 284.914 9.773 284.887 9.801 284.867 cv
9.832 284.852 9.867 284.844 9.906 284.84 cv
10.832 284.84 li
10.391 284.449 10.07 284.066 9.863 283.691 cv
9.66 283.324 9.555 282.945 9.555 282.562 cv
9.555 282.273 9.59 282.016 9.656 281.781 cv
9.727 281.555 9.82 281.348 9.941 281.168 cv
10.063 280.992 10.207 280.844 10.375 280.715 cv
10.547 280.594 10.738 280.488 10.941 280.402 cv
10.691 280.172 10.477 279.949 10.297 279.738 cv
10.125 279.527 9.98 279.324 9.867 279.129 cv
9.762 278.934 9.684 278.746 9.629 278.562 cv
9.582 278.379 9.555 278.191 9.555 278.004 cv
9.555 277.551 9.637 277.172 9.793 276.867 cv
9.957 276.562 10.168 276.316 10.43 276.121 cv
10.695 275.934 11.004 275.797 11.359 275.715 cv
11.715 275.637 12.09 275.598 12.484 275.594 cv
cp
f
13.109 267.266 mo
13.313 267.27 13.453 267.32 13.539 267.418 cv
13.625 267.523 13.668 267.641 13.668 267.766 cv
13.668 272.383 li
14.059 272.387 14.41 272.348 14.723 272.266 cv
15.035 272.191 15.305 272.059 15.523 271.875 cv
15.75 271.695 15.922 271.461 16.039 271.164 cv
16.164 270.875 16.223 270.516 16.219 270.09 cv
16.223 269.758 16.195 269.461 16.137 269.199 cv
16.086 268.937 16.023 268.711 15.953 268.52 cv
15.887 268.332 15.828 268.176 15.77 268.051 cv
15.719 267.93 15.691 267.836 15.688 267.773 cv
15.691 267.738 15.699 267.707 15.715 267.676 cv
15.734 267.648 15.762 267.625 15.797 267.605 cv
15.836 267.594 15.887 267.582 15.949 267.57 cv
16.016 267.566 16.094 267.562 16.188 267.559 cv
16.258 267.562 16.316 267.566 16.363 267.566 cv
16.41 267.574 16.453 267.578 16.492 267.586 cv
16.531 267.594 16.566 267.609 16.598 267.625 cv
16.629 267.648 16.66 267.672 16.688 267.695 cv
16.719 267.727 16.766 267.809 16.828 267.949 cv
16.895 268.09 16.957 268.273 17.02 268.496 cv
17.082 268.723 17.137 268.98 17.188 269.273 cv
17.234 269.566 17.258 269.879 17.262 270.211 cv
17.258 270.789 17.18 271.297 17.02 271.727 cv
16.859 272.164 16.621 272.527 16.305 272.82 cv
15.988 273.121 15.594 273.344 15.113 273.492 cv
14.637 273.641 14.078 273.715 13.441 273.715 cv
12.844 273.715 12.305 273.641 11.82 273.484 cv
11.344 273.332 10.934 273.105 10.598 272.809 cv
10.262 272.516 10.004 272.16 9.824 271.746 cv
9.645 271.332 9.555 270.867 9.555 270.352 cv
9.555 269.801 9.645 269.332 9.82 268.945 cv
10 268.559 10.238 268.242 10.535 267.988 cv
10.836 267.742 11.188 267.559 11.586 267.441 cv
11.992 267.328 12.422 267.27 12.875 267.266 cv
cp
12.727 268.559 mo
12.051 268.543 11.52 268.695 11.137 269.012 cv
10.754 269.328 10.563 269.797 10.559 270.414 cv
10.563 270.738 10.621 271.02 10.738 271.258 cv
10.859 271.5 11.02 271.699 11.215 271.859 cv
11.414 272.023 11.645 272.148 11.906 272.234 cv
12.168 272.324 12.441 272.375 12.727 272.383 cv
cp
f
6.375 259.09 mo
7.422 259.586 8.492 259.953 9.59 260.195 cv
10.691 260.437 11.797 260.559 12.906 260.559 cv
14.023 260.559 15.133 260.437 16.227 260.187 cv
17.324 259.945 18.395 259.582 19.449 259.105 cv
19.508 259.082 19.563 259.07 19.609 259.062 cv
19.652 259.062 19.688 259.078 19.719 259.113 cv
19.746 259.152 19.766 259.207 19.781 259.281 cv
19.789 259.359 19.797 259.465 19.801 259.59 cv
19.797 259.687 19.793 259.766 19.793 259.832 cv
19.785 259.902 19.777 259.961 19.762 260.008 cv
19.746 260.059 19.727 260.102 19.707 260.129 cv
19.684 260.164 19.66 260.187 19.637 260.199 cv
19.105 260.48 18.57 260.727 18.027 260.937 cv
17.484 261.156 16.934 261.336 16.375 261.477 cv
15.813 261.625 15.246 261.734 14.672 261.805 cv
14.098 261.883 13.516 261.918 12.93 261.914 cv
12.344 261.918 11.766 261.879 11.191 261.793 cv
10.621 261.715 10.055 261.598 9.488 261.449 cv
8.926 261.301 8.371 261.121 7.824 260.91 cv
7.281 260.699 6.738 260.461 6.203 260.191 cv
6.184 260.187 6.168 260.172 6.148 260.148 cv
6.137 260.125 6.121 260.094 6.102 260.051 cv
6.09 260.012 6.078 259.953 6.066 259.879 cv
6.063 259.809 6.059 259.715 6.055 259.598 cv
6.059 259.48 6.066 259.387 6.078 259.309 cv
6.098 259.238 6.117 259.18 6.141 259.137 cv
6.168 259.098 6.203 259.074 6.242 259.066 cv
6.289 259.062 6.332 259.07 6.375 259.09 cv
cp
f
16.91 245.809 mo
16.953 245.809 16.988 245.82 17.02 245.84 cv
17.051 245.863 17.078 245.902 17.094 245.953 cv
17.113 246.008 17.125 246.074 17.141 246.156 cv
17.152 246.242 17.16 246.352 17.16 246.48 cv
17.16 246.609 17.152 246.715 17.141 246.801 cv
17.125 246.891 17.113 246.961 17.094 247.012 cv
17.078 247.062 17.051 247.098 17.02 247.117 cv
16.988 247.141 16.953 247.152 16.91 247.148 cv
8.129 247.148 li
8.129 247.164 li
16.949 250.719 li
16.988 250.734 17.02 250.758 17.043 250.785 cv
17.07 250.816 17.094 250.859 17.109 250.91 cv
17.129 250.969 17.141 251.031 17.148 251.105 cv
17.156 251.18 17.16 251.27 17.16 251.371 cv
17.16 251.484 17.152 251.578 17.145 251.652 cv
17.129 251.734 17.117 251.801 17.102 251.848 cv
17.086 251.902 17.066 251.941 17.035 251.969 cv
17.012 252 16.98 252.02 16.949 252.027 cv
8.129 255.426 li
8.129 255.434 li
16.91 255.434 li
16.953 255.437 16.988 255.445 17.02 255.465 cv
17.051 255.488 17.078 255.527 17.094 255.578 cv
17.113 255.633 17.125 255.703 17.141 255.785 cv
17.152 255.875 17.16 255.984 17.16 256.113 cv
17.16 256.246 17.152 256.352 17.141 256.437 cv
17.125 256.523 17.113 256.594 17.094 256.641 cv
17.078 256.695 17.051 256.73 17.02 256.746 cv
16.988 256.77 16.953 256.777 16.91 256.773 cv
7.637 256.773 li
7.422 256.777 7.266 256.719 7.168 256.602 cv
7.078 256.484 7.031 256.355 7.027 256.211 cv
7.027 255.387 li
7.031 255.223 7.047 255.074 7.074 254.945 cv
7.109 254.82 7.156 254.711 7.223 254.613 cv
7.293 254.52 7.379 254.437 7.48 254.375 cv
7.586 254.312 7.711 254.258 7.848 254.211 cv
15.148 251.324 li
15.148 251.285 li
7.871 248.285 li
7.719 248.23 7.586 248.168 7.473 248.098 cv
7.367 248.031 7.277 247.953 7.211 247.871 cv
7.148 247.789 7.102 247.699 7.07 247.598 cv
7.043 247.5 7.031 247.383 7.027 247.25 cv
7.027 246.387 li
7.031 246.309 7.043 246.23 7.063 246.16 cv
7.09 246.09 7.125 246.031 7.172 245.98 cv
7.223 245.93 7.285 245.887 7.359 245.855 cv
7.438 245.824 7.531 245.809 7.637 245.809 cv
cp
f
16.918 241.992 mo
16.965 241.996 17 242.008 17.023 242.023 cv
17.055 242.047 17.078 242.078 17.098 242.125 cv
17.117 242.172 17.129 242.238 17.145 242.316 cv
17.152 242.402 17.16 242.508 17.16 242.637 cv
17.16 242.766 17.152 242.871 17.145 242.949 cv
17.129 243.035 17.117 243.102 17.098 243.148 cv
17.078 243.203 17.055 243.234 17.023 243.25 cv
17 243.27 16.965 243.281 16.918 243.277 cv
9.906 243.277 li
9.871 243.281 9.84 243.27 9.805 243.25 cv
9.777 243.234 9.75 243.203 9.727 243.148 cv
9.707 243.102 9.691 243.035 9.68 242.949 cv
9.672 242.871 9.668 242.766 9.664 242.637 cv
9.668 242.508 9.672 242.402 9.68 242.316 cv
9.691 242.238 9.707 242.172 9.727 242.125 cv
9.75 242.078 9.777 242.047 9.805 242.023 cv
9.84 242.008 9.871 241.996 9.906 241.992 cv
cp
7.535 241.844 mo
7.84 241.844 8.047 241.902 8.152 242.016 cv
8.266 242.129 8.32 242.34 8.316 242.645 cv
8.32 242.949 8.266 243.156 8.156 243.266 cv
8.051 243.383 7.848 243.437 7.551 243.434 cv
7.25 243.437 7.047 243.379 6.938 243.262 cv
6.832 243.148 6.777 242.937 6.773 242.629 cv
6.777 242.328 6.832 242.125 6.934 242.012 cv
7.043 241.902 7.242 241.844 7.535 241.844 cv
cp
f
16.918 233.566 mo
16.965 233.566 17 233.578 17.023 233.598 cv
17.055 233.621 17.078 233.656 17.098 233.699 cv
17.117 233.75 17.129 233.812 17.145 233.895 cv
17.152 233.977 17.16 234.082 17.16 234.203 cv
17.16 234.336 17.152 234.441 17.145 234.523 cv
17.129 234.609 17.117 234.676 17.098 234.719 cv
17.078 234.77 17.055 234.801 17.023 234.82 cv
17 234.844 16.965 234.855 16.918 234.852 cv
12.813 234.852 li
12.414 234.855 12.094 234.887 11.848 234.945 cv
11.605 235.012 11.395 235.102 11.215 235.219 cv
11.039 235.336 10.902 235.492 10.809 235.68 cv
10.715 235.875 10.668 236.094 10.668 236.34 cv
10.668 236.664 10.785 236.988 11.012 237.309 cv
11.246 237.633 11.578 237.969 12.016 238.32 cv
16.918 238.32 li
16.965 238.324 17 238.336 17.023 238.352 cv
17.055 238.375 17.078 238.406 17.098 238.453 cv
17.117 238.5 17.129 238.566 17.145 238.645 cv
17.152 238.73 17.16 238.836 17.16 238.965 cv
17.16 239.094 17.152 239.199 17.145 239.277 cv
17.129 239.363 17.117 239.43 17.098 239.477 cv
17.078 239.531 17.055 239.562 17.023 239.578 cv
17 239.598 16.965 239.609 16.918 239.605 cv
9.906 239.605 li
9.867 239.609 9.832 239.602 9.801 239.582 cv
9.773 239.57 9.75 239.539 9.723 239.488 cv
9.703 239.445 9.688 239.383 9.676 239.309 cv
9.672 239.238 9.668 239.145 9.664 239.02 cv
9.668 238.91 9.672 238.812 9.676 238.734 cv
9.688 238.66 9.703 238.602 9.723 238.559 cv
9.75 238.52 9.773 238.492 9.801 238.473 cv
9.832 238.457 9.867 238.449 9.906 238.445 cv
10.832 238.445 li
10.391 238.055 10.07 237.66 9.863 237.266 cv
9.66 236.875 9.555 236.477 9.555 236.074 cv
9.555 235.605 9.637 235.215 9.793 234.895 cv
9.957 234.578 10.168 234.316 10.43 234.117 cv
10.695 233.922 11.004 233.781 11.359 233.695 cv
11.715 233.609 12.145 233.566 12.641 233.566 cv
cp
f
16.918 225.172 mo
16.965 225.176 17 225.184 17.023 225.199 cv
17.055 225.219 17.078 225.254 17.098 225.297 cv
17.117 225.344 17.129 225.402 17.145 225.477 cv
17.152 225.555 17.16 225.648 17.16 225.754 cv
17.16 225.879 17.152 225.977 17.145 226.047 cv
17.129 226.125 17.117 226.184 17.098 226.227 cv
17.078 226.273 17.055 226.305 17.023 226.316 cv
17 226.336 16.965 226.344 16.918 226.34 cv
15.992 226.34 li
16.438 226.742 16.758 227.137 16.957 227.523 cv
17.16 227.918 17.258 228.312 17.262 228.707 cv
17.258 229.18 17.184 229.574 17.027 229.891 cv
16.875 230.211 16.664 230.469 16.395 230.664 cv
16.129 230.867 15.816 231.008 15.457 231.09 cv
15.102 231.18 14.668 231.223 14.16 231.219 cv
9.906 231.219 li
9.867 231.223 9.832 231.215 9.801 231.191 cv
9.773 231.176 9.75 231.141 9.723 231.086 cv
9.703 231.039 9.688 230.969 9.676 230.883 cv
9.672 230.801 9.668 230.699 9.664 230.57 cv
9.668 230.449 9.672 230.344 9.676 230.258 cv
9.688 230.176 9.703 230.109 9.723 230.062 cv
9.75 230.016 9.773 229.98 9.801 229.957 cv
9.832 229.937 9.867 229.93 9.906 229.926 cv
13.988 229.926 li
14.402 229.93 14.73 229.898 14.977 229.836 cv
15.223 229.777 15.434 229.687 15.605 229.562 cv
15.785 229.445 15.918 229.289 16.012 229.098 cv
16.109 228.914 16.16 228.695 16.156 228.445 cv
16.16 228.125 16.043 227.805 15.813 227.48 cv
15.586 227.164 15.25 226.824 14.805 226.465 cv
9.906 226.465 li
9.867 226.465 9.832 226.457 9.801 226.437 cv
9.773 226.422 9.75 226.387 9.723 226.332 cv
9.703 226.281 9.688 226.215 9.676 226.133 cv
9.672 226.055 9.668 225.949 9.664 225.816 cv
9.668 225.695 9.672 225.59 9.676 225.504 cv
9.688 225.422 9.703 225.359 9.723 225.312 cv
9.75 225.27 9.773 225.234 9.801 225.207 cv
9.832 225.187 9.867 225.176 9.906 225.172 cv
cp
f
16.402 219.152 mo
16.559 219.152 16.676 219.164 16.762 219.184 cv
16.852 219.207 16.918 219.238 16.957 219.277 cv
17 219.32 17.039 219.383 17.074 219.465 cv
17.109 219.551 17.137 219.645 17.164 219.75 cv
17.184 219.859 17.203 219.973 17.223 220.09 cv
17.234 220.207 17.242 220.328 17.246 220.445 cv
17.242 220.812 17.195 221.125 17.102 221.383 cv
17.008 221.645 16.863 221.855 16.664 222.02 cv
16.473 222.187 16.227 222.309 15.926 222.383 cv
15.629 222.461 15.277 222.5 14.867 222.496 cv
10.77 222.496 li
10.77 223.477 li
10.773 223.555 10.73 223.617 10.645 223.664 cv
10.563 223.711 10.43 223.734 10.238 223.734 cv
10.145 223.734 10.063 223.73 9.992 223.715 cv
9.93 223.707 9.871 223.687 9.824 223.664 cv
9.781 223.645 9.75 223.617 9.73 223.582 cv
9.715 223.551 9.707 223.516 9.703 223.469 cv
9.703 222.496 li
8.035 222.496 li
8.004 222.5 7.969 222.488 7.934 222.469 cv
7.906 222.453 7.879 222.422 7.852 222.367 cv
7.832 222.32 7.816 222.254 7.801 222.168 cv
7.793 222.09 7.785 221.984 7.785 221.855 cv
7.785 221.727 7.793 221.621 7.801 221.539 cv
7.816 221.457 7.832 221.391 7.852 221.344 cv
7.879 221.297 7.906 221.266 7.934 221.242 cv
7.969 221.227 8.004 221.215 8.035 221.211 cv
9.703 221.211 li
9.703 219.41 li
9.707 219.371 9.715 219.336 9.73 219.301 cv
9.75 219.273 9.781 219.246 9.824 219.219 cv
9.871 219.199 9.93 219.184 9.992 219.168 cv
10.063 219.16 10.145 219.152 10.238 219.152 cv
10.43 219.152 10.563 219.176 10.645 219.223 cv
10.73 219.27 10.773 219.332 10.77 219.41 cv
10.77 221.211 li
14.684 221.211 li
15.168 221.215 15.531 221.145 15.777 220.996 cv
16.027 220.855 16.152 220.598 16.148 220.227 cv
16.152 220.113 16.141 220.008 16.113 219.91 cv
16.094 219.82 16.07 219.738 16.039 219.66 cv
16.016 219.59 15.988 219.527 15.965 219.473 cv
15.941 219.426 15.93 219.379 15.93 219.332 cv
15.93 219.309 15.938 219.281 15.949 219.258 cv
15.965 219.234 15.988 219.219 16.023 219.203 cv
16.063 219.195 16.113 219.184 16.172 219.168 cv
16.238 219.16 16.316 219.152 16.402 219.152 cv
cp
f
13.109 211.469 mo
13.313 211.473 13.453 211.523 13.539 211.621 cv
13.625 211.727 13.668 211.844 13.668 211.969 cv
13.668 216.586 li
14.059 216.59 14.41 216.551 14.723 216.469 cv
15.035 216.395 15.305 216.262 15.523 216.078 cv
15.75 215.898 15.922 215.664 16.039 215.367 cv
16.164 215.078 16.223 214.719 16.219 214.293 cv
16.223 213.961 16.195 213.664 16.137 213.402 cv
16.086 213.141 16.023 212.914 15.953 212.723 cv
15.887 212.535 15.828 212.379 15.77 212.254 cv
15.719 212.133 15.691 212.039 15.688 211.977 cv
15.691 211.941 15.699 211.91 15.715 211.879 cv
15.734 211.852 15.762 211.828 15.797 211.809 cv
15.836 211.797 15.887 211.785 15.949 211.773 cv
16.016 211.77 16.094 211.766 16.188 211.762 cv
16.258 211.766 16.316 211.77 16.363 211.77 cv
16.41 211.777 16.453 211.781 16.492 211.789 cv
16.531 211.797 16.566 211.812 16.598 211.828 cv
16.629 211.852 16.66 211.875 16.688 211.898 cv
16.719 211.93 16.766 212.012 16.828 212.152 cv
16.895 212.293 16.957 212.477 17.02 212.699 cv
17.082 212.926 17.137 213.184 17.188 213.477 cv
17.234 213.77 17.258 214.082 17.262 214.414 cv
17.258 214.992 17.18 215.5 17.02 215.93 cv
16.859 216.367 16.621 216.73 16.305 217.023 cv
15.988 217.324 15.594 217.547 15.113 217.695 cv
14.637 217.844 14.078 217.918 13.441 217.918 cv
12.844 217.918 12.305 217.844 11.82 217.687 cv
11.344 217.535 10.934 217.309 10.598 217.012 cv
10.262 216.719 10.004 216.363 9.824 215.949 cv
9.645 215.535 9.555 215.07 9.555 214.555 cv
9.555 214.004 9.645 213.535 9.82 213.148 cv
10 212.762 10.238 212.445 10.535 212.191 cv
10.836 211.945 11.188 211.762 11.586 211.645 cv
11.992 211.531 12.422 211.473 12.875 211.469 cv
cp
12.727 212.762 mo
12.051 212.746 11.52 212.898 11.137 213.215 cv
10.754 213.531 10.563 214 10.559 214.617 cv
10.563 214.941 10.621 215.223 10.738 215.461 cv
10.859 215.703 11.02 215.902 11.215 216.062 cv
11.414 216.227 11.645 216.352 11.906 216.437 cv
12.168 216.527 12.441 216.578 12.727 216.586 cv
cp
f
15.008 205.184 mo
15.371 205.187 15.691 205.254 15.969 205.383 cv
16.25 205.516 16.484 205.703 16.676 205.945 cv
16.871 206.191 17.016 206.484 17.113 206.82 cv
17.211 207.16 17.258 207.531 17.262 207.934 cv
17.258 208.187 17.238 208.426 17.203 208.648 cv
17.16 208.875 17.113 209.074 17.055 209.254 cv
16.996 209.434 16.934 209.586 16.867 209.711 cv
16.805 209.836 16.746 209.93 16.691 209.984 cv
16.641 210.043 16.57 210.082 16.473 210.105 cv
16.383 210.133 16.254 210.145 16.094 210.145 cv
15.996 210.145 15.914 210.141 15.844 210.129 cv
15.777 210.121 15.723 210.109 15.68 210.09 cv
15.641 210.078 15.609 210.055 15.59 210.027 cv
15.574 210 15.566 209.969 15.563 209.93 cv
15.566 209.875 15.602 209.789 15.668 209.676 cv
15.742 209.566 15.82 209.43 15.898 209.262 cv
15.984 209.102 16.059 208.91 16.129 208.684 cv
16.199 208.465 16.234 208.207 16.234 207.91 cv
16.234 207.695 16.211 207.496 16.164 207.316 cv
16.117 207.141 16.051 206.988 15.957 206.859 cv
15.871 206.73 15.754 206.629 15.609 206.559 cv
15.473 206.488 15.305 206.453 15.109 206.453 cv
14.914 206.453 14.75 206.504 14.613 206.605 cv
14.48 206.707 14.359 206.844 14.254 207.008 cv
14.152 207.176 14.063 207.359 13.977 207.566 cv
13.898 207.777 13.813 207.992 13.723 208.211 cv
13.637 208.43 13.535 208.645 13.422 208.855 cv
13.313 209.066 13.18 209.258 13.016 209.422 cv
12.859 209.594 12.664 209.727 12.438 209.824 cv
12.215 209.93 11.949 209.98 11.637 209.977 cv
11.363 209.98 11.098 209.926 10.844 209.816 cv
10.594 209.711 10.375 209.551 10.184 209.336 cv
9.996 209.125 9.844 208.859 9.727 208.539 cv
9.613 208.219 9.555 207.848 9.555 207.418 cv
9.555 207.234 9.57 207.047 9.602 206.859 cv
9.633 206.676 9.672 206.508 9.719 206.352 cv
9.766 206.203 9.816 206.074 9.871 205.965 cv
9.926 205.863 9.977 205.781 10.016 205.723 cv
10.063 205.672 10.098 205.637 10.125 205.613 cv
10.156 205.598 10.191 205.582 10.227 205.574 cv
10.27 205.566 10.316 205.559 10.371 205.551 cv
10.43 205.543 10.5 205.539 10.582 205.539 cv
10.672 205.539 10.75 205.543 10.813 205.551 cv
10.883 205.559 10.934 205.574 10.973 205.59 cv
11.016 205.613 11.047 205.633 11.063 205.656 cv
11.082 205.684 11.09 205.715 11.09 205.742 cv
11.09 205.793 11.063 205.859 11.004 205.945 cv
10.949 206.035 10.887 206.148 10.82 206.289 cv
10.758 206.43 10.699 206.598 10.637 206.785 cv
10.582 206.977 10.551 207.191 10.551 207.434 cv
10.551 207.656 10.578 207.848 10.625 208.012 cv
10.68 208.18 10.75 208.316 10.836 208.422 cv
10.93 208.527 11.035 208.609 11.16 208.66 cv
11.285 208.719 11.422 208.746 11.566 208.742 cv
11.77 208.746 11.938 208.695 12.074 208.59 cv
12.215 208.488 12.336 208.352 12.438 208.184 cv
12.543 208.02 12.637 207.828 12.719 207.613 cv
12.805 207.402 12.891 207.187 12.977 206.965 cv
13.066 206.746 13.168 206.527 13.273 206.309 cv
13.383 206.094 13.512 205.902 13.668 205.734 cv
13.824 205.57 14.012 205.437 14.23 205.336 cv
14.449 205.238 14.711 205.187 15.008 205.184 cv
cp
f
12.93 200.738 mo
13.516 200.738 14.098 200.777 14.672 200.848 cv
15.246 200.926 15.813 201.035 16.375 201.176 cv
16.934 201.324 17.484 201.5 18.027 201.711 cv
18.57 201.922 19.105 202.168 19.637 202.445 cv
19.66 202.465 19.684 202.488 19.707 202.516 cv
19.727 202.551 19.746 202.59 19.762 202.637 cv
19.777 202.687 19.785 202.746 19.793 202.812 cv
19.793 202.883 19.797 202.965 19.801 203.055 cv
19.797 203.191 19.789 203.297 19.781 203.371 cv
19.766 203.449 19.746 203.504 19.719 203.535 cv
19.688 203.57 19.652 203.586 19.609 203.582 cv
19.563 203.582 19.508 203.566 19.449 203.539 cv
18.398 203.062 17.328 202.703 16.23 202.457 cv
15.133 202.215 14.023 202.094 12.906 202.09 cv
11.797 202.094 10.691 202.215 9.59 202.457 cv
8.492 202.703 7.422 203.07 6.375 203.555 cv
6.332 203.578 6.289 203.586 6.242 203.578 cv
6.203 203.578 6.168 203.555 6.141 203.508 cv
6.117 203.469 6.098 203.41 6.078 203.336 cv
6.066 203.266 6.059 203.168 6.055 203.047 cv
6.059 202.937 6.063 202.848 6.066 202.773 cv
6.078 202.703 6.09 202.645 6.102 202.598 cv
6.121 202.555 6.137 202.523 6.148 202.5 cv
6.168 202.484 6.184 202.469 6.203 202.453 cv
7.27 201.922 8.367 201.5 9.488 201.195 cv
10.617 200.891 11.762 200.738 12.93 200.738 cv
cp
f
266.531 513.887 mo
266.527 513.992 266.512 514.082 266.477 514.152 cv
266.441 514.23 266.395 514.289 266.34 514.332 cv
266.281 514.383 266.219 514.418 266.152 514.434 cv
266.078 514.457 266.008 514.465 265.945 514.465 cv
265.5 514.465 li
265.359 514.465 265.238 514.453 265.133 514.422 cv
265.027 514.398 264.93 514.344 264.836 514.266 cv
264.742 514.191 264.648 514.09 264.555 513.957 cv
264.461 513.828 264.359 513.664 264.254 513.461 cv
261.18 507.723 li
261.016 507.43 260.852 507.121 260.691 506.793 cv
260.523 506.473 260.371 506.156 260.234 505.848 cv
260.219 505.848 li
260.227 506.223 260.234 506.605 260.242 506.992 cv
260.246 507.383 260.246 507.77 260.25 508.152 cv
260.25 514.238 li
260.246 514.277 260.234 514.312 260.215 514.344 cv
260.191 514.379 260.156 514.406 260.105 514.422 cv
260.051 514.441 259.98 514.453 259.898 514.469 cv
259.813 514.48 259.707 514.488 259.578 514.488 cv
259.441 514.488 259.332 514.48 259.25 514.469 cv
259.164 514.453 259.098 514.441 259.051 514.422 cv
259 514.406 258.965 514.379 258.941 514.344 cv
258.918 514.312 258.906 514.277 258.91 514.238 cv
258.91 504.934 li
258.906 504.727 258.965 504.578 259.086 504.488 cv
259.203 504.402 259.332 504.359 259.473 504.355 cv
260.133 504.355 li
260.285 504.359 260.418 504.371 260.523 504.395 cv
260.625 504.422 260.719 504.465 260.805 504.523 cv
260.887 504.586 260.965 504.668 261.047 504.773 cv
261.121 504.883 261.203 505.02 261.289 505.176 cv
263.656 509.602 li
263.801 509.875 263.941 510.141 264.078 510.395 cv
264.211 510.652 264.34 510.906 264.469 511.152 cv
264.59 511.406 264.715 511.652 264.84 511.891 cv
264.961 512.133 265.082 512.375 265.207 512.617 cv
265.215 512.617 li
265.203 512.211 265.195 511.781 265.195 511.336 cv
265.188 510.891 265.188 510.465 265.191 510.055 cv
265.191 504.582 li
265.188 504.547 265.199 504.512 265.223 504.48 cv
265.246 504.449 265.281 504.422 265.336 504.398 cv
265.383 504.375 265.453 504.359 265.539 504.348 cv
265.625 504.34 265.734 504.336 265.875 504.332 cv
265.992 504.336 266.098 504.34 266.188 504.348 cv
266.273 504.359 266.34 504.375 266.391 504.398 cv
266.438 504.422 266.473 504.449 266.496 504.48 cv
266.516 504.512 266.527 504.547 266.531 504.582 cv
cp
f
275.078 514.246 mo
275.074 514.293 275.066 514.328 275.051 514.352 cv
275.031 514.383 274.996 514.406 274.953 514.426 cv
274.906 514.445 274.848 514.457 274.773 514.473 cv
274.695 514.48 274.602 514.488 274.496 514.488 cv
274.371 514.488 274.273 514.48 274.203 514.473 cv
274.125 514.457 274.066 514.445 274.023 514.426 cv
273.977 514.406 273.945 514.383 273.934 514.352 cv
273.914 514.328 273.906 514.293 273.91 514.246 cv
273.91 513.32 li
273.508 513.766 273.113 514.086 272.727 514.285 cv
272.332 514.488 271.938 514.586 271.543 514.59 cv
271.07 514.586 270.676 514.512 270.359 514.355 cv
270.039 514.203 269.781 513.992 269.586 513.723 cv
269.383 513.457 269.242 513.145 269.16 512.785 cv
269.07 512.43 269.027 511.996 269.031 511.488 cv
269.031 507.234 li
269.027 507.195 269.035 507.16 269.059 507.129 cv
269.074 507.102 269.109 507.078 269.164 507.051 cv
269.211 507.031 269.281 507.016 269.367 507.004 cv
269.449 507 269.551 506.996 269.68 506.992 cv
269.801 506.996 269.906 507 269.992 507.004 cv
270.074 507.016 270.141 507.031 270.188 507.051 cv
270.234 507.078 270.27 507.102 270.293 507.129 cv
270.313 507.16 270.32 507.195 270.324 507.234 cv
270.324 511.316 li
270.32 511.73 270.352 512.059 270.414 512.305 cv
270.473 512.551 270.563 512.762 270.688 512.934 cv
270.805 513.113 270.961 513.246 271.152 513.34 cv
271.336 513.437 271.555 513.488 271.805 513.484 cv
272.125 513.488 272.445 513.371 272.77 513.141 cv
273.086 512.914 273.426 512.578 273.785 512.133 cv
273.785 507.234 li
273.785 507.195 273.793 507.16 273.813 507.129 cv
273.828 507.102 273.863 507.078 273.918 507.051 cv
273.969 507.031 274.035 507.016 274.117 507.004 cv
274.195 507 274.301 506.996 274.434 506.992 cv
274.555 506.996 274.66 507 274.746 507.004 cv
274.828 507.016 274.891 507.031 274.938 507.051 cv
274.98 507.078 275.016 507.102 275.043 507.129 cv
275.063 507.16 275.074 507.195 275.078 507.234 cv
cp
f
287.855 514.246 mo
287.852 514.293 287.844 514.328 287.824 514.352 cv
287.801 514.383 287.766 514.406 287.723 514.426 cv
287.672 514.445 287.605 514.457 287.527 514.473 cv
287.441 514.48 287.34 514.488 287.215 514.488 cv
287.082 514.488 286.973 514.48 286.895 514.473 cv
286.809 514.457 286.742 514.445 286.695 514.426 cv
286.641 514.406 286.605 514.383 286.59 514.352 cv
286.566 514.328 286.559 514.293 286.559 514.246 cv
286.559 509.984 li
286.559 509.691 286.531 509.422 286.48 509.176 cv
286.426 508.934 286.344 508.723 286.23 508.543 cv
286.117 508.367 285.973 508.23 285.797 508.137 cv
285.617 508.043 285.406 507.996 285.172 507.996 cv
284.875 507.996 284.578 508.113 284.281 508.34 cv
283.977 508.574 283.648 508.906 283.293 509.344 cv
283.293 514.246 li
283.289 514.293 283.277 514.328 283.262 514.352 cv
283.238 514.383 283.207 514.406 283.16 514.426 cv
283.109 514.445 283.043 514.457 282.961 514.473 cv
282.875 514.48 282.77 514.488 282.648 514.488 cv
282.527 514.488 282.426 514.48 282.34 514.473 cv
282.254 514.457 282.184 514.445 282.137 514.426 cv
282.082 514.406 282.051 514.383 282.035 514.352 cv
282.016 514.328 282.004 514.293 282.008 514.246 cv
282.008 509.984 li
282.004 509.691 281.977 509.422 281.922 509.176 cv
281.863 508.934 281.777 508.723 281.664 508.543 cv
281.551 508.367 281.406 508.23 281.234 508.137 cv
281.055 508.043 280.848 507.996 280.613 507.996 cv
280.313 507.996 280.016 508.113 279.715 508.34 cv
279.414 508.574 279.086 508.906 278.734 509.344 cv
278.734 514.246 li
278.73 514.293 278.719 514.328 278.703 514.352 cv
278.68 514.383 278.648 514.406 278.602 514.426 cv
278.555 514.445 278.488 514.457 278.41 514.473 cv
278.324 514.48 278.219 514.488 278.09 514.488 cv
277.961 514.488 277.855 514.48 277.777 514.473 cv
277.691 514.457 277.625 514.445 277.578 514.426 cv
277.523 514.406 277.492 514.383 277.477 514.352 cv
277.457 514.328 277.445 514.293 277.449 514.246 cv
277.449 507.234 li
277.445 507.195 277.453 507.16 277.473 507.129 cv
277.484 507.102 277.516 507.078 277.566 507.051 cv
277.609 507.031 277.672 507.016 277.746 507.004 cv
277.816 507 277.91 506.996 278.035 506.992 cv
278.145 506.996 278.242 507 278.32 507.004 cv
278.395 507.016 278.453 507.031 278.496 507.051 cv
278.535 507.078 278.563 507.102 278.582 507.129 cv
278.598 507.16 278.605 507.195 278.609 507.234 cv
278.609 508.16 li
279 507.719 279.383 507.398 279.758 507.191 cv
280.125 506.988 280.504 506.883 280.887 506.883 cv
281.176 506.883 281.434 506.918 281.668 506.984 cv
281.895 507.055 282.102 507.148 282.281 507.27 cv
282.457 507.391 282.605 507.535 282.734 507.703 cv
282.855 507.875 282.961 508.066 283.047 508.27 cv
283.277 508.02 283.5 507.805 283.711 507.625 cv
283.922 507.453 284.125 507.309 284.32 507.195 cv
284.516 507.09 284.703 507.012 284.887 506.957 cv
285.07 506.91 285.258 506.883 285.445 506.883 cv
285.898 506.883 286.277 506.965 286.582 507.121 cv
286.887 507.285 287.133 507.496 287.328 507.758 cv
287.516 508.023 287.652 508.332 287.734 508.687 cv
287.813 509.043 287.852 509.418 287.855 509.812 cv
cp
f
296.656 510.645 mo
296.652 511.254 296.586 511.805 296.457 512.289 cv
296.32 512.777 296.125 513.191 295.871 513.531 cv
295.613 513.875 295.297 514.137 294.926 514.316 cv
294.551 514.5 294.125 514.586 293.641 514.59 cv
293.414 514.586 293.207 514.566 293.02 514.523 cv
292.832 514.477 292.645 514.406 292.465 514.309 cv
292.277 514.211 292.098 514.086 291.918 513.934 cv
291.734 513.785 291.543 513.605 291.344 513.391 cv
291.344 514.246 li
291.344 514.293 291.332 514.328 291.313 514.355 cv
291.289 514.391 291.254 514.414 291.211 514.43 cv
291.16 514.445 291.102 514.457 291.035 514.473 cv
290.961 514.48 290.871 514.488 290.766 514.488 cv
290.656 514.488 290.57 514.48 290.5 514.473 cv
290.426 514.457 290.363 514.445 290.32 514.43 cv
290.27 514.414 290.238 514.391 290.227 514.355 cv
290.207 514.328 290.199 514.293 290.203 514.246 cv
290.203 503.836 li
290.199 503.797 290.211 503.762 290.23 503.727 cv
290.246 503.699 290.277 503.672 290.332 503.648 cv
290.379 503.629 290.445 503.613 290.531 503.602 cv
290.609 503.594 290.715 503.59 290.844 503.586 cv
290.973 503.59 291.078 503.594 291.164 503.602 cv
291.242 503.613 291.309 503.629 291.355 503.648 cv
291.402 503.672 291.434 503.699 291.457 503.727 cv
291.473 503.762 291.484 503.797 291.488 503.836 cv
291.488 508.035 li
291.695 507.824 291.898 507.645 292.094 507.5 cv
292.289 507.355 292.477 507.238 292.664 507.145 cv
292.848 507.059 293.035 506.992 293.227 506.945 cv
293.41 506.906 293.609 506.883 293.82 506.883 cv
294.324 506.883 294.758 506.984 295.125 507.187 cv
295.484 507.391 295.777 507.664 296.004 508 cv
296.227 508.344 296.395 508.742 296.5 509.199 cv
296.602 509.656 296.652 510.137 296.656 510.645 cv
cp
295.324 510.793 mo
295.32 510.437 295.293 510.09 295.242 509.75 cv
295.184 509.414 295.09 509.117 294.953 508.855 cv
294.816 508.598 294.637 508.387 294.414 508.227 cv
294.188 508.07 293.906 507.992 293.574 507.988 cv
293.406 507.992 293.242 508.016 293.082 508.059 cv
292.918 508.109 292.754 508.187 292.586 508.293 cv
292.418 508.406 292.242 508.547 292.066 508.715 cv
291.883 508.891 291.691 509.105 291.488 509.359 cv
291.488 512.156 li
291.844 512.59 292.184 512.922 292.508 513.145 cv
292.832 513.375 293.168 513.488 293.52 513.484 cv
293.84 513.488 294.117 513.41 294.352 513.25 cv
294.578 513.098 294.766 512.891 294.91 512.629 cv
295.055 512.375 295.16 512.086 295.227 511.766 cv
295.289 511.449 295.32 511.125 295.324 510.793 cv
cp
f
304.566 510.437 mo
304.563 510.641 304.512 510.781 304.414 510.867 cv
304.309 510.953 304.191 510.996 304.066 510.996 cv
299.449 510.996 li
299.445 511.387 299.484 511.738 299.566 512.051 cv
299.641 512.363 299.773 512.633 299.957 512.852 cv
300.137 513.078 300.371 513.25 300.668 513.367 cv
300.957 513.492 301.316 513.551 301.742 513.547 cv
302.074 513.551 302.371 513.523 302.633 513.465 cv
302.895 513.414 303.121 513.352 303.313 513.281 cv
303.5 513.215 303.656 513.156 303.781 513.098 cv
303.902 513.047 303.996 513.02 304.059 513.016 cv
304.094 513.02 304.125 513.027 304.156 513.043 cv
304.184 513.062 304.207 513.09 304.227 513.125 cv
304.238 513.164 304.25 513.215 304.262 513.277 cv
304.266 513.344 304.27 513.422 304.273 513.516 cv
304.27 513.586 304.266 513.645 304.266 513.691 cv
304.258 513.738 304.254 513.781 304.246 513.82 cv
304.238 513.859 304.223 513.895 304.207 513.926 cv
304.184 513.957 304.16 513.988 304.137 514.016 cv
304.105 514.047 304.023 514.094 303.883 514.156 cv
303.742 514.223 303.559 514.285 303.336 514.348 cv
303.109 514.41 302.852 514.465 302.559 514.516 cv
302.266 514.562 301.953 514.586 301.621 514.59 cv
301.043 514.586 300.535 514.508 300.105 514.348 cv
299.668 514.187 299.305 513.949 299.012 513.633 cv
298.711 513.316 298.488 512.922 298.34 512.441 cv
298.191 511.965 298.117 511.406 298.117 510.77 cv
298.117 510.172 298.191 509.633 298.348 509.148 cv
298.5 508.672 298.727 508.262 299.023 507.926 cv
299.316 507.59 299.672 507.332 300.086 507.152 cv
300.5 506.973 300.965 506.883 301.48 506.883 cv
302.031 506.883 302.5 506.973 302.887 507.148 cv
303.273 507.328 303.59 507.566 303.844 507.863 cv
304.09 508.164 304.273 508.516 304.391 508.914 cv
304.504 509.32 304.563 509.75 304.566 510.203 cv
cp
303.273 510.055 mo
303.289 509.379 303.137 508.848 302.82 508.465 cv
302.504 508.082 302.035 507.891 301.418 507.887 cv
301.094 507.891 300.813 507.949 300.574 508.066 cv
300.332 508.187 300.133 508.348 299.973 508.543 cv
299.809 508.742 299.684 508.973 299.598 509.234 cv
299.508 509.496 299.457 509.77 299.449 510.055 cv
cp
f
310.633 507.691 mo
310.629 507.809 310.629 507.906 310.625 507.98 cv
310.617 508.062 310.605 508.125 310.594 508.164 cv
310.574 508.211 310.555 508.242 310.535 508.266 cv
310.508 508.289 310.477 508.301 310.438 508.301 cv
310.395 508.301 310.344 508.289 310.285 508.266 cv
310.223 508.242 310.152 508.219 310.082 508.195 cv
310.004 508.172 309.922 508.152 309.828 508.129 cv
309.734 508.113 309.633 508.102 309.523 508.098 cv
309.391 508.102 309.262 508.129 309.141 508.176 cv
309.016 508.23 308.887 508.316 308.75 508.434 cv
308.609 508.559 308.465 508.715 308.316 508.91 cv
308.164 509.105 307.996 509.348 307.816 509.633 cv
307.816 514.246 li
307.813 514.293 307.801 514.328 307.785 514.352 cv
307.762 514.383 307.73 514.406 307.684 514.426 cv
307.637 514.445 307.57 514.457 307.492 514.473 cv
307.406 514.48 307.301 514.488 307.172 514.488 cv
307.043 514.488 306.938 514.48 306.859 514.473 cv
306.773 514.457 306.707 514.445 306.66 514.426 cv
306.605 514.406 306.574 514.383 306.559 514.352 cv
306.539 514.328 306.527 514.293 306.531 514.246 cv
306.531 507.234 li
306.527 507.195 306.535 507.16 306.555 507.129 cv
306.566 507.102 306.598 507.078 306.648 507.051 cv
306.691 507.031 306.754 507.016 306.828 507.004 cv
306.898 507 306.992 506.996 307.117 506.992 cv
307.227 506.996 307.324 507 307.402 507.004 cv
307.477 507.016 307.535 507.031 307.578 507.051 cv
307.617 507.078 307.645 507.102 307.664 507.129 cv
307.68 507.16 307.688 507.195 307.691 507.234 cv
307.691 508.254 li
307.879 507.973 308.063 507.746 308.234 507.57 cv
308.402 507.395 308.563 507.254 308.715 507.152 cv
308.863 507.051 309.012 506.98 309.16 506.941 cv
309.309 506.902 309.457 506.883 309.609 506.883 cv
309.676 506.883 309.754 506.887 309.84 506.895 cv
309.926 506.902 310.016 506.918 310.109 506.937 cv
310.203 506.961 310.285 506.984 310.363 507.008 cv
310.434 507.035 310.488 507.062 310.523 507.086 cv
310.551 507.117 310.57 507.141 310.586 507.16 cv
310.594 507.187 310.605 507.219 310.613 507.25 cv
310.621 507.289 310.625 507.34 310.629 507.41 cv
310.629 507.48 310.629 507.574 310.633 507.691 cv
cp
f
322.406 510.66 mo
322.402 511.238 322.328 511.766 322.18 512.242 cv
322.027 512.727 321.801 513.141 321.504 513.484 cv
321.203 513.836 320.828 514.105 320.383 514.297 cv
319.93 514.492 319.41 514.586 318.82 514.59 cv
318.242 514.586 317.738 514.504 317.313 514.332 cv
316.883 514.164 316.527 513.914 316.242 513.586 cv
315.953 513.258 315.738 512.863 315.602 512.395 cv
315.461 511.93 315.395 511.398 315.395 510.801 cv
315.395 510.234 315.465 509.707 315.613 509.227 cv
315.758 508.746 315.984 508.332 316.285 507.98 cv
316.582 507.633 316.953 507.363 317.402 507.172 cv
317.848 506.98 318.371 506.883 318.969 506.883 cv
319.547 506.883 320.047 506.969 320.477 507.141 cv
320.902 507.312 321.262 507.562 321.547 507.891 cv
321.832 508.219 322.047 508.617 322.191 509.082 cv
322.332 509.551 322.402 510.078 322.406 510.66 cv
cp
321.074 510.746 mo
321.07 510.371 321.035 510.012 320.969 509.672 cv
320.895 509.336 320.777 509.043 320.617 508.785 cv
320.453 508.535 320.234 508.332 319.957 508.18 cv
319.676 508.035 319.328 507.961 318.918 507.957 cv
318.531 507.961 318.203 508.027 317.93 508.16 cv
317.652 508.297 317.426 508.488 317.25 508.734 cv
317.07 508.98 316.938 509.273 316.855 509.609 cv
316.766 509.949 316.723 510.316 316.727 510.715 cv
316.723 511.102 316.758 511.465 316.832 511.801 cv
316.898 512.141 317.016 512.434 317.184 512.684 cv
317.348 512.937 317.57 513.141 317.848 513.285 cv
318.125 513.437 318.473 513.512 318.887 513.508 cv
319.262 513.512 319.59 513.441 319.871 513.305 cv
320.148 513.172 320.375 512.984 320.555 512.734 cv
320.73 512.492 320.859 512.199 320.945 511.863 cv
321.027 511.527 321.07 511.156 321.074 510.746 cv
cp
f
328.137 504.348 mo
328.133 504.449 328.129 504.527 328.121 504.586 cv
328.109 504.648 328.098 504.699 328.086 504.73 cv
328.07 504.77 328.055 504.793 328.035 504.805 cv
328.012 504.82 327.984 504.828 327.957 504.824 cv
327.918 504.828 327.871 504.816 327.82 504.789 cv
327.762 504.77 327.695 504.742 327.621 504.711 cv
327.539 504.684 327.449 504.656 327.344 504.633 cv
327.234 504.609 327.109 504.598 326.977 504.598 cv
326.781 504.598 326.617 504.629 326.484 504.691 cv
326.344 504.754 326.234 504.852 326.156 504.984 cv
326.07 505.117 326.012 505.289 325.977 505.5 cv
325.938 505.711 325.918 505.969 325.922 506.266 cv
325.922 507.031 li
327.488 507.031 li
327.527 507.035 327.563 507.043 327.594 507.059 cv
327.621 507.078 327.648 507.109 327.672 507.152 cv
327.695 507.199 327.711 507.258 327.727 507.32 cv
327.734 507.391 327.742 507.473 327.746 507.566 cv
327.742 507.758 327.719 507.891 327.676 507.973 cv
327.625 508.059 327.563 508.102 327.488 508.098 cv
325.922 508.098 li
325.922 514.246 li
325.918 514.293 325.91 514.328 325.891 514.352 cv
325.867 514.383 325.832 514.406 325.785 514.426 cv
325.734 514.445 325.668 514.457 325.586 514.473 cv
325.5 514.48 325.395 514.488 325.277 514.488 cv
325.148 514.488 325.047 514.48 324.965 514.473 cv
324.879 514.457 324.813 514.445 324.766 514.426 cv
324.715 514.406 324.68 514.383 324.66 514.352 cv
324.637 514.328 324.625 514.293 324.629 514.246 cv
324.629 508.098 li
323.641 508.098 li
323.555 508.102 323.492 508.059 323.453 507.973 cv
323.41 507.891 323.387 507.758 323.391 507.566 cv
323.387 507.473 323.395 507.391 323.406 507.32 cv
323.414 507.258 323.43 507.199 323.453 507.152 cv
323.473 507.109 323.496 507.078 323.531 507.059 cv
323.559 507.043 323.598 507.035 323.641 507.031 cv
324.629 507.031 li
324.629 506.305 li
324.625 505.82 324.672 505.402 324.766 505.047 cv
324.855 504.699 324.992 504.41 325.18 504.187 cv
325.363 503.965 325.598 503.801 325.887 503.691 cv
326.168 503.586 326.504 503.531 326.891 503.531 cv
327.066 503.531 327.242 503.551 327.418 503.582 cv
327.586 503.621 327.719 503.656 327.816 503.691 cv
327.906 503.734 327.969 503.77 328.004 503.797 cv
328.031 503.832 328.059 503.871 328.082 503.918 cv
328.102 503.969 328.113 504.031 328.125 504.098 cv
328.129 504.172 328.133 504.254 328.137 504.348 cv
cp
f
338.336 511.613 mo
338.332 512.086 338.246 512.508 338.074 512.875 cv
337.898 513.25 337.656 513.562 337.348 513.816 cv
337.039 514.074 336.676 514.266 336.258 514.395 cv
335.836 514.523 335.387 514.586 334.906 514.59 cv
334.566 514.586 334.25 514.559 333.965 514.504 cv
333.676 514.445 333.422 514.379 333.195 514.293 cv
332.969 514.215 332.777 514.129 332.625 514.035 cv
332.469 513.949 332.363 513.871 332.305 513.809 cv
332.246 513.746 332.203 513.668 332.176 513.574 cv
332.145 513.48 332.129 513.352 332.133 513.187 cv
332.129 513.074 332.133 512.98 332.148 512.902 cv
332.156 512.828 332.172 512.766 332.195 512.719 cv
332.211 512.672 332.238 512.641 332.273 512.621 cv
332.301 512.605 332.336 512.598 332.379 512.594 cv
332.449 512.598 332.551 512.641 332.688 512.727 cv
332.816 512.816 332.988 512.914 333.199 513.016 cv
333.406 513.125 333.656 513.223 333.949 513.309 cv
334.242 513.402 334.582 513.445 334.969 513.445 cv
335.258 513.445 335.523 513.406 335.766 513.328 cv
336.004 513.25 336.211 513.141 336.391 512.996 cv
336.563 512.855 336.699 512.68 336.793 512.469 cv
336.887 512.262 336.934 512.027 336.934 511.762 cv
336.934 511.48 336.867 511.234 336.738 511.027 cv
336.605 510.828 336.434 510.652 336.223 510.496 cv
336.008 510.348 335.766 510.207 335.492 510.074 cv
335.219 509.949 334.938 509.816 334.656 509.684 cv
334.367 509.551 334.09 509.406 333.82 509.242 cv
333.551 509.086 333.309 508.895 333.098 508.676 cv
332.879 508.457 332.707 508.203 332.578 507.906 cv
332.441 507.617 332.375 507.266 332.379 506.852 cv
332.375 506.434 332.453 506.059 332.609 505.727 cv
332.762 505.398 332.973 505.121 333.25 504.895 cv
333.52 504.676 333.844 504.504 334.223 504.387 cv
334.598 504.27 335.008 504.211 335.445 504.211 cv
335.664 504.211 335.887 504.23 336.117 504.27 cv
336.34 504.309 336.551 504.359 336.754 504.422 cv
336.949 504.488 337.129 504.562 337.289 504.641 cv
337.441 504.723 337.543 504.789 337.598 504.836 cv
337.645 504.891 337.68 504.93 337.695 504.953 cv
337.711 504.984 337.723 505.02 337.734 505.062 cv
337.742 505.109 337.75 505.164 337.758 505.223 cv
337.762 505.289 337.766 505.367 337.766 505.465 cv
337.766 505.559 337.762 505.645 337.754 505.715 cv
337.746 505.793 337.734 505.852 337.719 505.898 cv
337.703 505.945 337.68 505.98 337.652 506.004 cv
337.621 506.027 337.59 506.039 337.555 506.039 cv
337.496 506.039 337.406 506.004 337.285 505.934 cv
337.16 505.863 337.008 505.781 336.836 505.687 cv
336.656 505.598 336.449 505.516 336.211 505.437 cv
335.965 505.363 335.695 505.324 335.398 505.324 cv
335.117 505.324 334.871 505.363 334.664 505.437 cv
334.453 505.516 334.281 505.617 334.148 505.738 cv
334.012 505.863 333.91 506.008 333.844 506.18 cv
333.777 506.352 333.746 506.535 333.746 506.727 cv
333.746 507.012 333.809 507.254 333.938 507.453 cv
334.066 507.656 334.238 507.836 334.457 507.988 cv
334.668 508.148 334.914 508.289 335.191 508.418 cv
335.465 508.551 335.746 508.684 336.035 508.812 cv
336.32 508.945 336.602 509.09 336.875 509.246 cv
337.148 509.406 337.395 509.594 337.613 509.809 cv
337.828 510.027 338 510.281 338.137 510.574 cv
338.266 510.867 338.332 511.215 338.336 511.613 cv
cp
f
346.102 514.246 mo
346.098 514.293 346.09 514.328 346.074 514.352 cv
346.055 514.383 346.02 514.406 345.977 514.426 cv
345.93 514.445 345.871 514.457 345.797 514.473 cv
345.719 514.48 345.625 514.488 345.52 514.488 cv
345.395 514.488 345.297 514.48 345.227 514.473 cv
345.148 514.457 345.09 514.445 345.047 514.426 cv
345 514.406 344.969 514.383 344.957 514.352 cv
344.938 514.328 344.93 514.293 344.934 514.246 cv
344.934 513.32 li
344.531 513.766 344.137 514.086 343.75 514.285 cv
343.355 514.488 342.961 514.586 342.566 514.59 cv
342.094 514.586 341.699 514.512 341.383 514.355 cv
341.063 514.203 340.805 513.992 340.609 513.723 cv
340.406 513.457 340.266 513.145 340.184 512.785 cv
340.094 512.43 340.051 511.996 340.055 511.488 cv
340.055 507.234 li
340.051 507.195 340.059 507.16 340.082 507.129 cv
340.098 507.102 340.133 507.078 340.188 507.051 cv
340.234 507.031 340.305 507.016 340.391 507.004 cv
340.473 507 340.574 506.996 340.703 506.992 cv
340.824 506.996 340.93 507 341.016 507.004 cv
341.098 507.016 341.164 507.031 341.211 507.051 cv
341.258 507.078 341.293 507.102 341.316 507.129 cv
341.336 507.16 341.344 507.195 341.348 507.234 cv
341.348 511.316 li
341.344 511.73 341.375 512.059 341.438 512.305 cv
341.496 512.551 341.586 512.762 341.711 512.934 cv
341.828 513.113 341.984 513.246 342.176 513.34 cv
342.359 513.437 342.578 513.488 342.828 513.484 cv
343.148 513.488 343.469 513.371 343.793 513.141 cv
344.109 512.914 344.449 512.578 344.809 512.133 cv
344.809 507.234 li
344.809 507.195 344.816 507.16 344.836 507.129 cv
344.852 507.102 344.887 507.078 344.941 507.051 cv
344.992 507.031 345.059 507.016 345.141 507.004 cv
345.219 507 345.324 506.996 345.457 506.992 cv
345.578 506.996 345.684 507 345.77 507.004 cv
345.852 507.016 345.914 507.031 345.961 507.051 cv
346.004 507.078 346.039 507.102 346.066 507.129 cv
346.086 507.16 346.098 507.195 346.102 507.234 cv
cp
f
354.957 510.645 mo
354.953 511.254 354.887 511.805 354.758 512.289 cv
354.621 512.777 354.426 513.191 354.172 513.531 cv
353.914 513.875 353.598 514.137 353.227 514.316 cv
352.852 514.5 352.426 514.586 351.941 514.59 cv
351.715 514.586 351.508 514.566 351.32 514.523 cv
351.133 514.477 350.945 514.406 350.766 514.309 cv
350.578 514.211 350.398 514.086 350.219 513.934 cv
350.035 513.785 349.844 513.605 349.645 513.391 cv
349.645 514.246 li
349.645 514.293 349.633 514.328 349.613 514.355 cv
349.59 514.391 349.555 514.414 349.512 514.43 cv
349.461 514.445 349.402 514.457 349.336 514.473 cv
349.262 514.48 349.172 514.488 349.066 514.488 cv
348.957 514.488 348.871 514.48 348.801 514.473 cv
348.727 514.457 348.664 514.445 348.621 514.43 cv
348.57 514.414 348.539 514.391 348.527 514.355 cv
348.508 514.328 348.5 514.293 348.504 514.246 cv
348.504 503.836 li
348.5 503.797 348.512 503.762 348.531 503.727 cv
348.547 503.699 348.578 503.672 348.633 503.648 cv
348.68 503.629 348.746 503.613 348.832 503.602 cv
348.91 503.594 349.016 503.59 349.145 503.586 cv
349.273 503.59 349.379 503.594 349.465 503.602 cv
349.543 503.613 349.609 503.629 349.656 503.648 cv
349.703 503.672 349.734 503.699 349.758 503.727 cv
349.773 503.762 349.785 503.797 349.789 503.836 cv
349.789 508.035 li
349.996 507.824 350.199 507.645 350.395 507.5 cv
350.59 507.355 350.777 507.238 350.965 507.145 cv
351.148 507.059 351.336 506.992 351.527 506.945 cv
351.711 506.906 351.91 506.883 352.121 506.883 cv
352.625 506.883 353.059 506.984 353.426 507.187 cv
353.785 507.391 354.078 507.664 354.305 508 cv
354.527 508.344 354.695 508.742 354.801 509.199 cv
354.902 509.656 354.953 510.137 354.957 510.645 cv
cp
353.625 510.793 mo
353.621 510.437 353.594 510.09 353.543 509.75 cv
353.484 509.414 353.391 509.117 353.254 508.855 cv
353.117 508.598 352.938 508.387 352.715 508.227 cv
352.488 508.07 352.207 507.992 351.875 507.988 cv
351.707 507.992 351.543 508.016 351.383 508.059 cv
351.219 508.109 351.055 508.187 350.887 508.293 cv
350.719 508.406 350.543 508.547 350.367 508.715 cv
350.184 508.891 349.992 509.105 349.789 509.359 cv
349.789 512.156 li
350.145 512.59 350.484 512.922 350.809 513.145 cv
351.133 513.375 351.469 513.488 351.82 513.484 cv
352.141 513.488 352.418 513.41 352.652 513.25 cv
352.879 513.098 353.066 512.891 353.211 512.629 cv
353.355 512.375 353.461 512.086 353.527 511.766 cv
353.59 511.449 353.621 511.125 353.625 510.793 cv
cp
f
360.098 510.508 mo
360.098 510.711 360.074 510.848 360.027 510.926 cv
359.98 511.004 359.91 511.043 359.824 511.043 cv
356.566 511.043 li
356.473 511.043 356.406 511.004 356.359 510.922 cv
356.313 510.844 356.289 510.707 356.289 510.508 cv
356.289 510.312 356.313 510.172 356.359 510.094 cv
356.406 510.016 356.473 509.977 356.566 509.977 cv
359.824 509.977 li
359.863 509.977 359.902 509.984 359.938 510 cv
359.969 510.016 359.996 510.047 360.023 510.09 cv
360.043 510.137 360.063 510.191 360.078 510.258 cv
360.09 510.328 360.098 510.414 360.098 510.508 cv
cp
f
363.352 514.238 mo
363.348 514.281 363.34 514.316 363.32 514.348 cv
363.297 514.379 363.258 514.406 363.211 514.422 cv
363.156 514.441 363.09 514.453 363.004 514.469 cv
362.918 514.48 362.809 514.488 362.684 514.488 cv
362.555 514.488 362.449 514.48 362.363 514.469 cv
362.273 514.453 362.203 514.441 362.152 514.422 cv
362.098 514.406 362.063 514.379 362.043 514.348 cv
362.02 514.316 362.008 514.281 362.012 514.238 cv
362.012 504.559 li
362.008 504.52 362.02 504.484 362.047 504.449 cv
362.066 504.422 362.105 504.395 362.164 504.375 cv
362.215 504.359 362.285 504.344 362.375 504.328 cv
362.457 504.316 362.559 504.312 362.684 504.309 cv
362.809 504.312 362.918 504.316 363.004 504.328 cv
363.09 504.344 363.156 504.359 363.211 504.375 cv
363.258 504.395 363.297 504.422 363.32 504.449 cv
363.34 504.484 363.348 504.52 363.352 504.559 cv
cp
f
376.336 514.246 mo
376.332 514.293 376.324 514.328 376.305 514.352 cv
376.281 514.383 376.246 514.406 376.203 514.426 cv
376.152 514.445 376.086 514.457 376.008 514.473 cv
375.922 514.48 375.82 514.488 375.695 514.488 cv
375.563 514.488 375.453 514.48 375.375 514.473 cv
375.289 514.457 375.223 514.445 375.176 514.426 cv
375.121 514.406 375.086 514.383 375.07 514.352 cv
375.047 514.328 375.039 514.293 375.039 514.246 cv
375.039 509.984 li
375.039 509.691 375.012 509.422 374.961 509.176 cv
374.906 508.934 374.824 508.723 374.711 508.543 cv
374.598 508.367 374.453 508.23 374.277 508.137 cv
374.098 508.043 373.887 507.996 373.652 507.996 cv
373.355 507.996 373.059 508.113 372.762 508.34 cv
372.457 508.574 372.129 508.906 371.773 509.344 cv
371.773 514.246 li
371.77 514.293 371.758 514.328 371.742 514.352 cv
371.719 514.383 371.688 514.406 371.641 514.426 cv
371.59 514.445 371.523 514.457 371.441 514.473 cv
371.355 514.48 371.25 514.488 371.129 514.488 cv
371.008 514.488 370.906 514.48 370.82 514.473 cv
370.734 514.457 370.664 514.445 370.617 514.426 cv
370.563 514.406 370.531 514.383 370.516 514.352 cv
370.496 514.328 370.484 514.293 370.488 514.246 cv
370.488 509.984 li
370.484 509.691 370.457 509.422 370.402 509.176 cv
370.344 508.934 370.258 508.723 370.145 508.543 cv
370.031 508.367 369.887 508.23 369.715 508.137 cv
369.535 508.043 369.328 507.996 369.094 507.996 cv
368.793 507.996 368.496 508.113 368.195 508.34 cv
367.895 508.574 367.566 508.906 367.215 509.344 cv
367.215 514.246 li
367.211 514.293 367.199 514.328 367.184 514.352 cv
367.16 514.383 367.129 514.406 367.082 514.426 cv
367.035 514.445 366.969 514.457 366.891 514.473 cv
366.805 514.48 366.699 514.488 366.57 514.488 cv
366.441 514.488 366.336 514.48 366.258 514.473 cv
366.172 514.457 366.105 514.445 366.059 514.426 cv
366.004 514.406 365.973 514.383 365.957 514.352 cv
365.938 514.328 365.926 514.293 365.93 514.246 cv
365.93 507.234 li
365.926 507.195 365.934 507.16 365.953 507.129 cv
365.965 507.102 365.996 507.078 366.047 507.051 cv
366.09 507.031 366.152 507.016 366.227 507.004 cv
366.297 507 366.391 506.996 366.516 506.992 cv
366.625 506.996 366.723 507 366.801 507.004 cv
366.875 507.016 366.934 507.031 366.977 507.051 cv
367.016 507.078 367.043 507.102 367.063 507.129 cv
367.078 507.16 367.086 507.195 367.09 507.234 cv
367.09 508.16 li
367.48 507.719 367.863 507.398 368.238 507.191 cv
368.605 506.988 368.984 506.883 369.367 506.883 cv
369.656 506.883 369.914 506.918 370.148 506.984 cv
370.375 507.055 370.582 507.148 370.762 507.27 cv
370.938 507.391 371.086 507.535 371.215 507.703 cv
371.336 507.875 371.441 508.066 371.527 508.27 cv
371.758 508.02 371.98 507.805 372.191 507.625 cv
372.402 507.453 372.605 507.309 372.801 507.195 cv
372.996 507.09 373.184 507.012 373.367 506.957 cv
373.551 506.91 373.738 506.883 373.926 506.883 cv
374.379 506.883 374.758 506.965 375.063 507.121 cv
375.367 507.285 375.613 507.496 375.809 507.758 cv
375.996 508.023 376.133 508.332 376.215 508.687 cv
376.293 509.043 376.332 509.418 376.336 509.812 cv
cp
f
383.969 514.254 mo
383.965 514.316 383.945 514.363 383.906 514.395 cv
383.863 514.426 383.805 514.449 383.734 514.465 cv
383.656 514.48 383.551 514.488 383.414 514.488 cv
383.277 514.488 383.168 514.48 383.09 514.465 cv
383.004 514.449 382.945 514.426 382.914 514.395 cv
382.875 514.363 382.859 514.316 382.863 514.254 cv
382.863 513.555 li
382.555 513.883 382.211 514.137 381.836 514.316 cv
381.457 514.5 381.059 514.586 380.641 514.59 cv
380.266 514.586 379.934 514.539 379.637 514.445 cv
379.34 514.348 379.086 514.211 378.875 514.027 cv
378.664 513.848 378.5 513.625 378.383 513.359 cv
378.266 513.098 378.207 512.797 378.211 512.453 cv
378.207 512.062 378.285 511.719 378.449 511.426 cv
378.605 511.137 378.84 510.895 379.145 510.703 cv
379.445 510.512 379.813 510.367 380.25 510.27 cv
380.684 510.176 381.176 510.129 381.723 510.125 cv
382.691 510.125 li
382.691 509.578 li
382.688 509.309 382.66 509.07 382.605 508.863 cv
382.547 508.656 382.453 508.484 382.328 508.344 cv
382.195 508.207 382.031 508.102 381.832 508.031 cv
381.625 507.961 381.375 507.926 381.086 507.926 cv
380.766 507.926 380.48 507.965 380.23 508.039 cv
379.973 508.117 379.754 508.199 379.566 508.289 cv
379.379 508.383 379.219 508.469 379.094 508.539 cv
378.961 508.617 378.867 508.652 378.809 508.652 cv
378.766 508.652 378.73 508.645 378.699 508.621 cv
378.668 508.605 378.641 508.574 378.617 508.527 cv
378.594 508.488 378.574 508.434 378.566 508.367 cv
378.551 508.305 378.547 508.234 378.551 508.152 cv
378.547 508.027 378.555 507.922 378.578 507.844 cv
378.594 507.77 378.641 507.699 378.711 507.629 cv
378.781 507.562 378.902 507.484 379.074 507.395 cv
379.246 507.305 379.441 507.223 379.664 507.145 cv
379.887 507.074 380.133 507.012 380.398 506.957 cv
380.664 506.91 380.93 506.883 381.203 506.883 cv
381.703 506.883 382.133 506.941 382.484 507.055 cv
382.836 507.172 383.121 507.34 383.344 507.559 cv
383.559 507.781 383.719 508.055 383.82 508.379 cv
383.918 508.711 383.965 509.094 383.969 509.523 cv
cp
382.691 511.051 mo
381.59 511.051 li
381.234 511.055 380.93 511.086 380.672 511.141 cv
380.41 511.203 380.195 511.289 380.023 511.406 cv
379.852 511.523 379.727 511.664 379.648 511.828 cv
379.566 511.992 379.523 512.18 379.527 512.391 cv
379.523 512.758 379.641 513.051 379.871 513.262 cv
380.102 513.48 380.426 513.586 380.844 513.586 cv
381.18 513.586 381.492 513.5 381.781 513.328 cv
382.07 513.156 382.371 512.895 382.691 512.539 cv
cp
f
392.188 507.551 mo
392.184 507.734 392.16 507.867 392.113 507.945 cv
392.063 508.027 392 508.066 391.926 508.066 cv
390.918 508.066 li
391.098 508.254 391.227 508.461 391.301 508.687 cv
391.371 508.914 391.406 509.148 391.41 509.391 cv
391.406 509.797 391.34 510.156 391.215 510.469 cv
391.082 510.781 390.898 511.047 390.656 511.258 cv
390.414 511.477 390.125 511.641 389.797 511.754 cv
389.461 511.871 389.094 511.93 388.691 511.926 cv
388.402 511.93 388.129 511.891 387.875 511.812 cv
387.613 511.738 387.418 511.645 387.281 511.527 cv
387.188 511.625 387.109 511.73 387.051 511.848 cv
386.988 511.969 386.957 512.105 386.961 512.258 cv
386.957 512.441 387.043 512.594 387.215 512.711 cv
387.383 512.836 387.605 512.898 387.887 512.906 cv
389.719 512.984 li
390.066 512.996 390.383 513.043 390.676 513.129 cv
390.965 513.215 391.219 513.34 391.434 513.496 cv
391.645 513.656 391.813 513.848 391.934 514.078 cv
392.051 514.312 392.109 514.582 392.113 514.887 cv
392.109 515.207 392.043 515.512 391.91 515.805 cv
391.773 516.094 391.566 516.348 391.289 516.57 cv
391.008 516.789 390.652 516.965 390.223 517.094 cv
389.793 517.219 389.285 517.281 388.699 517.285 cv
388.129 517.281 387.645 517.234 387.25 517.141 cv
386.852 517.043 386.527 516.91 386.273 516.746 cv
386.02 516.578 385.836 516.383 385.723 516.152 cv
385.605 515.918 385.547 515.664 385.551 515.398 cv
385.547 515.227 385.566 515.062 385.613 514.902 cv
385.652 514.738 385.715 514.586 385.801 514.441 cv
385.883 514.297 385.992 514.16 386.121 514.023 cv
386.246 513.895 386.391 513.762 386.563 513.633 cv
386.305 513.504 386.117 513.34 385.996 513.141 cv
385.875 512.945 385.816 512.734 385.816 512.5 cv
385.816 512.187 385.879 511.902 386.008 511.652 cv
386.137 511.402 386.297 511.18 386.492 510.98 cv
386.328 510.789 386.203 510.574 386.109 510.332 cv
386.016 510.094 385.969 509.801 385.969 509.453 cv
385.969 509.059 386.035 508.699 386.172 508.379 cv
386.305 508.062 386.492 507.797 386.734 507.578 cv
386.973 507.363 387.258 507.195 387.594 507.074 cv
387.926 506.961 388.293 506.902 388.691 506.898 cv
388.902 506.902 389.102 506.914 389.285 506.934 cv
389.469 506.961 389.641 506.992 389.805 507.031 cv
391.926 507.031 li
392.012 507.035 392.078 507.078 392.121 507.16 cv
392.164 507.25 392.184 507.379 392.188 507.551 cv
cp
390.18 509.398 mo
390.176 508.926 390.043 508.555 389.785 508.281 cv
389.52 508.016 389.148 507.879 388.668 507.879 cv
388.414 507.879 388.195 507.922 388.016 508.004 cv
387.828 508.09 387.676 508.203 387.555 508.348 cv
387.434 508.496 387.344 508.664 387.285 508.852 cv
387.223 509.039 387.191 509.238 387.195 509.445 cv
387.191 509.91 387.324 510.273 387.586 510.539 cv
387.848 510.805 388.215 510.937 388.691 510.934 cv
388.941 510.937 389.16 510.898 389.352 510.812 cv
389.535 510.734 389.691 510.621 389.816 510.48 cv
389.938 510.34 390.027 510.176 390.09 509.984 cv
390.145 509.801 390.176 509.605 390.18 509.398 cv
cp
390.824 514.957 mo
390.82 514.652 390.695 514.422 390.453 514.258 cv
390.203 514.098 389.871 514.008 389.453 513.996 cv
387.637 513.934 li
387.469 514.066 387.332 514.191 387.23 514.305 cv
387.121 514.422 387.039 514.531 386.977 514.641 cv
386.914 514.746 386.871 514.852 386.848 514.957 cv
386.824 515.059 386.813 515.164 386.813 515.273 cv
386.813 515.609 386.98 515.863 387.324 516.043 cv
387.664 516.215 388.145 516.305 388.762 516.305 cv
389.148 516.305 389.473 516.266 389.738 516.191 cv
389.996 516.113 390.207 516.012 390.371 515.891 cv
390.527 515.762 390.645 515.621 390.719 515.461 cv
390.785 515.301 390.82 515.133 390.824 514.957 cv
cp
f
399.781 510.437 mo
399.777 510.641 399.727 510.781 399.629 510.867 cv
399.523 510.953 399.406 510.996 399.281 510.996 cv
394.664 510.996 li
394.66 511.387 394.699 511.738 394.781 512.051 cv
394.855 512.363 394.988 512.633 395.172 512.852 cv
395.352 513.078 395.586 513.25 395.883 513.367 cv
396.172 513.492 396.531 513.551 396.957 513.547 cv
397.289 513.551 397.586 513.523 397.848 513.465 cv
398.109 513.414 398.336 513.352 398.527 513.281 cv
398.715 513.215 398.871 513.156 398.996 513.098 cv
399.117 513.047 399.211 513.02 399.273 513.016 cv
399.309 513.02 399.34 513.027 399.371 513.043 cv
399.398 513.062 399.422 513.09 399.441 513.125 cv
399.453 513.164 399.465 513.215 399.477 513.277 cv
399.48 513.344 399.484 513.422 399.488 513.516 cv
399.484 513.586 399.48 513.645 399.48 513.691 cv
399.473 513.738 399.469 513.781 399.461 513.82 cv
399.453 513.859 399.438 513.895 399.422 513.926 cv
399.398 513.957 399.375 513.988 399.352 514.016 cv
399.32 514.047 399.238 514.094 399.098 514.156 cv
398.957 514.223 398.773 514.285 398.551 514.348 cv
398.324 514.41 398.066 514.465 397.773 514.516 cv
397.48 514.562 397.168 514.586 396.836 514.59 cv
396.258 514.586 395.75 514.508 395.32 514.348 cv
394.883 514.187 394.52 513.949 394.227 513.633 cv
393.926 513.316 393.703 512.922 393.555 512.441 cv
393.406 511.965 393.332 511.406 393.332 510.77 cv
393.332 510.172 393.406 509.633 393.563 509.148 cv
393.715 508.672 393.941 508.262 394.238 507.926 cv
394.531 507.59 394.887 507.332 395.301 507.152 cv
395.715 506.973 396.18 506.883 396.695 506.883 cv
397.246 506.883 397.715 506.973 398.102 507.148 cv
398.488 507.328 398.805 507.566 399.059 507.863 cv
399.305 508.164 399.488 508.516 399.605 508.914 cv
399.719 509.32 399.777 509.75 399.781 510.203 cv
cp
398.488 510.055 mo
398.504 509.379 398.352 508.848 398.035 508.465 cv
397.719 508.082 397.25 507.891 396.633 507.887 cv
396.309 507.891 396.027 507.949 395.789 508.066 cv
395.547 508.187 395.348 508.348 395.188 508.543 cv
395.023 508.742 394.898 508.973 394.813 509.234 cv
394.723 509.496 394.672 509.77 394.664 510.055 cv
cp
f
406.148 512.336 mo
406.145 512.699 406.078 513.02 405.949 513.297 cv
405.816 513.578 405.629 513.812 405.387 514.004 cv
405.141 514.199 404.848 514.344 404.512 514.441 cv
404.172 514.539 403.801 514.586 403.398 514.59 cv
403.145 514.586 402.906 514.566 402.684 514.531 cv
402.457 514.488 402.258 514.441 402.078 514.383 cv
401.898 514.324 401.746 514.262 401.621 514.195 cv
401.496 514.133 401.402 514.074 401.348 514.02 cv
401.289 513.969 401.25 513.898 401.227 513.801 cv
401.199 513.711 401.188 513.582 401.188 513.422 cv
401.188 513.324 401.191 513.242 401.203 513.172 cv
401.211 513.105 401.223 513.051 401.242 513.008 cv
401.254 512.969 401.277 512.937 401.305 512.918 cv
401.332 512.902 401.363 512.895 401.402 512.891 cv
401.457 512.895 401.543 512.93 401.656 512.996 cv
401.766 513.07 401.902 513.148 402.07 513.227 cv
402.23 513.312 402.422 513.387 402.648 513.457 cv
402.867 513.527 403.125 513.562 403.422 513.562 cv
403.637 513.562 403.836 513.539 404.016 513.492 cv
404.191 513.445 404.344 513.379 404.473 513.285 cv
404.602 513.199 404.703 513.082 404.773 512.937 cv
404.844 512.801 404.879 512.633 404.879 512.437 cv
404.879 512.242 404.828 512.078 404.727 511.941 cv
404.625 511.809 404.488 511.687 404.324 511.582 cv
404.156 511.48 403.973 511.391 403.766 511.305 cv
403.555 511.227 403.34 511.141 403.121 511.051 cv
402.902 510.965 402.688 510.863 402.477 510.75 cv
402.266 510.641 402.074 510.508 401.91 510.344 cv
401.738 510.187 401.605 509.992 401.508 509.766 cv
401.402 509.543 401.352 509.277 401.355 508.965 cv
401.352 508.691 401.406 508.426 401.516 508.172 cv
401.621 507.922 401.781 507.703 401.996 507.512 cv
402.207 507.324 402.473 507.172 402.793 507.055 cv
403.113 506.941 403.484 506.883 403.914 506.883 cv
404.098 506.883 404.285 506.898 404.473 506.93 cv
404.656 506.961 404.824 507 404.98 507.047 cv
405.129 507.094 405.258 507.145 405.367 507.199 cv
405.469 507.254 405.551 507.305 405.609 507.344 cv
405.66 507.391 405.695 507.426 405.719 507.453 cv
405.734 507.484 405.75 507.52 405.758 507.555 cv
405.766 507.598 405.773 507.645 405.781 507.699 cv
405.789 507.758 405.793 507.828 405.793 507.91 cv
405.793 508 405.789 508.078 405.781 508.141 cv
405.773 508.211 405.758 508.262 405.742 508.301 cv
405.719 508.344 405.699 508.375 405.676 508.391 cv
405.648 508.41 405.617 508.418 405.59 508.418 cv
405.539 508.418 405.473 508.391 405.387 508.332 cv
405.297 508.277 405.184 508.215 405.043 508.148 cv
404.902 508.086 404.734 508.027 404.547 507.965 cv
404.355 507.91 404.141 507.879 403.898 507.879 cv
403.676 507.879 403.484 507.906 403.32 507.953 cv
403.152 508.008 403.016 508.078 402.91 508.164 cv
402.805 508.258 402.723 508.363 402.672 508.488 cv
402.613 508.613 402.586 508.75 402.59 508.895 cv
402.586 509.098 402.637 509.266 402.742 509.402 cv
402.844 509.543 402.98 509.664 403.148 509.766 cv
403.313 509.871 403.504 509.965 403.719 510.047 cv
403.93 510.133 404.145 510.219 404.367 510.305 cv
404.586 510.395 404.805 510.496 405.023 510.602 cv
405.238 510.711 405.43 510.84 405.598 510.996 cv
405.762 511.152 405.895 511.34 405.996 511.559 cv
406.094 511.777 406.145 512.039 406.148 512.336 cv
cp
f
213.902 9.76199 mo
213.902 10.328 213.813 10.832 213.637 11.266 cv
213.457 11.703 213.199 12.07 212.863 12.367 cv
212.523 12.672 212.109 12.898 211.621 13.051 cv
211.129 13.207 210.551 13.285 209.887 13.281 cv
209.047 13.281 li
209.047 16.5 li
209.043 16.555 209.027 16.602 208.996 16.641 cv
208.961 16.684 208.906 16.719 208.828 16.742 cv
208.75 16.77 208.645 16.789 208.516 16.805 cv
208.383 16.82 208.219 16.828 208.02 16.828 cv
207.82 16.828 207.652 16.82 207.523 16.805 cv
207.387 16.789 207.281 16.77 207.207 16.742 cv
207.125 16.719 207.07 16.684 207.043 16.641 cv
207.008 16.602 206.992 16.555 206.996 16.5 cv
206.996 7.42999 li
206.992 7.18701 207.059 7.00403 207.188 6.87903 cv
207.313 6.758 207.48 6.69897 207.691 6.69501 cv
210.066 6.69501 li
210.301 6.69897 210.531 6.70697 210.75 6.72302 cv
210.965 6.742 211.223 6.78101 211.523 6.84003 cv
211.824 6.90198 212.129 7.01202 212.441 7.172 cv
212.75 7.336 213.012 7.54303 213.23 7.78497 cv
213.445 8.03497 213.613 8.32397 213.73 8.65198 cv
213.844 8.98401 213.902 9.35199 213.902 9.76199 cv
cp
211.758 9.90601 mo
211.758 9.55899 211.695 9.26599 211.57 9.035 cv
211.445 8.80902 211.289 8.64099 211.109 8.52698 cv
210.926 8.422 210.738 8.35199 210.539 8.32001 cv
210.336 8.29303 210.129 8.28101 209.918 8.27698 cv
209.047 8.27698 li
209.047 11.699 li
209.965 11.699 li
210.293 11.703 210.566 11.656 210.789 11.566 cv
211.008 11.48 211.188 11.359 211.328 11.199 cv
211.465 11.043 211.57 10.852 211.648 10.629 cv
211.719 10.41 211.758 10.172 211.758 9.90601 cv
cp
f
219.84 10.211 mo
219.84 10.402 219.832 10.555 219.824 10.672 cv
219.809 10.793 219.793 10.887 219.777 10.953 cv
219.754 11.023 219.727 11.07 219.695 11.094 cv
219.656 11.121 219.613 11.133 219.566 11.133 cv
219.52 11.133 219.473 11.125 219.426 11.105 cv
219.371 11.09 219.313 11.07 219.25 11.047 cv
219.18 11.027 219.109 11.008 219.035 10.988 cv
218.953 10.973 218.867 10.965 218.777 10.961 cv
218.664 10.965 218.555 10.984 218.449 11.027 cv
218.34 11.074 218.227 11.145 218.113 11.234 cv
217.992 11.328 217.871 11.453 217.746 11.605 cv
217.617 11.766 217.48 11.957 217.336 12.184 cv
217.336 16.516 li
217.332 16.57 217.316 16.613 217.289 16.652 cv
217.254 16.691 217.199 16.727 217.129 16.75 cv
217.051 16.777 216.953 16.793 216.828 16.809 cv
216.703 16.82 216.543 16.828 216.355 16.828 cv
216.16 16.828 216.004 16.82 215.879 16.809 cv
215.754 16.793 215.652 16.777 215.578 16.75 cv
215.5 16.727 215.445 16.691 215.418 16.652 cv
215.383 16.613 215.367 16.57 215.371 16.516 cv
215.371 9.56601 li
215.367 9.51999 215.383 9.47299 215.41 9.42999 cv
215.434 9.39499 215.48 9.36301 215.551 9.332 cv
215.617 9.30899 215.703 9.289 215.813 9.27301 cv
215.918 9.26599 216.051 9.258 216.215 9.254 cv
216.379 9.258 216.516 9.26599 216.625 9.27301 cv
216.73 9.289 216.816 9.30899 216.879 9.332 cv
216.938 9.36301 216.98 9.39499 217.008 9.42999 cv
217.031 9.47299 217.043 9.51999 217.047 9.56601 cv
217.047 10.43 li
217.227 10.172 217.398 9.961 217.563 9.789 cv
217.719 9.625 217.875 9.48801 218.023 9.38699 cv
218.168 9.289 218.313 9.22299 218.457 9.17999 cv
218.602 9.14499 218.746 9.125 218.895 9.121 cv
218.961 9.125 219.035 9.129 219.113 9.133 cv
219.191 9.14499 219.27 9.15601 219.355 9.172 cv
219.434 9.19101 219.508 9.211 219.574 9.23401 cv
219.633 9.258 219.68 9.285 219.711 9.30899 cv
219.738 9.34 219.758 9.367 219.773 9.39499 cv
219.785 9.42999 219.797 9.47299 219.809 9.52301 cv
219.816 9.582 219.824 9.664 219.832 9.76999 cv
219.836 9.879 219.84 10.027 219.84 10.211 cv
cp
f
227.348 12.84 mo
227.344 13.078 227.293 13.254 227.188 13.367 cv
227.078 13.484 226.93 13.543 226.75 13.539 cv
222.516 13.539 li
222.512 13.84 222.547 14.109 222.621 14.348 cv
222.688 14.59 222.801 14.793 222.957 14.961 cv
223.109 15.133 223.305 15.262 223.547 15.348 cv
223.785 15.437 224.074 15.48 224.418 15.48 cv
224.758 15.48 225.059 15.457 225.32 15.406 cv
225.578 15.359 225.805 15.305 225.996 15.242 cv
226.184 15.184 226.34 15.129 226.469 15.078 cv
226.59 15.031 226.691 15.008 226.773 15.004 cv
226.816 15.008 226.855 15.016 226.891 15.031 cv
226.918 15.051 226.945 15.082 226.965 15.129 cv
226.984 15.176 226.996 15.242 227.008 15.328 cv
227.012 15.414 227.016 15.523 227.02 15.652 cv
227.016 15.77 227.016 15.867 227.012 15.945 cv
227.004 16.027 226.996 16.094 226.988 16.148 cv
226.977 16.207 226.961 16.258 226.941 16.293 cv
226.922 16.336 226.895 16.371 226.863 16.406 cv
226.828 16.445 226.734 16.496 226.586 16.555 cv
226.43 16.621 226.238 16.684 226.008 16.738 cv
225.77 16.801 225.5 16.848 225.203 16.895 cv
224.898 16.934 224.578 16.957 224.238 16.961 cv
223.617 16.957 223.074 16.883 222.613 16.727 cv
222.145 16.574 221.758 16.336 221.449 16.02 cv
221.133 15.703 220.898 15.305 220.75 14.82 cv
220.594 14.34 220.52 13.773 220.523 13.117 cv
220.52 12.504 220.598 11.945 220.762 11.449 cv
220.918 10.953 221.152 10.535 221.465 10.187 cv
221.77 9.84399 222.145 9.578 222.582 9.39499 cv
223.02 9.215 223.512 9.125 224.066 9.121 cv
224.645 9.125 225.145 9.211 225.559 9.379 cv
225.973 9.55499 226.309 9.793 226.574 10.094 cv
226.836 10.398 227.031 10.758 227.16 11.172 cv
227.281 11.59 227.344 12.039 227.348 12.527 cv
cp
225.445 12.277 mo
225.457 11.727 225.348 11.293 225.113 10.98 cv
224.879 10.668 224.512 10.512 224.02 10.508 cv
223.77 10.512 223.555 10.559 223.371 10.648 cv
223.184 10.746 223.031 10.871 222.91 11.027 cv
222.785 11.187 222.691 11.375 222.629 11.59 cv
222.563 11.805 222.523 12.035 222.516 12.277 cv
cp
f
235.953 12.937 mo
235.953 13.559 235.887 14.117 235.754 14.613 cv
235.621 15.109 235.426 15.531 235.172 15.879 cv
234.918 16.227 234.602 16.496 234.223 16.68 cv
233.84 16.867 233.406 16.957 232.922 16.961 cv
232.715 16.957 232.527 16.937 232.363 16.902 cv
232.191 16.859 232.027 16.801 231.871 16.723 cv
231.711 16.645 231.555 16.547 231.402 16.422 cv
231.242 16.305 231.082 16.164 230.918 16 cv
230.918 19.273 li
230.914 19.32 230.898 19.367 230.871 19.414 cv
230.836 19.453 230.781 19.488 230.711 19.52 cv
230.633 19.543 230.535 19.566 230.41 19.586 cv
230.285 19.598 230.125 19.605 229.938 19.609 cv
229.742 19.605 229.586 19.598 229.461 19.586 cv
229.336 19.566 229.234 19.543 229.16 19.52 cv
229.082 19.488 229.027 19.453 229 19.414 cv
228.965 19.367 228.949 19.32 228.953 19.273 cv
228.953 9.56601 li
228.949 9.51999 228.965 9.47299 228.992 9.42999 cv
229.016 9.39499 229.059 9.36301 229.129 9.332 cv
229.191 9.30899 229.277 9.289 229.387 9.27301 cv
229.488 9.26599 229.625 9.258 229.789 9.254 cv
229.945 9.258 230.074 9.26599 230.18 9.27301 cv
230.285 9.289 230.371 9.30899 230.438 9.332 cv
230.5 9.36301 230.547 9.39499 230.574 9.42999 cv
230.598 9.47299 230.609 9.51999 230.613 9.56601 cv
230.613 10.383 li
230.813 10.176 231.012 9.996 231.211 9.836 cv
231.402 9.67999 231.602 9.547 231.805 9.43701 cv
232.008 9.336 232.215 9.254 232.434 9.19901 cv
232.645 9.14801 232.875 9.125 233.125 9.121 cv
233.629 9.125 234.063 9.22299 234.426 9.422 cv
234.781 9.625 235.074 9.90201 235.301 10.246 cv
235.523 10.598 235.688 11 235.797 11.461 cv
235.898 11.922 235.953 12.414 235.953 12.937 cv
cp
233.91 13.078 mo
233.906 12.785 233.887 12.504 233.844 12.227 cv
233.797 11.957 233.719 11.715 233.617 11.5 cv
233.508 11.289 233.367 11.117 233.195 10.988 cv
233.02 10.863 232.805 10.801 232.547 10.797 cv
232.414 10.801 232.285 10.82 232.16 10.855 cv
232.031 10.898 231.902 10.961 231.77 11.047 cv
231.637 11.137 231.5 11.25 231.363 11.391 cv
231.219 11.531 231.07 11.707 230.918 11.91 cv
230.918 14.203 li
231.191 14.551 231.453 14.82 231.703 15.008 cv
231.949 15.199 232.211 15.293 232.484 15.293 cv
232.738 15.293 232.953 15.23 233.137 15.098 cv
233.313 14.973 233.461 14.801 233.574 14.59 cv
233.688 14.379 233.77 14.141 233.828 13.875 cv
233.879 13.609 233.906 13.344 233.91 13.078 cv
cp
f
243.449 16.539 mo
243.445 16.617 243.418 16.672 243.371 16.711 cv
243.316 16.754 243.234 16.781 243.125 16.801 cv
243.008 16.816 242.844 16.828 242.629 16.828 cv
242.391 16.828 242.219 16.816 242.117 16.801 cv
242.008 16.781 241.934 16.754 241.895 16.711 cv
241.848 16.672 241.828 16.617 241.828 16.539 cv
241.828 15.988 li
241.539 16.297 241.211 16.535 240.848 16.703 cv
240.48 16.875 240.074 16.957 239.629 16.961 cv
239.258 16.957 238.918 16.91 238.609 16.816 cv
238.301 16.723 238.035 16.582 237.809 16.387 cv
237.582 16.199 237.406 15.965 237.281 15.684 cv
237.156 15.406 237.094 15.078 237.098 14.699 cv
237.094 14.301 237.172 13.949 237.332 13.645 cv
237.488 13.348 237.727 13.102 238.043 12.906 cv
238.355 12.715 238.746 12.57 239.215 12.473 cv
239.684 12.383 240.227 12.336 240.844 12.332 cv
241.523 12.332 li
241.523 11.91 li
241.523 11.695 241.5 11.504 241.457 11.34 cv
241.41 11.18 241.336 11.043 241.238 10.93 cv
241.133 10.824 241 10.742 240.832 10.687 cv
240.66 10.637 240.449 10.613 240.207 10.609 cv
239.875 10.613 239.582 10.648 239.328 10.719 cv
239.066 10.793 238.84 10.875 238.645 10.961 cv
238.445 11.055 238.281 11.133 238.152 11.203 cv
238.016 11.277 237.906 11.316 237.828 11.312 cv
237.766 11.316 237.715 11.297 237.676 11.258 cv
237.629 11.223 237.594 11.172 237.566 11.102 cv
237.535 11.039 237.512 10.953 237.5 10.852 cv
237.48 10.754 237.473 10.645 237.477 10.523 cv
237.473 10.363 237.488 10.238 237.516 10.141 cv
237.539 10.051 237.586 9.965 237.664 9.88699 cv
237.734 9.81201 237.863 9.73001 238.047 9.64099 cv
238.227 9.55099 238.438 9.465 238.684 9.38699 cv
238.926 9.30899 239.195 9.246 239.484 9.19501 cv
239.773 9.14801 240.07 9.125 240.379 9.121 cv
240.922 9.125 241.387 9.17599 241.773 9.28101 cv
242.16 9.39099 242.48 9.55499 242.73 9.77301 cv
242.98 9.992 243.16 10.277 243.277 10.625 cv
243.387 10.977 243.445 11.391 243.449 11.863 cv
cp
241.523 13.562 mo
240.773 13.562 li
240.457 13.566 240.188 13.59 239.965 13.633 cv
239.738 13.684 239.555 13.754 239.418 13.844 cv
239.273 13.941 239.172 14.055 239.109 14.184 cv
239.043 14.32 239.008 14.469 239.012 14.637 cv
239.008 14.93 239.102 15.16 239.289 15.324 cv
239.473 15.492 239.73 15.574 240.059 15.574 cv
240.332 15.574 240.582 15.504 240.816 15.363 cv
241.043 15.223 241.281 15.02 241.523 14.746 cv
cp
f
249.875 10.211 mo
249.875 10.402 249.867 10.555 249.859 10.672 cv
249.844 10.793 249.828 10.887 249.813 10.953 cv
249.789 11.023 249.762 11.07 249.73 11.094 cv
249.691 11.121 249.648 11.133 249.602 11.133 cv
249.555 11.133 249.508 11.125 249.461 11.105 cv
249.406 11.09 249.348 11.07 249.285 11.047 cv
249.215 11.027 249.145 11.008 249.07 10.988 cv
248.988 10.973 248.902 10.965 248.813 10.961 cv
248.699 10.965 248.59 10.984 248.484 11.027 cv
248.375 11.074 248.262 11.145 248.148 11.234 cv
248.027 11.328 247.906 11.453 247.781 11.605 cv
247.652 11.766 247.516 11.957 247.371 12.184 cv
247.371 16.516 li
247.367 16.57 247.352 16.613 247.324 16.652 cv
247.289 16.691 247.234 16.727 247.164 16.75 cv
247.086 16.777 246.988 16.793 246.863 16.809 cv
246.738 16.82 246.578 16.828 246.391 16.828 cv
246.195 16.828 246.039 16.82 245.914 16.809 cv
245.789 16.793 245.688 16.777 245.613 16.75 cv
245.535 16.727 245.48 16.691 245.453 16.652 cv
245.418 16.613 245.402 16.57 245.406 16.516 cv
245.406 9.56601 li
245.402 9.51999 245.418 9.47299 245.445 9.42999 cv
245.469 9.39499 245.516 9.36301 245.586 9.332 cv
245.652 9.30899 245.738 9.289 245.848 9.27301 cv
245.953 9.26599 246.086 9.258 246.25 9.254 cv
246.414 9.258 246.551 9.26599 246.66 9.27301 cv
246.766 9.289 246.852 9.30899 246.914 9.332 cv
246.973 9.36301 247.016 9.39499 247.043 9.42999 cv
247.066 9.47299 247.078 9.51999 247.082 9.56601 cv
247.082 10.43 li
247.262 10.172 247.434 9.961 247.598 9.789 cv
247.754 9.625 247.91 9.48801 248.059 9.38699 cv
248.203 9.289 248.348 9.22299 248.492 9.17999 cv
248.637 9.14499 248.781 9.125 248.93 9.121 cv
248.996 9.125 249.07 9.129 249.148 9.133 cv
249.227 9.14499 249.305 9.15601 249.391 9.172 cv
249.469 9.19101 249.543 9.211 249.609 9.23401 cv
249.668 9.258 249.715 9.285 249.746 9.30899 cv
249.773 9.34 249.793 9.367 249.809 9.39499 cv
249.82 9.42999 249.832 9.47299 249.844 9.52301 cv
249.852 9.582 249.859 9.664 249.867 9.76999 cv
249.871 9.879 249.875 10.027 249.875 10.211 cv
cp
f
256.617 16.539 mo
256.613 16.617 256.586 16.672 256.539 16.711 cv
256.484 16.754 256.402 16.781 256.293 16.801 cv
256.176 16.816 256.012 16.828 255.797 16.828 cv
255.559 16.828 255.387 16.816 255.285 16.801 cv
255.176 16.781 255.102 16.754 255.063 16.711 cv
255.016 16.672 254.996 16.617 254.996 16.539 cv
254.996 15.988 li
254.707 16.297 254.379 16.535 254.016 16.703 cv
253.648 16.875 253.242 16.957 252.797 16.961 cv
252.426 16.957 252.086 16.91 251.777 16.816 cv
251.469 16.723 251.203 16.582 250.977 16.387 cv
250.75 16.199 250.574 15.965 250.449 15.684 cv
250.324 15.406 250.262 15.078 250.266 14.699 cv
250.262 14.301 250.34 13.949 250.5 13.645 cv
250.656 13.348 250.895 13.102 251.211 12.906 cv
251.523 12.715 251.914 12.57 252.383 12.473 cv
252.852 12.383 253.395 12.336 254.012 12.332 cv
254.691 12.332 li
254.691 11.91 li
254.691 11.695 254.668 11.504 254.625 11.34 cv
254.578 11.18 254.504 11.043 254.406 10.93 cv
254.301 10.824 254.168 10.742 254 10.687 cv
253.828 10.637 253.617 10.613 253.375 10.609 cv
253.043 10.613 252.75 10.648 252.496 10.719 cv
252.234 10.793 252.008 10.875 251.813 10.961 cv
251.613 11.055 251.449 11.133 251.32 11.203 cv
251.184 11.277 251.074 11.316 250.996 11.312 cv
250.934 11.316 250.883 11.297 250.844 11.258 cv
250.797 11.223 250.762 11.172 250.734 11.102 cv
250.703 11.039 250.68 10.953 250.668 10.852 cv
250.648 10.754 250.641 10.645 250.645 10.523 cv
250.641 10.363 250.656 10.238 250.684 10.141 cv
250.707 10.051 250.754 9.965 250.832 9.88699 cv
250.902 9.81201 251.031 9.73001 251.215 9.64099 cv
251.395 9.55099 251.605 9.465 251.852 9.38699 cv
252.094 9.30899 252.363 9.246 252.652 9.19501 cv
252.941 9.14801 253.238 9.125 253.547 9.121 cv
254.09 9.125 254.555 9.17599 254.941 9.28101 cv
255.328 9.39099 255.648 9.55499 255.898 9.77301 cv
256.148 9.992 256.328 10.277 256.445 10.625 cv
256.555 10.977 256.613 11.391 256.617 11.863 cv
cp
254.691 13.562 mo
253.941 13.562 li
253.625 13.566 253.355 13.59 253.133 13.633 cv
252.906 13.684 252.723 13.754 252.586 13.844 cv
252.441 13.941 252.34 14.055 252.277 14.184 cv
252.211 14.32 252.176 14.469 252.18 14.637 cv
252.176 14.93 252.27 15.16 252.457 15.324 cv
252.641 15.492 252.898 15.574 253.227 15.574 cv
253.5 15.574 253.75 15.504 253.984 15.363 cv
254.211 15.223 254.449 15.02 254.691 14.746 cv
cp
f
262.613 15.832 mo
262.613 16.059 262.598 16.234 262.57 16.355 cv
262.539 16.48 262.5 16.566 262.457 16.613 cv
262.406 16.664 262.34 16.707 262.25 16.746 cv
262.156 16.785 262.047 16.816 261.93 16.848 cv
261.805 16.871 261.672 16.895 261.531 16.914 cv
261.387 16.926 261.246 16.934 261.102 16.937 cv
260.711 16.934 260.371 16.883 260.086 16.789 cv
259.801 16.687 259.566 16.539 259.379 16.332 cv
259.191 16.129 259.051 15.871 258.965 15.559 cv
258.871 15.25 258.828 14.879 258.832 14.449 cv
258.832 10.891 li
258 10.891 li
257.898 10.895 257.824 10.832 257.773 10.707 cv
257.719 10.586 257.691 10.383 257.695 10.094 cv
257.691 9.94501 257.699 9.81601 257.715 9.715 cv
257.727 9.61301 257.746 9.53101 257.773 9.46899 cv
257.797 9.41 257.828 9.367 257.871 9.34 cv
257.906 9.31601 257.953 9.30499 258.008 9.30099 cv
258.832 9.30099 li
258.832 7.75 li
258.828 7.703 258.844 7.65601 258.875 7.60901 cv
258.902 7.57001 258.953 7.53497 259.031 7.50403 cv
259.105 7.47998 259.207 7.45697 259.336 7.44098 cv
259.461 7.42999 259.617 7.42603 259.809 7.422 cv
259.996 7.42603 260.156 7.42999 260.285 7.44098 cv
260.41 7.45697 260.512 7.47998 260.586 7.50403 cv
260.656 7.53497 260.707 7.57001 260.742 7.60901 cv
260.77 7.65601 260.785 7.703 260.789 7.75 cv
260.789 9.30099 li
262.301 9.30099 li
262.352 9.30499 262.398 9.31601 262.438 9.34 cv
262.477 9.367 262.508 9.41 262.535 9.46899 cv
262.559 9.53101 262.578 9.61301 262.594 9.715 cv
262.605 9.81601 262.613 9.94501 262.613 10.094 cv
262.613 10.383 262.586 10.586 262.535 10.707 cv
262.48 10.832 262.406 10.895 262.309 10.891 cv
260.789 10.891 li
260.789 14.156 li
260.785 14.535 260.844 14.82 260.969 15.008 cv
261.086 15.199 261.301 15.293 261.605 15.293 cv
261.707 15.293 261.801 15.285 261.887 15.266 cv
261.969 15.25 262.043 15.23 262.109 15.203 cv
262.172 15.184 262.227 15.16 262.273 15.141 cv
262.316 15.125 262.355 15.117 262.395 15.113 cv
262.422 15.117 262.453 15.125 262.484 15.141 cv
262.512 15.16 262.531 15.199 262.551 15.25 cv
262.563 15.309 262.578 15.383 262.594 15.473 cv
262.605 15.57 262.613 15.687 262.613 15.832 cv
cp
f
266 16.516 mo
265.996 16.57 265.98 16.613 265.953 16.652 cv
265.918 16.691 265.863 16.727 265.793 16.75 cv
265.715 16.777 265.617 16.793 265.492 16.809 cv
265.367 16.82 265.207 16.828 265.02 16.828 cv
264.824 16.828 264.668 16.82 264.543 16.809 cv
264.418 16.793 264.316 16.777 264.242 16.75 cv
264.164 16.727 264.109 16.691 264.082 16.652 cv
264.047 16.613 264.031 16.57 264.035 16.516 cv
264.035 9.582 li
264.031 9.53101 264.047 9.48401 264.082 9.44501 cv
264.109 9.40601 264.164 9.375 264.242 9.34399 cv
264.316 9.32001 264.418 9.297 264.543 9.27701 cv
264.668 9.26599 264.824 9.258 265.02 9.254 cv
265.207 9.258 265.367 9.26599 265.492 9.27701 cv
265.617 9.297 265.715 9.32001 265.793 9.34399 cv
265.863 9.375 265.918 9.40601 265.953 9.44501 cv
265.98 9.48401 265.996 9.53101 266 9.582 cv
cp
266.148 7.211 mo
266.148 7.60901 266.066 7.883 265.906 8.03101 cv
265.742 8.18402 265.445 8.258 265.012 8.25403 cv
264.566 8.258 264.266 8.18402 264.117 8.039 cv
263.961 7.89502 263.887 7.633 263.887 7.25 cv
263.887 6.85498 263.965 6.58197 264.125 6.42999 cv
264.281 6.27698 264.582 6.19897 265.027 6.19897 cv
265.461 6.19897 265.758 6.27301 265.914 6.422 cv
266.07 6.57001 266.148 6.836 266.148 7.211 cv
cp
f
274.992 12.969 mo
274.988 13.566 274.91 14.109 274.758 14.594 cv
274.598 15.086 274.363 15.504 274.047 15.855 cv
273.73 16.207 273.332 16.48 272.855 16.672 cv
272.375 16.863 271.816 16.957 271.18 16.961 cv
270.559 16.957 270.02 16.875 269.566 16.703 cv
269.105 16.535 268.727 16.285 268.43 15.957 cv
268.125 15.633 267.902 15.23 267.758 14.75 cv
267.613 14.273 267.543 13.727 267.543 13.109 cv
267.543 12.52 267.621 11.98 267.777 11.488 cv
267.934 11 268.172 10.578 268.492 10.227 cv
268.809 9.879 269.203 9.60501 269.68 9.41 cv
270.152 9.21899 270.711 9.125 271.352 9.121 cv
271.977 9.125 272.516 9.207 272.973 9.375 cv
273.43 9.547 273.809 9.797 274.105 10.121 cv
274.402 10.449 274.625 10.852 274.773 11.328 cv
274.918 11.809 274.988 12.355 274.992 12.969 cv
cp
272.973 13.047 mo
272.969 12.711 272.941 12.395 272.891 12.102 cv
272.832 11.816 272.738 11.566 272.613 11.352 cv
272.48 11.141 272.309 10.973 272.098 10.852 cv
271.879 10.734 271.609 10.676 271.281 10.672 cv
270.992 10.676 270.738 10.73 270.52 10.832 cv
270.301 10.941 270.121 11.098 269.98 11.301 cv
269.84 11.508 269.734 11.754 269.664 12.039 cv
269.594 12.332 269.559 12.66 269.559 13.023 cv
269.559 13.371 269.586 13.687 269.645 13.973 cv
269.699 14.266 269.793 14.516 269.922 14.727 cv
270.047 14.941 270.219 15.105 270.441 15.219 cv
270.656 15.34 270.926 15.398 271.25 15.395 cv
271.543 15.398 271.801 15.344 272.023 15.234 cv
272.238 15.129 272.418 14.977 272.559 14.77 cv
272.699 14.57 272.801 14.324 272.871 14.035 cv
272.934 13.75 272.969 13.422 272.973 13.047 cv
cp
f
283.234 16.516 mo
283.23 16.57 283.215 16.613 283.188 16.652 cv
283.152 16.691 283.102 16.727 283.031 16.75 cv
282.957 16.777 282.855 16.793 282.73 16.809 cv
282.602 16.82 282.445 16.828 282.262 16.828 cv
282.066 16.828 281.906 16.82 281.781 16.809 cv
281.652 16.793 281.551 16.777 281.48 16.75 cv
281.402 16.727 281.352 16.691 281.324 16.652 cv
281.289 16.613 281.273 16.57 281.277 16.516 cv
281.277 12.551 li
281.273 12.215 281.25 11.949 281.203 11.754 cv
281.152 11.562 281.078 11.398 280.988 11.262 cv
280.895 11.125 280.777 11.02 280.629 10.941 cv
280.48 10.867 280.305 10.828 280.109 10.828 cv
279.855 10.828 279.605 10.922 279.352 11.102 cv
279.098 11.285 278.832 11.547 278.559 11.895 cv
278.559 16.516 li
278.555 16.57 278.539 16.613 278.512 16.652 cv
278.477 16.691 278.422 16.727 278.352 16.75 cv
278.273 16.777 278.176 16.793 278.051 16.809 cv
277.926 16.82 277.766 16.828 277.578 16.828 cv
277.383 16.828 277.227 16.82 277.102 16.809 cv
276.977 16.793 276.875 16.777 276.801 16.75 cv
276.723 16.727 276.668 16.691 276.641 16.652 cv
276.605 16.613 276.59 16.57 276.594 16.516 cv
276.594 9.56601 li
276.59 9.51999 276.605 9.47299 276.633 9.42999 cv
276.656 9.39499 276.703 9.36301 276.773 9.332 cv
276.84 9.30899 276.926 9.289 277.035 9.27301 cv
277.141 9.26599 277.273 9.258 277.438 9.254 cv
277.602 9.258 277.738 9.26599 277.848 9.27301 cv
277.953 9.289 278.039 9.30899 278.102 9.332 cv
278.16 9.36301 278.203 9.39499 278.23 9.42999 cv
278.254 9.47299 278.266 9.51999 278.27 9.56601 cv
278.27 10.367 li
278.652 9.957 279.043 9.64499 279.441 9.43399 cv
279.836 9.22699 280.254 9.125 280.688 9.121 cv
281.156 9.125 281.555 9.203 281.883 9.35501 cv
282.207 9.51599 282.469 9.72699 282.668 9.992 cv
282.867 10.262 283.012 10.574 283.102 10.93 cv
283.188 11.289 283.23 11.719 283.234 12.223 cv
cp
f
295.648 7.539 mo
295.645 7.69501 295.637 7.82397 295.629 7.92603 cv
295.613 8.03497 295.594 8.12097 295.57 8.18402 cv
295.539 8.25 295.508 8.297 295.473 8.32397 cv
295.43 8.35901 295.387 8.375 295.344 8.37097 cv
292.82 8.37097 li
292.82 16.5 li
292.82 16.555 292.801 16.602 292.77 16.641 cv
292.73 16.684 292.676 16.719 292.602 16.742 cv
292.52 16.77 292.414 16.789 292.285 16.805 cv
292.148 16.82 291.984 16.828 291.789 16.828 cv
291.594 16.828 291.43 16.82 291.297 16.805 cv
291.164 16.789 291.059 16.77 290.98 16.742 cv
290.902 16.719 290.844 16.684 290.813 16.641 cv
290.773 16.602 290.758 16.555 290.762 16.5 cv
290.762 8.37097 li
288.238 8.37097 li
288.184 8.375 288.137 8.35901 288.105 8.32397 cv
288.066 8.297 288.035 8.25 288.012 8.18402 cv
287.98 8.12097 287.961 8.03497 287.953 7.92603 cv
287.938 7.82397 287.934 7.69501 287.934 7.539 cv
287.934 7.38702 287.938 7.25403 287.953 7.14099 cv
287.961 7.03497 287.98 6.94501 288.012 6.87903 cv
288.035 6.81598 288.066 6.77002 288.105 6.73798 cv
288.137 6.711 288.184 6.69897 288.238 6.69501 cv
295.344 6.69501 li
295.387 6.69897 295.43 6.711 295.473 6.73798 cv
295.508 6.77002 295.539 6.81598 295.57 6.87903 cv
295.594 6.94501 295.613 7.03497 295.629 7.14099 cv
295.637 7.25403 295.645 7.38702 295.648 7.539 cv
cp
f
298.684 16.516 mo
298.68 16.57 298.664 16.613 298.637 16.652 cv
298.602 16.691 298.547 16.727 298.477 16.75 cv
298.398 16.777 298.301 16.793 298.176 16.809 cv
298.051 16.82 297.891 16.828 297.703 16.828 cv
297.508 16.828 297.352 16.82 297.227 16.809 cv
297.102 16.793 297 16.777 296.926 16.75 cv
296.848 16.727 296.793 16.691 296.766 16.652 cv
296.73 16.613 296.715 16.57 296.719 16.516 cv
296.719 9.582 li
296.715 9.53101 296.73 9.48401 296.766 9.44501 cv
296.793 9.40601 296.848 9.375 296.926 9.34399 cv
297 9.32001 297.102 9.297 297.227 9.27701 cv
297.352 9.26599 297.508 9.258 297.703 9.254 cv
297.891 9.258 298.051 9.26599 298.176 9.27701 cv
298.301 9.297 298.398 9.32001 298.477 9.34399 cv
298.547 9.375 298.602 9.40601 298.637 9.44501 cv
298.664 9.48401 298.68 9.53101 298.684 9.582 cv
cp
298.832 7.211 mo
298.832 7.60901 298.75 7.883 298.59 8.03101 cv
298.426 8.18402 298.129 8.258 297.695 8.25403 cv
297.25 8.258 296.949 8.18402 296.801 8.039 cv
296.645 7.89502 296.57 7.633 296.57 7.25 cv
296.57 6.85498 296.648 6.58197 296.809 6.42999 cv
296.965 6.27698 297.266 6.19897 297.711 6.19897 cv
298.145 6.19897 298.441 6.27301 298.598 6.422 cv
298.754 6.57001 298.832 6.836 298.832 7.211 cv
cp
f
311.734 16.516 mo
311.73 16.57 311.715 16.613 311.688 16.652 cv
311.652 16.691 311.602 16.727 311.531 16.75 cv
311.457 16.777 311.355 16.793 311.234 16.809 cv
311.109 16.82 310.953 16.828 310.762 16.828 cv
310.563 16.828 310.402 16.82 310.277 16.809 cv
310.152 16.793 310.051 16.777 309.977 16.75 cv
309.898 16.727 309.848 16.691 309.82 16.652 cv
309.793 16.613 309.777 16.57 309.781 16.516 cv
309.781 12.395 li
309.777 12.164 309.758 11.949 309.715 11.754 cv
309.668 11.562 309.598 11.398 309.512 11.262 cv
309.418 11.125 309.305 11.02 309.168 10.941 cv
309.027 10.867 308.863 10.828 308.672 10.828 cv
308.438 10.828 308.199 10.922 307.961 11.102 cv
307.723 11.285 307.465 11.547 307.184 11.895 cv
307.184 16.516 li
307.184 16.57 307.168 16.613 307.137 16.652 cv
307.105 16.691 307.051 16.727 306.977 16.75 cv
306.898 16.777 306.797 16.793 306.676 16.809 cv
306.551 16.82 306.398 16.828 306.211 16.828 cv
306.016 16.828 305.855 16.82 305.734 16.809 cv
305.605 16.793 305.504 16.777 305.434 16.75 cv
305.355 16.727 305.305 16.691 305.273 16.652 cv
305.242 16.613 305.227 16.57 305.227 16.516 cv
305.227 12.395 li
305.227 12.164 305.203 11.949 305.16 11.754 cv
305.117 11.562 305.051 11.398 304.965 11.262 cv
304.871 11.125 304.758 11.02 304.621 10.941 cv
304.477 10.867 304.313 10.828 304.129 10.828 cv
303.887 10.828 303.648 10.922 303.41 11.102 cv
303.172 11.285 302.914 11.547 302.641 11.895 cv
302.641 16.516 li
302.637 16.57 302.621 16.613 302.594 16.652 cv
302.559 16.691 302.504 16.727 302.434 16.75 cv
302.355 16.777 302.258 16.793 302.133 16.809 cv
302.008 16.82 301.848 16.828 301.66 16.828 cv
301.465 16.828 301.309 16.82 301.184 16.809 cv
301.059 16.793 300.957 16.777 300.883 16.75 cv
300.805 16.727 300.75 16.691 300.723 16.652 cv
300.688 16.613 300.672 16.57 300.676 16.516 cv
300.676 9.56601 li
300.672 9.51999 300.688 9.47299 300.715 9.42999 cv
300.738 9.39499 300.785 9.36301 300.855 9.332 cv
300.922 9.30899 301.008 9.289 301.117 9.27301 cv
301.223 9.26599 301.355 9.258 301.52 9.254 cv
301.684 9.258 301.82 9.26599 301.93 9.27301 cv
302.035 9.289 302.121 9.30899 302.184 9.332 cv
302.242 9.36301 302.285 9.39499 302.313 9.42999 cv
302.336 9.47299 302.348 9.51999 302.352 9.56601 cv
302.352 10.367 li
302.734 9.957 303.117 9.64499 303.5 9.43399 cv
303.879 9.22699 304.281 9.125 304.699 9.121 cv
304.984 9.125 305.238 9.15201 305.469 9.211 cv
305.695 9.27301 305.902 9.35901 306.082 9.46899 cv
306.262 9.582 306.414 9.71899 306.543 9.871 cv
306.672 10.027 306.781 10.199 306.871 10.391 cv
307.078 10.168 307.281 9.97699 307.484 9.81601 cv
307.68 9.65601 307.879 9.52301 308.074 9.422 cv
308.27 9.32001 308.465 9.246 308.66 9.19501 cv
308.855 9.14801 309.055 9.125 309.258 9.121 cv
309.719 9.125 310.105 9.203 310.426 9.35501 cv
310.738 9.51599 310.996 9.72699 311.191 9.992 cv
311.387 10.262 311.523 10.574 311.609 10.93 cv
311.688 11.289 311.73 11.668 311.734 12.066 cv
cp
f
320.074 12.84 mo
320.07 13.078 320.02 13.254 319.914 13.367 cv
319.805 13.484 319.656 13.543 319.477 13.539 cv
315.242 13.539 li
315.238 13.84 315.273 14.109 315.348 14.348 cv
315.414 14.59 315.527 14.793 315.684 14.961 cv
315.836 15.133 316.031 15.262 316.273 15.348 cv
316.512 15.437 316.801 15.48 317.145 15.48 cv
317.484 15.48 317.785 15.457 318.047 15.406 cv
318.305 15.359 318.531 15.305 318.723 15.242 cv
318.91 15.184 319.066 15.129 319.195 15.078 cv
319.316 15.031 319.418 15.008 319.5 15.004 cv
319.543 15.008 319.582 15.016 319.617 15.031 cv
319.645 15.051 319.672 15.082 319.691 15.129 cv
319.711 15.176 319.723 15.242 319.734 15.328 cv
319.738 15.414 319.742 15.523 319.746 15.652 cv
319.742 15.77 319.742 15.867 319.738 15.945 cv
319.73 16.027 319.723 16.094 319.715 16.148 cv
319.703 16.207 319.688 16.258 319.668 16.293 cv
319.648 16.336 319.621 16.371 319.59 16.406 cv
319.555 16.445 319.461 16.496 319.313 16.555 cv
319.156 16.621 318.965 16.684 318.734 16.738 cv
318.496 16.801 318.227 16.848 317.93 16.895 cv
317.625 16.934 317.305 16.957 316.965 16.961 cv
316.344 16.957 315.801 16.883 315.34 16.727 cv
314.871 16.574 314.484 16.336 314.176 16.02 cv
313.859 15.703 313.625 15.305 313.477 14.82 cv
313.32 14.34 313.246 13.773 313.25 13.117 cv
313.246 12.504 313.324 11.945 313.488 11.449 cv
313.645 10.953 313.879 10.535 314.191 10.187 cv
314.496 9.84399 314.871 9.578 315.309 9.39499 cv
315.746 9.215 316.238 9.125 316.793 9.121 cv
317.371 9.125 317.871 9.211 318.285 9.379 cv
318.699 9.55499 319.035 9.793 319.301 10.094 cv
319.563 10.398 319.758 10.758 319.887 11.172 cv
320.008 11.59 320.07 12.039 320.074 12.527 cv
cp
318.172 12.277 mo
318.184 11.727 318.074 11.293 317.84 10.98 cv
317.605 10.668 317.238 10.512 316.746 10.508 cv
316.496 10.512 316.281 10.559 316.098 10.648 cv
315.91 10.746 315.758 10.871 315.637 11.027 cv
315.512 11.187 315.418 11.375 315.355 11.59 cv
315.289 11.805 315.25 12.035 315.242 12.277 cv
cp
f
326.574 14.551 mo
326.57 14.949 326.496 15.297 326.352 15.598 cv
326.203 15.898 325.996 16.152 325.727 16.352 cv
325.453 16.559 325.133 16.707 324.766 16.809 cv
324.398 16.906 323.996 16.957 323.566 16.961 cv
323.301 16.957 323.055 16.937 322.82 16.902 cv
322.586 16.859 322.375 16.812 322.188 16.754 cv
322 16.695 321.844 16.633 321.719 16.57 cv
321.594 16.508 321.5 16.449 321.445 16.395 cv
321.387 16.34 321.344 16.258 321.316 16.141 cv
321.281 16.027 321.266 15.852 321.27 15.621 cv
321.266 15.473 321.273 15.352 321.285 15.258 cv
321.293 15.168 321.309 15.098 321.332 15.039 cv
321.352 14.988 321.375 14.949 321.41 14.93 cv
321.438 14.914 321.477 14.906 321.523 14.902 cv
321.578 14.906 321.664 14.937 321.777 15 cv
321.887 15.066 322.023 15.141 322.195 15.215 cv
322.359 15.297 322.555 15.367 322.773 15.434 cv
322.992 15.504 323.242 15.539 323.527 15.535 cv
323.703 15.539 323.859 15.52 324 15.48 cv
324.133 15.445 324.254 15.395 324.359 15.324 cv
324.457 15.258 324.531 15.172 324.586 15.066 cv
324.633 14.965 324.66 14.844 324.664 14.707 cv
324.66 14.551 324.613 14.418 324.52 14.309 cv
324.426 14.199 324.297 14.102 324.141 14.016 cv
323.977 13.934 323.797 13.855 323.602 13.781 cv
323.398 13.711 323.195 13.633 322.984 13.539 cv
322.773 13.453 322.566 13.352 322.371 13.234 cv
322.168 13.125 321.988 12.984 321.832 12.816 cv
321.668 12.652 321.543 12.453 321.449 12.215 cv
321.355 11.984 321.309 11.703 321.309 11.371 cv
321.309 11.043 321.371 10.738 321.5 10.457 cv
321.629 10.184 321.816 9.94501 322.063 9.746 cv
322.305 9.55099 322.602 9.39801 322.953 9.285 cv
323.301 9.17999 323.695 9.125 324.137 9.121 cv
324.352 9.125 324.563 9.14099 324.77 9.168 cv
324.973 9.203 325.16 9.242 325.328 9.285 cv
325.492 9.336 325.633 9.38699 325.75 9.43701 cv
325.863 9.496 325.945 9.543 325.996 9.578 cv
326.043 9.621 326.078 9.66 326.102 9.69501 cv
326.121 9.73801 326.133 9.785 326.145 9.836 cv
326.152 9.89099 326.164 9.957 326.172 10.035 cv
326.18 10.121 326.184 10.219 326.184 10.336 cv
326.184 10.477 326.18 10.594 326.172 10.68 cv
326.164 10.773 326.148 10.844 326.133 10.891 cv
326.113 10.945 326.09 10.98 326.063 10.996 cv
326.027 11.02 325.992 11.027 325.953 11.023 cv
325.902 11.027 325.828 11 325.734 10.941 cv
325.633 10.891 325.512 10.832 325.363 10.766 cv
325.215 10.707 325.043 10.648 324.848 10.59 cv
324.652 10.539 324.43 10.512 324.184 10.508 cv
324.004 10.512 323.852 10.531 323.723 10.562 cv
323.59 10.602 323.48 10.652 323.402 10.719 cv
323.316 10.789 323.254 10.867 323.215 10.957 cv
323.168 11.051 323.148 11.148 323.152 11.25 cv
323.148 11.41 323.199 11.547 323.301 11.652 cv
323.398 11.766 323.527 11.859 323.691 11.941 cv
323.852 12.027 324.035 12.105 324.242 12.176 cv
324.445 12.25 324.652 12.332 324.863 12.414 cv
325.07 12.504 325.277 12.602 325.488 12.715 cv
325.691 12.828 325.875 12.969 326.035 13.133 cv
326.195 13.301 326.324 13.5 326.426 13.73 cv
326.52 13.965 326.57 14.238 326.574 14.551 cv
cp
f
338.688 12.969 mo
338.684 13.566 338.605 14.109 338.453 14.594 cv
338.293 15.086 338.059 15.504 337.742 15.855 cv
337.426 16.207 337.027 16.48 336.551 16.672 cv
336.07 16.863 335.512 16.957 334.875 16.961 cv
334.254 16.957 333.715 16.875 333.262 16.703 cv
332.801 16.535 332.422 16.285 332.125 15.957 cv
331.82 15.633 331.598 15.23 331.453 14.75 cv
331.309 14.273 331.238 13.727 331.238 13.109 cv
331.238 12.52 331.316 11.98 331.473 11.488 cv
331.629 11 331.867 10.578 332.188 10.227 cv
332.504 9.879 332.898 9.60501 333.375 9.41 cv
333.848 9.21899 334.406 9.125 335.047 9.121 cv
335.672 9.125 336.211 9.207 336.668 9.375 cv
337.125 9.547 337.504 9.797 337.801 10.121 cv
338.098 10.449 338.32 10.852 338.469 11.328 cv
338.613 11.809 338.684 12.355 338.688 12.969 cv
cp
336.668 13.047 mo
336.664 12.711 336.637 12.395 336.586 12.102 cv
336.527 11.816 336.434 11.566 336.309 11.352 cv
336.176 11.141 336.004 10.973 335.793 10.852 cv
335.574 10.734 335.305 10.676 334.977 10.672 cv
334.688 10.676 334.434 10.73 334.215 10.832 cv
333.996 10.941 333.816 11.098 333.676 11.301 cv
333.535 11.508 333.43 11.754 333.359 12.039 cv
333.289 12.332 333.254 12.66 333.254 13.023 cv
333.254 13.371 333.281 13.687 333.34 13.973 cv
333.395 14.266 333.488 14.516 333.617 14.727 cv
333.742 14.941 333.914 15.105 334.137 15.219 cv
334.352 15.34 334.621 15.398 334.945 15.395 cv
335.238 15.398 335.496 15.344 335.719 15.234 cv
335.934 15.129 336.113 14.977 336.254 14.77 cv
336.395 14.57 336.496 14.324 336.566 14.035 cv
336.629 13.75 336.664 13.422 336.668 13.047 cv
cp
f
344.438 6.914 mo
344.434 7.06598 344.43 7.18701 344.422 7.27698 cv
344.41 7.37097 344.395 7.44098 344.375 7.48798 cv
344.352 7.539 344.328 7.57397 344.305 7.59003 cv
344.277 7.60901 344.25 7.617 344.219 7.617 cv
344.18 7.617 344.137 7.60901 344.098 7.59003 cv
344.051 7.57397 343.996 7.55499 343.934 7.53101 cv
343.863 7.51202 343.789 7.492 343.703 7.47302 cv
343.613 7.45697 343.508 7.44897 343.391 7.44501 cv
343.246 7.44897 343.125 7.46899 343.027 7.51202 cv
342.926 7.55902 342.844 7.62903 342.777 7.72302 cv
342.707 7.82001 342.656 7.94501 342.629 8.09802 cv
342.594 8.25 342.578 8.43701 342.582 8.65997 cv
342.582 9.30099 li
343.852 9.30099 li
343.895 9.30499 343.938 9.31601 343.98 9.34 cv
344.016 9.367 344.051 9.41 344.078 9.46899 cv
344.102 9.53101 344.121 9.61301 344.137 9.715 cv
344.148 9.81601 344.152 9.94501 344.156 10.094 cv
344.152 10.383 344.129 10.586 344.078 10.707 cv
344.023 10.832 343.945 10.895 343.852 10.891 cv
342.582 10.891 li
342.582 16.516 li
342.578 16.57 342.563 16.613 342.535 16.652 cv
342.5 16.691 342.449 16.727 342.379 16.75 cv
342.305 16.777 342.203 16.793 342.074 16.809 cv
341.941 16.82 341.781 16.828 341.598 16.828 cv
341.41 16.828 341.254 16.82 341.129 16.809 cv
341 16.793 340.898 16.777 340.824 16.75 cv
340.746 16.727 340.695 16.691 340.668 16.652 cv
340.637 16.613 340.621 16.57 340.625 16.516 cv
340.625 10.891 li
339.754 10.891 li
339.652 10.895 339.578 10.832 339.531 10.707 cv
339.48 10.586 339.453 10.383 339.457 10.094 cv
339.453 9.94501 339.461 9.81601 339.477 9.715 cv
339.488 9.61301 339.508 9.53101 339.531 9.46899 cv
339.555 9.41 339.586 9.367 339.625 9.34 cv
339.664 9.31601 339.707 9.30499 339.762 9.30099 cv
340.625 9.30099 li
340.625 8.71503 li
340.621 8.24597 340.668 7.83197 340.766 7.47302 cv
340.855 7.117 341.004 6.82001 341.207 6.586 cv
341.406 6.35199 341.66 6.17603 341.969 6.05103 cv
342.277 5.93402 342.641 5.87097 343.066 5.87097 cv
343.262 5.87097 343.453 5.89099 343.641 5.922 cv
343.82 5.961 343.965 5.99597 344.07 6.03101 cv
344.172 6.07397 344.242 6.10901 344.281 6.14099 cv
344.316 6.17603 344.348 6.22699 344.371 6.289 cv
344.395 6.35498 344.41 6.43701 344.422 6.539 cv
344.43 6.64099 344.434 6.76599 344.438 6.914 cv
cp
f
351.066 16.5 mo
351.063 16.555 351.047 16.602 351.016 16.641 cv
350.98 16.684 350.922 16.719 350.848 16.742 cv
350.766 16.77 350.664 16.789 350.535 16.805 cv
350.402 16.82 350.234 16.828 350.039 16.828 cv
349.836 16.828 349.672 16.82 349.543 16.805 cv
349.406 16.789 349.301 16.77 349.227 16.742 cv
349.145 16.719 349.09 16.684 349.059 16.641 cv
349.023 16.602 349.004 16.555 349.008 16.5 cv
349.008 6.97699 li
349.004 6.92999 349.023 6.883 349.059 6.836 cv
349.09 6.797 349.145 6.76202 349.23 6.73401 cv
349.309 6.711 349.414 6.69098 349.547 6.672 cv
349.672 6.65997 349.836 6.65198 350.039 6.64801 cv
350.234 6.65198 350.402 6.65997 350.535 6.672 cv
350.664 6.69098 350.766 6.711 350.848 6.73401 cv
350.922 6.76202 350.98 6.797 351.016 6.836 cv
351.047 6.883 351.063 6.92999 351.066 6.97699 cv
cp
f
364.211 16.516 mo
364.207 16.57 364.191 16.613 364.164 16.652 cv
364.129 16.691 364.078 16.727 364.008 16.75 cv
363.934 16.777 363.832 16.793 363.711 16.809 cv
363.586 16.82 363.43 16.828 363.238 16.828 cv
363.039 16.828 362.879 16.82 362.754 16.809 cv
362.629 16.793 362.527 16.777 362.453 16.75 cv
362.375 16.727 362.324 16.691 362.297 16.652 cv
362.27 16.613 362.254 16.57 362.258 16.516 cv
362.258 12.395 li
362.254 12.164 362.234 11.949 362.191 11.754 cv
362.145 11.562 362.074 11.398 361.988 11.262 cv
361.895 11.125 361.781 11.02 361.645 10.941 cv
361.504 10.867 361.34 10.828 361.148 10.828 cv
360.914 10.828 360.676 10.922 360.438 11.102 cv
360.199 11.285 359.941 11.547 359.66 11.895 cv
359.66 16.516 li
359.66 16.57 359.645 16.613 359.613 16.652 cv
359.582 16.691 359.527 16.727 359.453 16.75 cv
359.375 16.777 359.273 16.793 359.152 16.809 cv
359.027 16.82 358.875 16.828 358.688 16.828 cv
358.492 16.828 358.332 16.82 358.211 16.809 cv
358.082 16.793 357.98 16.777 357.91 16.75 cv
357.832 16.727 357.781 16.691 357.75 16.652 cv
357.719 16.613 357.703 16.57 357.703 16.516 cv
357.703 12.395 li
357.703 12.164 357.68 11.949 357.637 11.754 cv
357.594 11.562 357.527 11.398 357.441 11.262 cv
357.348 11.125 357.234 11.02 357.098 10.941 cv
356.953 10.867 356.789 10.828 356.605 10.828 cv
356.363 10.828 356.125 10.922 355.887 11.102 cv
355.648 11.285 355.391 11.547 355.117 11.895 cv
355.117 16.516 li
355.113 16.57 355.098 16.613 355.07 16.652 cv
355.035 16.691 354.98 16.727 354.91 16.75 cv
354.832 16.777 354.734 16.793 354.609 16.809 cv
354.484 16.82 354.324 16.828 354.137 16.828 cv
353.941 16.828 353.785 16.82 353.66 16.809 cv
353.535 16.793 353.434 16.777 353.359 16.75 cv
353.281 16.727 353.227 16.691 353.199 16.652 cv
353.164 16.613 353.148 16.57 353.152 16.516 cv
353.152 9.56601 li
353.148 9.51999 353.164 9.47299 353.191 9.42999 cv
353.215 9.39499 353.262 9.36301 353.332 9.332 cv
353.398 9.30899 353.484 9.289 353.594 9.27301 cv
353.699 9.26599 353.832 9.258 353.996 9.254 cv
354.16 9.258 354.297 9.26599 354.406 9.27301 cv
354.512 9.289 354.598 9.30899 354.66 9.332 cv
354.719 9.36301 354.762 9.39499 354.789 9.42999 cv
354.813 9.47299 354.824 9.51999 354.828 9.56601 cv
354.828 10.367 li
355.211 9.957 355.594 9.64499 355.977 9.43399 cv
356.355 9.22699 356.758 9.125 357.176 9.121 cv
357.461 9.125 357.715 9.15201 357.945 9.211 cv
358.172 9.27301 358.379 9.35901 358.559 9.46899 cv
358.738 9.582 358.891 9.71899 359.02 9.871 cv
359.148 10.027 359.258 10.199 359.348 10.391 cv
359.555 10.168 359.758 9.97699 359.961 9.81601 cv
360.156 9.65601 360.355 9.52301 360.551 9.422 cv
360.746 9.32001 360.941 9.246 361.137 9.19501 cv
361.332 9.14801 361.531 9.125 361.734 9.121 cv
362.195 9.125 362.582 9.203 362.902 9.35501 cv
363.215 9.51599 363.473 9.72699 363.668 9.992 cv
363.863 10.262 364 10.574 364.086 10.93 cv
364.164 11.289 364.207 11.668 364.211 12.066 cv
cp
f
372.008 16.539 mo
372.004 16.617 371.977 16.672 371.93 16.711 cv
371.875 16.754 371.793 16.781 371.684 16.801 cv
371.566 16.816 371.402 16.828 371.188 16.828 cv
370.949 16.828 370.777 16.816 370.676 16.801 cv
370.566 16.781 370.492 16.754 370.453 16.711 cv
370.406 16.672 370.387 16.617 370.387 16.539 cv
370.387 15.988 li
370.098 16.297 369.77 16.535 369.406 16.703 cv
369.039 16.875 368.633 16.957 368.188 16.961 cv
367.816 16.957 367.477 16.91 367.168 16.816 cv
366.859 16.723 366.594 16.582 366.367 16.387 cv
366.141 16.199 365.965 15.965 365.84 15.684 cv
365.715 15.406 365.652 15.078 365.656 14.699 cv
365.652 14.301 365.73 13.949 365.891 13.645 cv
366.047 13.348 366.285 13.102 366.602 12.906 cv
366.914 12.715 367.305 12.57 367.773 12.473 cv
368.242 12.383 368.785 12.336 369.402 12.332 cv
370.082 12.332 li
370.082 11.91 li
370.082 11.695 370.059 11.504 370.016 11.34 cv
369.969 11.18 369.895 11.043 369.797 10.93 cv
369.691 10.824 369.559 10.742 369.391 10.687 cv
369.219 10.637 369.008 10.613 368.766 10.609 cv
368.434 10.613 368.141 10.648 367.887 10.719 cv
367.625 10.793 367.398 10.875 367.203 10.961 cv
367.004 11.055 366.84 11.133 366.711 11.203 cv
366.574 11.277 366.465 11.316 366.387 11.312 cv
366.324 11.316 366.273 11.297 366.234 11.258 cv
366.188 11.223 366.152 11.172 366.125 11.102 cv
366.094 11.039 366.07 10.953 366.059 10.852 cv
366.039 10.754 366.031 10.645 366.035 10.523 cv
366.031 10.363 366.047 10.238 366.074 10.141 cv
366.098 10.051 366.145 9.965 366.223 9.88699 cv
366.293 9.81201 366.422 9.73001 366.605 9.64099 cv
366.785 9.55099 366.996 9.465 367.242 9.38699 cv
367.484 9.30899 367.754 9.246 368.043 9.19501 cv
368.332 9.14801 368.629 9.125 368.938 9.121 cv
369.48 9.125 369.945 9.17599 370.332 9.28101 cv
370.719 9.39099 371.039 9.55499 371.289 9.77301 cv
371.539 9.992 371.719 10.277 371.836 10.625 cv
371.945 10.977 372.004 11.391 372.008 11.863 cv
cp
370.082 13.562 mo
369.332 13.562 li
369.016 13.566 368.746 13.59 368.523 13.633 cv
368.297 13.684 368.113 13.754 367.977 13.844 cv
367.832 13.941 367.73 14.055 367.668 14.184 cv
367.602 14.32 367.566 14.469 367.57 14.637 cv
367.566 14.93 367.66 15.16 367.848 15.324 cv
368.031 15.492 368.289 15.574 368.617 15.574 cv
368.891 15.574 369.141 15.504 369.375 15.363 cv
369.602 15.223 369.84 15.02 370.082 14.746 cv
cp
f
380.23 10.047 mo
380.227 10.301 380.199 10.484 380.145 10.602 cv
380.086 10.723 380.016 10.781 379.938 10.781 cv
379.117 10.781 li
379.23 10.906 379.313 11.051 379.363 11.207 cv
379.41 11.367 379.434 11.531 379.438 11.699 cv
379.434 12.109 379.367 12.469 379.234 12.781 cv
379.098 13.098 378.902 13.363 378.652 13.574 cv
378.398 13.793 378.098 13.957 377.742 14.066 cv
377.383 14.184 376.984 14.238 376.555 14.234 cv
376.328 14.238 376.117 14.211 375.914 14.152 cv
375.711 14.102 375.555 14.039 375.445 13.961 cv
375.383 14.031 375.324 14.109 375.277 14.203 cv
375.227 14.297 375.203 14.402 375.207 14.512 cv
375.203 14.668 375.27 14.789 375.402 14.883 cv
375.531 14.98 375.719 15.035 375.961 15.043 cv
377.652 15.105 li
378.047 15.121 378.398 15.18 378.707 15.273 cv
379.016 15.375 379.277 15.508 379.488 15.68 cv
379.699 15.855 379.859 16.066 379.969 16.309 cv
380.078 16.555 380.133 16.828 380.137 17.141 cv
380.133 17.477 380.059 17.801 379.91 18.109 cv
379.762 18.41 379.535 18.672 379.234 18.898 cv
378.93 19.117 378.551 19.297 378.098 19.43 cv
377.641 19.559 377.109 19.621 376.508 19.625 cv
375.91 19.621 375.406 19.574 374.988 19.484 cv
374.57 19.387 374.227 19.258 373.961 19.094 cv
373.691 18.926 373.496 18.727 373.379 18.5 cv
373.254 18.266 373.195 18.012 373.195 17.738 cv
373.195 17.566 373.215 17.406 373.262 17.25 cv
373.301 17.094 373.367 16.941 373.457 16.801 cv
373.539 16.656 373.645 16.523 373.77 16.391 cv
373.895 16.262 374.035 16.137 374.199 16.016 cv
373.973 15.902 373.801 15.742 373.68 15.531 cv
373.559 15.328 373.5 15.102 373.5 14.855 cv
373.5 14.555 373.566 14.277 373.707 14.02 cv
373.844 13.77 374.027 13.539 374.254 13.336 cv
374.07 13.156 373.926 12.941 373.816 12.684 cv
373.707 12.434 373.652 12.113 373.656 11.73 cv
373.652 11.328 373.723 10.969 373.867 10.645 cv
374.008 10.328 374.207 10.059 374.465 9.836 cv
374.719 9.617 375.023 9.44501 375.375 9.328 cv
375.727 9.211 376.117 9.15201 376.547 9.15201 cv
376.766 9.15201 376.973 9.168 377.172 9.19101 cv
377.371 9.22299 377.559 9.258 377.73 9.30099 cv
379.938 9.30099 li
380.02 9.30499 380.09 9.36301 380.148 9.47299 cv
380.199 9.59 380.227 9.78101 380.23 10.047 cv
cp
377.715 11.691 mo
377.711 11.32 377.609 11.031 377.402 10.82 cv
377.191 10.617 376.898 10.512 376.523 10.508 cv
376.328 10.512 376.156 10.543 376.016 10.605 cv
375.867 10.672 375.746 10.762 375.652 10.871 cv
375.551 10.984 375.48 11.113 375.438 11.262 cv
375.387 11.41 375.363 11.566 375.367 11.723 cv
375.363 12.082 375.469 12.359 375.68 12.562 cv
375.887 12.77 376.176 12.875 376.547 12.871 cv
376.742 12.875 376.91 12.844 377.059 12.777 cv
377.199 12.719 377.32 12.633 377.422 12.52 cv
377.516 12.414 377.59 12.285 377.641 12.141 cv
377.688 12 377.711 11.852 377.715 11.691 cv
cp
378.176 17.242 mo
378.176 17.004 378.082 16.828 377.895 16.703 cv
377.707 16.582 377.449 16.512 377.121 16.5 cv
375.727 16.461 li
375.59 16.562 375.48 16.656 375.402 16.746 cv
375.32 16.836 375.258 16.922 375.211 17.008 cv
375.16 17.09 375.125 17.172 375.113 17.25 cv
375.094 17.328 375.086 17.406 375.09 17.492 cv
375.086 17.746 375.219 17.945 375.48 18.082 cv
375.742 18.215 376.113 18.281 376.594 18.285 cv
376.887 18.281 377.133 18.25 377.34 18.195 cv
377.539 18.133 377.703 18.055 377.832 17.957 cv
377.953 17.855 378.043 17.746 378.098 17.625 cv
378.148 17.504 378.176 17.375 378.176 17.242 cv
cp
f
387.855 12.84 mo
387.852 13.078 387.801 13.254 387.695 13.367 cv
387.586 13.484 387.438 13.543 387.258 13.539 cv
383.023 13.539 li
383.02 13.84 383.055 14.109 383.129 14.348 cv
383.195 14.59 383.309 14.793 383.465 14.961 cv
383.617 15.133 383.813 15.262 384.055 15.348 cv
384.293 15.437 384.582 15.48 384.926 15.48 cv
385.266 15.48 385.566 15.457 385.828 15.406 cv
386.086 15.359 386.313 15.305 386.504 15.242 cv
386.691 15.184 386.848 15.129 386.977 15.078 cv
387.098 15.031 387.199 15.008 387.281 15.004 cv
387.324 15.008 387.363 15.016 387.398 15.031 cv
387.426 15.051 387.453 15.082 387.473 15.129 cv
387.492 15.176 387.504 15.242 387.516 15.328 cv
387.52 15.414 387.523 15.523 387.527 15.652 cv
387.523 15.77 387.523 15.867 387.52 15.945 cv
387.512 16.027 387.504 16.094 387.496 16.148 cv
387.484 16.207 387.469 16.258 387.449 16.293 cv
387.43 16.336 387.402 16.371 387.371 16.406 cv
387.336 16.445 387.242 16.496 387.094 16.555 cv
386.938 16.621 386.746 16.684 386.516 16.738 cv
386.277 16.801 386.008 16.848 385.711 16.895 cv
385.406 16.934 385.086 16.957 384.746 16.961 cv
384.125 16.957 383.582 16.883 383.121 16.727 cv
382.652 16.574 382.266 16.336 381.957 16.02 cv
381.641 15.703 381.406 15.305 381.258 14.82 cv
381.102 14.34 381.027 13.773 381.031 13.117 cv
381.027 12.504 381.105 11.945 381.27 11.449 cv
381.426 10.953 381.66 10.535 381.973 10.187 cv
382.277 9.84399 382.652 9.578 383.09 9.39499 cv
383.527 9.215 384.02 9.125 384.574 9.121 cv
385.152 9.125 385.652 9.211 386.066 9.379 cv
386.48 9.55499 386.816 9.793 387.082 10.094 cv
387.344 10.398 387.539 10.758 387.668 11.172 cv
387.789 11.59 387.852 12.039 387.855 12.527 cv
cp
385.953 12.277 mo
385.965 11.727 385.855 11.293 385.621 10.98 cv
385.387 10.668 385.02 10.512 384.527 10.508 cv
384.277 10.512 384.063 10.559 383.879 10.648 cv
383.691 10.746 383.539 10.871 383.418 11.027 cv
383.293 11.187 383.199 11.375 383.137 11.59 cv
383.07 11.805 383.031 12.035 383.023 12.277 cv
cp
f
394.355 14.551 mo
394.352 14.949 394.277 15.297 394.133 15.598 cv
393.984 15.898 393.777 16.152 393.508 16.352 cv
393.234 16.559 392.914 16.707 392.547 16.809 cv
392.18 16.906 391.777 16.957 391.348 16.961 cv
391.082 16.957 390.836 16.937 390.602 16.902 cv
390.367 16.859 390.156 16.812 389.969 16.754 cv
389.781 16.695 389.625 16.633 389.5 16.57 cv
389.375 16.508 389.281 16.449 389.227 16.395 cv
389.168 16.34 389.125 16.258 389.098 16.141 cv
389.063 16.027 389.047 15.852 389.051 15.621 cv
389.047 15.473 389.055 15.352 389.066 15.258 cv
389.074 15.168 389.09 15.098 389.113 15.039 cv
389.133 14.988 389.156 14.949 389.191 14.93 cv
389.219 14.914 389.258 14.906 389.305 14.902 cv
389.359 14.906 389.445 14.937 389.559 15 cv
389.668 15.066 389.805 15.141 389.977 15.215 cv
390.141 15.297 390.336 15.367 390.555 15.434 cv
390.773 15.504 391.023 15.539 391.309 15.535 cv
391.484 15.539 391.641 15.52 391.781 15.48 cv
391.914 15.445 392.035 15.395 392.141 15.324 cv
392.238 15.258 392.313 15.172 392.367 15.066 cv
392.414 14.965 392.441 14.844 392.445 14.707 cv
392.441 14.551 392.395 14.418 392.301 14.309 cv
392.207 14.199 392.078 14.102 391.922 14.016 cv
391.758 13.934 391.578 13.855 391.383 13.781 cv
391.18 13.711 390.977 13.633 390.766 13.539 cv
390.555 13.453 390.348 13.352 390.152 13.234 cv
389.949 13.125 389.77 12.984 389.613 12.816 cv
389.449 12.652 389.324 12.453 389.23 12.215 cv
389.137 11.984 389.09 11.703 389.09 11.371 cv
389.09 11.043 389.152 10.738 389.281 10.457 cv
389.41 10.184 389.598 9.94501 389.844 9.746 cv
390.086 9.55099 390.383 9.39801 390.734 9.285 cv
391.082 9.17999 391.477 9.125 391.918 9.121 cv
392.133 9.125 392.344 9.14099 392.551 9.168 cv
392.754 9.203 392.941 9.242 393.109 9.285 cv
393.273 9.336 393.414 9.38699 393.531 9.43701 cv
393.645 9.496 393.727 9.543 393.777 9.578 cv
393.824 9.621 393.859 9.66 393.883 9.69501 cv
393.902 9.73801 393.914 9.785 393.926 9.836 cv
393.934 9.89099 393.945 9.957 393.953 10.035 cv
393.961 10.121 393.965 10.219 393.965 10.336 cv
393.965 10.477 393.961 10.594 393.953 10.68 cv
393.945 10.773 393.93 10.844 393.914 10.891 cv
393.895 10.945 393.871 10.98 393.844 10.996 cv
393.809 11.02 393.773 11.027 393.734 11.023 cv
393.684 11.027 393.609 11 393.516 10.941 cv
393.414 10.891 393.293 10.832 393.145 10.766 cv
392.996 10.707 392.824 10.648 392.629 10.59 cv
392.434 10.539 392.211 10.512 391.965 10.508 cv
391.785 10.512 391.633 10.531 391.504 10.562 cv
391.371 10.602 391.262 10.652 391.184 10.719 cv
391.098 10.789 391.035 10.867 390.996 10.957 cv
390.949 11.051 390.93 11.148 390.934 11.25 cv
390.93 11.41 390.98 11.547 391.082 11.652 cv
391.18 11.766 391.309 11.859 391.473 11.941 cv
391.633 12.027 391.816 12.105 392.023 12.176 cv
392.227 12.25 392.434 12.332 392.645 12.414 cv
392.852 12.504 393.059 12.602 393.27 12.715 cv
393.473 12.828 393.656 12.969 393.816 13.133 cv
393.977 13.301 394.105 13.5 394.207 13.73 cv
394.301 13.965 394.352 14.238 394.355 14.551 cv
cp
f
403.188 12.863 mo
403.184 13.164 403.156 13.375 403.102 13.492 cv
403.043 13.617 402.953 13.676 402.828 13.672 cv
399.586 13.672 li
399.457 13.676 399.363 13.613 399.309 13.488 cv
399.246 13.367 399.219 13.16 399.223 12.863 cv
399.219 12.574 399.246 12.367 399.309 12.246 cv
399.363 12.129 399.457 12.07 399.586 12.066 cv
402.828 12.066 li
402.891 12.07 402.941 12.082 402.988 12.105 cv
403.027 12.133 403.066 12.18 403.102 12.238 cv
403.129 12.305 403.152 12.387 403.168 12.488 cv
403.18 12.594 403.184 12.719 403.188 12.863 cv
cp
f
415.738 16.516 mo
415.738 16.578 415.727 16.625 415.707 16.66 cv
415.688 16.703 415.641 16.734 415.563 16.758 cv
415.484 16.781 415.367 16.797 415.219 16.812 cv
415.063 16.82 414.859 16.828 414.602 16.828 cv
414.383 16.828 414.207 16.82 414.078 16.812 cv
413.949 16.797 413.848 16.781 413.773 16.754 cv
413.695 16.727 413.641 16.691 413.613 16.645 cv
413.578 16.605 413.555 16.551 413.535 16.484 cv
412.629 14.234 li
412.52 13.98 412.414 13.754 412.313 13.555 cv
412.203 13.359 412.09 13.195 411.965 13.062 cv
411.836 12.934 411.688 12.832 411.523 12.762 cv
411.355 12.695 411.164 12.664 410.949 12.66 cv
410.309 12.66 li
410.309 16.5 li
410.305 16.555 410.289 16.602 410.258 16.641 cv
410.223 16.684 410.168 16.719 410.09 16.742 cv
410.012 16.77 409.906 16.789 409.777 16.805 cv
409.645 16.82 409.48 16.828 409.281 16.828 cv
409.082 16.828 408.914 16.82 408.785 16.805 cv
408.648 16.789 408.543 16.77 408.469 16.742 cv
408.387 16.719 408.332 16.684 408.305 16.641 cv
408.27 16.602 408.254 16.555 408.258 16.5 cv
408.258 7.34399 li
408.254 7.117 408.313 6.953 408.434 6.84802 cv
408.547 6.75 408.691 6.69897 408.867 6.69501 cv
411.477 6.69501 li
411.738 6.69897 411.957 6.703 412.133 6.711 cv
412.301 6.72302 412.457 6.73401 412.602 6.75 cv
413.004 6.80902 413.367 6.90997 413.691 7.047 cv
414.016 7.19098 414.293 7.375 414.52 7.59802 cv
414.746 7.828 414.918 8.09399 415.039 8.40198 cv
415.156 8.711 415.215 9.06601 415.219 9.465 cv
415.215 9.80499 415.172 10.113 415.09 10.387 cv
415 10.668 414.875 10.914 414.711 11.133 cv
414.543 11.352 414.336 11.543 414.094 11.699 cv
413.848 11.863 413.57 11.992 413.262 12.09 cv
413.41 12.164 413.555 12.254 413.688 12.355 cv
413.82 12.465 413.941 12.59 414.059 12.734 cv
414.172 12.883 414.285 13.051 414.391 13.238 cv
414.492 13.43 414.594 13.645 414.695 13.883 cv
415.547 15.871 li
415.621 16.07 415.672 16.211 415.699 16.301 cv
415.723 16.395 415.738 16.469 415.738 16.516 cv
cp
413.098 9.67599 mo
413.094 9.34399 413.02 9.06201 412.871 8.83197 cv
412.719 8.60498 412.473 8.44501 412.133 8.34802 cv
412.027 8.32397 411.91 8.30103 411.777 8.28497 cv
411.645 8.27002 411.461 8.26202 411.227 8.26202 cv
410.309 8.26202 li
410.309 11.125 li
411.352 11.125 li
411.641 11.129 411.898 11.094 412.117 11.02 cv
412.336 10.953 412.516 10.852 412.66 10.723 cv
412.805 10.598 412.914 10.445 412.988 10.266 cv
413.059 10.09 413.094 9.89499 413.098 9.67599 cv
cp
f
423.324 12.84 mo
423.32 13.078 423.27 13.254 423.164 13.367 cv
423.055 13.484 422.906 13.543 422.727 13.539 cv
418.492 13.539 li
418.488 13.84 418.523 14.109 418.598 14.348 cv
418.664 14.59 418.777 14.793 418.934 14.961 cv
419.086 15.133 419.281 15.262 419.523 15.348 cv
419.762 15.437 420.051 15.48 420.395 15.48 cv
420.734 15.48 421.035 15.457 421.297 15.406 cv
421.555 15.359 421.781 15.305 421.973 15.242 cv
422.16 15.184 422.316 15.129 422.445 15.078 cv
422.566 15.031 422.668 15.008 422.75 15.004 cv
422.793 15.008 422.832 15.016 422.867 15.031 cv
422.895 15.051 422.922 15.082 422.941 15.129 cv
422.961 15.176 422.973 15.242 422.984 15.328 cv
422.988 15.414 422.992 15.523 422.996 15.652 cv
422.992 15.77 422.992 15.867 422.988 15.945 cv
422.98 16.027 422.973 16.094 422.965 16.148 cv
422.953 16.207 422.938 16.258 422.918 16.293 cv
422.898 16.336 422.871 16.371 422.84 16.406 cv
422.805 16.445 422.711 16.496 422.563 16.555 cv
422.406 16.621 422.215 16.684 421.984 16.738 cv
421.746 16.801 421.477 16.848 421.18 16.895 cv
420.875 16.934 420.555 16.957 420.215 16.961 cv
419.594 16.957 419.051 16.883 418.59 16.727 cv
418.121 16.574 417.734 16.336 417.426 16.02 cv
417.109 15.703 416.875 15.305 416.727 14.82 cv
416.57 14.34 416.496 13.773 416.5 13.117 cv
416.496 12.504 416.574 11.945 416.738 11.449 cv
416.895 10.953 417.129 10.535 417.441 10.187 cv
417.746 9.84399 418.121 9.578 418.559 9.39499 cv
418.996 9.215 419.488 9.125 420.043 9.121 cv
420.621 9.125 421.121 9.211 421.535 9.379 cv
421.949 9.55499 422.285 9.793 422.551 10.094 cv
422.813 10.398 423.008 10.758 423.137 11.172 cv
423.258 11.59 423.32 12.039 423.324 12.527 cv
cp
421.422 12.277 mo
421.434 11.727 421.324 11.293 421.09 10.98 cv
420.855 10.668 420.488 10.512 419.996 10.508 cv
419.746 10.512 419.531 10.559 419.348 10.648 cv
419.16 10.746 419.008 10.871 418.887 11.027 cv
418.762 11.187 418.668 11.375 418.605 11.59 cv
418.539 11.805 418.5 12.035 418.492 12.277 cv
cp
f
435.988 16.516 mo
435.984 16.57 435.969 16.613 435.941 16.652 cv
435.906 16.691 435.855 16.727 435.785 16.75 cv
435.711 16.777 435.609 16.793 435.488 16.809 cv
435.363 16.82 435.207 16.828 435.016 16.828 cv
434.816 16.828 434.656 16.82 434.531 16.809 cv
434.406 16.793 434.305 16.777 434.23 16.75 cv
434.152 16.727 434.102 16.691 434.074 16.652 cv
434.047 16.613 434.031 16.57 434.035 16.516 cv
434.035 12.395 li
434.031 12.164 434.012 11.949 433.969 11.754 cv
433.922 11.562 433.852 11.398 433.766 11.262 cv
433.672 11.125 433.559 11.02 433.422 10.941 cv
433.281 10.867 433.117 10.828 432.926 10.828 cv
432.691 10.828 432.453 10.922 432.215 11.102 cv
431.977 11.285 431.719 11.547 431.438 11.895 cv
431.438 16.516 li
431.438 16.57 431.422 16.613 431.391 16.652 cv
431.359 16.691 431.305 16.727 431.23 16.75 cv
431.152 16.777 431.051 16.793 430.93 16.809 cv
430.805 16.82 430.652 16.828 430.465 16.828 cv
430.27 16.828 430.109 16.82 429.988 16.809 cv
429.859 16.793 429.758 16.777 429.688 16.75 cv
429.609 16.727 429.559 16.691 429.527 16.652 cv
429.496 16.613 429.48 16.57 429.48 16.516 cv
429.48 12.395 li
429.48 12.164 429.457 11.949 429.414 11.754 cv
429.371 11.562 429.305 11.398 429.219 11.262 cv
429.125 11.125 429.012 11.02 428.875 10.941 cv
428.73 10.867 428.566 10.828 428.383 10.828 cv
428.141 10.828 427.902 10.922 427.664 11.102 cv
427.426 11.285 427.168 11.547 426.895 11.895 cv
426.895 16.516 li
426.891 16.57 426.875 16.613 426.848 16.652 cv
426.813 16.691 426.758 16.727 426.688 16.75 cv
426.609 16.777 426.512 16.793 426.387 16.809 cv
426.262 16.82 426.102 16.828 425.914 16.828 cv
425.719 16.828 425.563 16.82 425.438 16.809 cv
425.313 16.793 425.211 16.777 425.137 16.75 cv
425.059 16.727 425.004 16.691 424.977 16.652 cv
424.941 16.613 424.926 16.57 424.93 16.516 cv
424.93 9.56601 li
424.926 9.51999 424.941 9.47299 424.969 9.42999 cv
424.992 9.39499 425.039 9.36301 425.109 9.332 cv
425.176 9.30899 425.262 9.289 425.371 9.27301 cv
425.477 9.26599 425.609 9.258 425.773 9.254 cv
425.938 9.258 426.074 9.26599 426.184 9.27301 cv
426.289 9.289 426.375 9.30899 426.438 9.332 cv
426.496 9.36301 426.539 9.39499 426.566 9.42999 cv
426.59 9.47299 426.602 9.51999 426.605 9.56601 cv
426.605 10.367 li
426.988 9.957 427.371 9.64499 427.754 9.43399 cv
428.133 9.22699 428.535 9.125 428.953 9.121 cv
429.238 9.125 429.492 9.15201 429.723 9.211 cv
429.949 9.27301 430.156 9.35901 430.336 9.46899 cv
430.516 9.582 430.668 9.71899 430.797 9.871 cv
430.926 10.027 431.035 10.199 431.125 10.391 cv
431.332 10.168 431.535 9.97699 431.738 9.81601 cv
431.934 9.65601 432.133 9.52301 432.328 9.422 cv
432.523 9.32001 432.719 9.246 432.914 9.19501 cv
433.109 9.14801 433.309 9.125 433.512 9.121 cv
433.973 9.125 434.359 9.203 434.68 9.35501 cv
434.992 9.51599 435.25 9.72699 435.445 9.992 cv
435.641 10.262 435.777 10.574 435.863 10.93 cv
435.941 11.289 435.984 11.668 435.988 12.066 cv
cp
f
444.938 12.969 mo
444.934 13.566 444.855 14.109 444.703 14.594 cv
444.543 15.086 444.309 15.504 443.992 15.855 cv
443.676 16.207 443.277 16.48 442.801 16.672 cv
442.32 16.863 441.762 16.957 441.125 16.961 cv
440.504 16.957 439.965 16.875 439.512 16.703 cv
439.051 16.535 438.672 16.285 438.375 15.957 cv
438.07 15.633 437.848 15.23 437.703 14.75 cv
437.559 14.273 437.488 13.727 437.488 13.109 cv
437.488 12.52 437.566 11.98 437.723 11.488 cv
437.879 11 438.117 10.578 438.438 10.227 cv
438.754 9.879 439.148 9.60501 439.625 9.41 cv
440.098 9.21899 440.656 9.125 441.297 9.121 cv
441.922 9.125 442.461 9.207 442.918 9.375 cv
443.375 9.547 443.754 9.797 444.051 10.121 cv
444.348 10.449 444.57 10.852 444.719 11.328 cv
444.863 11.809 444.934 12.355 444.938 12.969 cv
cp
442.918 13.047 mo
442.914 12.711 442.887 12.395 442.836 12.102 cv
442.777 11.816 442.684 11.566 442.559 11.352 cv
442.426 11.141 442.254 10.973 442.043 10.852 cv
441.824 10.734 441.555 10.676 441.227 10.672 cv
440.938 10.676 440.684 10.73 440.465 10.832 cv
440.246 10.941 440.066 11.098 439.926 11.301 cv
439.785 11.508 439.68 11.754 439.609 12.039 cv
439.539 12.332 439.504 12.66 439.504 13.023 cv
439.504 13.371 439.531 13.687 439.59 13.973 cv
439.645 14.266 439.738 14.516 439.867 14.727 cv
439.992 14.941 440.164 15.105 440.387 15.219 cv
440.602 15.34 440.871 15.398 441.195 15.395 cv
441.488 15.398 441.746 15.344 441.969 15.234 cv
442.184 15.129 442.363 14.977 442.504 14.77 cv
442.645 14.57 442.746 14.324 442.816 14.035 cv
442.879 13.75 442.914 13.422 442.918 13.047 cv
cp
f
450.641 15.832 mo
450.641 16.059 450.625 16.234 450.598 16.355 cv
450.566 16.48 450.527 16.566 450.484 16.613 cv
450.434 16.664 450.367 16.707 450.277 16.746 cv
450.184 16.785 450.074 16.816 449.957 16.848 cv
449.832 16.871 449.699 16.895 449.559 16.914 cv
449.414 16.926 449.273 16.934 449.129 16.937 cv
448.738 16.934 448.398 16.883 448.113 16.789 cv
447.828 16.687 447.594 16.539 447.406 16.332 cv
447.219 16.129 447.078 15.871 446.992 15.559 cv
446.898 15.25 446.855 14.879 446.859 14.449 cv
446.859 10.891 li
446.027 10.891 li
445.926 10.895 445.852 10.832 445.801 10.707 cv
445.746 10.586 445.719 10.383 445.723 10.094 cv
445.719 9.94501 445.727 9.81601 445.742 9.715 cv
445.754 9.61301 445.773 9.53101 445.801 9.46899 cv
445.824 9.41 445.855 9.367 445.898 9.34 cv
445.934 9.31601 445.98 9.30499 446.035 9.30099 cv
446.859 9.30099 li
446.859 7.75 li
446.855 7.703 446.871 7.65601 446.902 7.60901 cv
446.93 7.57001 446.98 7.53497 447.059 7.50403 cv
447.133 7.47998 447.234 7.45697 447.363 7.44098 cv
447.488 7.42999 447.645 7.42603 447.836 7.422 cv
448.023 7.42603 448.184 7.42999 448.313 7.44098 cv
448.438 7.45697 448.539 7.47998 448.613 7.50403 cv
448.684 7.53497 448.734 7.57001 448.77 7.60901 cv
448.797 7.65601 448.813 7.703 448.816 7.75 cv
448.816 9.30099 li
450.328 9.30099 li
450.379 9.30499 450.426 9.31601 450.465 9.34 cv
450.504 9.367 450.535 9.41 450.563 9.46899 cv
450.586 9.53101 450.605 9.61301 450.621 9.715 cv
450.633 9.81601 450.641 9.94501 450.641 10.094 cv
450.641 10.383 450.613 10.586 450.563 10.707 cv
450.508 10.832 450.434 10.895 450.336 10.891 cv
448.816 10.891 li
448.816 14.156 li
448.813 14.535 448.871 14.82 448.996 15.008 cv
449.113 15.199 449.328 15.293 449.633 15.293 cv
449.734 15.293 449.828 15.285 449.914 15.266 cv
449.996 15.25 450.07 15.23 450.137 15.203 cv
450.199 15.184 450.254 15.16 450.301 15.141 cv
450.344 15.125 450.383 15.117 450.422 15.113 cv
450.449 15.117 450.48 15.125 450.512 15.141 cv
450.539 15.16 450.559 15.199 450.578 15.25 cv
450.59 15.309 450.605 15.383 450.621 15.473 cv
450.633 15.57 450.641 15.687 450.641 15.832 cv
cp
f
458.23 12.84 mo
458.227 13.078 458.176 13.254 458.07 13.367 cv
457.961 13.484 457.813 13.543 457.633 13.539 cv
453.398 13.539 li
453.395 13.84 453.43 14.109 453.504 14.348 cv
453.57 14.59 453.684 14.793 453.84 14.961 cv
453.992 15.133 454.188 15.262 454.43 15.348 cv
454.668 15.437 454.957 15.48 455.301 15.48 cv
455.641 15.48 455.941 15.457 456.203 15.406 cv
456.461 15.359 456.688 15.305 456.879 15.242 cv
457.066 15.184 457.223 15.129 457.352 15.078 cv
457.473 15.031 457.574 15.008 457.656 15.004 cv
457.699 15.008 457.738 15.016 457.773 15.031 cv
457.801 15.051 457.828 15.082 457.848 15.129 cv
457.867 15.176 457.879 15.242 457.891 15.328 cv
457.895 15.414 457.898 15.523 457.902 15.652 cv
457.898 15.77 457.898 15.867 457.895 15.945 cv
457.887 16.027 457.879 16.094 457.871 16.148 cv
457.859 16.207 457.844 16.258 457.824 16.293 cv
457.805 16.336 457.777 16.371 457.746 16.406 cv
457.711 16.445 457.617 16.496 457.469 16.555 cv
457.313 16.621 457.121 16.684 456.891 16.738 cv
456.652 16.801 456.383 16.848 456.086 16.895 cv
455.781 16.934 455.461 16.957 455.121 16.961 cv
454.5 16.957 453.957 16.883 453.496 16.727 cv
453.027 16.574 452.641 16.336 452.332 16.02 cv
452.016 15.703 451.781 15.305 451.633 14.82 cv
451.477 14.34 451.402 13.773 451.406 13.117 cv
451.402 12.504 451.48 11.945 451.645 11.449 cv
451.801 10.953 452.035 10.535 452.348 10.187 cv
452.652 9.84399 453.027 9.578 453.465 9.39499 cv
453.902 9.215 454.395 9.125 454.949 9.121 cv
455.527 9.125 456.027 9.211 456.441 9.379 cv
456.855 9.55499 457.191 9.793 457.457 10.094 cv
457.719 10.398 457.914 10.758 458.043 11.172 cv
458.164 11.59 458.227 12.039 458.23 12.527 cv
cp
456.328 12.277 mo
456.34 11.727 456.23 11.293 455.996 10.98 cv
455.762 10.668 455.395 10.512 454.902 10.508 cv
454.652 10.512 454.438 10.559 454.254 10.648 cv
454.066 10.746 453.914 10.871 453.793 11.027 cv
453.668 11.187 453.574 11.375 453.512 11.59 cv
453.445 11.805 453.406 12.035 453.398 12.277 cv
cp
f
475.535 16.5 mo
475.531 16.555 475.52 16.602 475.492 16.641 cv
475.461 16.684 475.406 16.719 475.336 16.742 cv
475.258 16.77 475.16 16.789 475.035 16.805 cv
474.91 16.82 474.75 16.828 474.559 16.828 cv
474.371 16.828 474.215 16.82 474.094 16.805 cv
473.965 16.789 473.867 16.77 473.797 16.742 cv
473.723 16.719 473.672 16.684 473.641 16.641 cv
473.609 16.602 473.594 16.555 473.594 16.5 cv
473.594 8.29303 li
473.578 8.29303 li
470.656 16.492 li
470.633 16.562 470.598 16.617 470.555 16.66 cv
470.504 16.707 470.441 16.742 470.363 16.766 cv
470.281 16.793 470.18 16.809 470.055 16.816 cv
469.93 16.824 469.777 16.828 469.605 16.828 cv
469.426 16.828 469.277 16.82 469.152 16.809 cv
469.027 16.793 468.922 16.773 468.844 16.746 cv
468.758 16.719 468.695 16.684 468.652 16.641 cv
468.602 16.602 468.57 16.555 468.559 16.492 cv
465.738 8.29303 li
465.723 8.29303 li
465.723 16.5 li
465.719 16.555 465.703 16.602 465.68 16.641 cv
465.648 16.684 465.598 16.719 465.52 16.742 cv
465.441 16.77 465.34 16.789 465.219 16.805 cv
465.094 16.82 464.938 16.828 464.75 16.828 cv
464.559 16.828 464.402 16.82 464.281 16.805 cv
464.152 16.789 464.051 16.77 463.98 16.742 cv
463.902 16.719 463.852 16.684 463.824 16.641 cv
463.793 16.602 463.777 16.555 463.781 16.5 cv
463.781 7.51599 li
463.777 7.25403 463.848 7.05103 463.992 6.90601 cv
464.129 6.77002 464.316 6.69897 464.555 6.69501 cv
465.895 6.69501 li
466.133 6.69897 466.336 6.71899 466.508 6.75403 cv
466.676 6.797 466.824 6.85901 466.953 6.94897 cv
467.074 7.04303 467.18 7.164 467.266 7.30902 cv
467.348 7.461 467.418 7.64502 467.484 7.85901 cv
469.668 13.867 li
469.699 13.867 li
471.957 7.875 li
472.023 7.65601 472.098 7.47302 472.18 7.32001 cv
472.258 7.172 472.352 7.05103 472.461 6.953 cv
472.566 6.86298 472.691 6.797 472.836 6.75403 cv
472.98 6.71899 473.148 6.69897 473.344 6.69501 cv
474.723 6.69501 li
474.859 6.69897 474.98 6.71503 475.086 6.75 cv
475.184 6.789 475.266 6.84399 475.336 6.90997 cv
475.398 6.98401 475.449 7.07001 475.484 7.16803 cv
475.516 7.27301 475.531 7.39099 475.535 7.51599 cv
cp
f
484.645 12.969 mo
484.641 13.566 484.563 14.109 484.41 14.594 cv
484.25 15.086 484.016 15.504 483.699 15.855 cv
483.383 16.207 482.984 16.48 482.508 16.672 cv
482.027 16.863 481.469 16.957 480.832 16.961 cv
480.211 16.957 479.672 16.875 479.219 16.703 cv
478.758 16.535 478.379 16.285 478.082 15.957 cv
477.777 15.633 477.555 15.23 477.41 14.75 cv
477.266 14.273 477.195 13.727 477.195 13.109 cv
477.195 12.52 477.273 11.98 477.43 11.488 cv
477.586 11 477.824 10.578 478.145 10.227 cv
478.461 9.879 478.855 9.60501 479.332 9.41 cv
479.805 9.21899 480.363 9.125 481.004 9.121 cv
481.629 9.125 482.168 9.207 482.625 9.375 cv
483.082 9.547 483.461 9.797 483.758 10.121 cv
484.055 10.449 484.277 10.852 484.426 11.328 cv
484.57 11.809 484.641 12.355 484.645 12.969 cv
cp
482.625 13.047 mo
482.621 12.711 482.594 12.395 482.543 12.102 cv
482.484 11.816 482.391 11.566 482.266 11.352 cv
482.133 11.141 481.961 10.973 481.75 10.852 cv
481.531 10.734 481.262 10.676 480.934 10.672 cv
480.645 10.676 480.391 10.73 480.172 10.832 cv
479.953 10.941 479.773 11.098 479.633 11.301 cv
479.492 11.508 479.387 11.754 479.316 12.039 cv
479.246 12.332 479.211 12.66 479.211 13.023 cv
479.211 13.371 479.238 13.687 479.297 13.973 cv
479.352 14.266 479.445 14.516 479.574 14.727 cv
479.699 14.941 479.871 15.105 480.094 15.219 cv
480.309 15.34 480.578 15.398 480.902 15.395 cv
481.195 15.398 481.453 15.344 481.676 15.234 cv
481.891 15.129 482.07 14.977 482.211 14.77 cv
482.352 14.57 482.453 14.324 482.523 14.035 cv
482.586 13.75 482.621 13.422 482.625 13.047 cv
cp
f
492.793 16.516 mo
492.789 16.578 492.777 16.625 492.754 16.66 cv
492.727 16.703 492.68 16.734 492.621 16.758 cv
492.555 16.781 492.473 16.797 492.367 16.812 cv
492.262 16.82 492.129 16.828 491.977 16.828 cv
491.805 16.828 491.672 16.82 491.57 16.812 cv
491.465 16.797 491.379 16.781 491.316 16.758 cv
491.25 16.734 491.203 16.703 491.176 16.66 cv
491.145 16.625 491.129 16.578 491.133 16.516 cv
491.133 15.746 li
490.773 16.133 490.398 16.43 490.008 16.641 cv
489.609 16.852 489.176 16.957 488.703 16.961 cv
488.168 16.957 487.719 16.855 487.355 16.652 cv
486.988 16.449 486.691 16.176 486.461 15.824 cv
486.227 15.48 486.059 15.074 485.957 14.605 cv
485.855 14.145 485.805 13.652 485.805 13.133 cv
485.805 12.52 485.867 11.965 486 11.469 cv
486.129 10.977 486.324 10.555 486.582 10.207 cv
486.836 9.85901 487.152 9.59399 487.531 9.40201 cv
487.91 9.21899 488.348 9.125 488.844 9.121 cv
489.23 9.125 489.582 9.203 489.902 9.35901 cv
490.215 9.51999 490.531 9.75 490.844 10.055 cv
490.844 6.29303 li
490.844 6.242 490.855 6.19501 490.887 6.15198 cv
490.91 6.11298 490.965 6.078 491.043 6.047 cv
491.117 6.02002 491.215 6 491.344 5.97998 cv
491.465 5.96899 491.625 5.961 491.82 5.95697 cv
492.012 5.961 492.168 5.96899 492.293 5.97998 cv
492.414 6 492.516 6.02002 492.59 6.047 cv
492.66 6.078 492.711 6.11298 492.746 6.15198 cv
492.773 6.19501 492.789 6.242 492.793 6.29303 cv
cp
490.844 11.871 mo
490.563 11.52 490.293 11.25 490.039 11.062 cv
489.777 10.875 489.508 10.781 489.23 10.781 cv
488.977 10.781 488.758 10.848 488.574 10.973 cv
488.387 11.105 488.238 11.273 488.129 11.484 cv
488.016 11.695 487.934 11.934 487.879 12.195 cv
487.824 12.461 487.797 12.73 487.797 13 cv
487.797 13.297 487.82 13.578 487.867 13.852 cv
487.914 14.129 487.988 14.375 488.098 14.59 cv
488.199 14.805 488.344 14.977 488.523 15.105 cv
488.699 15.238 488.922 15.305 489.191 15.301 cv
489.324 15.305 489.453 15.285 489.586 15.242 cv
489.711 15.207 489.844 15.145 489.977 15.051 cv
490.109 14.965 490.246 14.848 490.387 14.703 cv
490.527 14.562 490.68 14.387 490.844 14.18 cv
cp
f
501.191 12.84 mo
501.188 13.078 501.137 13.254 501.031 13.367 cv
500.922 13.484 500.773 13.543 500.594 13.539 cv
496.359 13.539 li
496.355 13.84 496.391 14.109 496.465 14.348 cv
496.531 14.59 496.645 14.793 496.801 14.961 cv
496.953 15.133 497.148 15.262 497.391 15.348 cv
497.629 15.437 497.918 15.48 498.262 15.48 cv
498.602 15.48 498.902 15.457 499.164 15.406 cv
499.422 15.359 499.648 15.305 499.84 15.242 cv
500.027 15.184 500.184 15.129 500.313 15.078 cv
500.434 15.031 500.535 15.008 500.617 15.004 cv
500.66 15.008 500.699 15.016 500.734 15.031 cv
500.762 15.051 500.789 15.082 500.809 15.129 cv
500.828 15.176 500.84 15.242 500.852 15.328 cv
500.855 15.414 500.859 15.523 500.863 15.652 cv
500.859 15.77 500.859 15.867 500.855 15.945 cv
500.848 16.027 500.84 16.094 500.832 16.148 cv
500.82 16.207 500.805 16.258 500.785 16.293 cv
500.766 16.336 500.738 16.371 500.707 16.406 cv
500.672 16.445 500.578 16.496 500.43 16.555 cv
500.273 16.621 500.082 16.684 499.852 16.738 cv
499.613 16.801 499.344 16.848 499.047 16.895 cv
498.742 16.934 498.422 16.957 498.082 16.961 cv
497.461 16.957 496.918 16.883 496.457 16.727 cv
495.988 16.574 495.602 16.336 495.293 16.02 cv
494.977 15.703 494.742 15.305 494.594 14.82 cv
494.438 14.34 494.363 13.773 494.367 13.117 cv
494.363 12.504 494.441 11.945 494.605 11.449 cv
494.762 10.953 494.996 10.535 495.309 10.187 cv
495.613 9.84399 495.988 9.578 496.426 9.39499 cv
496.863 9.215 497.355 9.125 497.91 9.121 cv
498.488 9.125 498.988 9.211 499.402 9.379 cv
499.816 9.55499 500.152 9.793 500.418 10.094 cv
500.68 10.398 500.875 10.758 501.004 11.172 cv
501.125 11.59 501.188 12.039 501.191 12.527 cv
cp
499.289 12.277 mo
499.301 11.727 499.191 11.293 498.957 10.98 cv
498.723 10.668 498.355 10.512 497.863 10.508 cv
497.613 10.512 497.398 10.559 497.215 10.648 cv
497.027 10.746 496.875 10.871 496.754 11.027 cv
496.629 11.187 496.535 11.375 496.473 11.59 cv
496.406 11.805 496.367 12.035 496.359 12.277 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
