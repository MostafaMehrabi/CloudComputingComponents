%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-Remote.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:43:54 p.m.
%%BoundingBox: 0 0 635 524
%%HiResBoundingBox: 0 0 634.3201 523.8000
%%CropBox: 0 0 634.3201 523.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -523.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 523.8 li
634.32 523.8 li
634.32 0 li
cp
clp
0 0 mo
634.32 0 li
634.32 523.801 li
0 523.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
31.199 445.801 mo
618.719 445.801 li
31.199 416.16 mo
618.719 416.16 li
31.199 386.398 mo
618.719 386.398 li
31.199 356.641 mo
618.719 356.641 li
31.199 327 mo
618.719 327 li
31.199 297.238 mo
618.719 297.238 li
31.199 267.602 mo
618.719 267.602 li
31.199 237.84 mo
618.719 237.84 li
31.199 208.078 mo
618.719 208.078 li
31.199 178.441 mo
618.719 178.441 li
31.199 148.68 mo
618.719 148.68 li
31.199 119.039 mo
618.719 119.039 li
31.199 89.281 mo
618.719 89.281 li
31.199 59.52 mo
618.719 59.52 li
31.199 29.879 mo
618.719 29.879 li
.326574 .281529 .277562 0 cmyk
@
67.922 29.879 mo
67.922 475.559 li
141.359 29.879 mo
141.359 475.559 li
214.801 29.879 mo
214.801 475.559 li
288.238 29.879 mo
288.238 475.559 li
361.68 29.879 mo
361.68 475.559 li
435.121 29.879 mo
435.121 475.559 li
508.559 29.879 mo
508.559 475.559 li
582 29.879 mo
582 475.559 li
.175235 .144778 .143648 0 cmyk
@
31.199 29.879 mo
31.199 475.559 li
104.641 29.879 mo
104.641 475.559 li
178.078 29.879 mo
178.078 475.559 li
251.52 29.879 mo
251.52 475.559 li
324.961 29.879 mo
324.961 475.559 li
398.398 29.879 mo
398.398 475.559 li
471.84 29.879 mo
471.84 475.559 li
545.281 29.879 mo
545.281 475.559 li
618.719 29.879 mo
618.719 475.559 li
.326574 .281529 .277562 0 cmyk
@
11.16 466.199 mo
18.238 466.199 li
18.238 483.359 li
11.16 483.359 li
cp
0 0 0 0 cmyk
ef
11.16 436.559 mo
18.238 436.559 li
18.238 453.602 li
11.16 453.602 li
cp
ef
11.16 406.801 mo
18.238 406.801 li
18.238 423.84 li
11.16 423.84 li
cp
ef
11.16 377.039 mo
18.238 377.039 li
18.238 394.199 li
11.16 394.199 li
cp
ef
11.16 347.398 mo
18.238 347.398 li
18.238 364.441 li
11.16 364.441 li
cp
ef
11.16 317.641 mo
18.238 317.641 li
18.238 334.801 li
11.16 334.801 li
cp
ef
11.16 288 mo
18.238 288 li
18.238 305.039 li
11.16 305.039 li
cp
ef
11.16 258.238 mo
18.238 258.238 li
18.238 275.281 li
11.16 275.281 li
cp
ef
11.16 228.48 mo
18.238 228.48 li
18.238 245.64 li
11.16 245.64 li
cp
ef
4.078 198.84 mo
18.238 198.84 li
18.238 215.879 li
4.078 215.879 li
cp
ef
4.078 169.078 mo
18.238 169.078 li
18.238 186.238 li
4.078 186.238 li
cp
ef
4.078 139.441 mo
18.238 139.441 li
18.238 156.48 li
4.078 156.48 li
cp
ef
4.078 109.68 mo
18.238 109.68 li
18.238 126.719 li
4.078 126.719 li
cp
ef
4.078 79.922 mo
18.238 79.922 li
18.238 97.078 li
4.078 97.078 li
cp
ef
4.078 50.281 mo
18.238 50.281 li
18.238 67.32 li
4.078 67.32 li
cp
ef
4.078 20.52 mo
18.238 20.52 li
18.238 37.68 li
4.078 37.68 li
cp
ef
.96 lw
31.199 475.559 mo
618.719 475.559 li
.369879 .299321 .304356 .000976577 cmyk
@
31.199 475.559 mo
31.199 480 li
104.641 475.559 mo
104.641 480 li
178.078 475.559 mo
178.078 480 li
251.52 475.559 mo
251.52 480 li
324.961 475.559 mo
324.961 480 li
398.398 475.559 mo
398.398 480 li
471.84 475.559 mo
471.84 480 li
545.281 475.559 mo
545.281 480 li
618.719 475.559 mo
618.719 480 li
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
1 lc
31.199 475.559 mo
104.641 445.68 li
178.078 386.52 li
251.52 327.48 li
324.961 268.32 li
398.398 215.762 li
471.84 160.559 li
545.281 119.281 li
618.719 64.32 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.62829 .284672 0 0 cmyk
@
99.629 440.66 mo
109.59 440.66 li
109.59 450.621 li
99.629 450.621 li
cp
@
173.07 381.379 mo
183.031 381.379 li
183.031 391.34 li
173.07 391.34 li
cp
@
246.512 322.34 mo
256.469 322.34 li
256.469 332.301 li
246.512 332.301 li
cp
@
319.949 263.301 mo
329.91 263.301 li
329.91 273.262 li
319.949 273.262 li
cp
@
393.391 210.738 mo
403.352 210.738 li
403.352 220.699 li
393.391 220.699 li
cp
@
466.828 155.422 mo
476.789 155.422 li
476.789 165.379 li
466.828 165.379 li
cp
@
540.27 114.141 mo
550.231 114.141 li
550.231 124.102 li
540.27 124.102 li
cp
@
613.711 59.18 mo
623.672 59.18 li
623.672 69.141 li
613.711 69.141 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
31.199 475.559 mo
104.641 445.922 li
178.078 387.238 li
251.52 327.961 li
324.961 269.039 li
398.398 213 li
471.84 152.879 li
545.281 90.961 li
618.719 34.922 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
99.629 440.781 mo
109.59 440.781 li
109.59 450.738 li
99.629 450.738 li
cp
@
173.07 382.219 mo
183.031 382.219 li
183.031 392.18 li
173.07 392.18 li
cp
@
246.512 322.82 mo
256.469 322.82 li
256.469 332.781 li
246.512 332.781 li
cp
@
319.949 264.02 mo
329.91 264.02 li
329.91 273.981 li
319.949 273.981 li
cp
@
393.391 207.98 mo
403.352 207.98 li
403.352 217.941 li
393.391 217.941 li
cp
@
466.828 147.738 mo
476.789 147.738 li
476.789 157.699 li
466.828 157.699 li
cp
@
540.27 85.941 mo
550.231 85.941 li
550.231 95.898 li
540.27 95.898 li
cp
@
613.711 29.898 mo
623.672 29.898 li
623.672 39.859 li
613.711 39.859 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
31.199 475.559 mo
104.641 445.922 li
178.078 387.121 li
251.52 327.961 li
324.961 269.879 li
398.398 210.84 li
471.84 151.922 li
545.281 93.719 li
618.719 35.641 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
99.629 440.898 mo
109.59 440.898 li
109.59 450.859 li
99.629 450.859 li
cp
@
173.07 382.102 mo
183.031 382.102 li
183.031 392.059 li
173.07 392.059 li
cp
@
246.512 322.941 mo
256.469 322.941 li
256.469 332.898 li
246.512 332.898 li
cp
@
319.949 264.738 mo
329.91 264.738 li
329.91 274.699 li
319.949 274.699 li
cp
@
393.391 205.82 mo
403.352 205.82 li
403.352 215.781 li
393.391 215.781 li
cp
@
466.828 146.898 mo
476.789 146.898 li
476.789 156.859 li
466.828 156.859 li
cp
@
540.27 88.699 mo
550.231 88.699 li
550.231 98.66 li
540.27 98.66 li
cp
@
613.711 30.621 mo
623.672 30.621 li
623.672 40.578 li
613.711 40.578 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
31.199 475.559 mo
104.641 446.16 li
178.078 387.238 li
251.52 332.16 li
324.961 271.441 li
398.398 213.48 li
471.84 183.48 li
545.281 93.719 li
618.719 124.441 li
0 .993988 1 0 cmyk
@
grestore
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
0 .993988 1 0 cmyk
@
99.629 441.141 mo
109.59 441.141 li
109.59 451.102 li
99.629 451.102 li
cp
@
173.07 382.219 mo
183.031 382.219 li
183.031 392.18 li
173.07 392.18 li
cp
@
246.512 327.141 mo
256.469 327.141 li
256.469 337.102 li
246.512 337.102 li
cp
@
319.949 266.301 mo
329.91 266.301 li
329.91 276.262 li
319.949 276.262 li
cp
@
393.391 208.34 mo
403.352 208.34 li
403.352 218.301 li
393.391 218.301 li
cp
@
466.828 178.34 mo
476.789 178.34 li
476.789 188.301 li
466.828 188.301 li
cp
@
540.27 88.699 mo
550.231 88.699 li
550.231 98.66 li
540.27 98.66 li
cp
@
613.711 119.301 mo
623.672 119.301 li
623.672 129.262 li
613.711 129.262 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
31.199 475.559 mo
104.641 445.801 li
178.078 386.398 li
251.52 326.762 li
324.961 267.121 li
398.398 228 li
471.84 148.199 li
545.281 89.641 li
618.719 188.762 li
.62829 .284672 0 0 cmyk
@
grestore
[4 3 ] 0 dsh
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.62829 .284672 0 0 cmyk
@
99.629 440.781 mo
109.59 440.781 li
109.59 450.738 li
99.629 450.738 li
cp
@
173.07 381.262 mo
183.031 381.262 li
183.031 391.219 li
173.07 391.219 li
cp
@
246.512 321.621 mo
256.469 321.621 li
256.469 331.578 li
246.512 331.578 li
cp
@
319.949 261.98 mo
329.91 261.98 li
329.91 271.941 li
319.949 271.941 li
cp
@
393.391 222.859 mo
403.352 222.859 li
403.352 232.82 li
393.391 232.82 li
cp
@
466.828 143.059 mo
476.789 143.059 li
476.789 153.02 li
466.828 153.02 li
cp
@
540.27 84.5 mo
550.231 84.5 li
550.231 94.461 li
540.27 94.461 li
cp
@
613.711 183.738 mo
623.672 183.738 li
623.672 193.699 li
613.711 193.699 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
31.199 475.559 mo
104.641 445.922 li
178.078 386.641 li
251.52 327 li
324.961 268.078 li
398.398 214.441 li
471.84 172.441 li
545.281 91.078 li
618.719 42.719 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
[] 0 dsh
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
99.629 440.898 mo
109.59 440.898 li
109.59 450.859 li
99.629 450.859 li
cp
@
173.07 381.621 mo
183.031 381.621 li
183.031 391.578 li
173.07 391.578 li
cp
@
246.512 321.98 mo
256.469 321.98 li
256.469 331.941 li
246.512 331.941 li
cp
@
319.949 262.941 mo
329.91 262.941 li
329.91 272.898 li
319.949 272.898 li
cp
@
393.391 209.301 mo
403.352 209.301 li
403.352 219.262 li
393.391 219.262 li
cp
@
466.828 167.301 mo
476.789 167.301 li
476.789 177.262 li
466.828 177.262 li
cp
@
540.27 85.941 mo
550.231 85.941 li
550.231 95.898 li
540.27 95.898 li
cp
@
613.711 37.699 mo
623.672 37.699 li
623.672 47.66 li
613.711 47.66 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
31.199 475.559 mo
104.641 446.281 li
178.078 387.602 li
251.52 328.801 li
324.961 269.281 li
398.398 210 li
471.84 151.32 li
545.281 100.32 li
618.719 177.238 li
.467353 0 .87747 0 cmyk
@
grestore
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
99.629 441.262 mo
109.59 441.262 li
109.59 451.219 li
99.629 451.219 li
cp
@
173.07 382.578 mo
183.031 382.578 li
183.031 392.539 li
173.07 392.539 li
cp
@
246.512 323.781 mo
256.469 323.781 li
256.469 333.738 li
246.512 333.738 li
cp
@
319.949 264.262 mo
329.91 264.262 li
329.91 274.219 li
319.949 274.219 li
cp
@
393.391 204.98 mo
403.352 204.98 li
403.352 214.941 li
393.391 214.941 li
cp
@
466.828 146.18 mo
476.789 146.18 li
476.789 156.141 li
466.828 156.141 li
cp
@
540.27 95.301 mo
550.231 95.301 li
550.231 105.262 li
540.27 105.262 li
cp
@
613.711 172.219 mo
623.672 172.219 li
623.672 182.18 li
613.711 182.18 li
cp
@
gsave
31.199 29.762 mo
619.441 29.762 li
619.441 476.282 li
31.199 476.282 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
31.199 475.559 mo
104.641 445.801 li
178.078 388.801 li
251.52 349.078 li
324.961 269.879 li
398.398 208.078 li
471.84 149.039 li
545.281 144.238 li
618.719 109.68 li
0 .993988 1 0 cmyk
@
grestore
26.191 470.422 mo
36.148 470.422 li
36.148 480.379 li
26.191 480.379 li
cp
0 .993988 1 0 cmyk
@
99.629 440.781 mo
109.59 440.781 li
109.59 450.738 li
99.629 450.738 li
cp
@
173.07 383.66 mo
183.031 383.66 li
183.031 393.621 li
173.07 393.621 li
cp
@
246.512 343.941 mo
256.469 343.941 li
256.469 353.898 li
246.512 353.898 li
cp
@
319.949 264.738 mo
329.91 264.738 li
329.91 274.699 li
319.949 274.699 li
cp
@
393.391 202.941 mo
403.352 202.941 li
403.352 212.898 li
393.391 212.898 li
cp
@
466.828 143.898 mo
476.789 143.898 li
476.789 153.859 li
466.828 153.859 li
cp
@
540.27 139.219 mo
550.231 139.219 li
550.231 149.18 li
540.27 149.18 li
cp
@
613.711 104.539 mo
623.672 104.539 li
623.672 114.5 li
613.711 114.5 li
cp
@
11.16 466.238 mo
18.254 466.238 li
18.254 483.328 li
11.16 483.328 li
cp
0 0 0 0 cmyk
ef
17.516 479.176 mo
17.512 479.266 17.504 479.336 17.492 479.395 cv
17.477 479.457 17.457 479.508 17.438 479.539 cv
17.414 479.578 17.391 479.602 17.359 479.617 cv
17.328 479.633 17.297 479.641 17.27 479.641 cv
12.633 479.641 li
12.598 479.641 12.57 479.633 12.543 479.617 cv
12.516 479.602 12.488 479.578 12.465 479.539 cv
12.438 479.508 12.418 479.457 12.406 479.395 cv
12.391 479.336 12.383 479.266 12.387 479.176 cv
12.383 479.098 12.391 479.023 12.406 478.961 cv
12.418 478.902 12.434 478.855 12.457 478.816 cv
12.473 478.781 12.5 478.75 12.531 478.727 cv
12.563 478.707 12.594 478.699 12.633 478.695 cv
14.484 478.695 li
14.484 471.949 li
12.77 472.969 li
12.68 473.02 12.609 473.047 12.563 473.055 cv
12.508 473.062 12.465 473.055 12.434 473.023 cv
12.398 472.996 12.379 472.945 12.367 472.875 cv
12.355 472.809 12.348 472.723 12.352 472.613 cv
12.348 472.539 12.352 472.473 12.363 472.414 cv
12.367 472.363 12.379 472.316 12.395 472.277 cv
12.406 472.242 12.426 472.211 12.449 472.184 cv
12.473 472.156 12.504 472.129 12.551 472.102 cv
14.594 470.789 li
14.609 470.777 14.629 470.766 14.66 470.758 cv
14.684 470.75 14.719 470.742 14.766 470.73 cv
14.805 470.723 14.855 470.715 14.91 470.711 cv
14.965 470.711 15.031 470.711 15.117 470.707 cv
15.223 470.711 15.316 470.715 15.391 470.723 cv
15.461 470.73 15.516 470.746 15.563 470.762 cv
15.602 470.781 15.629 470.801 15.645 470.824 cv
15.652 470.852 15.66 470.875 15.664 470.898 cv
15.664 478.695 li
17.27 478.695 li
17.305 478.699 17.34 478.707 17.371 478.727 cv
17.402 478.75 17.426 478.781 17.449 478.816 cv
17.465 478.855 17.48 478.902 17.496 478.961 cv
17.504 479.023 17.512 479.098 17.516 479.176 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 436.531 mo
18.254 436.531 li
18.254 453.621 li
11.16 453.621 li
cp
0 0 0 0 cmyk
ef
17.496 449.422 mo
17.492 449.508 17.488 449.582 17.477 449.645 cv
17.465 449.711 17.449 449.766 17.43 449.805 cv
17.406 449.852 17.379 449.883 17.348 449.898 cv
17.313 449.922 17.273 449.93 17.234 449.93 cv
12.332 449.93 li
12.27 449.93 12.211 449.922 12.164 449.906 cv
12.113 449.891 12.074 449.867 12.039 449.828 cv
12.004 449.797 11.977 449.742 11.965 449.672 cv
11.945 449.602 11.938 449.516 11.941 449.414 cv
11.938 449.324 11.941 449.246 11.949 449.176 cv
11.953 449.109 11.969 449.051 11.996 448.996 cv
12.02 448.945 12.051 448.891 12.086 448.836 cv
12.121 448.785 12.164 448.73 12.223 448.668 cv
13.996 446.844 li
14.406 446.426 14.734 446.051 14.984 445.715 cv
15.23 445.387 15.422 445.082 15.555 444.805 cv
15.688 444.531 15.773 444.281 15.82 444.055 cv
15.859 443.832 15.883 443.621 15.883 443.426 cv
15.883 443.23 15.848 443.047 15.781 442.867 cv
15.715 442.695 15.621 442.539 15.496 442.402 cv
15.371 442.273 15.215 442.168 15.027 442.086 cv
14.84 442.012 14.621 441.973 14.375 441.969 cv
14.086 441.973 13.828 442.012 13.602 442.086 cv
13.371 442.168 13.172 442.254 13 442.34 cv
12.828 442.434 12.684 442.516 12.566 442.594 cv
12.449 442.672 12.363 442.711 12.313 442.711 cv
12.277 442.711 12.246 442.703 12.223 442.684 cv
12.191 442.668 12.172 442.637 12.156 442.594 cv
12.141 442.555 12.125 442.5 12.117 442.43 cv
12.105 442.363 12.102 442.281 12.105 442.184 cv
12.102 442.117 12.105 442.059 12.113 442.008 cv
12.117 441.957 12.125 441.914 12.137 441.875 cv
12.145 441.84 12.16 441.805 12.18 441.773 cv
12.199 441.742 12.234 441.703 12.293 441.652 cv
12.344 441.605 12.438 441.539 12.574 441.457 cv
12.707 441.375 12.879 441.297 13.082 441.215 cv
13.285 441.137 13.508 441.066 13.754 441.012 cv
13.996 440.957 14.254 440.93 14.527 440.93 cv
14.953 440.93 15.328 440.992 15.652 441.113 cv
15.973 441.234 16.238 441.398 16.453 441.609 cv
16.664 441.82 16.824 442.066 16.93 442.34 cv
17.035 442.621 17.09 442.918 17.09 443.23 cv
17.09 443.52 17.063 443.801 17.012 444.078 cv
16.961 444.363 16.855 444.668 16.695 444.992 cv
16.531 445.32 16.297 445.684 15.992 446.082 cv
15.684 446.484 15.277 446.945 14.773 447.461 cv
13.367 448.93 li
17.227 448.93 li
17.258 448.934 17.293 448.945 17.332 448.961 cv
17.363 448.984 17.395 449.016 17.422 449.055 cv
17.445 449.098 17.465 449.148 17.477 449.207 cv
17.488 449.273 17.492 449.344 17.496 449.422 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 406.809 mo
18.254 406.809 li
18.254 423.899 li
11.16 423.899 li
cp
0 0 0 0 cmyk
ef
17.426 417.684 mo
17.422 418.094 17.352 418.461 17.211 418.785 cv
17.066 419.113 16.863 419.395 16.602 419.625 cv
16.336 419.859 16.008 420.035 15.621 420.16 cv
15.23 420.285 14.793 420.348 14.309 420.348 cv
14.004 420.348 13.727 420.32 13.473 420.273 cv
13.211 420.227 12.98 420.176 12.785 420.105 cv
12.582 420.043 12.418 419.973 12.285 419.902 cv
12.152 419.832 12.066 419.781 12.035 419.746 cv
11.996 419.719 11.973 419.687 11.957 419.652 cv
11.938 419.621 11.918 419.582 11.906 419.535 cv
11.891 419.492 11.883 419.437 11.875 419.367 cv
11.867 419.305 11.863 419.223 11.867 419.121 cv
11.863 418.961 11.879 418.848 11.914 418.781 cv
11.945 418.719 11.992 418.684 12.055 418.684 cv
12.098 418.684 12.18 418.723 12.305 418.793 cv
12.426 418.871 12.586 418.949 12.781 419.031 cv
12.973 419.117 13.199 419.195 13.465 419.266 cv
13.723 419.34 14.016 419.375 14.336 419.375 cv
14.645 419.375 14.914 419.336 15.152 419.258 cv
15.383 419.18 15.582 419.07 15.742 418.93 cv
15.898 418.789 16.016 418.621 16.098 418.426 cv
16.176 418.23 16.215 418.02 16.219 417.793 cv
16.215 417.543 16.164 417.316 16.066 417.113 cv
15.961 416.914 15.813 416.742 15.621 416.594 cv
15.422 416.449 15.184 416.336 14.898 416.258 cv
14.613 416.18 14.289 416.141 13.926 416.141 cv
13.055 416.141 li
13.012 416.141 12.977 416.133 12.941 416.117 cv
12.906 416.102 12.875 416.074 12.852 416.035 cv
12.824 416 12.805 415.953 12.789 415.895 cv
12.773 415.836 12.766 415.758 12.766 415.66 cv
12.766 415.574 12.77 415.504 12.785 415.445 cv
12.793 415.391 12.813 415.344 12.844 415.309 cv
12.867 415.273 12.898 415.25 12.93 415.23 cv
12.961 415.219 12.996 415.211 13.039 415.207 cv
13.813 415.207 li
14.113 415.211 14.383 415.172 14.625 415.09 cv
14.859 415.016 15.063 414.902 15.234 414.754 cv
15.398 414.609 15.527 414.434 15.617 414.23 cv
15.707 414.027 15.754 413.801 15.754 413.547 cv
15.754 413.367 15.723 413.191 15.664 413.023 cv
15.602 412.859 15.512 412.715 15.395 412.59 cv
15.273 412.465 15.121 412.367 14.941 412.297 cv
14.754 412.227 14.543 412.191 14.301 412.191 cv
14.035 412.191 13.789 412.234 13.57 412.312 cv
13.344 412.395 13.148 412.48 12.977 412.57 cv
12.801 412.664 12.656 412.75 12.543 412.828 cv
12.43 412.91 12.348 412.949 12.305 412.945 cv
12.27 412.949 12.242 412.941 12.219 412.93 cv
12.191 412.918 12.172 412.895 12.156 412.859 cv
12.141 412.828 12.129 412.781 12.121 412.715 cv
12.113 412.656 12.109 412.574 12.113 412.473 cv
12.109 412.406 12.109 412.348 12.117 412.293 cv
12.117 412.242 12.129 412.195 12.145 412.152 cv
12.16 412.117 12.176 412.082 12.195 412.047 cv
12.211 412.02 12.242 411.98 12.285 411.934 cv
12.328 411.891 12.414 411.828 12.551 411.746 cv
12.68 411.664 12.844 411.586 13.039 411.504 cv
13.23 411.426 13.453 411.355 13.711 411.301 cv
13.961 411.246 14.234 411.219 14.531 411.219 cv
14.938 411.219 15.301 411.273 15.613 411.375 cv
15.926 411.484 16.184 411.633 16.395 411.82 cv
16.598 412.016 16.754 412.246 16.859 412.512 cv
16.961 412.781 17.012 413.074 17.016 413.398 cv
17.012 413.68 16.977 413.941 16.906 414.176 cv
16.832 414.418 16.723 414.629 16.582 414.812 cv
16.438 415 16.266 415.156 16.063 415.285 cv
15.855 415.418 15.617 415.512 15.348 415.559 cv
15.348 415.57 li
15.652 415.605 15.934 415.68 16.188 415.801 cv
16.441 415.922 16.66 416.074 16.844 416.258 cv
17.023 416.441 17.164 416.656 17.27 416.898 cv
17.371 417.145 17.422 417.406 17.426 417.684 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 377.102 mo
18.254 377.102 li
18.254 394.192 li
11.16 394.192 li
cp
0 0 0 0 cmyk
ef
17.871 387.977 mo
17.867 388.129 17.844 388.25 17.801 388.336 cv
17.754 388.426 17.691 388.469 17.609 388.465 cv
16.609 388.465 li
16.609 390.328 li
16.609 390.367 16.598 390.398 16.582 390.422 cv
16.559 390.449 16.527 390.469 16.484 390.488 cv
16.434 390.504 16.371 390.516 16.301 390.527 cv
16.223 390.535 16.129 390.539 16.012 390.543 cv
15.895 390.539 15.797 390.535 15.727 390.527 cv
15.648 390.516 15.59 390.504 15.547 390.488 cv
15.5 390.469 15.469 390.449 15.453 390.422 cv
15.434 390.398 15.426 390.367 15.43 390.328 cv
15.43 388.465 li
11.801 388.465 li
11.742 388.469 11.699 388.461 11.664 388.445 cv
11.629 388.434 11.594 388.406 11.566 388.367 cv
11.535 388.332 11.516 388.281 11.504 388.211 cv
11.492 388.145 11.488 388.055 11.488 387.941 cv
11.488 387.859 11.488 387.781 11.496 387.711 cv
11.496 387.641 11.508 387.578 11.523 387.523 cv
11.535 387.469 11.551 387.414 11.578 387.359 cv
11.598 387.305 11.625 387.25 11.66 387.187 cv
14.82 381.801 li
14.84 381.766 14.875 381.734 14.922 381.707 cv
14.965 381.68 15.02 381.656 15.094 381.637 cv
15.16 381.621 15.246 381.609 15.352 381.598 cv
15.453 381.594 15.574 381.59 15.715 381.586 cv
15.863 381.59 16 381.594 16.117 381.605 cv
16.23 381.617 16.32 381.633 16.395 381.648 cv
16.461 381.668 16.516 381.691 16.555 381.723 cv
16.59 381.754 16.609 381.789 16.609 381.828 cv
16.609 387.492 li
17.609 387.492 li
17.684 387.496 17.746 387.535 17.797 387.613 cv
17.844 387.695 17.867 387.816 17.871 387.977 cv
cp
15.43 382.625 mo
15.418 382.625 li
12.566 387.492 li
15.43 387.492 li
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 347.391 mo
18.254 347.391 li
18.254 364.481 li
11.16 364.481 li
cp
0 0 0 0 cmyk
ef
17.465 357.934 mo
17.465 358.414 17.383 358.836 17.223 359.203 cv
17.063 359.574 16.836 359.887 16.543 360.141 cv
16.25 360.395 15.902 360.586 15.496 360.719 cv
15.09 360.852 14.641 360.918 14.148 360.918 cv
13.871 360.918 13.609 360.898 13.363 360.859 cv
13.113 360.82 12.891 360.773 12.703 360.719 cv
12.508 360.664 12.352 360.609 12.23 360.551 cv
12.105 360.496 12.027 360.453 11.992 360.418 cv
11.957 360.391 11.934 360.359 11.922 360.332 cv
11.906 360.305 11.891 360.273 11.883 360.23 cv
11.867 360.195 11.859 360.145 11.859 360.082 cv
11.852 360.023 11.852 359.953 11.855 359.867 cv
11.852 359.797 11.855 359.727 11.863 359.66 cv
11.871 359.602 11.883 359.551 11.902 359.508 cv
11.918 359.473 11.938 359.445 11.965 359.422 cv
11.988 359.406 12.02 359.395 12.055 359.395 cv
12.098 359.395 12.168 359.426 12.266 359.48 cv
12.359 359.543 12.488 359.605 12.652 359.668 cv
12.813 359.738 13.016 359.801 13.258 359.855 cv
13.496 359.918 13.781 359.945 14.113 359.945 cv
14.418 359.945 14.699 359.91 14.957 359.836 cv
15.215 359.766 15.434 359.652 15.621 359.492 cv
15.801 359.34 15.945 359.145 16.055 358.906 cv
16.156 358.672 16.211 358.383 16.215 358.043 cv
16.211 357.762 16.164 357.512 16.078 357.293 cv
15.984 357.078 15.848 356.898 15.668 356.75 cv
15.48 356.609 15.246 356.5 14.965 356.426 cv
14.676 356.359 14.34 356.324 13.949 356.32 cv
13.668 356.324 13.426 356.34 13.227 356.363 cv
13.023 356.395 12.836 356.406 12.664 356.402 cv
12.535 356.406 12.445 356.375 12.391 356.312 cv
12.336 356.254 12.309 356.141 12.309 355.969 cv
12.309 352.348 li
12.309 352.199 12.344 352.086 12.414 352.012 cv
12.484 351.941 12.586 351.906 12.719 351.902 cv
16.652 351.902 li
16.684 351.906 16.719 351.918 16.758 351.934 cv
16.789 351.957 16.82 351.988 16.844 352.027 cv
16.867 352.074 16.883 352.125 16.895 352.187 cv
16.906 352.25 16.914 352.324 16.914 352.41 cv
16.914 352.578 16.891 352.707 16.848 352.797 cv
16.805 352.891 16.742 352.937 16.664 352.934 cv
13.488 352.934 li
13.488 355.426 li
13.637 355.406 13.797 355.391 13.961 355.387 cv
14.121 355.383 14.305 355.383 14.52 355.379 cv
15.004 355.383 15.434 355.441 15.801 355.562 cv
16.168 355.684 16.473 355.855 16.719 356.074 cv
16.961 356.297 17.145 356.566 17.273 356.883 cv
17.398 357.199 17.465 357.551 17.465 357.934 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 317.68 mo
18.254 317.68 li
18.254 334.77 li
11.16 334.77 li
cp
0 0 0 0 cmyk
ef
17.723 328.187 mo
17.723 328.578 17.66 328.957 17.543 329.316 cv
17.418 329.684 17.234 330 16.992 330.273 cv
16.742 330.551 16.43 330.773 16.055 330.937 cv
15.672 331.105 15.227 331.187 14.711 331.187 cv
14.34 331.187 14.012 331.145 13.73 331.051 cv
13.445 330.965 13.199 330.832 12.988 330.66 cv
12.777 330.492 12.602 330.285 12.465 330.039 cv
12.324 329.793 12.211 329.512 12.129 329.195 cv
12.043 328.883 11.984 328.539 11.949 328.16 cv
11.91 327.789 11.891 327.387 11.895 326.953 cv
11.891 326.574 11.91 326.191 11.953 325.801 cv
11.992 325.418 12.066 325.043 12.172 324.676 cv
12.277 324.316 12.422 323.977 12.602 323.66 cv
12.781 323.344 13.008 323.066 13.281 322.832 cv
13.555 322.598 13.879 322.41 14.258 322.27 cv
14.637 322.133 15.078 322.066 15.582 322.062 cv
15.75 322.066 15.922 322.074 16.094 322.094 cv
16.266 322.117 16.426 322.148 16.574 322.18 cv
16.723 322.219 16.844 322.254 16.945 322.293 cv
17.043 322.332 17.109 322.367 17.145 322.391 cv
17.172 322.418 17.195 322.445 17.215 322.473 cv
17.23 322.504 17.246 322.535 17.254 322.57 cv
17.262 322.605 17.266 322.645 17.273 322.687 cv
17.273 322.73 17.277 322.785 17.281 322.848 cv
17.277 322.934 17.277 323.004 17.277 323.059 cv
17.273 323.121 17.262 323.168 17.25 323.203 cv
17.23 323.242 17.211 323.27 17.188 323.285 cv
17.16 323.305 17.129 323.312 17.09 323.312 cv
17.039 323.312 16.969 323.297 16.883 323.266 cv
16.793 323.234 16.688 323.199 16.566 323.156 cv
16.441 323.121 16.293 323.086 16.117 323.051 cv
15.941 323.023 15.738 323.008 15.508 323.004 cv
15.078 323.008 14.711 323.094 14.406 323.266 cv
14.102 323.437 13.852 323.672 13.656 323.965 cv
13.461 324.258 13.316 324.598 13.227 324.98 cv
13.129 325.371 13.074 325.773 13.066 326.191 cv
13.184 326.125 13.32 326.059 13.469 325.988 cv
13.617 325.922 13.777 325.859 13.953 325.801 cv
14.129 325.75 14.316 325.703 14.512 325.668 cv
14.707 325.637 14.918 325.621 15.145 325.617 cv
15.621 325.621 16.023 325.687 16.355 325.812 cv
16.684 325.945 16.949 326.125 17.156 326.355 cv
17.355 326.586 17.5 326.855 17.59 327.168 cv
17.676 327.48 17.723 327.82 17.723 328.187 cv
cp
16.527 328.297 mo
16.527 328.035 16.5 327.793 16.449 327.574 cv
16.395 327.359 16.305 327.176 16.184 327.02 cv
16.059 326.871 15.895 326.754 15.691 326.672 cv
15.48 326.59 15.227 326.547 14.93 326.547 cv
14.758 326.547 14.59 326.562 14.422 326.594 cv
14.25 326.625 14.086 326.668 13.93 326.715 cv
13.77 326.77 13.621 326.832 13.48 326.902 cv
13.336 326.977 13.203 327.051 13.086 327.129 cv
13.082 327.723 13.121 328.219 13.199 328.613 cv
13.273 329.012 13.383 329.328 13.527 329.566 cv
13.672 329.809 13.852 329.98 14.066 330.082 cv
14.281 330.187 14.531 330.238 14.82 330.234 cv
15.109 330.238 15.363 330.184 15.578 330.07 cv
15.793 329.965 15.969 329.816 16.113 329.629 cv
16.254 329.445 16.359 329.238 16.426 329.008 cv
16.492 328.777 16.527 328.543 16.527 328.297 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 287.969 mo
18.254 287.969 li
18.254 305.059 li
11.16 305.059 li
cp
0 0 0 0 cmyk
ef
17.625 292.977 mo
17.621 293.062 17.617 293.137 17.613 293.199 cv
17.605 293.27 17.598 293.332 17.586 293.391 cv
17.574 293.457 17.559 293.516 17.539 293.57 cv
17.516 293.629 17.492 293.691 17.469 293.75 cv
14.273 301.113 li
14.246 301.172 14.219 301.215 14.188 301.246 cv
14.152 301.281 14.109 301.309 14.055 301.328 cv
14 301.348 13.93 301.359 13.852 301.371 cv
13.766 301.375 13.668 301.379 13.551 301.383 cv
13.395 301.379 13.273 301.371 13.188 301.359 cv
13.102 301.344 13.039 301.328 13 301.297 cv
12.961 301.27 12.941 301.23 12.949 301.187 cv
12.949 301.145 12.965 301.094 12.996 301.031 cv
16.355 293.504 li
12.098 293.504 li
12.012 293.508 11.945 293.461 11.902 293.367 cv
11.859 293.277 11.84 293.148 11.84 292.984 cv
11.84 292.898 11.844 292.824 11.855 292.758 cv
11.867 292.695 11.883 292.641 11.906 292.598 cv
11.926 292.555 11.953 292.523 11.988 292.5 cv
12.02 292.48 12.059 292.469 12.098 292.469 cv
17.27 292.469 li
17.328 292.469 17.383 292.477 17.434 292.492 cv
17.48 292.508 17.516 292.535 17.543 292.574 cv
17.566 292.613 17.586 292.668 17.602 292.73 cv
17.613 292.797 17.621 292.879 17.625 292.977 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 258.262 mo
18.254 258.262 li
18.254 275.352 li
11.16 275.352 li
cp
0 0 0 0 cmyk
ef
17.699 269.352 mo
17.699 269.738 17.629 270.082 17.492 270.379 cv
17.355 270.684 17.16 270.934 16.902 271.137 cv
16.645 271.344 16.324 271.5 15.945 271.602 cv
15.563 271.707 15.129 271.758 14.645 271.758 cv
14.184 271.758 13.773 271.711 13.414 271.617 cv
13.051 271.523 12.746 271.383 12.496 271.191 cv
12.246 271.008 12.055 270.777 11.922 270.5 cv
11.789 270.227 11.723 269.914 11.723 269.559 cv
11.723 269.285 11.766 269.027 11.859 268.793 cv
11.945 268.559 12.078 268.344 12.254 268.148 cv
12.422 267.953 12.633 267.77 12.887 267.594 cv
13.137 267.426 13.422 267.262 13.738 267.105 cv
13.465 266.965 13.223 266.816 13.012 266.656 cv
12.801 266.5 12.621 266.328 12.477 266.141 cv
12.328 265.957 12.219 265.762 12.145 265.551 cv
12.066 265.344 12.027 265.113 12.031 264.863 cv
12.027 264.555 12.082 264.262 12.199 263.988 cv
12.309 263.719 12.48 263.484 12.707 263.281 cv
12.934 263.082 13.219 262.922 13.57 262.805 cv
13.914 262.687 14.324 262.629 14.793 262.629 cv
15.238 262.629 15.625 262.684 15.953 262.789 cv
16.281 262.898 16.551 263.043 16.762 263.227 cv
16.973 263.414 17.129 263.633 17.234 263.883 cv
17.332 264.133 17.383 264.402 17.387 264.691 cv
17.383 264.926 17.344 265.152 17.273 265.363 cv
17.195 265.582 17.086 265.785 16.938 265.973 cv
16.789 266.168 16.609 266.348 16.398 266.512 cv
16.188 266.684 15.945 266.84 15.672 266.98 cv
15.992 267.145 16.277 267.309 16.535 267.477 cv
16.785 267.645 17 267.824 17.176 268.02 cv
17.344 268.215 17.473 268.422 17.566 268.637 cv
17.652 268.855 17.699 269.094 17.699 269.352 cv
cp
16.219 264.801 mo
16.215 264.613 16.184 264.437 16.117 264.281 cv
16.051 264.125 15.953 263.992 15.828 263.883 cv
15.699 263.773 15.539 263.691 15.352 263.633 cv
15.156 263.578 14.941 263.551 14.703 263.547 cv
14.207 263.551 13.832 263.66 13.582 263.883 cv
13.324 264.109 13.199 264.418 13.203 264.801 cv
13.199 264.98 13.23 265.145 13.293 265.297 cv
13.355 265.453 13.449 265.598 13.582 265.734 cv
13.707 265.871 13.871 266.004 14.074 266.133 cv
14.27 266.266 14.508 266.402 14.785 266.543 cv
15.246 266.309 15.602 266.047 15.848 265.754 cv
16.094 265.469 16.215 265.152 16.219 264.801 cv
cp
16.508 269.477 mo
16.504 269.27 16.465 269.078 16.391 268.906 cv
16.309 268.738 16.191 268.578 16.035 268.426 cv
15.879 268.277 15.68 268.133 15.445 267.992 cv
15.207 267.855 14.938 267.711 14.629 267.559 cv
14.34 267.703 14.086 267.844 13.871 267.984 cv
13.652 268.125 13.473 268.273 13.336 268.422 cv
13.195 268.578 13.09 268.734 13.02 268.898 cv
12.945 269.066 12.91 269.25 12.914 269.449 cv
12.91 269.895 13.063 270.238 13.371 270.477 cv
13.672 270.723 14.125 270.844 14.73 270.84 cv
15.313 270.844 15.758 270.723 16.059 270.473 cv
16.355 270.23 16.504 269.898 16.508 269.477 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
11.16 228.539 mo
18.254 228.539 li
18.254 245.629 li
11.16 245.629 li
cp
0 0 0 0 cmyk
ef
17.563 237.137 mo
17.559 237.523 17.535 237.91 17.492 238.301 cv
17.445 238.695 17.367 239.074 17.262 239.437 cv
17.148 239.801 17.004 240.141 16.82 240.457 cv
16.633 240.777 16.398 241.059 16.121 241.293 cv
15.836 241.535 15.5 241.719 15.117 241.852 cv
14.727 241.984 14.281 242.051 13.773 242.051 cv
13.574 242.051 13.383 242.035 13.199 242.012 cv
13.012 241.984 12.844 241.957 12.699 241.922 cv
12.547 241.887 12.422 241.848 12.324 241.805 cv
12.223 241.766 12.148 241.727 12.105 241.684 cv
12.059 241.645 12.027 241.59 12.008 241.516 cv
11.984 241.445 11.973 241.348 11.977 241.23 cv
11.973 241.129 11.977 241.051 11.984 240.992 cv
11.988 240.934 12 240.887 12.016 240.855 cv
12.031 240.824 12.051 240.805 12.074 240.789 cv
12.098 240.781 12.129 240.773 12.168 240.77 cv
12.215 240.773 12.285 240.789 12.379 240.82 cv
12.469 240.855 12.582 240.895 12.727 240.934 cv
12.863 240.977 13.027 241.016 13.215 241.047 cv
13.398 241.086 13.609 241.102 13.848 241.098 cv
14.289 241.102 14.668 241.016 14.988 240.844 cv
15.301 240.672 15.563 240.445 15.766 240.156 cv
15.969 239.871 16.117 239.535 16.219 239.152 cv
16.316 238.773 16.371 238.375 16.383 237.953 cv
16.137 238.098 15.848 238.223 15.512 238.328 cv
15.172 238.441 14.785 238.496 14.348 238.492 cv
13.855 238.496 13.441 238.43 13.105 238.293 cv
12.77 238.16 12.496 237.977 12.293 237.742 cv
12.086 237.512 11.941 237.234 11.855 236.91 cv
11.766 236.594 11.723 236.242 11.723 235.863 cv
11.723 235.473 11.777 235.102 11.895 234.742 cv
12.004 234.391 12.184 234.078 12.43 233.809 cv
12.668 233.539 12.977 233.324 13.355 233.164 cv
13.727 233.004 14.176 232.922 14.699 232.922 cv
15.066 232.922 15.391 232.969 15.68 233.062 cv
15.961 233.156 16.211 233.293 16.426 233.469 cv
16.633 233.645 16.813 233.855 16.961 234.105 cv
17.105 234.355 17.223 234.637 17.313 234.949 cv
17.398 235.266 17.461 235.609 17.504 235.977 cv
17.539 236.348 17.559 236.734 17.563 237.137 cv
cp
16.363 237.008 mo
16.363 236.426 16.324 235.934 16.246 235.531 cv
16.168 235.133 16.051 234.809 15.902 234.559 cv
15.75 234.312 15.566 234.133 15.348 234.023 cv
15.125 233.914 14.871 233.859 14.59 233.859 cv
14.285 233.859 14.031 233.914 13.824 234.023 cv
13.613 234.133 13.441 234.277 13.309 234.453 cv
13.172 234.637 13.07 234.84 13.008 235.066 cv
12.941 235.297 12.91 235.535 12.914 235.773 cv
12.91 236.047 12.941 236.293 13 236.512 cv
13.055 236.738 13.145 236.926 13.277 237.082 cv
13.402 237.238 13.57 237.359 13.777 237.445 cv
13.98 237.531 14.234 237.574 14.539 237.57 cv
14.879 237.574 15.211 237.523 15.535 237.418 cv
15.852 237.316 16.129 237.18 16.363 237.008 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
4.063 198.828 mo
18.251 198.828 li
18.251 215.922 li
4.063 215.922 li
cp
0 0 0 0 cmyk
ef
10.434 211.715 mo
10.43 211.805 10.422 211.875 10.41 211.934 cv
10.395 211.996 10.375 212.047 10.355 212.078 cv
10.332 212.117 10.309 212.141 10.277 212.156 cv
10.246 212.172 10.215 212.18 10.188 212.18 cv
5.551 212.18 li
5.516 212.18 5.488 212.172 5.461 212.156 cv
5.434 212.141 5.406 212.117 5.383 212.078 cv
5.355 212.047 5.336 211.996 5.324 211.934 cv
5.309 211.875 5.301 211.805 5.305 211.715 cv
5.301 211.637 5.309 211.562 5.324 211.5 cv
5.336 211.441 5.352 211.395 5.375 211.355 cv
5.391 211.32 5.418 211.289 5.449 211.266 cv
5.48 211.246 5.512 211.238 5.551 211.234 cv
7.402 211.234 li
7.402 204.488 li
5.688 205.508 li
5.598 205.559 5.527 205.586 5.48 205.594 cv
5.426 205.602 5.383 205.594 5.352 205.562 cv
5.316 205.535 5.297 205.484 5.285 205.414 cv
5.273 205.348 5.266 205.262 5.27 205.152 cv
5.266 205.078 5.27 205.012 5.281 204.953 cv
5.285 204.902 5.297 204.855 5.313 204.816 cv
5.324 204.781 5.344 204.75 5.367 204.723 cv
5.391 204.695 5.422 204.668 5.469 204.641 cv
7.512 203.328 li
7.527 203.316 7.547 203.305 7.578 203.297 cv
7.602 203.289 7.637 203.281 7.684 203.27 cv
7.723 203.262 7.773 203.254 7.828 203.25 cv
7.883 203.25 7.949 203.25 8.035 203.246 cv
8.141 203.25 8.234 203.254 8.309 203.262 cv
8.379 203.27 8.434 203.285 8.48 203.301 cv
8.52 203.32 8.547 203.34 8.563 203.363 cv
8.57 203.391 8.578 203.414 8.582 203.437 cv
8.582 211.234 li
10.188 211.234 li
10.223 211.238 10.258 211.246 10.289 211.266 cv
10.32 211.289 10.344 211.32 10.367 211.355 cv
10.383 211.395 10.398 211.441 10.414 211.5 cv
10.422 211.562 10.43 211.637 10.434 211.715 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.789 207.723 mo
17.785 208.406 17.734 209.027 17.629 209.59 cv
17.52 210.152 17.34 210.637 17.094 211.039 cv
16.84 211.445 16.512 211.758 16.113 211.977 cv
15.707 212.199 15.215 212.309 14.629 212.309 cv
14.07 212.309 13.598 212.211 13.219 212.012 cv
12.836 211.816 12.531 211.523 12.297 211.137 cv
12.063 210.75 11.895 210.277 11.801 209.711 cv
11.699 209.148 11.652 208.5 11.652 207.766 cv
11.652 207.094 11.707 206.473 11.816 205.906 cv
11.926 205.344 12.102 204.859 12.352 204.453 cv
12.594 204.051 12.918 203.738 13.324 203.512 cv
13.723 203.293 14.219 203.18 14.809 203.18 cv
15.367 203.18 15.84 203.281 16.223 203.477 cv
16.605 203.68 16.91 203.973 17.145 204.355 cv
17.375 204.746 17.543 205.219 17.641 205.781 cv
17.738 206.344 17.785 206.992 17.789 207.723 cv
cp
16.582 207.805 mo
16.578 207.363 16.563 206.965 16.535 206.613 cv
16.5 206.262 16.453 205.953 16.395 205.684 cv
16.328 205.414 16.25 205.184 16.152 204.988 cv
16.055 204.797 15.938 204.637 15.801 204.508 cv
15.66 204.383 15.5 204.289 15.328 204.23 cv
15.148 204.176 14.953 204.148 14.738 204.145 cv
14.348 204.148 14.031 204.238 13.793 204.422 cv
13.547 204.605 13.355 204.859 13.219 205.176 cv
13.078 205.496 12.984 205.867 12.934 206.297 cv
12.883 206.727 12.859 207.191 12.859 207.684 cv
12.859 208.348 12.891 208.91 12.961 209.371 cv
13.027 209.84 13.137 210.219 13.289 210.508 cv
13.434 210.805 13.625 211.016 13.855 211.145 cv
14.086 211.281 14.367 211.348 14.699 211.344 cv
14.953 211.348 15.176 211.309 15.371 211.223 cv
15.563 211.145 15.73 211.023 15.871 210.867 cv
16.012 210.715 16.125 210.531 16.219 210.316 cv
16.305 210.102 16.379 209.863 16.438 209.602 cv
16.488 209.344 16.527 209.062 16.551 208.758 cv
16.57 208.453 16.578 208.137 16.582 207.805 cv
cp
f
4.063 169.121 mo
18.251 169.121 li
18.251 186.211 li
4.063 186.211 li
cp
0 0 0 0 cmyk
ef
10.434 182.004 mo
10.43 182.094 10.422 182.164 10.41 182.223 cv
10.395 182.285 10.375 182.336 10.355 182.367 cv
10.332 182.406 10.309 182.43 10.277 182.445 cv
10.246 182.461 10.215 182.469 10.188 182.469 cv
5.551 182.469 li
5.516 182.469 5.488 182.461 5.461 182.445 cv
5.434 182.43 5.406 182.406 5.383 182.367 cv
5.355 182.336 5.336 182.285 5.324 182.223 cv
5.309 182.164 5.301 182.094 5.305 182.004 cv
5.301 181.926 5.309 181.852 5.324 181.789 cv
5.336 181.73 5.352 181.684 5.375 181.645 cv
5.391 181.609 5.418 181.578 5.449 181.555 cv
5.48 181.535 5.512 181.527 5.551 181.523 cv
7.402 181.523 li
7.402 174.777 li
5.688 175.797 li
5.598 175.848 5.527 175.875 5.48 175.883 cv
5.426 175.891 5.383 175.883 5.352 175.852 cv
5.316 175.824 5.297 175.773 5.285 175.703 cv
5.273 175.637 5.266 175.551 5.27 175.441 cv
5.266 175.367 5.27 175.301 5.281 175.242 cv
5.285 175.191 5.297 175.145 5.313 175.105 cv
5.324 175.07 5.344 175.039 5.367 175.012 cv
5.391 174.984 5.422 174.957 5.469 174.93 cv
7.512 173.617 li
7.527 173.605 7.547 173.594 7.578 173.586 cv
7.602 173.578 7.637 173.57 7.684 173.559 cv
7.723 173.551 7.773 173.543 7.828 173.539 cv
7.883 173.539 7.949 173.539 8.035 173.535 cv
8.141 173.539 8.234 173.543 8.309 173.551 cv
8.379 173.559 8.434 173.574 8.48 173.59 cv
8.52 173.609 8.547 173.629 8.563 173.652 cv
8.57 173.68 8.578 173.703 8.582 173.727 cv
8.582 181.523 li
10.188 181.523 li
10.223 181.527 10.258 181.535 10.289 181.555 cv
10.32 181.578 10.344 181.609 10.367 181.645 cv
10.383 181.684 10.398 181.73 10.414 181.789 cv
10.422 181.852 10.43 181.926 10.434 182.004 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.516 182.004 mo
17.512 182.094 17.504 182.164 17.492 182.223 cv
17.477 182.285 17.457 182.336 17.438 182.367 cv
17.414 182.406 17.391 182.43 17.359 182.445 cv
17.328 182.461 17.297 182.469 17.27 182.469 cv
12.633 182.469 li
12.598 182.469 12.57 182.461 12.543 182.445 cv
12.516 182.43 12.488 182.406 12.465 182.367 cv
12.438 182.336 12.418 182.285 12.406 182.223 cv
12.391 182.164 12.383 182.094 12.387 182.004 cv
12.383 181.926 12.391 181.852 12.406 181.789 cv
12.418 181.73 12.434 181.684 12.457 181.645 cv
12.473 181.609 12.5 181.578 12.531 181.555 cv
12.563 181.535 12.594 181.527 12.633 181.523 cv
14.484 181.523 li
14.484 174.777 li
12.77 175.797 li
12.68 175.848 12.609 175.875 12.563 175.883 cv
12.508 175.891 12.465 175.883 12.434 175.852 cv
12.398 175.824 12.379 175.773 12.367 175.703 cv
12.355 175.637 12.348 175.551 12.352 175.441 cv
12.348 175.367 12.352 175.301 12.363 175.242 cv
12.367 175.191 12.379 175.145 12.395 175.105 cv
12.406 175.07 12.426 175.039 12.449 175.012 cv
12.473 174.984 12.504 174.957 12.551 174.93 cv
14.594 173.617 li
14.609 173.605 14.629 173.594 14.66 173.586 cv
14.684 173.578 14.719 173.57 14.766 173.559 cv
14.805 173.551 14.855 173.543 14.91 173.539 cv
14.965 173.539 15.031 173.539 15.117 173.535 cv
15.223 173.539 15.316 173.543 15.391 173.551 cv
15.461 173.559 15.516 173.574 15.563 173.59 cv
15.602 173.609 15.629 173.629 15.645 173.652 cv
15.652 173.68 15.66 173.703 15.664 173.727 cv
15.664 181.523 li
17.27 181.523 li
17.305 181.527 17.34 181.535 17.371 181.555 cv
17.402 181.578 17.426 181.609 17.449 181.645 cv
17.465 181.684 17.48 181.73 17.496 181.789 cv
17.504 181.852 17.512 181.926 17.516 182.004 cv
cp
f
4.063 139.41 mo
18.251 139.41 li
18.251 156.5 li
4.063 156.5 li
cp
0 0 0 0 cmyk
ef
10.434 152.297 mo
10.43 152.387 10.422 152.457 10.41 152.516 cv
10.395 152.578 10.375 152.629 10.355 152.66 cv
10.332 152.699 10.309 152.723 10.277 152.738 cv
10.246 152.754 10.215 152.762 10.188 152.762 cv
5.551 152.762 li
5.516 152.762 5.488 152.754 5.461 152.738 cv
5.434 152.723 5.406 152.699 5.383 152.66 cv
5.355 152.629 5.336 152.578 5.324 152.516 cv
5.309 152.457 5.301 152.387 5.305 152.297 cv
5.301 152.219 5.309 152.145 5.324 152.082 cv
5.336 152.023 5.352 151.977 5.375 151.937 cv
5.391 151.902 5.418 151.871 5.449 151.848 cv
5.48 151.828 5.512 151.82 5.551 151.816 cv
7.402 151.816 li
7.402 145.07 li
5.688 146.09 li
5.598 146.141 5.527 146.168 5.48 146.176 cv
5.426 146.184 5.383 146.176 5.352 146.145 cv
5.316 146.117 5.297 146.066 5.285 145.996 cv
5.273 145.93 5.266 145.844 5.27 145.734 cv
5.266 145.66 5.27 145.594 5.281 145.535 cv
5.285 145.484 5.297 145.437 5.313 145.398 cv
5.324 145.363 5.344 145.332 5.367 145.305 cv
5.391 145.277 5.422 145.25 5.469 145.223 cv
7.512 143.91 li
7.527 143.898 7.547 143.887 7.578 143.879 cv
7.602 143.871 7.637 143.863 7.684 143.852 cv
7.723 143.844 7.773 143.836 7.828 143.832 cv
7.883 143.832 7.949 143.832 8.035 143.828 cv
8.141 143.832 8.234 143.836 8.309 143.844 cv
8.379 143.852 8.434 143.867 8.48 143.883 cv
8.52 143.902 8.547 143.922 8.563 143.945 cv
8.57 143.973 8.578 143.996 8.582 144.02 cv
8.582 151.816 li
10.188 151.816 li
10.223 151.82 10.258 151.828 10.289 151.848 cv
10.32 151.871 10.344 151.902 10.367 151.937 cv
10.383 151.977 10.398 152.023 10.414 152.082 cv
10.422 152.145 10.43 152.219 10.434 152.297 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.496 152.254 mo
17.492 152.34 17.488 152.414 17.477 152.477 cv
17.465 152.543 17.449 152.598 17.43 152.637 cv
17.406 152.684 17.379 152.715 17.348 152.73 cv
17.313 152.754 17.273 152.762 17.234 152.762 cv
12.332 152.762 li
12.27 152.762 12.211 152.754 12.164 152.738 cv
12.113 152.723 12.074 152.699 12.039 152.66 cv
12.004 152.629 11.977 152.574 11.965 152.504 cv
11.945 152.434 11.938 152.348 11.941 152.246 cv
11.938 152.156 11.941 152.078 11.949 152.008 cv
11.953 151.941 11.969 151.883 11.996 151.828 cv
12.02 151.777 12.051 151.723 12.086 151.668 cv
12.121 151.617 12.164 151.562 12.223 151.5 cv
13.996 149.676 li
14.406 149.258 14.734 148.883 14.984 148.547 cv
15.23 148.219 15.422 147.914 15.555 147.637 cv
15.688 147.363 15.773 147.113 15.82 146.887 cv
15.859 146.664 15.883 146.453 15.883 146.258 cv
15.883 146.062 15.848 145.879 15.781 145.699 cv
15.715 145.527 15.621 145.371 15.496 145.234 cv
15.371 145.105 15.215 145 15.027 144.918 cv
14.84 144.844 14.621 144.805 14.375 144.801 cv
14.086 144.805 13.828 144.844 13.602 144.918 cv
13.371 145 13.172 145.086 13 145.172 cv
12.828 145.266 12.684 145.348 12.566 145.426 cv
12.449 145.504 12.363 145.543 12.313 145.543 cv
12.277 145.543 12.246 145.535 12.223 145.516 cv
12.191 145.5 12.172 145.469 12.156 145.426 cv
12.141 145.387 12.125 145.332 12.117 145.262 cv
12.105 145.195 12.102 145.113 12.105 145.016 cv
12.102 144.949 12.105 144.891 12.113 144.84 cv
12.117 144.789 12.125 144.746 12.137 144.707 cv
12.145 144.672 12.16 144.637 12.18 144.605 cv
12.199 144.574 12.234 144.535 12.293 144.484 cv
12.344 144.437 12.438 144.371 12.574 144.289 cv
12.707 144.207 12.879 144.129 13.082 144.047 cv
13.285 143.969 13.508 143.898 13.754 143.844 cv
13.996 143.789 14.254 143.762 14.527 143.762 cv
14.953 143.762 15.328 143.824 15.652 143.945 cv
15.973 144.066 16.238 144.23 16.453 144.441 cv
16.664 144.652 16.824 144.898 16.93 145.172 cv
17.035 145.453 17.09 145.75 17.09 146.062 cv
17.09 146.352 17.063 146.633 17.012 146.91 cv
16.961 147.195 16.855 147.5 16.695 147.824 cv
16.531 148.152 16.297 148.516 15.992 148.914 cv
15.684 149.316 15.277 149.777 14.773 150.293 cv
13.367 151.762 li
17.227 151.762 li
17.258 151.766 17.293 151.777 17.332 151.793 cv
17.363 151.816 17.395 151.848 17.422 151.887 cv
17.445 151.93 17.465 151.98 17.477 152.039 cv
17.488 152.105 17.492 152.176 17.496 152.254 cv
cp
f
4.063 109.699 mo
18.251 109.699 li
18.251 126.789 li
4.063 126.789 li
cp
0 0 0 0 cmyk
ef
10.434 122.586 mo
10.43 122.676 10.422 122.746 10.41 122.805 cv
10.395 122.867 10.375 122.918 10.355 122.949 cv
10.332 122.988 10.309 123.012 10.277 123.027 cv
10.246 123.043 10.215 123.051 10.188 123.051 cv
5.551 123.051 li
5.516 123.051 5.488 123.043 5.461 123.027 cv
5.434 123.012 5.406 122.988 5.383 122.949 cv
5.355 122.918 5.336 122.867 5.324 122.805 cv
5.309 122.746 5.301 122.676 5.305 122.586 cv
5.301 122.508 5.309 122.434 5.324 122.371 cv
5.336 122.312 5.352 122.266 5.375 122.227 cv
5.391 122.191 5.418 122.16 5.449 122.137 cv
5.48 122.117 5.512 122.109 5.551 122.105 cv
7.402 122.105 li
7.402 115.359 li
5.688 116.379 li
5.598 116.43 5.527 116.457 5.48 116.465 cv
5.426 116.473 5.383 116.465 5.352 116.434 cv
5.316 116.406 5.297 116.355 5.285 116.285 cv
5.273 116.219 5.266 116.133 5.27 116.023 cv
5.266 115.949 5.27 115.883 5.281 115.824 cv
5.285 115.773 5.297 115.727 5.313 115.687 cv
5.324 115.652 5.344 115.621 5.367 115.594 cv
5.391 115.566 5.422 115.539 5.469 115.512 cv
7.512 114.199 li
7.527 114.187 7.547 114.176 7.578 114.168 cv
7.602 114.16 7.637 114.152 7.684 114.141 cv
7.723 114.133 7.773 114.125 7.828 114.121 cv
7.883 114.121 7.949 114.121 8.035 114.117 cv
8.141 114.121 8.234 114.125 8.309 114.133 cv
8.379 114.141 8.434 114.156 8.48 114.172 cv
8.52 114.191 8.547 114.211 8.563 114.234 cv
8.57 114.262 8.578 114.285 8.582 114.309 cv
8.582 122.105 li
10.188 122.105 li
10.223 122.109 10.258 122.117 10.289 122.137 cv
10.32 122.16 10.344 122.191 10.367 122.227 cv
10.383 122.266 10.398 122.312 10.414 122.371 cv
10.422 122.434 10.43 122.508 10.434 122.586 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.426 120.516 mo
17.422 120.926 17.352 121.293 17.211 121.617 cv
17.066 121.945 16.863 122.227 16.602 122.457 cv
16.336 122.691 16.008 122.867 15.621 122.992 cv
15.23 123.117 14.793 123.18 14.309 123.18 cv
14.004 123.18 13.727 123.152 13.473 123.105 cv
13.211 123.059 12.98 123.008 12.785 122.937 cv
12.582 122.875 12.418 122.805 12.285 122.734 cv
12.152 122.664 12.066 122.613 12.035 122.578 cv
11.996 122.551 11.973 122.52 11.957 122.484 cv
11.938 122.453 11.918 122.414 11.906 122.367 cv
11.891 122.324 11.883 122.27 11.875 122.199 cv
11.867 122.137 11.863 122.055 11.867 121.953 cv
11.863 121.793 11.879 121.68 11.914 121.613 cv
11.945 121.551 11.992 121.516 12.055 121.516 cv
12.098 121.516 12.18 121.555 12.305 121.625 cv
12.426 121.703 12.586 121.781 12.781 121.863 cv
12.973 121.949 13.199 122.027 13.465 122.098 cv
13.723 122.172 14.016 122.207 14.336 122.207 cv
14.645 122.207 14.914 122.168 15.152 122.09 cv
15.383 122.012 15.582 121.902 15.742 121.762 cv
15.898 121.621 16.016 121.453 16.098 121.258 cv
16.176 121.062 16.215 120.852 16.219 120.625 cv
16.215 120.375 16.164 120.148 16.066 119.945 cv
15.961 119.746 15.813 119.574 15.621 119.426 cv
15.422 119.281 15.184 119.168 14.898 119.09 cv
14.613 119.012 14.289 118.973 13.926 118.973 cv
13.055 118.973 li
13.012 118.973 12.977 118.965 12.941 118.949 cv
12.906 118.934 12.875 118.906 12.852 118.867 cv
12.824 118.832 12.805 118.785 12.789 118.727 cv
12.773 118.668 12.766 118.59 12.766 118.492 cv
12.766 118.406 12.77 118.336 12.785 118.277 cv
12.793 118.223 12.813 118.176 12.844 118.141 cv
12.867 118.105 12.898 118.082 12.93 118.062 cv
12.961 118.051 12.996 118.043 13.039 118.039 cv
13.813 118.039 li
14.113 118.043 14.383 118.004 14.625 117.922 cv
14.859 117.848 15.063 117.734 15.234 117.586 cv
15.398 117.441 15.527 117.266 15.617 117.062 cv
15.707 116.859 15.754 116.633 15.754 116.379 cv
15.754 116.199 15.723 116.023 15.664 115.855 cv
15.602 115.691 15.512 115.547 15.395 115.422 cv
15.273 115.297 15.121 115.199 14.941 115.129 cv
14.754 115.059 14.543 115.023 14.301 115.023 cv
14.035 115.023 13.789 115.066 13.57 115.145 cv
13.344 115.227 13.148 115.312 12.977 115.402 cv
12.801 115.496 12.656 115.582 12.543 115.66 cv
12.43 115.742 12.348 115.781 12.305 115.777 cv
12.27 115.781 12.242 115.773 12.219 115.762 cv
12.191 115.75 12.172 115.727 12.156 115.691 cv
12.141 115.66 12.129 115.613 12.121 115.547 cv
12.113 115.488 12.109 115.406 12.113 115.305 cv
12.109 115.238 12.109 115.18 12.117 115.125 cv
12.117 115.074 12.129 115.027 12.145 114.984 cv
12.16 114.949 12.176 114.914 12.195 114.879 cv
12.211 114.852 12.242 114.812 12.285 114.766 cv
12.328 114.723 12.414 114.66 12.551 114.578 cv
12.68 114.496 12.844 114.418 13.039 114.336 cv
13.23 114.258 13.453 114.187 13.711 114.133 cv
13.961 114.078 14.234 114.051 14.531 114.051 cv
14.938 114.051 15.301 114.105 15.613 114.207 cv
15.926 114.316 16.184 114.465 16.395 114.652 cv
16.598 114.848 16.754 115.078 16.859 115.344 cv
16.961 115.613 17.012 115.906 17.016 116.23 cv
17.012 116.512 16.977 116.773 16.906 117.008 cv
16.832 117.25 16.723 117.461 16.582 117.645 cv
16.438 117.832 16.266 117.988 16.063 118.117 cv
15.855 118.25 15.617 118.344 15.348 118.391 cv
15.348 118.402 li
15.652 118.437 15.934 118.512 16.188 118.633 cv
16.441 118.754 16.66 118.906 16.844 119.09 cv
17.023 119.273 17.164 119.488 17.27 119.73 cv
17.371 119.977 17.422 120.238 17.426 120.516 cv
cp
f
4.063 79.98 mo
18.251 79.98 li
18.251 97.07 li
4.063 97.07 li
cp
0 0 0 0 cmyk
ef
10.434 92.875 mo
10.43 92.965 10.422 93.035 10.41 93.094 cv
10.395 93.156 10.375 93.207 10.355 93.238 cv
10.332 93.277 10.309 93.301 10.277 93.316 cv
10.246 93.332 10.215 93.34 10.188 93.34 cv
5.551 93.34 li
5.516 93.34 5.488 93.332 5.461 93.316 cv
5.434 93.301 5.406 93.277 5.383 93.238 cv
5.355 93.207 5.336 93.156 5.324 93.094 cv
5.309 93.035 5.301 92.965 5.305 92.875 cv
5.301 92.797 5.309 92.723 5.324 92.66 cv
5.336 92.602 5.352 92.555 5.375 92.516 cv
5.391 92.48 5.418 92.449 5.449 92.426 cv
5.48 92.406 5.512 92.398 5.551 92.395 cv
7.402 92.395 li
7.402 85.648 li
5.688 86.668 li
5.598 86.719 5.527 86.746 5.48 86.754 cv
5.426 86.762 5.383 86.754 5.352 86.723 cv
5.316 86.695 5.297 86.645 5.285 86.574 cv
5.273 86.508 5.266 86.422 5.27 86.312 cv
5.266 86.238 5.27 86.172 5.281 86.113 cv
5.285 86.062 5.297 86.016 5.313 85.977 cv
5.324 85.941 5.344 85.91 5.367 85.883 cv
5.391 85.855 5.422 85.828 5.469 85.801 cv
7.512 84.488 li
7.527 84.477 7.547 84.465 7.578 84.457 cv
7.602 84.449 7.637 84.441 7.684 84.43 cv
7.723 84.422 7.773 84.414 7.828 84.41 cv
7.883 84.41 7.949 84.41 8.035 84.406 cv
8.141 84.41 8.234 84.414 8.309 84.422 cv
8.379 84.43 8.434 84.445 8.48 84.461 cv
8.52 84.48 8.547 84.5 8.563 84.523 cv
8.57 84.551 8.578 84.574 8.582 84.598 cv
8.582 92.395 li
10.188 92.395 li
10.223 92.398 10.258 92.406 10.289 92.426 cv
10.32 92.449 10.344 92.48 10.367 92.516 cv
10.383 92.555 10.398 92.602 10.414 92.66 cv
10.422 92.723 10.43 92.797 10.434 92.875 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.871 90.816 mo
17.867 90.969 17.844 91.09 17.801 91.176 cv
17.754 91.266 17.691 91.309 17.609 91.305 cv
16.609 91.305 li
16.609 93.168 li
16.609 93.207 16.598 93.238 16.582 93.262 cv
16.559 93.289 16.527 93.309 16.484 93.328 cv
16.434 93.344 16.371 93.355 16.301 93.367 cv
16.223 93.375 16.129 93.379 16.012 93.383 cv
15.895 93.379 15.797 93.375 15.727 93.367 cv
15.648 93.355 15.59 93.344 15.547 93.328 cv
15.5 93.309 15.469 93.289 15.453 93.262 cv
15.434 93.238 15.426 93.207 15.43 93.168 cv
15.43 91.305 li
11.801 91.305 li
11.742 91.309 11.699 91.301 11.664 91.285 cv
11.629 91.273 11.594 91.246 11.566 91.207 cv
11.535 91.172 11.516 91.121 11.504 91.051 cv
11.492 90.984 11.488 90.895 11.488 90.781 cv
11.488 90.699 11.488 90.621 11.496 90.551 cv
11.496 90.48 11.508 90.418 11.523 90.363 cv
11.535 90.309 11.551 90.254 11.578 90.199 cv
11.598 90.145 11.625 90.09 11.66 90.027 cv
14.82 84.641 li
14.84 84.605 14.875 84.574 14.922 84.547 cv
14.965 84.52 15.02 84.496 15.094 84.477 cv
15.16 84.461 15.246 84.449 15.352 84.437 cv
15.453 84.434 15.574 84.43 15.715 84.426 cv
15.863 84.43 16 84.434 16.117 84.445 cv
16.23 84.457 16.32 84.473 16.395 84.488 cv
16.461 84.508 16.516 84.531 16.555 84.562 cv
16.59 84.594 16.609 84.629 16.609 84.668 cv
16.609 90.332 li
17.609 90.332 li
17.684 90.336 17.746 90.375 17.797 90.453 cv
17.844 90.535 17.867 90.656 17.871 90.816 cv
cp
15.43 85.465 mo
15.418 85.465 li
12.566 90.332 li
15.43 90.332 li
cp
f
4.063 50.27 mo
18.251 50.27 li
18.251 67.36 li
4.063 67.36 li
cp
0 0 0 0 cmyk
ef
10.434 63.137 mo
10.43 63.227 10.422 63.297 10.41 63.355 cv
10.395 63.418 10.375 63.469 10.355 63.5 cv
10.332 63.539 10.309 63.562 10.277 63.578 cv
10.246 63.594 10.215 63.602 10.188 63.602 cv
5.551 63.602 li
5.516 63.602 5.488 63.594 5.461 63.578 cv
5.434 63.562 5.406 63.539 5.383 63.5 cv
5.355 63.469 5.336 63.418 5.324 63.355 cv
5.309 63.297 5.301 63.227 5.305 63.137 cv
5.301 63.059 5.309 62.984 5.324 62.922 cv
5.336 62.863 5.352 62.816 5.375 62.777 cv
5.391 62.742 5.418 62.711 5.449 62.687 cv
5.48 62.668 5.512 62.66 5.551 62.656 cv
7.402 62.656 li
7.402 55.91 li
5.688 56.93 li
5.598 56.98 5.527 57.008 5.48 57.016 cv
5.426 57.023 5.383 57.016 5.352 56.984 cv
5.316 56.957 5.297 56.906 5.285 56.836 cv
5.273 56.77 5.266 56.684 5.27 56.574 cv
5.266 56.5 5.27 56.434 5.281 56.375 cv
5.285 56.324 5.297 56.277 5.313 56.238 cv
5.324 56.203 5.344 56.172 5.367 56.145 cv
5.391 56.117 5.422 56.09 5.469 56.062 cv
7.512 54.75 li
7.527 54.738 7.547 54.727 7.578 54.719 cv
7.602 54.711 7.637 54.703 7.684 54.691 cv
7.723 54.684 7.773 54.676 7.828 54.672 cv
7.883 54.672 7.949 54.672 8.035 54.668 cv
8.141 54.672 8.234 54.676 8.309 54.684 cv
8.379 54.691 8.434 54.707 8.48 54.723 cv
8.52 54.742 8.547 54.762 8.563 54.785 cv
8.57 54.812 8.578 54.836 8.582 54.859 cv
8.582 62.656 li
10.188 62.656 li
10.223 62.66 10.258 62.668 10.289 62.687 cv
10.32 62.711 10.344 62.742 10.367 62.777 cv
10.383 62.816 10.398 62.863 10.414 62.922 cv
10.422 62.984 10.43 63.059 10.434 63.137 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.453 60.75 mo
17.453 61.227 17.371 61.648 17.211 62.02 cv
17.051 62.391 16.824 62.703 16.535 62.957 cv
16.238 63.211 15.891 63.406 15.488 63.535 cv
15.082 63.668 14.633 63.73 14.141 63.73 cv
13.863 63.73 13.602 63.711 13.359 63.672 cv
13.109 63.633 12.891 63.586 12.703 63.531 cv
12.508 63.477 12.352 63.422 12.227 63.363 cv
12.102 63.312 12.023 63.27 11.992 63.234 cv
11.957 63.203 11.934 63.172 11.922 63.145 cv
11.906 63.117 11.891 63.086 11.883 63.043 cv
11.867 63.008 11.859 62.957 11.859 62.895 cv
11.852 62.836 11.852 62.766 11.852 62.684 cv
11.852 62.609 11.855 62.539 11.863 62.477 cv
11.871 62.414 11.883 62.363 11.902 62.324 cv
11.918 62.285 11.938 62.258 11.965 62.238 cv
11.988 62.223 12.02 62.215 12.051 62.211 cv
12.098 62.215 12.168 62.242 12.262 62.297 cv
12.355 62.355 12.484 62.418 12.648 62.484 cv
12.813 62.551 13.012 62.613 13.254 62.672 cv
13.488 62.73 13.773 62.758 14.109 62.758 cv
14.41 62.758 14.691 62.723 14.949 62.648 cv
15.203 62.578 15.426 62.465 15.613 62.309 cv
15.797 62.156 15.941 61.961 16.047 61.723 cv
16.152 61.488 16.203 61.199 16.207 60.859 cv
16.203 60.578 16.16 60.328 16.07 60.109 cv
15.98 59.891 15.844 59.711 15.66 59.566 cv
15.473 59.426 15.238 59.32 14.957 59.246 cv
14.672 59.176 14.332 59.137 13.945 59.137 cv
13.66 59.137 13.422 59.152 13.223 59.18 cv
13.02 59.211 12.832 59.227 12.66 59.223 cv
12.531 59.227 12.438 59.195 12.387 59.133 cv
12.328 59.074 12.301 58.961 12.305 58.789 cv
12.305 55.176 li
12.301 55.027 12.336 54.918 12.41 54.84 cv
12.477 54.77 12.578 54.73 12.715 54.73 cv
16.645 54.73 li
16.68 54.73 16.715 54.742 16.75 54.762 cv
16.781 54.785 16.809 54.816 16.836 54.855 cv
16.855 54.898 16.871 54.949 16.887 55.012 cv
16.895 55.078 16.902 55.156 16.906 55.238 cv
16.902 55.406 16.879 55.531 16.84 55.621 cv
16.793 55.715 16.734 55.762 16.656 55.758 cv
13.484 55.758 li
13.484 58.246 li
13.637 58.227 13.793 58.215 13.957 58.207 cv
14.113 58.203 14.301 58.199 14.516 58.199 cv
15 58.199 15.426 58.262 15.793 58.383 cv
16.156 58.504 16.461 58.676 16.711 58.895 cv
16.953 59.121 17.141 59.387 17.266 59.699 cv
17.391 60.016 17.453 60.367 17.453 60.75 cv
cp
f
4.063 20.559 mo
18.251 20.559 li
18.251 37.649 li
4.063 37.649 li
cp
0 0 0 0 cmyk
ef
10.434 33.426 mo
10.43 33.516 10.422 33.586 10.41 33.645 cv
10.395 33.707 10.375 33.758 10.355 33.789 cv
10.332 33.828 10.309 33.852 10.277 33.867 cv
10.246 33.883 10.215 33.891 10.188 33.891 cv
5.551 33.891 li
5.516 33.891 5.488 33.883 5.461 33.867 cv
5.434 33.852 5.406 33.828 5.383 33.789 cv
5.355 33.758 5.336 33.707 5.324 33.645 cv
5.309 33.586 5.301 33.516 5.305 33.426 cv
5.301 33.348 5.309 33.273 5.324 33.211 cv
5.336 33.152 5.352 33.105 5.375 33.066 cv
5.391 33.031 5.418 33 5.449 32.977 cv
5.48 32.957 5.512 32.949 5.551 32.945 cv
7.402 32.945 li
7.402 26.199 li
5.688 27.219 li
5.598 27.27 5.527 27.297 5.48 27.305 cv
5.426 27.312 5.383 27.305 5.352 27.273 cv
5.316 27.246 5.297 27.195 5.285 27.125 cv
5.273 27.059 5.266 26.973 5.27 26.863 cv
5.266 26.789 5.27 26.723 5.281 26.664 cv
5.285 26.613 5.297 26.566 5.313 26.527 cv
5.324 26.492 5.344 26.461 5.367 26.434 cv
5.391 26.406 5.422 26.379 5.469 26.352 cv
7.512 25.039 li
7.527 25.027 7.547 25.016 7.578 25.008 cv
7.602 25 7.637 24.992 7.684 24.98 cv
7.723 24.973 7.773 24.965 7.828 24.961 cv
7.883 24.961 7.949 24.961 8.035 24.957 cv
8.141 24.961 8.234 24.965 8.309 24.973 cv
8.379 24.98 8.434 24.996 8.48 25.012 cv
8.52 25.031 8.547 25.051 8.563 25.074 cv
8.57 25.102 8.578 25.125 8.582 25.148 cv
8.582 32.945 li
10.188 32.945 li
10.223 32.949 10.258 32.957 10.289 32.977 cv
10.32 33 10.344 33.031 10.367 33.066 cv
10.383 33.105 10.398 33.152 10.414 33.211 cv
10.422 33.273 10.43 33.348 10.434 33.426 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
17.723 31.02 mo
17.723 31.41 17.66 31.789 17.543 32.148 cv
17.418 32.516 17.234 32.832 16.992 33.105 cv
16.742 33.383 16.43 33.605 16.055 33.77 cv
15.672 33.937 15.227 34.02 14.711 34.02 cv
14.34 34.02 14.012 33.977 13.73 33.883 cv
13.445 33.797 13.199 33.664 12.988 33.492 cv
12.777 33.324 12.602 33.117 12.465 32.871 cv
12.324 32.625 12.211 32.344 12.129 32.027 cv
12.043 31.715 11.984 31.371 11.949 30.992 cv
11.91 30.621 11.891 30.219 11.895 29.785 cv
11.891 29.406 11.91 29.023 11.953 28.633 cv
11.992 28.25 12.066 27.875 12.172 27.508 cv
12.277 27.148 12.422 26.809 12.602 26.492 cv
12.781 26.176 13.008 25.898 13.281 25.664 cv
13.555 25.43 13.879 25.242 14.258 25.102 cv
14.637 24.965 15.078 24.898 15.582 24.895 cv
15.75 24.898 15.922 24.906 16.094 24.926 cv
16.266 24.949 16.426 24.98 16.574 25.012 cv
16.723 25.051 16.844 25.086 16.945 25.125 cv
17.043 25.164 17.109 25.199 17.145 25.223 cv
17.172 25.25 17.195 25.277 17.215 25.305 cv
17.23 25.336 17.246 25.367 17.254 25.402 cv
17.262 25.437 17.266 25.477 17.273 25.52 cv
17.273 25.562 17.277 25.617 17.281 25.68 cv
17.277 25.766 17.277 25.836 17.277 25.891 cv
17.273 25.953 17.262 26 17.25 26.035 cv
17.23 26.074 17.211 26.102 17.188 26.117 cv
17.16 26.137 17.129 26.145 17.09 26.145 cv
17.039 26.145 16.969 26.129 16.883 26.098 cv
16.793 26.066 16.688 26.031 16.566 25.988 cv
16.441 25.953 16.293 25.918 16.117 25.883 cv
15.941 25.855 15.738 25.84 15.508 25.836 cv
15.078 25.84 14.711 25.926 14.406 26.098 cv
14.102 26.27 13.852 26.504 13.656 26.797 cv
13.461 27.09 13.316 27.43 13.227 27.812 cv
13.129 28.203 13.074 28.605 13.066 29.023 cv
13.184 28.957 13.32 28.891 13.469 28.82 cv
13.617 28.754 13.777 28.691 13.953 28.633 cv
14.129 28.582 14.316 28.535 14.512 28.5 cv
14.707 28.469 14.918 28.453 15.145 28.449 cv
15.621 28.453 16.023 28.52 16.355 28.645 cv
16.684 28.777 16.949 28.957 17.156 29.187 cv
17.355 29.418 17.5 29.687 17.59 30 cv
17.676 30.312 17.723 30.652 17.723 31.02 cv
cp
16.527 31.129 mo
16.527 30.867 16.5 30.625 16.449 30.406 cv
16.395 30.191 16.305 30.008 16.184 29.852 cv
16.059 29.703 15.895 29.586 15.691 29.504 cv
15.48 29.422 15.227 29.379 14.93 29.379 cv
14.758 29.379 14.59 29.395 14.422 29.426 cv
14.25 29.457 14.086 29.5 13.93 29.547 cv
13.77 29.602 13.621 29.664 13.48 29.734 cv
13.336 29.809 13.203 29.883 13.086 29.961 cv
13.082 30.555 13.121 31.051 13.199 31.445 cv
13.273 31.844 13.383 32.16 13.527 32.398 cv
13.672 32.641 13.852 32.812 14.066 32.914 cv
14.281 33.02 14.531 33.07 14.82 33.066 cv
15.109 33.07 15.363 33.016 15.578 32.902 cv
15.793 32.797 15.969 32.648 16.113 32.461 cv
16.254 32.277 16.359 32.07 16.426 31.84 cv
16.492 31.609 16.527 31.375 16.527 31.129 cv
cp
f
34.055 497.391 mo
34.051 497.48 34.043 497.551 34.031 497.609 cv
34.016 497.672 33.996 497.723 33.977 497.754 cv
33.953 497.793 33.93 497.816 33.898 497.832 cv
33.867 497.848 33.836 497.855 33.809 497.855 cv
29.172 497.855 li
29.137 497.855 29.109 497.848 29.082 497.832 cv
29.055 497.816 29.027 497.793 29.004 497.754 cv
28.977 497.723 28.957 497.672 28.945 497.609 cv
28.93 497.551 28.922 497.48 28.926 497.391 cv
28.922 497.312 28.93 497.238 28.945 497.176 cv
28.957 497.117 28.973 497.07 28.996 497.031 cv
29.012 496.996 29.039 496.965 29.07 496.941 cv
29.102 496.922 29.133 496.914 29.172 496.91 cv
31.023 496.91 li
31.023 490.164 li
29.309 491.184 li
29.219 491.234 29.148 491.262 29.102 491.27 cv
29.047 491.277 29.004 491.27 28.973 491.238 cv
28.938 491.211 28.918 491.16 28.906 491.09 cv
28.895 491.023 28.887 490.937 28.891 490.828 cv
28.887 490.754 28.891 490.687 28.902 490.629 cv
28.906 490.578 28.918 490.531 28.934 490.492 cv
28.945 490.457 28.965 490.426 28.988 490.398 cv
29.012 490.371 29.043 490.344 29.09 490.316 cv
31.133 489.004 li
31.148 488.992 31.168 488.98 31.199 488.973 cv
31.223 488.965 31.258 488.957 31.305 488.945 cv
31.344 488.937 31.395 488.93 31.449 488.926 cv
31.504 488.926 31.57 488.926 31.656 488.922 cv
31.762 488.926 31.855 488.93 31.93 488.937 cv
32 488.945 32.055 488.961 32.102 488.977 cv
32.141 488.996 32.168 489.016 32.184 489.039 cv
32.191 489.066 32.199 489.09 32.203 489.113 cv
32.203 496.91 li
33.809 496.91 li
33.844 496.914 33.879 496.922 33.91 496.941 cv
33.941 496.965 33.965 496.996 33.988 497.031 cv
34.004 497.07 34.02 497.117 34.035 497.176 cv
34.043 497.238 34.051 497.312 34.055 497.391 cv
cp
f
107.496 497.348 mo
107.492 497.434 107.488 497.508 107.477 497.57 cv
107.465 497.637 107.449 497.691 107.43 497.73 cv
107.406 497.777 107.379 497.809 107.348 497.824 cv
107.313 497.848 107.273 497.855 107.234 497.855 cv
102.332 497.855 li
102.27 497.855 102.211 497.848 102.164 497.832 cv
102.113 497.816 102.074 497.793 102.039 497.754 cv
102.004 497.723 101.977 497.668 101.965 497.598 cv
101.945 497.527 101.938 497.441 101.941 497.34 cv
101.938 497.25 101.941 497.172 101.949 497.102 cv
101.953 497.035 101.969 496.977 101.996 496.922 cv
102.02 496.871 102.051 496.816 102.086 496.762 cv
102.121 496.711 102.164 496.656 102.223 496.594 cv
103.996 494.77 li
104.406 494.352 104.734 493.977 104.984 493.641 cv
105.23 493.312 105.422 493.008 105.555 492.73 cv
105.688 492.457 105.773 492.207 105.82 491.98 cv
105.859 491.758 105.883 491.547 105.883 491.352 cv
105.883 491.156 105.848 490.973 105.781 490.793 cv
105.715 490.621 105.621 490.465 105.496 490.328 cv
105.371 490.199 105.215 490.094 105.027 490.012 cv
104.84 489.937 104.621 489.898 104.375 489.895 cv
104.086 489.898 103.828 489.937 103.602 490.012 cv
103.371 490.094 103.172 490.18 103 490.266 cv
102.828 490.359 102.684 490.441 102.566 490.52 cv
102.449 490.598 102.363 490.637 102.313 490.637 cv
102.277 490.637 102.246 490.629 102.223 490.609 cv
102.191 490.594 102.172 490.562 102.156 490.52 cv
102.141 490.48 102.125 490.426 102.117 490.355 cv
102.105 490.289 102.102 490.207 102.105 490.109 cv
102.102 490.043 102.105 489.984 102.113 489.934 cv
102.117 489.883 102.125 489.84 102.137 489.801 cv
102.145 489.766 102.16 489.73 102.18 489.699 cv
102.199 489.668 102.234 489.629 102.293 489.578 cv
102.344 489.531 102.438 489.465 102.574 489.383 cv
102.707 489.301 102.879 489.223 103.082 489.141 cv
103.285 489.062 103.508 488.992 103.754 488.937 cv
103.996 488.883 104.254 488.855 104.527 488.855 cv
104.953 488.855 105.328 488.918 105.652 489.039 cv
105.973 489.16 106.238 489.324 106.453 489.535 cv
106.664 489.746 106.824 489.992 106.93 490.266 cv
107.035 490.547 107.09 490.844 107.09 491.156 cv
107.09 491.445 107.063 491.727 107.012 492.004 cv
106.961 492.289 106.855 492.594 106.695 492.918 cv
106.531 493.246 106.297 493.609 105.992 494.008 cv
105.684 494.41 105.277 494.871 104.773 495.387 cv
103.367 496.855 li
107.227 496.855 li
107.258 496.859 107.293 496.871 107.332 496.887 cv
107.363 496.91 107.395 496.941 107.422 496.98 cv
107.445 497.023 107.465 497.074 107.477 497.133 cv
107.488 497.199 107.492 497.27 107.496 497.348 cv
cp
f
181.332 495.332 mo
181.328 495.484 181.305 495.605 181.262 495.691 cv
181.215 495.781 181.152 495.824 181.07 495.82 cv
180.07 495.82 li
180.07 497.684 li
180.07 497.723 180.059 497.754 180.043 497.777 cv
180.02 497.805 179.988 497.824 179.945 497.844 cv
179.895 497.859 179.832 497.871 179.762 497.883 cv
179.684 497.891 179.59 497.895 179.473 497.898 cv
179.355 497.895 179.258 497.891 179.188 497.883 cv
179.109 497.871 179.051 497.859 179.008 497.844 cv
178.961 497.824 178.93 497.805 178.914 497.777 cv
178.895 497.754 178.887 497.723 178.891 497.684 cv
178.891 495.82 li
175.262 495.82 li
175.203 495.824 175.16 495.816 175.125 495.801 cv
175.09 495.789 175.055 495.762 175.027 495.723 cv
174.996 495.687 174.977 495.637 174.965 495.566 cv
174.953 495.5 174.949 495.41 174.949 495.297 cv
174.949 495.215 174.949 495.137 174.957 495.066 cv
174.957 494.996 174.969 494.934 174.984 494.879 cv
174.996 494.824 175.012 494.77 175.039 494.715 cv
175.059 494.66 175.086 494.605 175.121 494.543 cv
178.281 489.156 li
178.301 489.121 178.336 489.09 178.383 489.062 cv
178.426 489.035 178.48 489.012 178.555 488.992 cv
178.621 488.977 178.707 488.965 178.813 488.953 cv
178.914 488.949 179.035 488.945 179.176 488.941 cv
179.324 488.945 179.461 488.949 179.578 488.961 cv
179.691 488.973 179.781 488.988 179.855 489.004 cv
179.922 489.023 179.977 489.047 180.016 489.078 cv
180.051 489.109 180.07 489.145 180.07 489.184 cv
180.07 494.848 li
181.07 494.848 li
181.145 494.852 181.207 494.891 181.258 494.969 cv
181.305 495.051 181.328 495.172 181.332 495.332 cv
cp
178.891 489.98 mo
178.879 489.98 li
176.027 494.848 li
178.891 494.848 li
cp
f
254.621 494.984 mo
254.621 495.375 254.559 495.754 254.441 496.113 cv
254.316 496.48 254.133 496.797 253.891 497.07 cv
253.641 497.348 253.328 497.57 252.953 497.734 cv
252.57 497.902 252.125 497.984 251.609 497.984 cv
251.238 497.984 250.91 497.941 250.629 497.848 cv
250.344 497.762 250.098 497.629 249.887 497.457 cv
249.676 497.289 249.5 497.082 249.363 496.836 cv
249.223 496.59 249.109 496.309 249.027 495.992 cv
248.941 495.68 248.883 495.336 248.848 494.957 cv
248.809 494.586 248.789 494.184 248.793 493.75 cv
248.789 493.371 248.809 492.988 248.852 492.598 cv
248.891 492.215 248.965 491.84 249.07 491.473 cv
249.176 491.113 249.32 490.773 249.5 490.457 cv
249.68 490.141 249.906 489.863 250.18 489.629 cv
250.453 489.395 250.777 489.207 251.156 489.066 cv
251.535 488.93 251.977 488.863 252.48 488.859 cv
252.648 488.863 252.82 488.871 252.992 488.891 cv
253.164 488.914 253.324 488.945 253.473 488.977 cv
253.621 489.016 253.742 489.051 253.844 489.09 cv
253.941 489.129 254.008 489.164 254.043 489.187 cv
254.07 489.215 254.094 489.242 254.113 489.27 cv
254.129 489.301 254.145 489.332 254.152 489.367 cv
254.16 489.402 254.164 489.441 254.172 489.484 cv
254.172 489.527 254.176 489.582 254.18 489.645 cv
254.176 489.73 254.176 489.801 254.176 489.855 cv
254.172 489.918 254.16 489.965 254.148 490 cv
254.129 490.039 254.109 490.066 254.086 490.082 cv
254.059 490.102 254.027 490.109 253.988 490.109 cv
253.938 490.109 253.867 490.094 253.781 490.062 cv
253.691 490.031 253.586 489.996 253.465 489.953 cv
253.34 489.918 253.191 489.883 253.016 489.848 cv
252.84 489.82 252.637 489.805 252.406 489.801 cv
251.977 489.805 251.609 489.891 251.305 490.062 cv
251 490.234 250.75 490.469 250.555 490.762 cv
250.359 491.055 250.215 491.395 250.125 491.777 cv
250.027 492.168 249.973 492.57 249.965 492.988 cv
250.082 492.922 250.219 492.855 250.367 492.785 cv
250.516 492.719 250.676 492.656 250.852 492.598 cv
251.027 492.547 251.215 492.5 251.41 492.465 cv
251.605 492.434 251.816 492.418 252.043 492.414 cv
252.52 492.418 252.922 492.484 253.254 492.609 cv
253.582 492.742 253.848 492.922 254.055 493.152 cv
254.254 493.383 254.398 493.652 254.488 493.965 cv
254.574 494.277 254.621 494.617 254.621 494.984 cv
cp
253.426 495.094 mo
253.426 494.832 253.398 494.59 253.348 494.371 cv
253.293 494.156 253.203 493.973 253.082 493.816 cv
252.957 493.668 252.793 493.551 252.59 493.469 cv
252.379 493.387 252.125 493.344 251.828 493.344 cv
251.656 493.344 251.488 493.359 251.32 493.391 cv
251.148 493.422 250.984 493.465 250.828 493.512 cv
250.668 493.566 250.52 493.629 250.379 493.699 cv
250.234 493.773 250.102 493.848 249.984 493.926 cv
249.98 494.52 250.02 495.016 250.098 495.41 cv
250.172 495.809 250.281 496.125 250.426 496.363 cv
250.57 496.605 250.75 496.777 250.965 496.879 cv
251.18 496.984 251.43 497.035 251.719 497.031 cv
252.008 497.035 252.262 496.98 252.477 496.867 cv
252.691 496.762 252.867 496.613 253.012 496.426 cv
253.152 496.242 253.258 496.035 253.324 495.805 cv
253.391 495.574 253.426 495.34 253.426 495.094 cv
cp
f
328.07 495.578 mo
328.07 495.965 328 496.309 327.863 496.605 cv
327.727 496.91 327.531 497.16 327.273 497.363 cv
327.016 497.57 326.695 497.727 326.316 497.828 cv
325.934 497.934 325.5 497.984 325.016 497.984 cv
324.555 497.984 324.145 497.937 323.785 497.844 cv
323.422 497.75 323.117 497.609 322.867 497.418 cv
322.617 497.234 322.426 497.004 322.293 496.727 cv
322.16 496.453 322.094 496.141 322.094 495.785 cv
322.094 495.512 322.137 495.254 322.23 495.02 cv
322.316 494.785 322.449 494.57 322.625 494.375 cv
322.793 494.18 323.004 493.996 323.258 493.82 cv
323.508 493.652 323.793 493.488 324.109 493.332 cv
323.836 493.191 323.594 493.043 323.383 492.883 cv
323.172 492.727 322.992 492.555 322.848 492.367 cv
322.699 492.184 322.59 491.988 322.516 491.777 cv
322.438 491.57 322.398 491.34 322.402 491.09 cv
322.398 490.781 322.453 490.488 322.57 490.215 cv
322.68 489.945 322.852 489.711 323.078 489.508 cv
323.305 489.309 323.59 489.148 323.941 489.031 cv
324.285 488.914 324.695 488.855 325.164 488.855 cv
325.609 488.855 325.996 488.91 326.324 489.016 cv
326.652 489.125 326.922 489.27 327.133 489.453 cv
327.344 489.641 327.5 489.859 327.605 490.109 cv
327.703 490.359 327.754 490.629 327.758 490.918 cv
327.754 491.152 327.715 491.379 327.645 491.59 cv
327.566 491.809 327.457 492.012 327.309 492.199 cv
327.16 492.395 326.98 492.574 326.77 492.738 cv
326.559 492.91 326.316 493.066 326.043 493.207 cv
326.363 493.371 326.648 493.535 326.906 493.703 cv
327.156 493.871 327.371 494.051 327.547 494.246 cv
327.715 494.441 327.844 494.648 327.938 494.863 cv
328.023 495.082 328.07 495.32 328.07 495.578 cv
cp
326.59 491.027 mo
326.586 490.84 326.555 490.664 326.488 490.508 cv
326.422 490.352 326.324 490.219 326.199 490.109 cv
326.07 490 325.91 489.918 325.723 489.859 cv
325.527 489.805 325.313 489.777 325.074 489.773 cv
324.578 489.777 324.203 489.887 323.953 490.109 cv
323.695 490.336 323.57 490.645 323.574 491.027 cv
323.57 491.207 323.602 491.371 323.664 491.523 cv
323.727 491.68 323.82 491.824 323.953 491.961 cv
324.078 492.098 324.242 492.23 324.445 492.359 cv
324.641 492.492 324.879 492.629 325.156 492.77 cv
325.617 492.535 325.973 492.273 326.219 491.98 cv
326.465 491.695 326.586 491.379 326.59 491.027 cv
cp
326.879 495.703 mo
326.875 495.496 326.836 495.305 326.762 495.133 cv
326.68 494.965 326.563 494.805 326.406 494.652 cv
326.25 494.504 326.051 494.359 325.816 494.219 cv
325.578 494.082 325.309 493.937 325 493.785 cv
324.711 493.93 324.457 494.07 324.242 494.211 cv
324.023 494.352 323.844 494.5 323.707 494.648 cv
323.566 494.805 323.461 494.961 323.391 495.125 cv
323.316 495.293 323.281 495.477 323.285 495.676 cv
323.281 496.121 323.434 496.465 323.742 496.703 cv
324.043 496.949 324.496 497.07 325.102 497.066 cv
325.684 497.07 326.129 496.949 326.43 496.699 cv
326.727 496.457 326.875 496.125 326.879 495.703 cv
cp
f
397.797 497.391 mo
397.793 497.48 397.785 497.551 397.773 497.609 cv
397.758 497.672 397.738 497.723 397.719 497.754 cv
397.695 497.793 397.672 497.816 397.641 497.832 cv
397.609 497.848 397.578 497.855 397.551 497.855 cv
392.914 497.855 li
392.879 497.855 392.852 497.848 392.824 497.832 cv
392.797 497.816 392.77 497.793 392.746 497.754 cv
392.719 497.723 392.699 497.672 392.688 497.609 cv
392.672 497.551 392.664 497.48 392.668 497.391 cv
392.664 497.312 392.672 497.238 392.688 497.176 cv
392.699 497.117 392.715 497.07 392.738 497.031 cv
392.754 496.996 392.781 496.965 392.813 496.941 cv
392.844 496.922 392.875 496.914 392.914 496.91 cv
394.766 496.91 li
394.766 490.164 li
393.051 491.184 li
392.961 491.234 392.891 491.262 392.844 491.27 cv
392.789 491.277 392.746 491.27 392.715 491.238 cv
392.68 491.211 392.66 491.16 392.648 491.09 cv
392.637 491.023 392.629 490.937 392.633 490.828 cv
392.629 490.754 392.633 490.687 392.645 490.629 cv
392.648 490.578 392.66 490.531 392.676 490.492 cv
392.688 490.457 392.707 490.426 392.73 490.398 cv
392.754 490.371 392.785 490.344 392.832 490.316 cv
394.875 489.004 li
394.891 488.992 394.91 488.98 394.941 488.973 cv
394.965 488.965 395 488.957 395.047 488.945 cv
395.086 488.937 395.137 488.93 395.191 488.926 cv
395.246 488.926 395.313 488.926 395.398 488.922 cv
395.504 488.926 395.598 488.93 395.672 488.937 cv
395.742 488.945 395.797 488.961 395.844 488.977 cv
395.883 488.996 395.91 489.016 395.926 489.039 cv
395.934 489.066 395.941 489.09 395.945 489.113 cv
395.945 496.91 li
397.551 496.91 li
397.586 496.914 397.621 496.922 397.652 496.941 cv
397.684 496.965 397.707 496.996 397.73 497.031 cv
397.746 497.07 397.762 497.117 397.777 497.176 cv
397.785 497.238 397.793 497.312 397.797 497.391 cv
cp
f
405.148 493.398 mo
405.145 494.082 405.094 494.703 404.988 495.266 cv
404.879 495.828 404.699 496.312 404.453 496.715 cv
404.199 497.121 403.871 497.434 403.473 497.652 cv
403.066 497.875 402.574 497.984 401.988 497.984 cv
401.43 497.984 400.957 497.887 400.578 497.687 cv
400.195 497.492 399.891 497.199 399.656 496.812 cv
399.422 496.426 399.254 495.953 399.16 495.387 cv
399.059 494.824 399.012 494.176 399.012 493.441 cv
399.012 492.77 399.066 492.148 399.176 491.582 cv
399.285 491.02 399.461 490.535 399.711 490.129 cv
399.953 489.727 400.277 489.414 400.684 489.187 cv
401.082 488.969 401.578 488.855 402.168 488.855 cv
402.727 488.855 403.199 488.957 403.582 489.152 cv
403.965 489.355 404.27 489.648 404.504 490.031 cv
404.734 490.422 404.902 490.895 405 491.457 cv
405.098 492.02 405.145 492.668 405.148 493.398 cv
cp
403.941 493.48 mo
403.938 493.039 403.922 492.641 403.895 492.289 cv
403.859 491.937 403.813 491.629 403.754 491.359 cv
403.688 491.09 403.609 490.859 403.512 490.664 cv
403.414 490.473 403.297 490.312 403.16 490.184 cv
403.02 490.059 402.859 489.965 402.688 489.906 cv
402.508 489.852 402.313 489.824 402.098 489.82 cv
401.707 489.824 401.391 489.914 401.152 490.098 cv
400.906 490.281 400.715 490.535 400.578 490.852 cv
400.438 491.172 400.344 491.543 400.293 491.973 cv
400.242 492.402 400.219 492.867 400.219 493.359 cv
400.219 494.023 400.25 494.586 400.32 495.047 cv
400.387 495.516 400.496 495.895 400.648 496.184 cv
400.793 496.48 400.984 496.691 401.215 496.82 cv
401.445 496.957 401.727 497.023 402.059 497.02 cv
402.313 497.023 402.535 496.984 402.73 496.898 cv
402.922 496.82 403.09 496.699 403.23 496.543 cv
403.371 496.391 403.484 496.207 403.578 495.992 cv
403.664 495.777 403.738 495.539 403.797 495.277 cv
403.848 495.02 403.887 494.738 403.91 494.434 cv
403.93 494.129 403.938 493.812 403.941 493.48 cv
cp
f
471.234 497.391 mo
471.23 497.48 471.223 497.551 471.211 497.609 cv
471.195 497.672 471.176 497.723 471.156 497.754 cv
471.133 497.793 471.109 497.816 471.078 497.832 cv
471.047 497.848 471.016 497.855 470.988 497.855 cv
466.352 497.855 li
466.316 497.855 466.289 497.848 466.262 497.832 cv
466.234 497.816 466.207 497.793 466.184 497.754 cv
466.156 497.723 466.137 497.672 466.125 497.609 cv
466.109 497.551 466.102 497.48 466.105 497.391 cv
466.102 497.312 466.109 497.238 466.125 497.176 cv
466.137 497.117 466.152 497.07 466.176 497.031 cv
466.191 496.996 466.219 496.965 466.25 496.941 cv
466.281 496.922 466.313 496.914 466.352 496.91 cv
468.203 496.91 li
468.203 490.164 li
466.488 491.184 li
466.398 491.234 466.328 491.262 466.281 491.27 cv
466.227 491.277 466.184 491.27 466.152 491.238 cv
466.117 491.211 466.098 491.16 466.086 491.09 cv
466.074 491.023 466.066 490.937 466.07 490.828 cv
466.066 490.754 466.07 490.687 466.082 490.629 cv
466.086 490.578 466.098 490.531 466.113 490.492 cv
466.125 490.457 466.145 490.426 466.168 490.398 cv
466.191 490.371 466.223 490.344 466.27 490.316 cv
468.313 489.004 li
468.328 488.992 468.348 488.98 468.379 488.973 cv
468.402 488.965 468.438 488.957 468.484 488.945 cv
468.523 488.937 468.574 488.93 468.629 488.926 cv
468.684 488.926 468.75 488.926 468.836 488.922 cv
468.941 488.926 469.035 488.93 469.109 488.937 cv
469.18 488.945 469.234 488.961 469.281 488.977 cv
469.32 488.996 469.348 489.016 469.363 489.039 cv
469.371 489.066 469.379 489.09 469.383 489.113 cv
469.383 496.91 li
470.988 496.91 li
471.023 496.914 471.059 496.922 471.09 496.941 cv
471.121 496.965 471.145 496.996 471.168 497.031 cv
471.184 497.07 471.199 497.117 471.215 497.176 cv
471.223 497.238 471.23 497.312 471.234 497.391 cv
cp
f
478.297 497.348 mo
478.293 497.434 478.289 497.508 478.277 497.57 cv
478.266 497.637 478.25 497.691 478.23 497.73 cv
478.207 497.777 478.18 497.809 478.148 497.824 cv
478.113 497.848 478.074 497.855 478.035 497.855 cv
473.133 497.855 li
473.07 497.855 473.012 497.848 472.965 497.832 cv
472.914 497.816 472.875 497.793 472.84 497.754 cv
472.805 497.723 472.777 497.668 472.766 497.598 cv
472.746 497.527 472.738 497.441 472.742 497.34 cv
472.738 497.25 472.742 497.172 472.75 497.102 cv
472.754 497.035 472.77 496.977 472.797 496.922 cv
472.82 496.871 472.852 496.816 472.887 496.762 cv
472.922 496.711 472.965 496.656 473.023 496.594 cv
474.797 494.77 li
475.207 494.352 475.535 493.977 475.785 493.641 cv
476.031 493.312 476.223 493.008 476.355 492.73 cv
476.488 492.457 476.574 492.207 476.621 491.98 cv
476.66 491.758 476.684 491.547 476.684 491.352 cv
476.684 491.156 476.648 490.973 476.582 490.793 cv
476.516 490.621 476.422 490.465 476.297 490.328 cv
476.172 490.199 476.016 490.094 475.828 490.012 cv
475.641 489.937 475.422 489.898 475.176 489.895 cv
474.887 489.898 474.629 489.937 474.402 490.012 cv
474.172 490.094 473.973 490.18 473.801 490.266 cv
473.629 490.359 473.484 490.441 473.367 490.52 cv
473.25 490.598 473.164 490.637 473.113 490.637 cv
473.078 490.637 473.047 490.629 473.023 490.609 cv
472.992 490.594 472.973 490.562 472.957 490.52 cv
472.941 490.48 472.926 490.426 472.918 490.355 cv
472.906 490.289 472.902 490.207 472.906 490.109 cv
472.902 490.043 472.906 489.984 472.914 489.934 cv
472.918 489.883 472.926 489.84 472.938 489.801 cv
472.945 489.766 472.961 489.73 472.98 489.699 cv
473 489.668 473.035 489.629 473.094 489.578 cv
473.145 489.531 473.238 489.465 473.375 489.383 cv
473.508 489.301 473.68 489.223 473.883 489.141 cv
474.086 489.062 474.309 488.992 474.555 488.937 cv
474.797 488.883 475.055 488.855 475.328 488.855 cv
475.754 488.855 476.129 488.918 476.453 489.039 cv
476.773 489.16 477.039 489.324 477.254 489.535 cv
477.465 489.746 477.625 489.992 477.73 490.266 cv
477.836 490.547 477.891 490.844 477.891 491.156 cv
477.891 491.445 477.863 491.727 477.813 492.004 cv
477.762 492.289 477.656 492.594 477.496 492.918 cv
477.332 493.246 477.098 493.609 476.793 494.008 cv
476.484 494.41 476.078 494.871 475.574 495.387 cv
474.168 496.855 li
478.027 496.855 li
478.059 496.859 478.094 496.871 478.133 496.887 cv
478.164 496.91 478.195 496.941 478.223 496.98 cv
478.246 497.023 478.266 497.074 478.277 497.133 cv
478.289 497.199 478.293 497.27 478.297 497.348 cv
cp
f
544.695 497.391 mo
544.691 497.48 544.684 497.551 544.672 497.609 cv
544.656 497.672 544.637 497.723 544.617 497.754 cv
544.594 497.793 544.57 497.816 544.539 497.832 cv
544.508 497.848 544.477 497.855 544.449 497.855 cv
539.813 497.855 li
539.777 497.855 539.75 497.848 539.723 497.832 cv
539.695 497.816 539.668 497.793 539.645 497.754 cv
539.617 497.723 539.598 497.672 539.586 497.609 cv
539.57 497.551 539.563 497.48 539.566 497.391 cv
539.563 497.312 539.57 497.238 539.586 497.176 cv
539.598 497.117 539.613 497.07 539.637 497.031 cv
539.652 496.996 539.68 496.965 539.711 496.941 cv
539.742 496.922 539.773 496.914 539.813 496.91 cv
541.664 496.91 li
541.664 490.164 li
539.949 491.184 li
539.859 491.234 539.789 491.262 539.742 491.27 cv
539.688 491.277 539.645 491.27 539.613 491.238 cv
539.578 491.211 539.559 491.16 539.547 491.09 cv
539.535 491.023 539.527 490.937 539.531 490.828 cv
539.527 490.754 539.531 490.687 539.543 490.629 cv
539.547 490.578 539.559 490.531 539.574 490.492 cv
539.586 490.457 539.605 490.426 539.629 490.398 cv
539.652 490.371 539.684 490.344 539.73 490.316 cv
541.773 489.004 li
541.789 488.992 541.809 488.98 541.84 488.973 cv
541.863 488.965 541.898 488.957 541.945 488.945 cv
541.984 488.937 542.035 488.93 542.09 488.926 cv
542.145 488.926 542.211 488.926 542.297 488.922 cv
542.402 488.926 542.496 488.93 542.57 488.937 cv
542.641 488.945 542.695 488.961 542.742 488.977 cv
542.781 488.996 542.809 489.016 542.824 489.039 cv
542.832 489.066 542.84 489.09 542.844 489.113 cv
542.844 496.91 li
544.449 496.91 li
544.484 496.914 544.52 496.922 544.551 496.941 cv
544.582 496.965 544.605 496.996 544.629 497.031 cv
544.645 497.07 544.66 497.117 544.676 497.176 cv
544.684 497.238 544.691 497.312 544.695 497.391 cv
cp
f
552.133 495.332 mo
552.129 495.484 552.105 495.605 552.063 495.691 cv
552.016 495.781 551.953 495.824 551.871 495.82 cv
550.871 495.82 li
550.871 497.684 li
550.871 497.723 550.859 497.754 550.844 497.777 cv
550.82 497.805 550.789 497.824 550.746 497.844 cv
550.695 497.859 550.633 497.871 550.563 497.883 cv
550.484 497.891 550.391 497.895 550.273 497.898 cv
550.156 497.895 550.059 497.891 549.988 497.883 cv
549.91 497.871 549.852 497.859 549.809 497.844 cv
549.762 497.824 549.73 497.805 549.715 497.777 cv
549.695 497.754 549.688 497.723 549.691 497.684 cv
549.691 495.82 li
546.063 495.82 li
546.004 495.824 545.961 495.816 545.926 495.801 cv
545.891 495.789 545.855 495.762 545.828 495.723 cv
545.797 495.687 545.777 495.637 545.766 495.566 cv
545.754 495.5 545.75 495.41 545.75 495.297 cv
545.75 495.215 545.75 495.137 545.758 495.066 cv
545.758 494.996 545.77 494.934 545.785 494.879 cv
545.797 494.824 545.813 494.77 545.84 494.715 cv
545.859 494.66 545.887 494.605 545.922 494.543 cv
549.082 489.156 li
549.102 489.121 549.137 489.09 549.184 489.062 cv
549.227 489.035 549.281 489.012 549.355 488.992 cv
549.422 488.977 549.508 488.965 549.613 488.953 cv
549.715 488.949 549.836 488.945 549.977 488.941 cv
550.125 488.945 550.262 488.949 550.379 488.961 cv
550.492 488.973 550.582 488.988 550.656 489.004 cv
550.723 489.023 550.777 489.047 550.816 489.078 cv
550.852 489.109 550.871 489.145 550.871 489.184 cv
550.871 494.848 li
551.871 494.848 li
551.945 494.852 552.008 494.891 552.059 494.969 cv
552.105 495.051 552.129 495.172 552.133 495.332 cv
cp
549.691 489.98 mo
549.68 489.98 li
546.828 494.848 li
549.691 494.848 li
cp
f
618.164 497.391 mo
618.16 497.48 618.152 497.551 618.141 497.609 cv
618.125 497.672 618.105 497.723 618.086 497.754 cv
618.063 497.793 618.039 497.816 618.008 497.832 cv
617.977 497.848 617.945 497.855 617.918 497.855 cv
613.281 497.855 li
613.246 497.855 613.219 497.848 613.191 497.832 cv
613.164 497.816 613.137 497.793 613.113 497.754 cv
613.086 497.723 613.066 497.672 613.055 497.609 cv
613.039 497.551 613.031 497.48 613.035 497.391 cv
613.031 497.312 613.039 497.238 613.055 497.176 cv
613.066 497.117 613.082 497.07 613.105 497.031 cv
613.121 496.996 613.148 496.965 613.18 496.941 cv
613.211 496.922 613.242 496.914 613.281 496.91 cv
615.133 496.91 li
615.133 490.164 li
613.418 491.184 li
613.328 491.234 613.258 491.262 613.211 491.27 cv
613.156 491.277 613.113 491.27 613.082 491.238 cv
613.047 491.211 613.027 491.16 613.016 491.09 cv
613.004 491.023 612.996 490.937 613 490.828 cv
612.996 490.754 613 490.687 613.012 490.629 cv
613.016 490.578 613.027 490.531 613.043 490.492 cv
613.055 490.457 613.074 490.426 613.098 490.398 cv
613.121 490.371 613.152 490.344 613.199 490.316 cv
615.242 489.004 li
615.258 488.992 615.277 488.98 615.309 488.973 cv
615.332 488.965 615.367 488.957 615.414 488.945 cv
615.453 488.937 615.504 488.93 615.559 488.926 cv
615.613 488.926 615.68 488.926 615.766 488.922 cv
615.871 488.926 615.965 488.93 616.039 488.937 cv
616.109 488.945 616.164 488.961 616.211 488.977 cv
616.25 488.996 616.277 489.016 616.293 489.039 cv
616.301 489.066 616.309 489.09 616.313 489.113 cv
616.313 496.91 li
617.918 496.91 li
617.953 496.914 617.988 496.922 618.02 496.941 cv
618.051 496.965 618.074 496.996 618.098 497.031 cv
618.113 497.07 618.129 497.117 618.145 497.176 cv
618.152 497.238 618.16 497.312 618.164 497.391 cv
cp
f
625.453 494.984 mo
625.453 495.375 625.391 495.754 625.273 496.113 cv
625.148 496.48 624.965 496.797 624.723 497.07 cv
624.473 497.348 624.16 497.57 623.785 497.734 cv
623.402 497.902 622.957 497.984 622.441 497.984 cv
622.07 497.984 621.742 497.941 621.461 497.848 cv
621.176 497.762 620.93 497.629 620.719 497.457 cv
620.508 497.289 620.332 497.082 620.195 496.836 cv
620.055 496.59 619.941 496.309 619.859 495.992 cv
619.773 495.68 619.715 495.336 619.68 494.957 cv
619.641 494.586 619.621 494.184 619.625 493.75 cv
619.621 493.371 619.641 492.988 619.684 492.598 cv
619.723 492.215 619.797 491.84 619.902 491.473 cv
620.008 491.113 620.152 490.773 620.332 490.457 cv
620.512 490.141 620.738 489.863 621.012 489.629 cv
621.285 489.395 621.609 489.207 621.988 489.066 cv
622.367 488.93 622.809 488.863 623.313 488.859 cv
623.48 488.863 623.652 488.871 623.824 488.891 cv
623.996 488.914 624.156 488.945 624.305 488.977 cv
624.453 489.016 624.574 489.051 624.676 489.09 cv
624.773 489.129 624.84 489.164 624.875 489.187 cv
624.902 489.215 624.926 489.242 624.945 489.27 cv
624.961 489.301 624.977 489.332 624.984 489.367 cv
624.992 489.402 624.996 489.441 625.004 489.484 cv
625.004 489.527 625.008 489.582 625.012 489.645 cv
625.008 489.73 625.008 489.801 625.008 489.855 cv
625.004 489.918 624.992 489.965 624.98 490 cv
624.961 490.039 624.941 490.066 624.918 490.082 cv
624.891 490.102 624.859 490.109 624.82 490.109 cv
624.77 490.109 624.699 490.094 624.613 490.062 cv
624.523 490.031 624.418 489.996 624.297 489.953 cv
624.172 489.918 624.023 489.883 623.848 489.848 cv
623.672 489.82 623.469 489.805 623.238 489.801 cv
622.809 489.805 622.441 489.891 622.137 490.062 cv
621.832 490.234 621.582 490.469 621.387 490.762 cv
621.191 491.055 621.047 491.395 620.957 491.777 cv
620.859 492.168 620.805 492.57 620.797 492.988 cv
620.914 492.922 621.051 492.855 621.199 492.785 cv
621.348 492.719 621.508 492.656 621.684 492.598 cv
621.859 492.547 622.047 492.5 622.242 492.465 cv
622.438 492.434 622.648 492.418 622.875 492.414 cv
623.352 492.418 623.754 492.484 624.086 492.609 cv
624.414 492.742 624.68 492.922 624.887 493.152 cv
625.086 493.383 625.23 493.652 625.32 493.965 cv
625.406 494.277 625.453 494.617 625.453 494.984 cv
cp
624.258 495.094 mo
624.258 494.832 624.23 494.59 624.18 494.371 cv
624.125 494.156 624.035 493.973 623.914 493.816 cv
623.789 493.668 623.625 493.551 623.422 493.469 cv
623.211 493.387 622.957 493.344 622.66 493.344 cv
622.488 493.344 622.32 493.359 622.152 493.391 cv
621.98 493.422 621.816 493.465 621.66 493.512 cv
621.5 493.566 621.352 493.629 621.211 493.699 cv
621.066 493.773 620.934 493.848 620.816 493.926 cv
620.813 494.52 620.852 495.016 620.93 495.41 cv
621.004 495.809 621.113 496.125 621.258 496.363 cv
621.402 496.605 621.582 496.777 621.797 496.879 cv
622.012 496.984 622.262 497.035 622.551 497.031 cv
622.84 497.035 623.094 496.98 623.309 496.867 cv
623.523 496.762 623.699 496.613 623.844 496.426 cv
623.984 496.242 624.09 496.035 624.156 495.805 cv
624.223 495.574 624.258 495.34 624.258 495.094 cv
cp
f
266.789 517.629 mo
266.785 517.734 266.77 517.824 266.734 517.895 cv
266.699 517.973 266.652 518.031 266.598 518.074 cv
266.539 518.125 266.477 518.16 266.41 518.176 cv
266.336 518.199 266.266 518.207 266.203 518.207 cv
265.758 518.207 li
265.617 518.207 265.496 518.195 265.391 518.164 cv
265.285 518.141 265.188 518.086 265.094 518.008 cv
265 517.934 264.906 517.832 264.813 517.699 cv
264.719 517.57 264.617 517.406 264.512 517.203 cv
261.438 511.465 li
261.273 511.172 261.109 510.863 260.949 510.535 cv
260.781 510.215 260.629 509.898 260.492 509.59 cv
260.477 509.59 li
260.484 509.965 260.492 510.348 260.5 510.734 cv
260.504 511.125 260.504 511.512 260.508 511.895 cv
260.508 517.98 li
260.504 518.02 260.492 518.055 260.473 518.086 cv
260.449 518.121 260.414 518.148 260.363 518.164 cv
260.309 518.184 260.238 518.195 260.156 518.211 cv
260.07 518.223 259.965 518.23 259.836 518.23 cv
259.699 518.23 259.59 518.223 259.508 518.211 cv
259.422 518.195 259.355 518.184 259.309 518.164 cv
259.258 518.148 259.223 518.121 259.199 518.086 cv
259.176 518.055 259.164 518.02 259.168 517.98 cv
259.168 508.676 li
259.164 508.469 259.223 508.32 259.344 508.23 cv
259.461 508.145 259.59 508.102 259.73 508.098 cv
260.391 508.098 li
260.543 508.102 260.676 508.113 260.781 508.137 cv
260.883 508.164 260.977 508.207 261.063 508.266 cv
261.145 508.328 261.223 508.41 261.305 508.516 cv
261.379 508.625 261.461 508.762 261.547 508.918 cv
263.914 513.344 li
264.059 513.617 264.199 513.883 264.336 514.137 cv
264.469 514.395 264.598 514.648 264.727 514.895 cv
264.848 515.148 264.973 515.395 265.098 515.633 cv
265.219 515.875 265.34 516.117 265.465 516.359 cv
265.473 516.359 li
265.461 515.953 265.453 515.523 265.453 515.078 cv
265.445 514.633 265.445 514.207 265.449 513.797 cv
265.449 508.324 li
265.445 508.289 265.457 508.254 265.48 508.223 cv
265.504 508.191 265.539 508.164 265.594 508.141 cv
265.641 508.117 265.711 508.102 265.797 508.09 cv
265.883 508.082 265.992 508.078 266.133 508.074 cv
266.25 508.078 266.355 508.082 266.445 508.09 cv
266.531 508.102 266.598 508.117 266.648 508.141 cv
266.695 508.164 266.73 508.191 266.754 508.223 cv
266.773 508.254 266.785 508.289 266.789 508.324 cv
cp
f
275.34 517.988 mo
275.336 518.035 275.328 518.07 275.313 518.094 cv
275.293 518.125 275.258 518.148 275.215 518.168 cv
275.168 518.187 275.109 518.199 275.035 518.215 cv
274.957 518.223 274.863 518.23 274.758 518.23 cv
274.633 518.23 274.535 518.223 274.465 518.215 cv
274.387 518.199 274.328 518.187 274.285 518.168 cv
274.238 518.148 274.207 518.125 274.195 518.094 cv
274.176 518.07 274.168 518.035 274.172 517.988 cv
274.172 517.062 li
273.77 517.508 273.375 517.828 272.988 518.027 cv
272.594 518.23 272.199 518.328 271.805 518.332 cv
271.332 518.328 270.938 518.254 270.621 518.098 cv
270.301 517.945 270.043 517.734 269.848 517.465 cv
269.645 517.199 269.504 516.887 269.422 516.527 cv
269.332 516.172 269.289 515.738 269.293 515.23 cv
269.293 510.977 li
269.289 510.937 269.297 510.902 269.32 510.871 cv
269.336 510.844 269.371 510.82 269.426 510.793 cv
269.473 510.773 269.543 510.758 269.629 510.746 cv
269.711 510.742 269.813 510.738 269.941 510.734 cv
270.063 510.738 270.168 510.742 270.254 510.746 cv
270.336 510.758 270.402 510.773 270.449 510.793 cv
270.496 510.82 270.531 510.844 270.555 510.871 cv
270.574 510.902 270.582 510.937 270.586 510.977 cv
270.586 515.059 li
270.582 515.473 270.613 515.801 270.676 516.047 cv
270.734 516.293 270.824 516.504 270.949 516.676 cv
271.066 516.855 271.223 516.988 271.414 517.082 cv
271.598 517.18 271.816 517.23 272.066 517.227 cv
272.387 517.23 272.707 517.113 273.031 516.883 cv
273.348 516.656 273.688 516.32 274.047 515.875 cv
274.047 510.977 li
274.047 510.937 274.055 510.902 274.074 510.871 cv
274.09 510.844 274.125 510.82 274.18 510.793 cv
274.23 510.773 274.297 510.758 274.379 510.746 cv
274.457 510.742 274.563 510.738 274.695 510.734 cv
274.816 510.738 274.922 510.742 275.008 510.746 cv
275.09 510.758 275.152 510.773 275.199 510.793 cv
275.242 510.82 275.277 510.844 275.305 510.871 cv
275.324 510.902 275.336 510.937 275.34 510.977 cv
cp
f
288.117 517.988 mo
288.113 518.035 288.105 518.07 288.086 518.094 cv
288.063 518.125 288.027 518.148 287.984 518.168 cv
287.934 518.187 287.867 518.199 287.789 518.215 cv
287.703 518.223 287.602 518.23 287.477 518.23 cv
287.344 518.23 287.234 518.223 287.156 518.215 cv
287.07 518.199 287.004 518.187 286.957 518.168 cv
286.902 518.148 286.867 518.125 286.852 518.094 cv
286.828 518.07 286.82 518.035 286.82 517.988 cv
286.82 513.727 li
286.82 513.434 286.793 513.164 286.742 512.918 cv
286.688 512.676 286.605 512.465 286.492 512.285 cv
286.379 512.109 286.234 511.973 286.059 511.879 cv
285.879 511.785 285.668 511.738 285.434 511.738 cv
285.137 511.738 284.84 511.855 284.543 512.082 cv
284.238 512.316 283.91 512.648 283.555 513.086 cv
283.555 517.988 li
283.551 518.035 283.539 518.07 283.523 518.094 cv
283.5 518.125 283.469 518.148 283.422 518.168 cv
283.371 518.187 283.305 518.199 283.223 518.215 cv
283.137 518.223 283.031 518.23 282.91 518.23 cv
282.789 518.23 282.688 518.223 282.602 518.215 cv
282.516 518.199 282.445 518.187 282.398 518.168 cv
282.344 518.148 282.313 518.125 282.297 518.094 cv
282.277 518.07 282.266 518.035 282.27 517.988 cv
282.27 513.727 li
282.266 513.434 282.238 513.164 282.184 512.918 cv
282.125 512.676 282.039 512.465 281.926 512.285 cv
281.813 512.109 281.668 511.973 281.496 511.879 cv
281.316 511.785 281.109 511.738 280.875 511.738 cv
280.574 511.738 280.277 511.855 279.977 512.082 cv
279.676 512.316 279.348 512.648 278.996 513.086 cv
278.996 517.988 li
278.992 518.035 278.98 518.07 278.965 518.094 cv
278.941 518.125 278.91 518.148 278.863 518.168 cv
278.816 518.187 278.75 518.199 278.672 518.215 cv
278.586 518.223 278.48 518.23 278.352 518.23 cv
278.223 518.23 278.117 518.223 278.039 518.215 cv
277.953 518.199 277.887 518.187 277.84 518.168 cv
277.785 518.148 277.754 518.125 277.738 518.094 cv
277.719 518.07 277.707 518.035 277.711 517.988 cv
277.711 510.977 li
277.707 510.937 277.715 510.902 277.734 510.871 cv
277.746 510.844 277.777 510.82 277.828 510.793 cv
277.871 510.773 277.934 510.758 278.008 510.746 cv
278.078 510.742 278.172 510.738 278.297 510.734 cv
278.406 510.738 278.504 510.742 278.582 510.746 cv
278.656 510.758 278.715 510.773 278.758 510.793 cv
278.797 510.82 278.824 510.844 278.844 510.871 cv
278.859 510.902 278.867 510.937 278.871 510.977 cv
278.871 511.902 li
279.262 511.461 279.645 511.141 280.02 510.934 cv
280.387 510.73 280.766 510.625 281.148 510.625 cv
281.438 510.625 281.695 510.66 281.93 510.727 cv
282.156 510.797 282.363 510.891 282.543 511.012 cv
282.719 511.133 282.867 511.277 282.996 511.445 cv
283.117 511.617 283.223 511.809 283.309 512.012 cv
283.539 511.762 283.762 511.547 283.973 511.367 cv
284.184 511.195 284.387 511.051 284.582 510.937 cv
284.777 510.832 284.965 510.754 285.148 510.699 cv
285.332 510.652 285.52 510.625 285.707 510.625 cv
286.16 510.625 286.539 510.707 286.844 510.863 cv
287.148 511.027 287.395 511.238 287.59 511.5 cv
287.777 511.766 287.914 512.074 287.996 512.43 cv
288.074 512.785 288.113 513.16 288.117 513.555 cv
cp
f
296.914 514.387 mo
296.91 514.996 296.844 515.547 296.715 516.031 cv
296.578 516.52 296.383 516.934 296.129 517.273 cv
295.871 517.617 295.555 517.879 295.184 518.059 cv
294.809 518.242 294.383 518.328 293.898 518.332 cv
293.672 518.328 293.465 518.309 293.277 518.266 cv
293.09 518.219 292.902 518.148 292.723 518.051 cv
292.535 517.953 292.355 517.828 292.176 517.676 cv
291.992 517.527 291.801 517.348 291.602 517.133 cv
291.602 517.988 li
291.602 518.035 291.59 518.07 291.57 518.098 cv
291.547 518.133 291.512 518.156 291.469 518.172 cv
291.418 518.187 291.359 518.199 291.293 518.215 cv
291.219 518.223 291.129 518.23 291.023 518.23 cv
290.914 518.23 290.828 518.223 290.758 518.215 cv
290.684 518.199 290.621 518.187 290.578 518.172 cv
290.527 518.156 290.496 518.133 290.484 518.098 cv
290.465 518.07 290.457 518.035 290.461 517.988 cv
290.461 507.578 li
290.457 507.539 290.469 507.504 290.488 507.469 cv
290.504 507.441 290.535 507.414 290.59 507.391 cv
290.637 507.371 290.703 507.355 290.789 507.344 cv
290.867 507.336 290.973 507.332 291.102 507.328 cv
291.23 507.332 291.336 507.336 291.422 507.344 cv
291.5 507.355 291.566 507.371 291.613 507.391 cv
291.66 507.414 291.691 507.441 291.715 507.469 cv
291.73 507.504 291.742 507.539 291.746 507.578 cv
291.746 511.777 li
291.953 511.566 292.156 511.387 292.352 511.242 cv
292.547 511.098 292.734 510.98 292.922 510.887 cv
293.105 510.801 293.293 510.734 293.484 510.687 cv
293.668 510.648 293.867 510.625 294.078 510.625 cv
294.582 510.625 295.016 510.727 295.383 510.93 cv
295.742 511.133 296.035 511.406 296.262 511.742 cv
296.484 512.086 296.652 512.484 296.758 512.941 cv
296.859 513.398 296.91 513.879 296.914 514.387 cv
cp
295.582 514.535 mo
295.578 514.18 295.551 513.832 295.5 513.492 cv
295.441 513.156 295.348 512.859 295.211 512.598 cv
295.074 512.34 294.895 512.129 294.672 511.969 cv
294.445 511.812 294.164 511.734 293.832 511.73 cv
293.664 511.734 293.5 511.758 293.34 511.801 cv
293.176 511.852 293.012 511.93 292.844 512.035 cv
292.676 512.148 292.5 512.289 292.324 512.457 cv
292.141 512.633 291.949 512.848 291.746 513.102 cv
291.746 515.898 li
292.102 516.332 292.441 516.664 292.766 516.887 cv
293.09 517.117 293.426 517.23 293.777 517.227 cv
294.098 517.23 294.375 517.152 294.609 516.992 cv
294.836 516.84 295.023 516.633 295.168 516.371 cv
295.313 516.117 295.418 515.828 295.484 515.508 cv
295.547 515.191 295.578 514.867 295.582 514.535 cv
cp
f
304.824 514.18 mo
304.82 514.383 304.77 514.523 304.672 514.609 cv
304.566 514.695 304.449 514.738 304.324 514.738 cv
299.707 514.738 li
299.703 515.129 299.742 515.48 299.824 515.793 cv
299.898 516.105 300.031 516.375 300.215 516.594 cv
300.395 516.82 300.629 516.992 300.926 517.109 cv
301.215 517.234 301.574 517.293 302 517.289 cv
302.332 517.293 302.629 517.266 302.891 517.207 cv
303.152 517.156 303.379 517.094 303.57 517.023 cv
303.758 516.957 303.914 516.898 304.039 516.84 cv
304.16 516.789 304.254 516.762 304.316 516.758 cv
304.352 516.762 304.383 516.77 304.414 516.785 cv
304.441 516.805 304.465 516.832 304.484 516.867 cv
304.496 516.906 304.508 516.957 304.52 517.02 cv
304.523 517.086 304.527 517.164 304.531 517.258 cv
304.527 517.328 304.523 517.387 304.523 517.434 cv
304.516 517.48 304.512 517.523 304.504 517.562 cv
304.496 517.602 304.48 517.637 304.465 517.668 cv
304.441 517.699 304.418 517.73 304.395 517.758 cv
304.363 517.789 304.281 517.836 304.141 517.898 cv
304 517.965 303.816 518.027 303.594 518.09 cv
303.367 518.152 303.109 518.207 302.816 518.258 cv
302.523 518.305 302.211 518.328 301.879 518.332 cv
301.301 518.328 300.793 518.25 300.363 518.09 cv
299.926 517.93 299.563 517.691 299.27 517.375 cv
298.969 517.059 298.746 516.664 298.598 516.184 cv
298.449 515.707 298.375 515.148 298.375 514.512 cv
298.375 513.914 298.449 513.375 298.605 512.891 cv
298.758 512.414 298.984 512.004 299.281 511.668 cv
299.574 511.332 299.93 511.074 300.344 510.895 cv
300.758 510.715 301.223 510.625 301.738 510.625 cv
302.289 510.625 302.758 510.715 303.145 510.891 cv
303.531 511.07 303.848 511.309 304.102 511.605 cv
304.348 511.906 304.531 512.258 304.648 512.656 cv
304.762 513.062 304.82 513.492 304.824 513.945 cv
cp
303.531 513.797 mo
303.547 513.121 303.395 512.59 303.078 512.207 cv
302.762 511.824 302.293 511.633 301.676 511.629 cv
301.352 511.633 301.07 511.691 300.832 511.809 cv
300.59 511.93 300.391 512.09 300.23 512.285 cv
300.066 512.484 299.941 512.715 299.855 512.977 cv
299.766 513.238 299.715 513.512 299.707 513.797 cv
cp
f
310.891 511.434 mo
310.887 511.551 310.887 511.648 310.883 511.723 cv
310.875 511.805 310.863 511.867 310.852 511.906 cv
310.832 511.953 310.813 511.984 310.793 512.008 cv
310.766 512.031 310.734 512.043 310.695 512.043 cv
310.652 512.043 310.602 512.031 310.543 512.008 cv
310.48 511.984 310.41 511.961 310.34 511.937 cv
310.262 511.914 310.18 511.895 310.086 511.871 cv
309.992 511.855 309.891 511.844 309.781 511.84 cv
309.648 511.844 309.52 511.871 309.398 511.918 cv
309.273 511.973 309.145 512.059 309.008 512.176 cv
308.867 512.301 308.723 512.457 308.574 512.652 cv
308.422 512.848 308.254 513.09 308.074 513.375 cv
308.074 517.988 li
308.07 518.035 308.059 518.07 308.043 518.094 cv
308.02 518.125 307.988 518.148 307.941 518.168 cv
307.895 518.187 307.828 518.199 307.75 518.215 cv
307.664 518.223 307.559 518.23 307.43 518.23 cv
307.301 518.23 307.195 518.223 307.117 518.215 cv
307.031 518.199 306.965 518.187 306.918 518.168 cv
306.863 518.148 306.832 518.125 306.816 518.094 cv
306.797 518.07 306.785 518.035 306.789 517.988 cv
306.789 510.977 li
306.785 510.937 306.793 510.902 306.813 510.871 cv
306.824 510.844 306.855 510.82 306.906 510.793 cv
306.949 510.773 307.012 510.758 307.086 510.746 cv
307.156 510.742 307.25 510.738 307.375 510.734 cv
307.484 510.738 307.582 510.742 307.66 510.746 cv
307.734 510.758 307.793 510.773 307.836 510.793 cv
307.875 510.82 307.902 510.844 307.922 510.871 cv
307.938 510.902 307.945 510.937 307.949 510.977 cv
307.949 511.996 li
308.137 511.715 308.32 511.488 308.492 511.312 cv
308.66 511.137 308.82 510.996 308.973 510.895 cv
309.121 510.793 309.27 510.723 309.418 510.684 cv
309.566 510.645 309.715 510.625 309.867 510.625 cv
309.934 510.625 310.012 510.629 310.098 510.637 cv
310.184 510.645 310.273 510.66 310.367 510.68 cv
310.461 510.703 310.543 510.727 310.621 510.75 cv
310.691 510.777 310.746 510.805 310.781 510.828 cv
310.809 510.859 310.828 510.883 310.844 510.902 cv
310.852 510.93 310.863 510.961 310.871 510.992 cv
310.879 511.031 310.883 511.082 310.887 511.152 cv
310.887 511.223 310.887 511.316 310.891 511.434 cv
cp
f
322.648 514.402 mo
322.645 514.98 322.57 515.508 322.422 515.984 cv
322.27 516.469 322.043 516.883 321.746 517.227 cv
321.445 517.578 321.07 517.848 320.625 518.039 cv
320.172 518.234 319.652 518.328 319.063 518.332 cv
318.484 518.328 317.98 518.246 317.555 518.074 cv
317.125 517.906 316.77 517.656 316.484 517.328 cv
316.195 517 315.98 516.605 315.844 516.137 cv
315.703 515.672 315.637 515.141 315.637 514.543 cv
315.637 513.977 315.707 513.449 315.855 512.969 cv
316 512.488 316.227 512.074 316.527 511.723 cv
316.824 511.375 317.195 511.105 317.645 510.914 cv
318.09 510.723 318.613 510.625 319.211 510.625 cv
319.789 510.625 320.289 510.711 320.719 510.883 cv
321.145 511.055 321.504 511.305 321.789 511.633 cv
322.074 511.961 322.289 512.359 322.434 512.824 cv
322.574 513.293 322.645 513.82 322.648 514.402 cv
cp
321.316 514.488 mo
321.313 514.113 321.277 513.754 321.211 513.414 cv
321.137 513.078 321.02 512.785 320.859 512.527 cv
320.695 512.277 320.477 512.074 320.199 511.922 cv
319.918 511.777 319.57 511.703 319.16 511.699 cv
318.773 511.703 318.445 511.77 318.172 511.902 cv
317.895 512.039 317.668 512.23 317.492 512.477 cv
317.313 512.723 317.18 513.016 317.098 513.352 cv
317.008 513.691 316.965 514.059 316.969 514.457 cv
316.965 514.844 317 515.207 317.074 515.543 cv
317.141 515.883 317.258 516.176 317.426 516.426 cv
317.59 516.68 317.813 516.883 318.09 517.027 cv
318.367 517.18 318.715 517.254 319.129 517.25 cv
319.504 517.254 319.832 517.184 320.113 517.047 cv
320.391 516.914 320.617 516.727 320.797 516.477 cv
320.973 516.234 321.102 515.941 321.188 515.605 cv
321.27 515.27 321.313 514.898 321.316 514.488 cv
cp
f
328.383 508.09 mo
328.379 508.191 328.375 508.27 328.367 508.328 cv
328.355 508.391 328.344 508.441 328.332 508.473 cv
328.316 508.512 328.301 508.535 328.281 508.547 cv
328.258 508.562 328.23 508.57 328.203 508.566 cv
328.164 508.57 328.117 508.559 328.066 508.531 cv
328.008 508.512 327.941 508.484 327.867 508.453 cv
327.785 508.426 327.695 508.398 327.59 508.375 cv
327.48 508.352 327.355 508.34 327.223 508.34 cv
327.027 508.34 326.863 508.371 326.73 508.434 cv
326.59 508.496 326.48 508.594 326.402 508.727 cv
326.316 508.859 326.258 509.031 326.223 509.242 cv
326.184 509.453 326.164 509.711 326.168 510.008 cv
326.168 510.773 li
327.734 510.773 li
327.773 510.777 327.809 510.785 327.84 510.801 cv
327.867 510.82 327.895 510.852 327.918 510.895 cv
327.941 510.941 327.957 511 327.973 511.062 cv
327.98 511.133 327.988 511.215 327.992 511.309 cv
327.988 511.5 327.965 511.633 327.922 511.715 cv
327.871 511.801 327.809 511.844 327.734 511.84 cv
326.168 511.84 li
326.168 517.988 li
326.164 518.035 326.156 518.07 326.137 518.094 cv
326.113 518.125 326.078 518.148 326.031 518.168 cv
325.98 518.187 325.914 518.199 325.832 518.215 cv
325.746 518.223 325.641 518.23 325.523 518.23 cv
325.395 518.23 325.293 518.223 325.211 518.215 cv
325.125 518.199 325.059 518.187 325.012 518.168 cv
324.961 518.148 324.926 518.125 324.906 518.094 cv
324.883 518.07 324.871 518.035 324.875 517.988 cv
324.875 511.84 li
323.887 511.84 li
323.801 511.844 323.738 511.801 323.699 511.715 cv
323.656 511.633 323.633 511.5 323.637 511.309 cv
323.633 511.215 323.641 511.133 323.652 511.062 cv
323.66 511 323.676 510.941 323.699 510.895 cv
323.719 510.852 323.742 510.82 323.777 510.801 cv
323.805 510.785 323.844 510.777 323.887 510.773 cv
324.875 510.773 li
324.875 510.047 li
324.871 509.562 324.918 509.145 325.012 508.789 cv
325.102 508.441 325.238 508.152 325.426 507.93 cv
325.609 507.707 325.844 507.543 326.133 507.434 cv
326.414 507.328 326.75 507.273 327.137 507.273 cv
327.313 507.273 327.488 507.293 327.664 507.324 cv
327.832 507.363 327.965 507.398 328.063 507.434 cv
328.152 507.477 328.215 507.512 328.25 507.539 cv
328.277 507.574 328.305 507.613 328.328 507.66 cv
328.348 507.711 328.359 507.773 328.371 507.84 cv
328.375 507.914 328.379 507.996 328.383 508.09 cv
cp
f
338.578 515.355 mo
338.574 515.828 338.488 516.25 338.316 516.617 cv
338.141 516.992 337.898 517.305 337.59 517.559 cv
337.281 517.816 336.918 518.008 336.5 518.137 cv
336.078 518.266 335.629 518.328 335.148 518.332 cv
334.809 518.328 334.492 518.301 334.207 518.246 cv
333.918 518.187 333.664 518.121 333.438 518.035 cv
333.211 517.957 333.02 517.871 332.867 517.777 cv
332.711 517.691 332.605 517.613 332.547 517.551 cv
332.488 517.488 332.445 517.41 332.418 517.316 cv
332.387 517.223 332.371 517.094 332.375 516.93 cv
332.371 516.816 332.375 516.723 332.391 516.645 cv
332.398 516.57 332.414 516.508 332.438 516.461 cv
332.453 516.414 332.48 516.383 332.516 516.363 cv
332.543 516.348 332.578 516.34 332.621 516.336 cv
332.691 516.34 332.793 516.383 332.93 516.469 cv
333.059 516.559 333.23 516.656 333.441 516.758 cv
333.648 516.867 333.898 516.965 334.191 517.051 cv
334.484 517.145 334.824 517.187 335.211 517.187 cv
335.5 517.187 335.766 517.148 336.008 517.07 cv
336.246 516.992 336.453 516.883 336.633 516.738 cv
336.805 516.598 336.941 516.422 337.035 516.211 cv
337.129 516.004 337.176 515.77 337.176 515.504 cv
337.176 515.223 337.109 514.977 336.98 514.77 cv
336.848 514.57 336.676 514.395 336.465 514.238 cv
336.25 514.09 336.008 513.949 335.734 513.816 cv
335.461 513.691 335.18 513.559 334.898 513.426 cv
334.609 513.293 334.332 513.148 334.063 512.984 cv
333.793 512.828 333.551 512.637 333.34 512.418 cv
333.121 512.199 332.949 511.945 332.82 511.648 cv
332.684 511.359 332.617 511.008 332.621 510.594 cv
332.617 510.176 332.695 509.801 332.852 509.469 cv
333.004 509.141 333.215 508.863 333.492 508.637 cv
333.762 508.418 334.086 508.246 334.465 508.129 cv
334.84 508.012 335.25 507.953 335.688 507.953 cv
335.906 507.953 336.129 507.973 336.359 508.012 cv
336.582 508.051 336.793 508.102 336.996 508.164 cv
337.191 508.23 337.371 508.305 337.531 508.383 cv
337.684 508.465 337.785 508.531 337.84 508.578 cv
337.887 508.633 337.922 508.672 337.938 508.695 cv
337.953 508.727 337.965 508.762 337.977 508.805 cv
337.984 508.852 337.992 508.906 338 508.965 cv
338.004 509.031 338.008 509.109 338.008 509.207 cv
338.008 509.301 338.004 509.387 337.996 509.457 cv
337.988 509.535 337.977 509.594 337.961 509.641 cv
337.945 509.687 337.922 509.723 337.895 509.746 cv
337.863 509.77 337.832 509.781 337.797 509.781 cv
337.738 509.781 337.648 509.746 337.527 509.676 cv
337.402 509.605 337.25 509.523 337.078 509.43 cv
336.898 509.34 336.691 509.258 336.453 509.18 cv
336.207 509.105 335.938 509.066 335.641 509.066 cv
335.359 509.066 335.113 509.105 334.906 509.18 cv
334.695 509.258 334.523 509.359 334.391 509.48 cv
334.254 509.605 334.152 509.75 334.086 509.922 cv
334.02 510.094 333.988 510.277 333.988 510.469 cv
333.988 510.754 334.051 510.996 334.18 511.195 cv
334.309 511.398 334.48 511.578 334.699 511.73 cv
334.91 511.891 335.156 512.031 335.434 512.16 cv
335.707 512.293 335.988 512.426 336.277 512.555 cv
336.563 512.687 336.844 512.832 337.117 512.988 cv
337.391 513.148 337.637 513.336 337.855 513.551 cv
338.07 513.77 338.242 514.023 338.379 514.316 cv
338.508 514.609 338.574 514.957 338.578 515.355 cv
cp
f
346.344 517.988 mo
346.34 518.035 346.332 518.07 346.316 518.094 cv
346.297 518.125 346.262 518.148 346.219 518.168 cv
346.172 518.187 346.113 518.199 346.039 518.215 cv
345.961 518.223 345.867 518.23 345.762 518.23 cv
345.637 518.23 345.539 518.223 345.469 518.215 cv
345.391 518.199 345.332 518.187 345.289 518.168 cv
345.242 518.148 345.211 518.125 345.199 518.094 cv
345.18 518.07 345.172 518.035 345.176 517.988 cv
345.176 517.062 li
344.773 517.508 344.379 517.828 343.992 518.027 cv
343.598 518.23 343.203 518.328 342.809 518.332 cv
342.336 518.328 341.941 518.254 341.625 518.098 cv
341.305 517.945 341.047 517.734 340.852 517.465 cv
340.648 517.199 340.508 516.887 340.426 516.527 cv
340.336 516.172 340.293 515.738 340.297 515.23 cv
340.297 510.977 li
340.293 510.937 340.301 510.902 340.324 510.871 cv
340.34 510.844 340.375 510.82 340.43 510.793 cv
340.477 510.773 340.547 510.758 340.633 510.746 cv
340.715 510.742 340.816 510.738 340.945 510.734 cv
341.066 510.738 341.172 510.742 341.258 510.746 cv
341.34 510.758 341.406 510.773 341.453 510.793 cv
341.5 510.82 341.535 510.844 341.559 510.871 cv
341.578 510.902 341.586 510.937 341.59 510.977 cv
341.59 515.059 li
341.586 515.473 341.617 515.801 341.68 516.047 cv
341.738 516.293 341.828 516.504 341.953 516.676 cv
342.07 516.855 342.227 516.988 342.418 517.082 cv
342.602 517.18 342.82 517.23 343.07 517.227 cv
343.391 517.23 343.711 517.113 344.035 516.883 cv
344.352 516.656 344.691 516.32 345.051 515.875 cv
345.051 510.977 li
345.051 510.937 345.059 510.902 345.078 510.871 cv
345.094 510.844 345.129 510.82 345.184 510.793 cv
345.234 510.773 345.301 510.758 345.383 510.746 cv
345.461 510.742 345.566 510.738 345.699 510.734 cv
345.82 510.738 345.926 510.742 346.012 510.746 cv
346.094 510.758 346.156 510.773 346.203 510.793 cv
346.246 510.82 346.281 510.844 346.309 510.871 cv
346.328 510.902 346.34 510.937 346.344 510.977 cv
cp
f
355.203 514.387 mo
355.199 514.996 355.133 515.547 355.004 516.031 cv
354.867 516.52 354.672 516.934 354.418 517.273 cv
354.16 517.617 353.844 517.879 353.473 518.059 cv
353.098 518.242 352.672 518.328 352.188 518.332 cv
351.961 518.328 351.754 518.309 351.566 518.266 cv
351.379 518.219 351.191 518.148 351.012 518.051 cv
350.824 517.953 350.645 517.828 350.465 517.676 cv
350.281 517.527 350.09 517.348 349.891 517.133 cv
349.891 517.988 li
349.891 518.035 349.879 518.07 349.859 518.098 cv
349.836 518.133 349.801 518.156 349.758 518.172 cv
349.707 518.187 349.648 518.199 349.582 518.215 cv
349.508 518.223 349.418 518.23 349.313 518.23 cv
349.203 518.23 349.117 518.223 349.047 518.215 cv
348.973 518.199 348.91 518.187 348.867 518.172 cv
348.816 518.156 348.785 518.133 348.773 518.098 cv
348.754 518.07 348.746 518.035 348.75 517.988 cv
348.75 507.578 li
348.746 507.539 348.758 507.504 348.777 507.469 cv
348.793 507.441 348.824 507.414 348.879 507.391 cv
348.926 507.371 348.992 507.355 349.078 507.344 cv
349.156 507.336 349.262 507.332 349.391 507.328 cv
349.52 507.332 349.625 507.336 349.711 507.344 cv
349.789 507.355 349.855 507.371 349.902 507.391 cv
349.949 507.414 349.98 507.441 350.004 507.469 cv
350.02 507.504 350.031 507.539 350.035 507.578 cv
350.035 511.777 li
350.242 511.566 350.445 511.387 350.641 511.242 cv
350.836 511.098 351.023 510.98 351.211 510.887 cv
351.395 510.801 351.582 510.734 351.773 510.687 cv
351.957 510.648 352.156 510.625 352.367 510.625 cv
352.871 510.625 353.305 510.727 353.672 510.93 cv
354.031 511.133 354.324 511.406 354.551 511.742 cv
354.773 512.086 354.941 512.484 355.047 512.941 cv
355.148 513.398 355.199 513.879 355.203 514.387 cv
cp
353.871 514.535 mo
353.867 514.18 353.84 513.832 353.789 513.492 cv
353.73 513.156 353.637 512.859 353.5 512.598 cv
353.363 512.34 353.184 512.129 352.961 511.969 cv
352.734 511.812 352.453 511.734 352.121 511.73 cv
351.953 511.734 351.789 511.758 351.629 511.801 cv
351.465 511.852 351.301 511.93 351.133 512.035 cv
350.965 512.148 350.789 512.289 350.613 512.457 cv
350.43 512.633 350.238 512.848 350.035 513.102 cv
350.035 515.898 li
350.391 516.332 350.73 516.664 351.055 516.887 cv
351.379 517.117 351.715 517.23 352.066 517.227 cv
352.387 517.23 352.664 517.152 352.898 516.992 cv
353.125 516.84 353.313 516.633 353.457 516.371 cv
353.602 516.117 353.707 515.828 353.773 515.508 cv
353.836 515.191 353.867 514.867 353.871 514.535 cv
cp
f
360.367 514.25 mo
360.367 514.453 360.344 514.59 360.297 514.668 cv
360.25 514.746 360.18 514.785 360.094 514.785 cv
356.836 514.785 li
356.742 514.785 356.676 514.746 356.629 514.664 cv
356.582 514.586 356.559 514.449 356.559 514.25 cv
356.559 514.055 356.582 513.914 356.629 513.836 cv
356.676 513.758 356.742 513.719 356.836 513.719 cv
360.094 513.719 li
360.133 513.719 360.172 513.727 360.207 513.742 cv
360.238 513.758 360.266 513.789 360.293 513.832 cv
360.313 513.879 360.332 513.934 360.348 514 cv
360.359 514.07 360.367 514.156 360.367 514.25 cv
cp
f
363.621 517.98 mo
363.617 518.023 363.609 518.059 363.59 518.09 cv
363.566 518.121 363.527 518.148 363.48 518.164 cv
363.426 518.184 363.359 518.195 363.273 518.211 cv
363.188 518.223 363.078 518.23 362.953 518.23 cv
362.824 518.23 362.719 518.223 362.633 518.211 cv
362.543 518.195 362.473 518.184 362.422 518.164 cv
362.367 518.148 362.332 518.121 362.313 518.09 cv
362.289 518.059 362.277 518.023 362.281 517.98 cv
362.281 508.301 li
362.277 508.262 362.289 508.227 362.316 508.191 cv
362.336 508.164 362.375 508.137 362.434 508.117 cv
362.484 508.102 362.555 508.086 362.645 508.07 cv
362.727 508.059 362.828 508.055 362.953 508.051 cv
363.078 508.055 363.188 508.059 363.273 508.07 cv
363.359 508.086 363.426 508.102 363.48 508.117 cv
363.527 508.137 363.566 508.164 363.59 508.191 cv
363.609 508.227 363.617 508.262 363.621 508.301 cv
cp
f
376.609 517.988 mo
376.605 518.035 376.598 518.07 376.578 518.094 cv
376.555 518.125 376.52 518.148 376.477 518.168 cv
376.426 518.187 376.359 518.199 376.281 518.215 cv
376.195 518.223 376.094 518.23 375.969 518.23 cv
375.836 518.23 375.727 518.223 375.648 518.215 cv
375.563 518.199 375.496 518.187 375.449 518.168 cv
375.395 518.148 375.359 518.125 375.344 518.094 cv
375.32 518.07 375.313 518.035 375.313 517.988 cv
375.313 513.727 li
375.313 513.434 375.285 513.164 375.234 512.918 cv
375.18 512.676 375.098 512.465 374.984 512.285 cv
374.871 512.109 374.727 511.973 374.551 511.879 cv
374.371 511.785 374.16 511.738 373.926 511.738 cv
373.629 511.738 373.332 511.855 373.035 512.082 cv
372.73 512.316 372.402 512.648 372.047 513.086 cv
372.047 517.988 li
372.043 518.035 372.031 518.07 372.016 518.094 cv
371.992 518.125 371.961 518.148 371.914 518.168 cv
371.863 518.187 371.797 518.199 371.715 518.215 cv
371.629 518.223 371.523 518.23 371.402 518.23 cv
371.281 518.23 371.18 518.223 371.094 518.215 cv
371.008 518.199 370.938 518.187 370.891 518.168 cv
370.836 518.148 370.805 518.125 370.789 518.094 cv
370.77 518.07 370.758 518.035 370.762 517.988 cv
370.762 513.727 li
370.758 513.434 370.73 513.164 370.676 512.918 cv
370.617 512.676 370.531 512.465 370.418 512.285 cv
370.305 512.109 370.16 511.973 369.988 511.879 cv
369.809 511.785 369.602 511.738 369.367 511.738 cv
369.066 511.738 368.77 511.855 368.469 512.082 cv
368.168 512.316 367.84 512.648 367.488 513.086 cv
367.488 517.988 li
367.484 518.035 367.473 518.07 367.457 518.094 cv
367.434 518.125 367.402 518.148 367.355 518.168 cv
367.309 518.187 367.242 518.199 367.164 518.215 cv
367.078 518.223 366.973 518.23 366.844 518.23 cv
366.715 518.23 366.609 518.223 366.531 518.215 cv
366.445 518.199 366.379 518.187 366.332 518.168 cv
366.277 518.148 366.246 518.125 366.23 518.094 cv
366.211 518.07 366.199 518.035 366.203 517.988 cv
366.203 510.977 li
366.199 510.937 366.207 510.902 366.227 510.871 cv
366.238 510.844 366.27 510.82 366.32 510.793 cv
366.363 510.773 366.426 510.758 366.5 510.746 cv
366.57 510.742 366.664 510.738 366.789 510.734 cv
366.898 510.738 366.996 510.742 367.074 510.746 cv
367.148 510.758 367.207 510.773 367.25 510.793 cv
367.289 510.82 367.316 510.844 367.336 510.871 cv
367.352 510.902 367.359 510.937 367.363 510.977 cv
367.363 511.902 li
367.754 511.461 368.137 511.141 368.512 510.934 cv
368.879 510.73 369.258 510.625 369.641 510.625 cv
369.93 510.625 370.188 510.66 370.422 510.727 cv
370.648 510.797 370.855 510.891 371.035 511.012 cv
371.211 511.133 371.359 511.277 371.488 511.445 cv
371.609 511.617 371.715 511.809 371.801 512.012 cv
372.031 511.762 372.254 511.547 372.465 511.367 cv
372.676 511.195 372.879 511.051 373.074 510.937 cv
373.27 510.832 373.457 510.754 373.641 510.699 cv
373.824 510.652 374.012 510.625 374.199 510.625 cv
374.652 510.625 375.031 510.707 375.336 510.863 cv
375.641 511.027 375.887 511.238 376.082 511.5 cv
376.27 511.766 376.406 512.074 376.488 512.43 cv
376.566 512.785 376.605 513.16 376.609 513.555 cv
cp
f
384.238 517.996 mo
384.234 518.059 384.215 518.105 384.176 518.137 cv
384.133 518.168 384.074 518.191 384.004 518.207 cv
383.926 518.223 383.82 518.23 383.684 518.23 cv
383.547 518.23 383.438 518.223 383.359 518.207 cv
383.273 518.191 383.215 518.168 383.184 518.137 cv
383.145 518.105 383.129 518.059 383.133 517.996 cv
383.133 517.297 li
382.824 517.625 382.48 517.879 382.105 518.059 cv
381.727 518.242 381.328 518.328 380.91 518.332 cv
380.535 518.328 380.203 518.281 379.906 518.187 cv
379.609 518.09 379.355 517.953 379.145 517.77 cv
378.934 517.59 378.77 517.367 378.652 517.102 cv
378.535 516.84 378.477 516.539 378.48 516.195 cv
378.477 515.805 378.555 515.461 378.719 515.168 cv
378.875 514.879 379.109 514.637 379.414 514.445 cv
379.715 514.254 380.082 514.109 380.52 514.012 cv
380.953 513.918 381.445 513.871 381.992 513.867 cv
382.961 513.867 li
382.961 513.32 li
382.957 513.051 382.93 512.812 382.875 512.605 cv
382.816 512.398 382.723 512.227 382.598 512.086 cv
382.465 511.949 382.301 511.844 382.102 511.773 cv
381.895 511.703 381.645 511.668 381.355 511.668 cv
381.035 511.668 380.75 511.707 380.5 511.781 cv
380.242 511.859 380.023 511.941 379.836 512.031 cv
379.648 512.125 379.488 512.211 379.363 512.281 cv
379.23 512.359 379.137 512.395 379.078 512.395 cv
379.035 512.395 379 512.387 378.969 512.363 cv
378.938 512.348 378.91 512.316 378.887 512.27 cv
378.863 512.23 378.844 512.176 378.836 512.109 cv
378.82 512.047 378.816 511.977 378.82 511.895 cv
378.816 511.77 378.824 511.664 378.848 511.586 cv
378.863 511.512 378.91 511.441 378.98 511.371 cv
379.051 511.305 379.172 511.227 379.344 511.137 cv
379.516 511.047 379.711 510.965 379.934 510.887 cv
380.156 510.816 380.402 510.754 380.668 510.699 cv
380.934 510.652 381.199 510.625 381.473 510.625 cv
381.973 510.625 382.402 510.684 382.754 510.797 cv
383.105 510.914 383.391 511.082 383.613 511.301 cv
383.828 511.523 383.988 511.797 384.09 512.121 cv
384.188 512.453 384.234 512.836 384.238 513.266 cv
cp
382.961 514.793 mo
381.859 514.793 li
381.504 514.797 381.199 514.828 380.941 514.883 cv
380.68 514.945 380.465 515.031 380.293 515.148 cv
380.121 515.266 379.996 515.406 379.918 515.57 cv
379.836 515.734 379.793 515.922 379.797 516.133 cv
379.793 516.5 379.91 516.793 380.141 517.004 cv
380.371 517.223 380.695 517.328 381.113 517.328 cv
381.449 517.328 381.762 517.242 382.051 517.07 cv
382.34 516.898 382.641 516.637 382.961 516.281 cv
cp
f
392.457 511.293 mo
392.453 511.477 392.43 511.609 392.383 511.687 cv
392.332 511.77 392.27 511.809 392.195 511.809 cv
391.188 511.809 li
391.367 511.996 391.496 512.203 391.57 512.43 cv
391.641 512.656 391.676 512.891 391.68 513.133 cv
391.676 513.539 391.609 513.898 391.484 514.211 cv
391.352 514.523 391.168 514.789 390.926 515 cv
390.684 515.219 390.395 515.383 390.066 515.496 cv
389.73 515.613 389.363 515.672 388.961 515.668 cv
388.672 515.672 388.398 515.633 388.145 515.555 cv
387.883 515.48 387.688 515.387 387.551 515.27 cv
387.457 515.367 387.379 515.473 387.32 515.59 cv
387.258 515.711 387.227 515.848 387.23 516 cv
387.227 516.184 387.313 516.336 387.484 516.453 cv
387.652 516.578 387.875 516.641 388.156 516.648 cv
389.988 516.727 li
390.336 516.738 390.652 516.785 390.945 516.871 cv
391.234 516.957 391.488 517.082 391.703 517.238 cv
391.914 517.398 392.082 517.59 392.203 517.82 cv
392.32 518.055 392.379 518.324 392.383 518.629 cv
392.379 518.949 392.313 519.254 392.18 519.547 cv
392.043 519.836 391.836 520.09 391.559 520.312 cv
391.277 520.531 390.922 520.707 390.492 520.836 cv
390.063 520.961 389.555 521.023 388.969 521.027 cv
388.398 521.023 387.914 520.977 387.52 520.883 cv
387.121 520.785 386.797 520.652 386.543 520.488 cv
386.289 520.32 386.105 520.125 385.992 519.895 cv
385.875 519.66 385.816 519.406 385.82 519.141 cv
385.816 518.969 385.836 518.805 385.883 518.645 cv
385.922 518.48 385.984 518.328 386.07 518.184 cv
386.152 518.039 386.262 517.902 386.391 517.766 cv
386.516 517.637 386.66 517.504 386.832 517.375 cv
386.574 517.246 386.387 517.082 386.266 516.883 cv
386.145 516.687 386.086 516.477 386.086 516.242 cv
386.086 515.93 386.148 515.645 386.277 515.395 cv
386.406 515.145 386.566 514.922 386.762 514.723 cv
386.598 514.531 386.473 514.316 386.379 514.074 cv
386.285 513.836 386.238 513.543 386.238 513.195 cv
386.238 512.801 386.305 512.441 386.441 512.121 cv
386.574 511.805 386.762 511.539 387.004 511.32 cv
387.242 511.105 387.527 510.937 387.863 510.816 cv
388.195 510.703 388.563 510.645 388.961 510.641 cv
389.172 510.645 389.371 510.656 389.555 510.676 cv
389.738 510.703 389.91 510.734 390.074 510.773 cv
392.195 510.773 li
392.281 510.777 392.348 510.82 392.391 510.902 cv
392.434 510.992 392.453 511.121 392.457 511.293 cv
cp
390.449 513.141 mo
390.445 512.668 390.313 512.297 390.055 512.023 cv
389.789 511.758 389.418 511.621 388.938 511.621 cv
388.684 511.621 388.465 511.664 388.285 511.746 cv
388.098 511.832 387.945 511.945 387.824 512.09 cv
387.703 512.238 387.613 512.406 387.555 512.594 cv
387.492 512.781 387.461 512.98 387.465 513.187 cv
387.461 513.652 387.594 514.016 387.855 514.281 cv
388.117 514.547 388.484 514.68 388.961 514.676 cv
389.211 514.68 389.43 514.641 389.621 514.555 cv
389.805 514.477 389.961 514.363 390.086 514.223 cv
390.207 514.082 390.297 513.918 390.359 513.727 cv
390.414 513.543 390.445 513.348 390.449 513.141 cv
cp
391.094 518.699 mo
391.09 518.395 390.965 518.164 390.723 518 cv
390.473 517.84 390.141 517.75 389.723 517.738 cv
387.906 517.676 li
387.738 517.809 387.602 517.934 387.5 518.047 cv
387.391 518.164 387.309 518.273 387.246 518.383 cv
387.184 518.488 387.141 518.594 387.117 518.699 cv
387.094 518.801 387.082 518.906 387.082 519.016 cv
387.082 519.352 387.25 519.605 387.594 519.785 cv
387.934 519.957 388.414 520.047 389.031 520.047 cv
389.418 520.047 389.742 520.008 390.008 519.934 cv
390.266 519.855 390.477 519.754 390.641 519.633 cv
390.797 519.504 390.914 519.363 390.988 519.203 cv
391.055 519.043 391.09 518.875 391.094 518.699 cv
cp
f
400.02 514.18 mo
400.016 514.383 399.965 514.523 399.867 514.609 cv
399.762 514.695 399.645 514.738 399.52 514.738 cv
394.902 514.738 li
394.898 515.129 394.938 515.48 395.02 515.793 cv
395.094 516.105 395.227 516.375 395.41 516.594 cv
395.59 516.82 395.824 516.992 396.121 517.109 cv
396.41 517.234 396.77 517.293 397.195 517.289 cv
397.527 517.293 397.824 517.266 398.086 517.207 cv
398.348 517.156 398.574 517.094 398.766 517.023 cv
398.953 516.957 399.109 516.898 399.234 516.84 cv
399.355 516.789 399.449 516.762 399.512 516.758 cv
399.547 516.762 399.578 516.77 399.609 516.785 cv
399.637 516.805 399.66 516.832 399.68 516.867 cv
399.691 516.906 399.703 516.957 399.715 517.02 cv
399.719 517.086 399.723 517.164 399.727 517.258 cv
399.723 517.328 399.719 517.387 399.719 517.434 cv
399.711 517.48 399.707 517.523 399.699 517.562 cv
399.691 517.602 399.676 517.637 399.66 517.668 cv
399.637 517.699 399.613 517.73 399.59 517.758 cv
399.559 517.789 399.477 517.836 399.336 517.898 cv
399.195 517.965 399.012 518.027 398.789 518.09 cv
398.563 518.152 398.305 518.207 398.012 518.258 cv
397.719 518.305 397.406 518.328 397.074 518.332 cv
396.496 518.328 395.988 518.25 395.559 518.09 cv
395.121 517.93 394.758 517.691 394.465 517.375 cv
394.164 517.059 393.941 516.664 393.793 516.184 cv
393.645 515.707 393.57 515.148 393.57 514.512 cv
393.57 513.914 393.645 513.375 393.801 512.891 cv
393.953 512.414 394.18 512.004 394.477 511.668 cv
394.77 511.332 395.125 511.074 395.539 510.895 cv
395.953 510.715 396.418 510.625 396.934 510.625 cv
397.484 510.625 397.953 510.715 398.34 510.891 cv
398.727 511.07 399.043 511.309 399.297 511.605 cv
399.543 511.906 399.727 512.258 399.844 512.656 cv
399.957 513.062 400.016 513.492 400.02 513.945 cv
cp
398.727 513.797 mo
398.742 513.121 398.59 512.59 398.273 512.207 cv
397.957 511.824 397.488 511.633 396.871 511.629 cv
396.547 511.633 396.266 511.691 396.027 511.809 cv
395.785 511.93 395.586 512.09 395.426 512.285 cv
395.262 512.484 395.137 512.715 395.051 512.977 cv
394.961 513.238 394.91 513.512 394.902 513.797 cv
cp
f
406.387 516.078 mo
406.383 516.441 406.316 516.762 406.188 517.039 cv
406.055 517.32 405.867 517.555 405.625 517.746 cv
405.379 517.941 405.086 518.086 404.75 518.184 cv
404.41 518.281 404.039 518.328 403.637 518.332 cv
403.383 518.328 403.145 518.309 402.922 518.273 cv
402.695 518.23 402.496 518.184 402.316 518.125 cv
402.137 518.066 401.984 518.004 401.859 517.937 cv
401.734 517.875 401.641 517.816 401.586 517.762 cv
401.527 517.711 401.488 517.641 401.465 517.543 cv
401.438 517.453 401.426 517.324 401.426 517.164 cv
401.426 517.066 401.43 516.984 401.441 516.914 cv
401.449 516.848 401.461 516.793 401.48 516.75 cv
401.492 516.711 401.516 516.68 401.543 516.66 cv
401.57 516.645 401.602 516.637 401.641 516.633 cv
401.695 516.637 401.781 516.672 401.895 516.738 cv
402.004 516.812 402.141 516.891 402.309 516.969 cv
402.469 517.055 402.66 517.129 402.887 517.199 cv
403.105 517.27 403.363 517.305 403.66 517.305 cv
403.875 517.305 404.074 517.281 404.254 517.234 cv
404.43 517.187 404.582 517.121 404.711 517.027 cv
404.84 516.941 404.941 516.824 405.012 516.68 cv
405.082 516.543 405.117 516.375 405.117 516.18 cv
405.117 515.984 405.066 515.82 404.965 515.684 cv
404.863 515.551 404.727 515.43 404.563 515.324 cv
404.395 515.223 404.211 515.133 404.004 515.047 cv
403.793 514.969 403.578 514.883 403.359 514.793 cv
403.141 514.707 402.926 514.605 402.715 514.492 cv
402.504 514.383 402.313 514.25 402.148 514.086 cv
401.977 513.93 401.844 513.734 401.746 513.508 cv
401.641 513.285 401.59 513.02 401.594 512.707 cv
401.59 512.434 401.645 512.168 401.754 511.914 cv
401.859 511.664 402.02 511.445 402.234 511.254 cv
402.445 511.066 402.711 510.914 403.031 510.797 cv
403.352 510.684 403.723 510.625 404.152 510.625 cv
404.336 510.625 404.523 510.641 404.711 510.672 cv
404.895 510.703 405.063 510.742 405.219 510.789 cv
405.367 510.836 405.496 510.887 405.605 510.941 cv
405.707 510.996 405.789 511.047 405.848 511.086 cv
405.898 511.133 405.934 511.168 405.957 511.195 cv
405.973 511.227 405.988 511.262 405.996 511.297 cv
406.004 511.34 406.012 511.387 406.02 511.441 cv
406.027 511.5 406.031 511.57 406.031 511.652 cv
406.031 511.742 406.027 511.82 406.02 511.883 cv
406.012 511.953 405.996 512.004 405.98 512.043 cv
405.957 512.086 405.938 512.117 405.914 512.133 cv
405.887 512.152 405.855 512.16 405.828 512.16 cv
405.777 512.16 405.711 512.133 405.625 512.074 cv
405.535 512.02 405.422 511.957 405.281 511.891 cv
405.141 511.828 404.973 511.77 404.785 511.707 cv
404.594 511.652 404.379 511.621 404.137 511.621 cv
403.914 511.621 403.723 511.648 403.559 511.695 cv
403.391 511.75 403.254 511.82 403.148 511.906 cv
403.043 512 402.961 512.105 402.91 512.23 cv
402.852 512.355 402.824 512.492 402.828 512.637 cv
402.824 512.84 402.875 513.008 402.98 513.145 cv
403.082 513.285 403.219 513.406 403.387 513.508 cv
403.551 513.613 403.742 513.707 403.957 513.789 cv
404.168 513.875 404.383 513.961 404.605 514.047 cv
404.824 514.137 405.043 514.238 405.262 514.344 cv
405.477 514.453 405.668 514.582 405.836 514.738 cv
406 514.895 406.133 515.082 406.234 515.301 cv
406.332 515.52 406.383 515.781 406.387 516.078 cv
cp
f
123.594 13.758 mo
123.59 14.289 123.492 14.754 123.297 15.152 cv
123.098 15.555 122.832 15.891 122.496 16.156 cv
122.156 16.426 121.758 16.625 121.309 16.758 cv
120.855 16.891 120.375 16.957 119.863 16.961 cv
119.512 16.957 119.188 16.93 118.891 16.875 cv
118.59 16.816 118.328 16.75 118.102 16.668 cv
117.871 16.59 117.68 16.504 117.527 16.414 cv
117.375 16.328 117.266 16.25 117.199 16.18 cv
117.129 16.113 117.078 16.016 117.055 15.891 cv
117.023 15.766 117.012 15.582 117.012 15.34 cv
117.012 15.18 117.016 15.047 117.027 14.934 cv
117.035 14.828 117.051 14.738 117.078 14.668 cv
117.098 14.602 117.129 14.555 117.172 14.523 cv
117.207 14.5 117.254 14.484 117.305 14.48 cv
117.375 14.484 117.477 14.527 117.613 14.609 cv
117.742 14.699 117.914 14.793 118.125 14.895 cv
118.332 15 118.578 15.098 118.867 15.18 cv
119.152 15.27 119.488 15.312 119.871 15.309 cv
120.121 15.312 120.344 15.281 120.539 15.219 cv
120.734 15.16 120.902 15.074 121.043 14.965 cv
121.18 14.855 121.285 14.723 121.359 14.562 cv
121.43 14.402 121.465 14.223 121.469 14.023 cv
121.465 13.797 121.402 13.602 121.281 13.434 cv
121.152 13.273 120.988 13.129 120.793 13 cv
120.59 12.875 120.363 12.754 120.109 12.641 cv
119.855 12.531 119.594 12.414 119.324 12.285 cv
119.051 12.164 118.789 12.02 118.535 11.859 cv
118.281 11.703 118.055 11.516 117.855 11.293 cv
117.652 11.074 117.488 10.812 117.367 10.508 cv
117.242 10.207 117.18 9.84802 117.184 9.42603 cv
117.18 8.94501 117.27 8.52002 117.449 8.15198 cv
117.625 7.789 117.867 7.48401 118.176 7.23798 cv
118.477 7 118.836 6.82001 119.25 6.69897 cv
119.664 6.58197 120.102 6.52301 120.563 6.52002 cv
120.801 6.52301 121.039 6.539 121.281 6.57397 cv
121.52 6.61298 121.742 6.664 121.949 6.72302 cv
122.156 6.78497 122.34 6.85498 122.504 6.92999 cv
122.66 7.01202 122.77 7.07397 122.824 7.125 cv
122.875 7.17999 122.91 7.22699 122.93 7.258 cv
122.945 7.297 122.961 7.34399 122.977 7.40198 cv
122.988 7.46503 122.996 7.539 123.004 7.62903 cv
123.008 7.72302 123.012 7.836 123.012 7.96899 cv
123.012 8.12097 123.008 8.25 123 8.35199 cv
122.992 8.45697 122.977 8.54303 122.961 8.60498 cv
122.938 8.67603 122.914 8.72302 122.883 8.75403 cv
122.848 8.78497 122.801 8.80103 122.746 8.80103 cv
122.688 8.80103 122.598 8.76599 122.473 8.69098 cv
122.348 8.62097 122.191 8.54303 122.012 8.453 cv
121.828 8.37097 121.621 8.29303 121.383 8.22302 cv
121.141 8.15601 120.875 8.12097 120.594 8.117 cv
120.367 8.12097 120.176 8.14801 120.012 8.19897 cv
119.844 8.25403 119.703 8.328 119.594 8.422 cv
119.48 8.52002 119.398 8.63702 119.344 8.77002 cv
119.289 8.90997 119.262 9.05103 119.262 9.19897 cv
119.262 9.42603 119.32 9.62097 119.445 9.78101 cv
119.563 9.94501 119.727 10.09 119.938 10.215 cv
120.141 10.344 120.375 10.465 120.633 10.574 cv
120.891 10.691 121.156 10.809 121.43 10.93 cv
121.699 11.059 121.961 11.199 122.223 11.355 cv
122.48 11.512 122.715 11.703 122.918 11.922 cv
123.121 12.148 123.281 12.406 123.406 12.703 cv
123.527 13 123.59 13.352 123.594 13.758 cv
cp
f
130.313 15.41 mo
130.309 15.547 130.305 15.66 130.301 15.75 cv
130.289 15.844 130.281 15.922 130.27 15.98 cv
130.254 16.043 130.238 16.094 130.223 16.129 cv
130.203 16.172 130.16 16.219 130.102 16.277 cv
130.035 16.34 129.93 16.414 129.781 16.496 cv
129.629 16.586 129.457 16.664 129.266 16.727 cv
129.074 16.797 128.867 16.848 128.641 16.891 cv
128.414 16.93 128.18 16.949 127.945 16.953 cv
127.406 16.949 126.934 16.871 126.52 16.703 cv
126.105 16.539 125.758 16.293 125.48 15.969 cv
125.195 15.645 124.984 15.25 124.844 14.781 cv
124.703 14.316 124.633 13.777 124.633 13.172 cv
124.633 12.477 124.719 11.879 124.891 11.371 cv
125.063 10.867 125.305 10.445 125.621 10.113 cv
125.93 9.78101 126.297 9.53497 126.727 9.37097 cv
127.148 9.211 127.617 9.12903 128.129 9.12903 cv
128.336 9.12903 128.539 9.14801 128.742 9.18402 cv
128.938 9.22302 129.125 9.27301 129.301 9.33197 cv
129.473 9.39801 129.629 9.46899 129.77 9.54303 cv
129.906 9.625 130.004 9.69098 130.063 9.74597 cv
130.117 9.80499 130.156 9.85199 130.184 9.88702 cv
130.203 9.92999 130.223 9.97998 130.238 10.039 cv
130.25 10.105 130.262 10.184 130.27 10.27 cv
130.277 10.363 130.281 10.473 130.281 10.602 cv
130.281 10.906 130.254 11.117 130.203 11.238 cv
130.148 11.359 130.082 11.422 130 11.418 cv
129.91 11.422 129.816 11.387 129.719 11.312 cv
129.617 11.242 129.5 11.16 129.367 11.07 cv
129.234 10.984 129.074 10.902 128.887 10.828 cv
128.699 10.758 128.473 10.723 128.215 10.719 cv
127.703 10.723 127.316 10.918 127.047 11.309 cv
126.773 11.699 126.637 12.273 126.641 13.031 cv
126.637 13.406 126.672 13.738 126.742 14.023 cv
126.809 14.309 126.906 14.547 127.043 14.738 cv
127.172 14.934 127.34 15.078 127.543 15.172 cv
127.742 15.27 127.973 15.316 128.238 15.316 cv
128.504 15.316 128.738 15.277 128.938 15.195 cv
129.129 15.117 129.297 15.027 129.445 14.926 cv
129.586 14.828 129.711 14.738 129.813 14.656 cv
129.91 14.578 129.992 14.539 130.063 14.535 cv
130.105 14.539 130.145 14.551 130.18 14.574 cv
130.207 14.602 130.23 14.648 130.254 14.719 cv
130.27 14.789 130.285 14.879 130.297 14.988 cv
130.305 15.098 130.309 15.238 130.313 15.41 cv
cp
f
137.582 16.539 mo
137.578 16.617 137.551 16.672 137.504 16.711 cv
137.449 16.754 137.367 16.781 137.258 16.801 cv
137.141 16.816 136.977 16.828 136.762 16.828 cv
136.523 16.828 136.352 16.816 136.25 16.801 cv
136.141 16.781 136.066 16.754 136.027 16.711 cv
135.98 16.672 135.961 16.617 135.961 16.539 cv
135.961 15.988 li
135.672 16.297 135.344 16.535 134.98 16.703 cv
134.613 16.875 134.207 16.957 133.762 16.961 cv
133.391 16.957 133.051 16.91 132.742 16.816 cv
132.434 16.723 132.168 16.582 131.941 16.387 cv
131.715 16.199 131.539 15.965 131.414 15.684 cv
131.289 15.406 131.227 15.078 131.23 14.699 cv
131.227 14.301 131.305 13.949 131.465 13.645 cv
131.621 13.348 131.859 13.102 132.176 12.906 cv
132.488 12.715 132.879 12.57 133.348 12.473 cv
133.816 12.383 134.359 12.336 134.977 12.332 cv
135.656 12.332 li
135.656 11.91 li
135.656 11.695 135.633 11.504 135.59 11.34 cv
135.543 11.18 135.469 11.043 135.371 10.93 cv
135.266 10.824 135.133 10.742 134.965 10.687 cv
134.793 10.637 134.582 10.613 134.34 10.609 cv
134.008 10.613 133.715 10.648 133.461 10.719 cv
133.199 10.793 132.973 10.875 132.777 10.961 cv
132.578 11.055 132.414 11.133 132.285 11.203 cv
132.148 11.277 132.039 11.316 131.961 11.312 cv
131.898 11.316 131.848 11.297 131.809 11.258 cv
131.762 11.223 131.727 11.172 131.699 11.102 cv
131.668 11.039 131.645 10.953 131.633 10.852 cv
131.613 10.754 131.605 10.645 131.609 10.523 cv
131.605 10.363 131.621 10.238 131.648 10.141 cv
131.672 10.051 131.719 9.96503 131.797 9.88702 cv
131.867 9.81201 131.996 9.72998 132.18 9.64099 cv
132.359 9.55103 132.57 9.46503 132.816 9.38702 cv
133.059 9.30902 133.328 9.24597 133.617 9.19501 cv
133.906 9.14801 134.203 9.125 134.512 9.12097 cv
135.055 9.125 135.52 9.17603 135.906 9.28101 cv
136.293 9.39099 136.613 9.55499 136.863 9.77301 cv
137.113 9.992 137.293 10.277 137.41 10.625 cv
137.52 10.977 137.578 11.391 137.582 11.863 cv
cp
135.656 13.562 mo
134.906 13.562 li
134.59 13.566 134.32 13.59 134.098 13.633 cv
133.871 13.684 133.688 13.754 133.551 13.844 cv
133.406 13.941 133.305 14.055 133.242 14.184 cv
133.176 14.32 133.141 14.469 133.145 14.637 cv
133.141 14.93 133.234 15.16 133.422 15.324 cv
133.605 15.492 133.863 15.574 134.191 15.574 cv
134.465 15.574 134.715 15.504 134.949 15.363 cv
135.176 15.223 135.414 15.02 135.656 14.746 cv
cp
f
141.508 16.516 mo
141.504 16.57 141.488 16.613 141.461 16.652 cv
141.426 16.691 141.371 16.727 141.301 16.75 cv
141.223 16.777 141.125 16.793 141 16.809 cv
140.875 16.82 140.715 16.828 140.527 16.828 cv
140.332 16.828 140.176 16.82 140.051 16.809 cv
139.926 16.793 139.824 16.777 139.75 16.75 cv
139.672 16.727 139.617 16.691 139.59 16.652 cv
139.555 16.613 139.539 16.57 139.543 16.516 cv
139.543 6.27002 li
139.539 6.21899 139.555 6.172 139.59 6.12903 cv
139.617 6.09003 139.672 6.05499 139.75 6.02301 cv
139.824 5.99597 139.926 5.97699 140.051 5.95697 cv
140.176 5.94501 140.332 5.93701 140.527 5.93402 cv
140.715 5.93701 140.875 5.94501 141 5.95697 cv
141.125 5.97699 141.223 5.99597 141.301 6.02301 cv
141.371 6.05499 141.426 6.09003 141.461 6.12903 cv
141.488 6.172 141.504 6.21899 141.508 6.27002 cv
cp
f
145.48 16.516 mo
145.477 16.57 145.461 16.613 145.434 16.652 cv
145.398 16.691 145.344 16.727 145.273 16.75 cv
145.195 16.777 145.098 16.793 144.973 16.809 cv
144.848 16.82 144.688 16.828 144.5 16.828 cv
144.305 16.828 144.148 16.82 144.023 16.809 cv
143.898 16.793 143.797 16.777 143.723 16.75 cv
143.645 16.727 143.59 16.691 143.563 16.652 cv
143.527 16.613 143.512 16.57 143.516 16.516 cv
143.516 9.58197 li
143.512 9.53101 143.527 9.48401 143.563 9.44501 cv
143.59 9.40601 143.645 9.375 143.723 9.34399 cv
143.797 9.32001 143.898 9.297 144.023 9.27698 cv
144.148 9.26599 144.305 9.258 144.5 9.25403 cv
144.688 9.258 144.848 9.26599 144.973 9.27698 cv
145.098 9.297 145.195 9.32001 145.273 9.34399 cv
145.344 9.375 145.398 9.40601 145.434 9.44501 cv
145.461 9.48401 145.477 9.53101 145.48 9.58197 cv
cp
145.629 7.211 mo
145.629 7.60901 145.547 7.883 145.387 8.03101 cv
145.223 8.18402 144.926 8.258 144.492 8.25403 cv
144.047 8.258 143.746 8.18402 143.598 8.039 cv
143.441 7.89502 143.367 7.633 143.367 7.25 cv
143.367 6.85498 143.445 6.58197 143.605 6.42999 cv
143.762 6.27698 144.063 6.19897 144.508 6.19897 cv
144.941 6.19897 145.238 6.27301 145.395 6.422 cv
145.551 6.57001 145.629 6.836 145.629 7.211 cv
cp
f
154.082 16.516 mo
154.078 16.57 154.063 16.613 154.035 16.652 cv
154 16.691 153.949 16.727 153.879 16.75 cv
153.805 16.777 153.703 16.793 153.578 16.809 cv
153.449 16.82 153.293 16.828 153.109 16.828 cv
152.914 16.828 152.754 16.82 152.629 16.809 cv
152.5 16.793 152.398 16.777 152.328 16.75 cv
152.25 16.727 152.199 16.691 152.172 16.652 cv
152.137 16.613 152.121 16.57 152.125 16.516 cv
152.125 12.551 li
152.121 12.215 152.098 11.949 152.051 11.754 cv
152 11.562 151.926 11.398 151.836 11.262 cv
151.742 11.125 151.625 11.02 151.477 10.941 cv
151.328 10.867 151.152 10.828 150.957 10.828 cv
150.703 10.828 150.453 10.922 150.199 11.102 cv
149.945 11.285 149.68 11.547 149.406 11.895 cv
149.406 16.516 li
149.402 16.57 149.387 16.613 149.359 16.652 cv
149.324 16.691 149.27 16.727 149.199 16.75 cv
149.121 16.777 149.023 16.793 148.898 16.809 cv
148.773 16.82 148.613 16.828 148.426 16.828 cv
148.23 16.828 148.074 16.82 147.949 16.809 cv
147.824 16.793 147.723 16.777 147.648 16.75 cv
147.57 16.727 147.516 16.691 147.488 16.652 cv
147.453 16.613 147.438 16.57 147.441 16.516 cv
147.441 9.56598 li
147.438 9.52002 147.453 9.47302 147.48 9.42999 cv
147.504 9.39502 147.551 9.36298 147.621 9.33197 cv
147.688 9.30902 147.773 9.289 147.883 9.27301 cv
147.988 9.26599 148.121 9.258 148.285 9.25403 cv
148.449 9.258 148.586 9.26599 148.695 9.27301 cv
148.801 9.289 148.887 9.30902 148.949 9.33197 cv
149.008 9.36298 149.051 9.39502 149.078 9.42999 cv
149.102 9.47302 149.113 9.52002 149.117 9.56598 cv
149.117 10.367 li
149.5 9.95697 149.891 9.64502 150.289 9.43402 cv
150.684 9.22699 151.102 9.125 151.535 9.12097 cv
152.004 9.125 152.402 9.203 152.73 9.35498 cv
153.055 9.51599 153.316 9.72699 153.516 9.992 cv
153.715 10.262 153.859 10.574 153.949 10.93 cv
154.035 11.289 154.078 11.719 154.082 12.223 cv
cp
f
162.277 10.047 mo
162.273 10.301 162.246 10.484 162.191 10.602 cv
162.133 10.723 162.063 10.781 161.984 10.781 cv
161.164 10.781 li
161.277 10.906 161.359 11.051 161.41 11.207 cv
161.457 11.367 161.48 11.531 161.484 11.699 cv
161.48 12.109 161.414 12.469 161.281 12.781 cv
161.145 13.098 160.949 13.363 160.699 13.574 cv
160.445 13.793 160.145 13.957 159.789 14.066 cv
159.43 14.184 159.031 14.238 158.602 14.234 cv
158.375 14.238 158.164 14.211 157.961 14.152 cv
157.758 14.102 157.602 14.039 157.492 13.961 cv
157.43 14.031 157.371 14.109 157.324 14.203 cv
157.273 14.297 157.25 14.402 157.254 14.512 cv
157.25 14.668 157.316 14.789 157.449 14.883 cv
157.578 14.98 157.766 15.035 158.008 15.043 cv
159.699 15.105 li
160.094 15.121 160.445 15.18 160.754 15.273 cv
161.063 15.375 161.324 15.508 161.535 15.68 cv
161.746 15.855 161.906 16.066 162.016 16.309 cv
162.125 16.555 162.18 16.828 162.184 17.141 cv
162.18 17.477 162.105 17.801 161.957 18.109 cv
161.809 18.41 161.582 18.672 161.281 18.898 cv
160.977 19.117 160.598 19.297 160.145 19.43 cv
159.688 19.559 159.156 19.621 158.555 19.625 cv
157.957 19.621 157.453 19.574 157.035 19.484 cv
156.617 19.387 156.273 19.258 156.008 19.094 cv
155.738 18.926 155.543 18.727 155.426 18.5 cv
155.301 18.266 155.242 18.012 155.242 17.738 cv
155.242 17.566 155.262 17.406 155.309 17.25 cv
155.348 17.094 155.414 16.941 155.504 16.801 cv
155.586 16.656 155.691 16.523 155.816 16.391 cv
155.941 16.262 156.082 16.137 156.246 16.016 cv
156.02 15.902 155.848 15.742 155.727 15.531 cv
155.605 15.328 155.547 15.102 155.547 14.855 cv
155.547 14.555 155.613 14.277 155.754 14.02 cv
155.891 13.77 156.074 13.539 156.301 13.336 cv
156.117 13.156 155.973 12.941 155.863 12.684 cv
155.754 12.434 155.699 12.113 155.703 11.73 cv
155.699 11.328 155.77 10.969 155.914 10.645 cv
156.055 10.328 156.254 10.059 156.512 9.836 cv
156.766 9.617 157.07 9.44501 157.422 9.328 cv
157.773 9.211 158.164 9.15198 158.594 9.15198 cv
158.813 9.15198 159.02 9.16803 159.219 9.19098 cv
159.418 9.22302 159.605 9.258 159.777 9.30103 cv
161.984 9.30103 li
162.066 9.30499 162.137 9.36298 162.195 9.47302 cv
162.246 9.59003 162.273 9.78101 162.277 10.047 cv
cp
159.762 11.691 mo
159.758 11.32 159.656 11.031 159.449 10.82 cv
159.238 10.617 158.945 10.512 158.57 10.508 cv
158.375 10.512 158.203 10.543 158.063 10.605 cv
157.914 10.672 157.793 10.762 157.699 10.871 cv
157.598 10.984 157.527 11.113 157.484 11.262 cv
157.434 11.41 157.41 11.566 157.414 11.723 cv
157.41 12.082 157.516 12.359 157.727 12.562 cv
157.934 12.77 158.223 12.875 158.594 12.871 cv
158.789 12.875 158.957 12.844 159.105 12.777 cv
159.246 12.719 159.367 12.633 159.469 12.52 cv
159.563 12.414 159.637 12.285 159.688 12.141 cv
159.734 12 159.758 11.852 159.762 11.691 cv
cp
160.223 17.242 mo
160.223 17.004 160.129 16.828 159.941 16.703 cv
159.754 16.582 159.496 16.512 159.168 16.5 cv
157.773 16.461 li
157.637 16.562 157.527 16.656 157.449 16.746 cv
157.367 16.836 157.305 16.922 157.258 17.008 cv
157.207 17.09 157.172 17.172 157.16 17.25 cv
157.141 17.328 157.133 17.406 157.137 17.492 cv
157.133 17.746 157.266 17.945 157.527 18.082 cv
157.789 18.215 158.16 18.281 158.641 18.285 cv
158.934 18.281 159.18 18.25 159.387 18.195 cv
159.586 18.133 159.75 18.055 159.879 17.957 cv
160 17.855 160.09 17.746 160.145 17.625 cv
160.195 17.504 160.223 17.375 160.223 17.242 cv
cp
f
168.473 14.551 mo
168.469 14.949 168.395 15.297 168.25 15.598 cv
168.102 15.898 167.895 16.152 167.625 16.352 cv
167.352 16.559 167.031 16.707 166.664 16.809 cv
166.297 16.906 165.895 16.957 165.465 16.961 cv
165.199 16.957 164.953 16.937 164.719 16.902 cv
164.484 16.859 164.273 16.812 164.086 16.754 cv
163.898 16.695 163.742 16.633 163.617 16.57 cv
163.492 16.508 163.398 16.449 163.344 16.395 cv
163.285 16.34 163.242 16.258 163.215 16.141 cv
163.18 16.027 163.164 15.852 163.168 15.621 cv
163.164 15.473 163.172 15.352 163.184 15.258 cv
163.191 15.168 163.207 15.098 163.23 15.039 cv
163.25 14.988 163.273 14.949 163.309 14.93 cv
163.336 14.914 163.375 14.906 163.422 14.902 cv
163.477 14.906 163.563 14.937 163.676 15 cv
163.785 15.066 163.922 15.141 164.094 15.215 cv
164.258 15.297 164.453 15.367 164.672 15.434 cv
164.891 15.504 165.141 15.539 165.426 15.535 cv
165.602 15.539 165.758 15.52 165.898 15.48 cv
166.031 15.445 166.152 15.395 166.258 15.324 cv
166.355 15.258 166.43 15.172 166.484 15.066 cv
166.531 14.965 166.559 14.844 166.563 14.707 cv
166.559 14.551 166.512 14.418 166.418 14.309 cv
166.324 14.199 166.195 14.102 166.039 14.016 cv
165.875 13.934 165.695 13.855 165.5 13.781 cv
165.297 13.711 165.094 13.633 164.883 13.539 cv
164.672 13.453 164.465 13.352 164.27 13.234 cv
164.066 13.125 163.887 12.984 163.73 12.816 cv
163.566 12.652 163.441 12.453 163.348 12.215 cv
163.254 11.984 163.207 11.703 163.207 11.371 cv
163.207 11.043 163.27 10.738 163.398 10.457 cv
163.527 10.184 163.715 9.94501 163.961 9.74597 cv
164.203 9.55103 164.5 9.39801 164.852 9.28497 cv
165.199 9.17999 165.594 9.125 166.035 9.12097 cv
166.25 9.125 166.461 9.14099 166.668 9.16803 cv
166.871 9.203 167.059 9.242 167.227 9.28497 cv
167.391 9.336 167.531 9.38702 167.648 9.43701 cv
167.762 9.49597 167.844 9.54303 167.895 9.578 cv
167.941 9.62097 167.977 9.65997 168 9.69501 cv
168.02 9.73798 168.031 9.78497 168.043 9.836 cv
168.051 9.89099 168.063 9.95697 168.07 10.035 cv
168.078 10.121 168.082 10.219 168.082 10.336 cv
168.082 10.477 168.078 10.594 168.07 10.68 cv
168.063 10.773 168.047 10.844 168.031 10.891 cv
168.012 10.945 167.988 10.98 167.961 10.996 cv
167.926 11.02 167.891 11.027 167.852 11.023 cv
167.801 11.027 167.727 11 167.633 10.941 cv
167.531 10.891 167.41 10.832 167.262 10.766 cv
167.113 10.707 166.941 10.648 166.746 10.59 cv
166.551 10.539 166.328 10.512 166.082 10.508 cv
165.902 10.512 165.75 10.531 165.621 10.562 cv
165.488 10.602 165.379 10.652 165.301 10.719 cv
165.215 10.789 165.152 10.867 165.113 10.957 cv
165.066 11.051 165.047 11.148 165.051 11.25 cv
165.047 11.41 165.098 11.547 165.199 11.652 cv
165.297 11.766 165.426 11.859 165.59 11.941 cv
165.75 12.027 165.934 12.105 166.141 12.176 cv
166.344 12.25 166.551 12.332 166.762 12.414 cv
166.969 12.504 167.176 12.602 167.387 12.715 cv
167.59 12.828 167.773 12.969 167.934 13.133 cv
168.094 13.301 168.223 13.5 168.324 13.73 cv
168.418 13.965 168.469 14.238 168.473 14.551 cv
cp
f
180.582 12.969 mo
180.578 13.566 180.5 14.109 180.348 14.594 cv
180.188 15.086 179.953 15.504 179.637 15.855 cv
179.32 16.207 178.922 16.48 178.445 16.672 cv
177.965 16.863 177.406 16.957 176.77 16.961 cv
176.148 16.957 175.609 16.875 175.156 16.703 cv
174.695 16.535 174.316 16.285 174.02 15.957 cv
173.715 15.633 173.492 15.23 173.348 14.75 cv
173.203 14.273 173.133 13.727 173.133 13.109 cv
173.133 12.52 173.211 11.98 173.367 11.488 cv
173.523 11 173.762 10.578 174.082 10.227 cv
174.398 9.87903 174.793 9.60498 175.27 9.40997 cv
175.742 9.21899 176.301 9.125 176.941 9.12097 cv
177.566 9.125 178.105 9.20697 178.563 9.375 cv
179.02 9.547 179.398 9.797 179.695 10.121 cv
179.992 10.449 180.215 10.852 180.363 11.328 cv
180.508 11.809 180.578 12.355 180.582 12.969 cv
cp
178.563 13.047 mo
178.559 12.711 178.531 12.395 178.48 12.102 cv
178.422 11.816 178.328 11.566 178.203 11.352 cv
178.07 11.141 177.898 10.973 177.688 10.852 cv
177.469 10.734 177.199 10.676 176.871 10.672 cv
176.582 10.676 176.328 10.73 176.109 10.832 cv
175.891 10.941 175.711 11.098 175.57 11.301 cv
175.43 11.508 175.324 11.754 175.254 12.039 cv
175.184 12.332 175.148 12.66 175.148 13.023 cv
175.148 13.371 175.176 13.687 175.234 13.973 cv
175.289 14.266 175.383 14.516 175.512 14.727 cv
175.637 14.941 175.809 15.105 176.031 15.219 cv
176.246 15.34 176.516 15.398 176.84 15.395 cv
177.133 15.398 177.391 15.344 177.613 15.234 cv
177.828 15.129 178.008 14.977 178.148 14.77 cv
178.289 14.57 178.391 14.324 178.461 14.035 cv
178.523 13.75 178.559 13.422 178.563 13.047 cv
cp
f
186.332 6.914 mo
186.328 7.06598 186.324 7.18701 186.316 7.27698 cv
186.305 7.37097 186.289 7.44098 186.27 7.48798 cv
186.246 7.539 186.223 7.57397 186.199 7.59003 cv
186.172 7.60901 186.145 7.617 186.113 7.617 cv
186.074 7.617 186.031 7.60901 185.992 7.59003 cv
185.945 7.57397 185.891 7.55499 185.828 7.53101 cv
185.758 7.51202 185.684 7.492 185.598 7.47302 cv
185.508 7.45697 185.402 7.44897 185.285 7.44501 cv
185.141 7.44897 185.02 7.46899 184.922 7.51202 cv
184.82 7.55902 184.738 7.62903 184.672 7.72302 cv
184.602 7.82001 184.551 7.94501 184.523 8.09802 cv
184.488 8.25 184.473 8.43701 184.477 8.65997 cv
184.477 9.30103 li
185.746 9.30103 li
185.789 9.30499 185.832 9.31598 185.875 9.34003 cv
185.91 9.367 185.945 9.40997 185.973 9.46899 cv
185.996 9.53101 186.016 9.61298 186.031 9.71503 cv
186.043 9.81598 186.047 9.94501 186.051 10.094 cv
186.047 10.383 186.023 10.586 185.973 10.707 cv
185.918 10.832 185.84 10.895 185.746 10.891 cv
184.477 10.891 li
184.477 16.516 li
184.473 16.57 184.457 16.613 184.43 16.652 cv
184.395 16.691 184.344 16.727 184.273 16.75 cv
184.199 16.777 184.098 16.793 183.969 16.809 cv
183.836 16.82 183.676 16.828 183.492 16.828 cv
183.305 16.828 183.148 16.82 183.023 16.809 cv
182.895 16.793 182.793 16.777 182.719 16.75 cv
182.641 16.727 182.59 16.691 182.563 16.652 cv
182.531 16.613 182.516 16.57 182.52 16.516 cv
182.52 10.891 li
181.648 10.891 li
181.547 10.895 181.473 10.832 181.426 10.707 cv
181.375 10.586 181.348 10.383 181.352 10.094 cv
181.348 9.94501 181.355 9.81598 181.371 9.71503 cv
181.383 9.61298 181.402 9.53101 181.426 9.46899 cv
181.449 9.40997 181.48 9.367 181.52 9.34003 cv
181.559 9.31598 181.602 9.30499 181.656 9.30103 cv
182.52 9.30103 li
182.52 8.71503 li
182.516 8.24597 182.563 7.83197 182.66 7.47302 cv
182.75 7.117 182.898 6.82001 183.102 6.586 cv
183.301 6.35199 183.555 6.17603 183.863 6.05103 cv
184.172 5.93402 184.535 5.87097 184.961 5.87097 cv
185.156 5.87097 185.348 5.89099 185.535 5.922 cv
185.715 5.961 185.859 5.99597 185.965 6.03101 cv
186.066 6.07397 186.137 6.10901 186.176 6.14099 cv
186.211 6.17603 186.242 6.22699 186.266 6.289 cv
186.289 6.35498 186.305 6.43701 186.316 6.539 cv
186.324 6.64099 186.328 6.76599 186.332 6.914 cv
cp
f
194.906 15.832 mo
194.906 16.059 194.891 16.234 194.863 16.355 cv
194.832 16.48 194.793 16.566 194.75 16.613 cv
194.699 16.664 194.633 16.707 194.543 16.746 cv
194.449 16.785 194.34 16.816 194.223 16.848 cv
194.098 16.871 193.965 16.895 193.824 16.914 cv
193.68 16.926 193.539 16.934 193.395 16.937 cv
193.004 16.934 192.664 16.883 192.379 16.789 cv
192.094 16.687 191.859 16.539 191.672 16.332 cv
191.484 16.129 191.344 15.871 191.258 15.559 cv
191.164 15.25 191.121 14.879 191.125 14.449 cv
191.125 10.891 li
190.293 10.891 li
190.191 10.895 190.117 10.832 190.066 10.707 cv
190.012 10.586 189.984 10.383 189.988 10.094 cv
189.984 9.94501 189.992 9.81598 190.008 9.71503 cv
190.02 9.61298 190.039 9.53101 190.066 9.46899 cv
190.09 9.40997 190.121 9.367 190.164 9.34003 cv
190.199 9.31598 190.246 9.30499 190.301 9.30103 cv
191.125 9.30103 li
191.125 7.75 li
191.121 7.703 191.137 7.65601 191.168 7.60901 cv
191.195 7.57001 191.246 7.53497 191.324 7.50403 cv
191.398 7.47998 191.5 7.45697 191.629 7.44098 cv
191.754 7.42999 191.91 7.42603 192.102 7.422 cv
192.289 7.42603 192.449 7.42999 192.578 7.44098 cv
192.703 7.45697 192.805 7.47998 192.879 7.50403 cv
192.949 7.53497 193 7.57001 193.035 7.60901 cv
193.063 7.65601 193.078 7.703 193.082 7.75 cv
193.082 9.30103 li
194.594 9.30103 li
194.645 9.30499 194.691 9.31598 194.73 9.34003 cv
194.77 9.367 194.801 9.40997 194.828 9.46899 cv
194.852 9.53101 194.871 9.61298 194.887 9.71503 cv
194.898 9.81598 194.906 9.94501 194.906 10.094 cv
194.906 10.383 194.879 10.586 194.828 10.707 cv
194.773 10.832 194.699 10.895 194.602 10.891 cv
193.082 10.891 li
193.082 14.156 li
193.078 14.535 193.137 14.82 193.262 15.008 cv
193.379 15.199 193.594 15.293 193.898 15.293 cv
194 15.293 194.094 15.285 194.18 15.266 cv
194.262 15.25 194.336 15.23 194.402 15.203 cv
194.465 15.184 194.52 15.16 194.566 15.141 cv
194.609 15.125 194.648 15.117 194.688 15.113 cv
194.715 15.117 194.746 15.125 194.777 15.141 cv
194.805 15.16 194.824 15.199 194.844 15.25 cv
194.855 15.309 194.871 15.383 194.887 15.473 cv
194.898 15.57 194.906 15.687 194.906 15.832 cv
cp
f
202.969 16.516 mo
202.965 16.57 202.949 16.613 202.922 16.652 cv
202.887 16.691 202.836 16.727 202.766 16.75 cv
202.691 16.777 202.59 16.793 202.465 16.809 cv
202.336 16.82 202.18 16.828 201.996 16.828 cv
201.801 16.828 201.641 16.82 201.516 16.809 cv
201.387 16.793 201.285 16.777 201.215 16.75 cv
201.137 16.727 201.086 16.691 201.059 16.652 cv
201.023 16.613 201.008 16.57 201.012 16.516 cv
201.012 12.551 li
201.008 12.215 200.984 11.949 200.938 11.754 cv
200.887 11.562 200.813 11.398 200.723 11.262 cv
200.629 11.125 200.512 11.02 200.363 10.941 cv
200.215 10.867 200.039 10.828 199.844 10.828 cv
199.59 10.828 199.34 10.922 199.086 11.102 cv
198.832 11.285 198.566 11.547 198.293 11.895 cv
198.293 16.516 li
198.289 16.57 198.273 16.613 198.246 16.652 cv
198.211 16.691 198.156 16.727 198.086 16.75 cv
198.008 16.777 197.91 16.793 197.785 16.809 cv
197.66 16.82 197.5 16.828 197.313 16.828 cv
197.117 16.828 196.961 16.82 196.836 16.809 cv
196.711 16.793 196.609 16.777 196.535 16.75 cv
196.457 16.727 196.402 16.691 196.375 16.652 cv
196.34 16.613 196.324 16.57 196.328 16.516 cv
196.328 6.27002 li
196.324 6.21899 196.34 6.172 196.375 6.12903 cv
196.402 6.09003 196.457 6.05499 196.535 6.02301 cv
196.609 5.99597 196.711 5.97699 196.836 5.95697 cv
196.961 5.94501 197.117 5.93701 197.313 5.93402 cv
197.5 5.93701 197.66 5.94501 197.785 5.95697 cv
197.91 5.97699 198.008 5.99597 198.086 6.02301 cv
198.156 6.05499 198.211 6.09003 198.246 6.12903 cv
198.273 6.172 198.289 6.21899 198.293 6.27002 cv
198.293 10.109 li
198.629 9.78101 198.973 9.53497 199.324 9.367 cv
199.672 9.20697 200.039 9.125 200.422 9.12097 cv
200.891 9.125 201.289 9.203 201.617 9.35498 cv
201.941 9.51599 202.203 9.72699 202.402 9.99597 cv
202.602 10.266 202.746 10.582 202.836 10.941 cv
202.922 11.305 202.965 11.742 202.969 12.254 cv
cp
f
211.254 12.84 mo
211.25 13.078 211.199 13.254 211.094 13.367 cv
210.984 13.484 210.836 13.543 210.656 13.539 cv
206.422 13.539 li
206.418 13.84 206.453 14.109 206.527 14.348 cv
206.594 14.59 206.707 14.793 206.863 14.961 cv
207.016 15.133 207.211 15.262 207.453 15.348 cv
207.691 15.437 207.98 15.48 208.324 15.48 cv
208.664 15.48 208.965 15.457 209.227 15.406 cv
209.484 15.359 209.711 15.305 209.902 15.242 cv
210.09 15.184 210.246 15.129 210.375 15.078 cv
210.496 15.031 210.598 15.008 210.68 15.004 cv
210.723 15.008 210.762 15.016 210.797 15.031 cv
210.824 15.051 210.852 15.082 210.871 15.129 cv
210.891 15.176 210.902 15.242 210.914 15.328 cv
210.918 15.414 210.922 15.523 210.926 15.652 cv
210.922 15.77 210.922 15.867 210.918 15.945 cv
210.91 16.027 210.902 16.094 210.895 16.148 cv
210.883 16.207 210.867 16.258 210.848 16.293 cv
210.828 16.336 210.801 16.371 210.77 16.406 cv
210.734 16.445 210.641 16.496 210.492 16.555 cv
210.336 16.621 210.145 16.684 209.914 16.738 cv
209.676 16.801 209.406 16.848 209.109 16.895 cv
208.805 16.934 208.484 16.957 208.145 16.961 cv
207.523 16.957 206.98 16.883 206.52 16.727 cv
206.051 16.574 205.664 16.336 205.355 16.02 cv
205.039 15.703 204.805 15.305 204.656 14.82 cv
204.5 14.34 204.426 13.773 204.43 13.117 cv
204.426 12.504 204.504 11.945 204.668 11.449 cv
204.824 10.953 205.059 10.535 205.371 10.187 cv
205.676 9.84399 206.051 9.578 206.488 9.39502 cv
206.926 9.21503 207.418 9.125 207.973 9.12097 cv
208.551 9.125 209.051 9.211 209.465 9.37903 cv
209.879 9.55499 210.215 9.79303 210.48 10.094 cv
210.742 10.398 210.938 10.758 211.066 11.172 cv
211.188 11.59 211.25 12.039 211.254 12.527 cv
cp
209.352 12.277 mo
209.363 11.727 209.254 11.293 209.02 10.98 cv
208.785 10.668 208.418 10.512 207.926 10.508 cv
207.676 10.512 207.461 10.559 207.277 10.648 cv
207.09 10.746 206.938 10.871 206.816 11.027 cv
206.691 11.187 206.598 11.375 206.535 11.59 cv
206.469 11.805 206.43 12.035 206.422 12.277 cv
cp
f
222.359 7.539 mo
222.355 7.69897 222.352 7.828 222.34 7.93402 cv
222.324 8.04303 222.301 8.12903 222.277 8.18701 cv
222.246 8.25 222.215 8.297 222.18 8.32397 cv
222.141 8.35901 222.098 8.375 222.055 8.37097 cv
218.758 8.37097 li
218.758 11.086 li
221.852 11.086 li
221.895 11.086 221.938 11.102 221.977 11.125 cv
222.012 11.156 222.043 11.199 222.074 11.258 cv
222.102 11.32 222.121 11.402 222.137 11.504 cv
222.145 11.609 222.152 11.738 222.156 11.895 cv
222.152 12.051 222.145 12.184 222.137 12.285 cv
222.121 12.395 222.102 12.48 222.074 12.543 cv
222.043 12.613 222.012 12.66 221.977 12.687 cv
221.938 12.719 221.895 12.734 221.852 12.73 cv
218.758 12.73 li
218.758 16.484 li
218.754 16.543 218.738 16.594 218.711 16.633 cv
218.676 16.68 218.621 16.715 218.543 16.738 cv
218.461 16.77 218.355 16.789 218.227 16.805 cv
218.094 16.82 217.926 16.828 217.73 16.828 cv
217.527 16.828 217.363 16.82 217.234 16.805 cv
217.098 16.789 216.992 16.77 216.918 16.738 cv
216.836 16.715 216.781 16.68 216.75 16.633 cv
216.715 16.594 216.695 16.543 216.699 16.484 cv
216.699 7.34399 li
216.695 7.117 216.754 6.953 216.875 6.84802 cv
216.988 6.75 217.133 6.69897 217.309 6.69501 cv
222.055 6.69501 li
222.098 6.69897 222.141 6.711 222.18 6.73798 cv
222.215 6.77002 222.246 6.81598 222.277 6.87903 cv
222.301 6.94501 222.324 7.03497 222.34 7.14099 cv
222.352 7.25403 222.355 7.38702 222.359 7.539 cv
cp
f
225.871 16.516 mo
225.867 16.57 225.852 16.613 225.824 16.652 cv
225.789 16.691 225.734 16.727 225.664 16.75 cv
225.586 16.777 225.488 16.793 225.363 16.809 cv
225.238 16.82 225.078 16.828 224.891 16.828 cv
224.695 16.828 224.539 16.82 224.414 16.809 cv
224.289 16.793 224.188 16.777 224.113 16.75 cv
224.035 16.727 223.98 16.691 223.953 16.652 cv
223.918 16.613 223.902 16.57 223.906 16.516 cv
223.906 9.58197 li
223.902 9.53101 223.918 9.48401 223.953 9.44501 cv
223.98 9.40601 224.035 9.375 224.113 9.34399 cv
224.188 9.32001 224.289 9.297 224.414 9.27698 cv
224.539 9.26599 224.695 9.258 224.891 9.25403 cv
225.078 9.258 225.238 9.26599 225.363 9.27698 cv
225.488 9.297 225.586 9.32001 225.664 9.34399 cv
225.734 9.375 225.789 9.40601 225.824 9.44501 cv
225.852 9.48401 225.867 9.53101 225.871 9.58197 cv
cp
226.02 7.211 mo
226.02 7.60901 225.938 7.883 225.777 8.03101 cv
225.613 8.18402 225.316 8.258 224.883 8.25403 cv
224.438 8.258 224.137 8.18402 223.988 8.039 cv
223.832 7.89502 223.758 7.633 223.758 7.25 cv
223.758 6.85498 223.836 6.58197 223.996 6.42999 cv
224.152 6.27698 224.453 6.19897 224.898 6.19897 cv
225.332 6.19897 225.629 6.27301 225.785 6.422 cv
225.941 6.57001 226.02 6.836 226.02 7.211 cv
cp
f
229.797 16.516 mo
229.793 16.57 229.777 16.613 229.75 16.652 cv
229.715 16.691 229.66 16.727 229.59 16.75 cv
229.512 16.777 229.414 16.793 229.289 16.809 cv
229.164 16.82 229.004 16.828 228.816 16.828 cv
228.621 16.828 228.465 16.82 228.34 16.809 cv
228.215 16.793 228.113 16.777 228.039 16.75 cv
227.961 16.727 227.906 16.691 227.879 16.652 cv
227.844 16.613 227.828 16.57 227.832 16.516 cv
227.832 6.27002 li
227.828 6.21899 227.844 6.172 227.879 6.12903 cv
227.906 6.09003 227.961 6.05499 228.039 6.02301 cv
228.113 5.99597 228.215 5.97699 228.34 5.95697 cv
228.465 5.94501 228.621 5.93701 228.816 5.93402 cv
229.004 5.93701 229.164 5.94501 229.289 5.95697 cv
229.414 5.97699 229.512 5.99597 229.59 6.02301 cv
229.66 6.05499 229.715 6.09003 229.75 6.12903 cv
229.777 6.172 229.793 6.21899 229.797 6.27002 cv
cp
f
235.922 15.832 mo
235.922 16.059 235.906 16.234 235.879 16.355 cv
235.848 16.48 235.809 16.566 235.766 16.613 cv
235.715 16.664 235.648 16.707 235.559 16.746 cv
235.465 16.785 235.355 16.816 235.238 16.848 cv
235.113 16.871 234.98 16.895 234.84 16.914 cv
234.695 16.926 234.555 16.934 234.41 16.937 cv
234.02 16.934 233.68 16.883 233.395 16.789 cv
233.109 16.687 232.875 16.539 232.688 16.332 cv
232.5 16.129 232.359 15.871 232.273 15.559 cv
232.18 15.25 232.137 14.879 232.141 14.449 cv
232.141 10.891 li
231.309 10.891 li
231.207 10.895 231.133 10.832 231.082 10.707 cv
231.027 10.586 231 10.383 231.004 10.094 cv
231 9.94501 231.008 9.81598 231.023 9.71503 cv
231.035 9.61298 231.055 9.53101 231.082 9.46899 cv
231.105 9.40997 231.137 9.367 231.18 9.34003 cv
231.215 9.31598 231.262 9.30499 231.316 9.30103 cv
232.141 9.30103 li
232.141 7.75 li
232.137 7.703 232.152 7.65601 232.184 7.60901 cv
232.211 7.57001 232.262 7.53497 232.34 7.50403 cv
232.414 7.47998 232.516 7.45697 232.645 7.44098 cv
232.77 7.42999 232.926 7.42603 233.117 7.422 cv
233.305 7.42603 233.465 7.42999 233.594 7.44098 cv
233.719 7.45697 233.82 7.47998 233.895 7.50403 cv
233.965 7.53497 234.016 7.57001 234.051 7.60901 cv
234.078 7.65601 234.094 7.703 234.098 7.75 cv
234.098 9.30103 li
235.609 9.30103 li
235.66 9.30499 235.707 9.31598 235.746 9.34003 cv
235.785 9.367 235.816 9.40997 235.844 9.46899 cv
235.867 9.53101 235.887 9.61298 235.902 9.71503 cv
235.914 9.81598 235.922 9.94501 235.922 10.094 cv
235.922 10.383 235.895 10.586 235.844 10.707 cv
235.789 10.832 235.715 10.895 235.617 10.891 cv
234.098 10.891 li
234.098 14.156 li
234.094 14.535 234.152 14.82 234.277 15.008 cv
234.395 15.199 234.609 15.293 234.914 15.293 cv
235.016 15.293 235.109 15.285 235.195 15.266 cv
235.277 15.25 235.352 15.23 235.418 15.203 cv
235.48 15.184 235.535 15.16 235.582 15.141 cv
235.625 15.125 235.664 15.117 235.703 15.113 cv
235.73 15.117 235.762 15.125 235.793 15.141 cv
235.82 15.16 235.84 15.199 235.859 15.25 cv
235.871 15.309 235.887 15.383 235.902 15.473 cv
235.914 15.57 235.922 15.687 235.922 15.832 cv
cp
f
243.512 12.84 mo
243.508 13.078 243.457 13.254 243.352 13.367 cv
243.242 13.484 243.094 13.543 242.914 13.539 cv
238.68 13.539 li
238.676 13.84 238.711 14.109 238.785 14.348 cv
238.852 14.59 238.965 14.793 239.121 14.961 cv
239.273 15.133 239.469 15.262 239.711 15.348 cv
239.949 15.437 240.238 15.48 240.582 15.48 cv
240.922 15.48 241.223 15.457 241.484 15.406 cv
241.742 15.359 241.969 15.305 242.16 15.242 cv
242.348 15.184 242.504 15.129 242.633 15.078 cv
242.754 15.031 242.855 15.008 242.938 15.004 cv
242.98 15.008 243.02 15.016 243.055 15.031 cv
243.082 15.051 243.109 15.082 243.129 15.129 cv
243.148 15.176 243.16 15.242 243.172 15.328 cv
243.176 15.414 243.18 15.523 243.184 15.652 cv
243.18 15.77 243.18 15.867 243.176 15.945 cv
243.168 16.027 243.16 16.094 243.152 16.148 cv
243.141 16.207 243.125 16.258 243.105 16.293 cv
243.086 16.336 243.059 16.371 243.027 16.406 cv
242.992 16.445 242.898 16.496 242.75 16.555 cv
242.594 16.621 242.402 16.684 242.172 16.738 cv
241.934 16.801 241.664 16.848 241.367 16.895 cv
241.063 16.934 240.742 16.957 240.402 16.961 cv
239.781 16.957 239.238 16.883 238.777 16.727 cv
238.309 16.574 237.922 16.336 237.613 16.02 cv
237.297 15.703 237.063 15.305 236.914 14.82 cv
236.758 14.34 236.684 13.773 236.688 13.117 cv
236.684 12.504 236.762 11.945 236.926 11.449 cv
237.082 10.953 237.316 10.535 237.629 10.187 cv
237.934 9.84399 238.309 9.578 238.746 9.39502 cv
239.184 9.21503 239.676 9.125 240.23 9.12097 cv
240.809 9.125 241.309 9.211 241.723 9.37903 cv
242.137 9.55499 242.473 9.79303 242.738 10.094 cv
243 10.398 243.195 10.758 243.324 11.172 cv
243.445 11.59 243.508 12.039 243.512 12.527 cv
cp
241.609 12.277 mo
241.621 11.727 241.512 11.293 241.277 10.98 cv
241.043 10.668 240.676 10.512 240.184 10.508 cv
239.934 10.512 239.719 10.559 239.535 10.648 cv
239.348 10.746 239.195 10.871 239.074 11.027 cv
238.949 11.187 238.855 11.375 238.793 11.59 cv
238.727 11.805 238.688 12.035 238.68 12.277 cv
cp
f
249.586 10.211 mo
249.586 10.402 249.578 10.555 249.57 10.672 cv
249.555 10.793 249.539 10.887 249.523 10.953 cv
249.5 11.023 249.473 11.07 249.441 11.094 cv
249.402 11.121 249.359 11.133 249.313 11.133 cv
249.266 11.133 249.219 11.125 249.172 11.105 cv
249.117 11.09 249.059 11.07 248.996 11.047 cv
248.926 11.027 248.855 11.008 248.781 10.988 cv
248.699 10.973 248.613 10.965 248.523 10.961 cv
248.41 10.965 248.301 10.984 248.195 11.027 cv
248.086 11.074 247.973 11.145 247.859 11.234 cv
247.738 11.328 247.617 11.453 247.492 11.605 cv
247.363 11.766 247.227 11.957 247.082 12.184 cv
247.082 16.516 li
247.078 16.57 247.063 16.613 247.035 16.652 cv
247 16.691 246.945 16.727 246.875 16.75 cv
246.797 16.777 246.699 16.793 246.574 16.809 cv
246.449 16.82 246.289 16.828 246.102 16.828 cv
245.906 16.828 245.75 16.82 245.625 16.809 cv
245.5 16.793 245.398 16.777 245.324 16.75 cv
245.246 16.727 245.191 16.691 245.164 16.652 cv
245.129 16.613 245.113 16.57 245.117 16.516 cv
245.117 9.56598 li
245.113 9.52002 245.129 9.47302 245.156 9.42999 cv
245.18 9.39502 245.227 9.36298 245.297 9.33197 cv
245.363 9.30902 245.449 9.289 245.559 9.27301 cv
245.664 9.26599 245.797 9.258 245.961 9.25403 cv
246.125 9.258 246.262 9.26599 246.371 9.27301 cv
246.477 9.289 246.563 9.30902 246.625 9.33197 cv
246.684 9.36298 246.727 9.39502 246.754 9.42999 cv
246.777 9.47302 246.789 9.52002 246.793 9.56598 cv
246.793 10.43 li
246.973 10.172 247.145 9.961 247.309 9.789 cv
247.465 9.625 247.621 9.48798 247.77 9.38702 cv
247.914 9.289 248.059 9.22302 248.203 9.17999 cv
248.348 9.14502 248.492 9.125 248.641 9.12097 cv
248.707 9.125 248.781 9.12903 248.859 9.133 cv
248.938 9.14502 249.016 9.15601 249.102 9.172 cv
249.18 9.19098 249.254 9.211 249.32 9.23401 cv
249.379 9.258 249.426 9.28497 249.457 9.30902 cv
249.484 9.34003 249.504 9.367 249.52 9.39502 cv
249.531 9.42999 249.543 9.47302 249.555 9.52301 cv
249.563 9.58197 249.57 9.664 249.578 9.77002 cv
249.582 9.87903 249.586 10.027 249.586 10.211 cv
cp
f
252.746 16.516 mo
252.742 16.57 252.727 16.613 252.699 16.652 cv
252.664 16.691 252.609 16.727 252.539 16.75 cv
252.461 16.777 252.363 16.793 252.238 16.809 cv
252.113 16.82 251.953 16.828 251.766 16.828 cv
251.57 16.828 251.414 16.82 251.289 16.809 cv
251.164 16.793 251.063 16.777 250.988 16.75 cv
250.91 16.727 250.855 16.691 250.828 16.652 cv
250.793 16.613 250.777 16.57 250.781 16.516 cv
250.781 9.58197 li
250.777 9.53101 250.793 9.48401 250.828 9.44501 cv
250.855 9.40601 250.91 9.375 250.988 9.34399 cv
251.063 9.32001 251.164 9.297 251.289 9.27698 cv
251.414 9.26599 251.57 9.258 251.766 9.25403 cv
251.953 9.258 252.113 9.26599 252.238 9.27698 cv
252.363 9.297 252.461 9.32001 252.539 9.34399 cv
252.609 9.375 252.664 9.40601 252.699 9.44501 cv
252.727 9.48401 252.742 9.53101 252.746 9.58197 cv
cp
252.895 7.211 mo
252.895 7.60901 252.813 7.883 252.652 8.03101 cv
252.488 8.18402 252.191 8.258 251.758 8.25403 cv
251.313 8.258 251.012 8.18402 250.863 8.039 cv
250.707 7.89502 250.633 7.633 250.633 7.25 cv
250.633 6.85498 250.711 6.58197 250.871 6.42999 cv
251.027 6.27698 251.328 6.19897 251.773 6.19897 cv
252.207 6.19897 252.504 6.27301 252.66 6.422 cv
252.816 6.57001 252.895 6.836 252.895 7.211 cv
cp
f
261.348 16.516 mo
261.344 16.57 261.328 16.613 261.301 16.652 cv
261.266 16.691 261.215 16.727 261.145 16.75 cv
261.07 16.777 260.969 16.793 260.844 16.809 cv
260.715 16.82 260.559 16.828 260.375 16.828 cv
260.18 16.828 260.02 16.82 259.895 16.809 cv
259.766 16.793 259.664 16.777 259.594 16.75 cv
259.516 16.727 259.465 16.691 259.438 16.652 cv
259.402 16.613 259.387 16.57 259.391 16.516 cv
259.391 12.551 li
259.387 12.215 259.363 11.949 259.316 11.754 cv
259.266 11.562 259.191 11.398 259.102 11.262 cv
259.008 11.125 258.891 11.02 258.742 10.941 cv
258.594 10.867 258.418 10.828 258.223 10.828 cv
257.969 10.828 257.719 10.922 257.465 11.102 cv
257.211 11.285 256.945 11.547 256.672 11.895 cv
256.672 16.516 li
256.668 16.57 256.652 16.613 256.625 16.652 cv
256.59 16.691 256.535 16.727 256.465 16.75 cv
256.387 16.777 256.289 16.793 256.164 16.809 cv
256.039 16.82 255.879 16.828 255.691 16.828 cv
255.496 16.828 255.34 16.82 255.215 16.809 cv
255.09 16.793 254.988 16.777 254.914 16.75 cv
254.836 16.727 254.781 16.691 254.754 16.652 cv
254.719 16.613 254.703 16.57 254.707 16.516 cv
254.707 9.56598 li
254.703 9.52002 254.719 9.47302 254.746 9.42999 cv
254.77 9.39502 254.816 9.36298 254.887 9.33197 cv
254.953 9.30902 255.039 9.289 255.148 9.27301 cv
255.254 9.26599 255.387 9.258 255.551 9.25403 cv
255.715 9.258 255.852 9.26599 255.961 9.27301 cv
256.066 9.289 256.152 9.30902 256.215 9.33197 cv
256.273 9.36298 256.316 9.39502 256.344 9.42999 cv
256.367 9.47302 256.379 9.52002 256.383 9.56598 cv
256.383 10.367 li
256.766 9.95697 257.156 9.64502 257.555 9.43402 cv
257.949 9.22699 258.367 9.125 258.801 9.12097 cv
259.27 9.125 259.668 9.203 259.996 9.35498 cv
260.32 9.51599 260.582 9.72699 260.781 9.992 cv
260.98 10.262 261.125 10.574 261.215 10.93 cv
261.301 11.289 261.344 11.719 261.348 12.223 cv
cp
f
269.543 10.047 mo
269.539 10.301 269.512 10.484 269.457 10.602 cv
269.398 10.723 269.328 10.781 269.25 10.781 cv
268.43 10.781 li
268.543 10.906 268.625 11.051 268.676 11.207 cv
268.723 11.367 268.746 11.531 268.75 11.699 cv
268.746 12.109 268.68 12.469 268.547 12.781 cv
268.41 13.098 268.215 13.363 267.965 13.574 cv
267.711 13.793 267.41 13.957 267.055 14.066 cv
266.695 14.184 266.297 14.238 265.867 14.234 cv
265.641 14.238 265.43 14.211 265.227 14.152 cv
265.023 14.102 264.867 14.039 264.758 13.961 cv
264.695 14.031 264.637 14.109 264.59 14.203 cv
264.539 14.297 264.516 14.402 264.52 14.512 cv
264.516 14.668 264.582 14.789 264.715 14.883 cv
264.844 14.98 265.031 15.035 265.273 15.043 cv
266.965 15.105 li
267.359 15.121 267.711 15.18 268.02 15.273 cv
268.328 15.375 268.59 15.508 268.801 15.68 cv
269.012 15.855 269.172 16.066 269.281 16.309 cv
269.391 16.555 269.445 16.828 269.449 17.141 cv
269.445 17.477 269.371 17.801 269.223 18.109 cv
269.074 18.41 268.848 18.672 268.547 18.898 cv
268.242 19.117 267.863 19.297 267.41 19.43 cv
266.953 19.559 266.422 19.621 265.82 19.625 cv
265.223 19.621 264.719 19.574 264.301 19.484 cv
263.883 19.387 263.539 19.258 263.273 19.094 cv
263.004 18.926 262.809 18.727 262.691 18.5 cv
262.566 18.266 262.508 18.012 262.508 17.738 cv
262.508 17.566 262.527 17.406 262.574 17.25 cv
262.613 17.094 262.68 16.941 262.77 16.801 cv
262.852 16.656 262.957 16.523 263.082 16.391 cv
263.207 16.262 263.348 16.137 263.512 16.016 cv
263.285 15.902 263.113 15.742 262.992 15.531 cv
262.871 15.328 262.813 15.102 262.813 14.855 cv
262.813 14.555 262.879 14.277 263.02 14.02 cv
263.156 13.77 263.34 13.539 263.566 13.336 cv
263.383 13.156 263.238 12.941 263.129 12.684 cv
263.02 12.434 262.965 12.113 262.969 11.73 cv
262.965 11.328 263.035 10.969 263.18 10.645 cv
263.32 10.328 263.52 10.059 263.777 9.836 cv
264.031 9.617 264.336 9.44501 264.688 9.328 cv
265.039 9.211 265.43 9.15198 265.859 9.15198 cv
266.078 9.15198 266.285 9.16803 266.484 9.19098 cv
266.684 9.22302 266.871 9.258 267.043 9.30103 cv
269.25 9.30103 li
269.332 9.30499 269.402 9.36298 269.461 9.47302 cv
269.512 9.59003 269.539 9.78101 269.543 10.047 cv
cp
267.027 11.691 mo
267.023 11.32 266.922 11.031 266.715 10.82 cv
266.504 10.617 266.211 10.512 265.836 10.508 cv
265.641 10.512 265.469 10.543 265.328 10.605 cv
265.18 10.672 265.059 10.762 264.965 10.871 cv
264.863 10.984 264.793 11.113 264.75 11.262 cv
264.699 11.41 264.676 11.566 264.68 11.723 cv
264.676 12.082 264.781 12.359 264.992 12.562 cv
265.199 12.77 265.488 12.875 265.859 12.871 cv
266.055 12.875 266.223 12.844 266.371 12.777 cv
266.512 12.719 266.633 12.633 266.734 12.52 cv
266.828 12.414 266.902 12.285 266.953 12.141 cv
267 12 267.023 11.852 267.027 11.691 cv
cp
267.488 17.242 mo
267.488 17.004 267.395 16.828 267.207 16.703 cv
267.02 16.582 266.762 16.512 266.434 16.5 cv
265.039 16.461 li
264.902 16.562 264.793 16.656 264.715 16.746 cv
264.633 16.836 264.57 16.922 264.523 17.008 cv
264.473 17.09 264.438 17.172 264.426 17.25 cv
264.406 17.328 264.398 17.406 264.402 17.492 cv
264.398 17.746 264.531 17.945 264.793 18.082 cv
265.055 18.215 265.426 18.281 265.906 18.285 cv
266.199 18.281 266.445 18.25 266.652 18.195 cv
266.852 18.133 267.016 18.055 267.145 17.957 cv
267.266 17.855 267.355 17.746 267.41 17.625 cv
267.461 17.504 267.488 17.375 267.488 17.242 cv
cp
f
281.453 7.539 mo
281.449 7.69501 281.441 7.82397 281.434 7.92603 cv
281.418 8.03497 281.398 8.12097 281.375 8.18402 cv
281.344 8.25 281.313 8.297 281.277 8.32397 cv
281.234 8.35901 281.191 8.375 281.148 8.37097 cv
278.625 8.37097 li
278.625 16.5 li
278.625 16.555 278.605 16.602 278.574 16.641 cv
278.535 16.684 278.48 16.719 278.406 16.742 cv
278.324 16.77 278.219 16.789 278.09 16.805 cv
277.953 16.82 277.789 16.828 277.594 16.828 cv
277.398 16.828 277.234 16.82 277.102 16.805 cv
276.969 16.789 276.863 16.77 276.785 16.742 cv
276.707 16.719 276.648 16.684 276.617 16.641 cv
276.578 16.602 276.563 16.555 276.566 16.5 cv
276.566 8.37097 li
274.043 8.37097 li
273.988 8.375 273.941 8.35901 273.91 8.32397 cv
273.871 8.297 273.84 8.25 273.816 8.18402 cv
273.785 8.12097 273.766 8.03497 273.758 7.92603 cv
273.742 7.82397 273.738 7.69501 273.738 7.539 cv
273.738 7.38702 273.742 7.25403 273.758 7.14099 cv
273.766 7.03497 273.785 6.94501 273.816 6.87903 cv
273.84 6.81598 273.871 6.77002 273.91 6.73798 cv
273.941 6.711 273.988 6.69897 274.043 6.69501 cv
281.148 6.69501 li
281.191 6.69897 281.234 6.711 281.277 6.73798 cv
281.313 6.77002 281.344 6.81598 281.375 6.87903 cv
281.398 6.94501 281.418 7.03497 281.434 7.14099 cv
281.441 7.25403 281.449 7.38702 281.453 7.539 cv
cp
f
284.492 16.516 mo
284.488 16.57 284.473 16.613 284.445 16.652 cv
284.41 16.691 284.355 16.727 284.285 16.75 cv
284.207 16.777 284.109 16.793 283.984 16.809 cv
283.859 16.82 283.699 16.828 283.512 16.828 cv
283.316 16.828 283.16 16.82 283.035 16.809 cv
282.91 16.793 282.809 16.777 282.734 16.75 cv
282.656 16.727 282.602 16.691 282.574 16.652 cv
282.539 16.613 282.523 16.57 282.527 16.516 cv
282.527 9.58197 li
282.523 9.53101 282.539 9.48401 282.574 9.44501 cv
282.602 9.40601 282.656 9.375 282.734 9.34399 cv
282.809 9.32001 282.91 9.297 283.035 9.27698 cv
283.16 9.26599 283.316 9.258 283.512 9.25403 cv
283.699 9.258 283.859 9.26599 283.984 9.27698 cv
284.109 9.297 284.207 9.32001 284.285 9.34399 cv
284.355 9.375 284.41 9.40601 284.445 9.44501 cv
284.473 9.48401 284.488 9.53101 284.492 9.58197 cv
cp
284.641 7.211 mo
284.641 7.60901 284.559 7.883 284.398 8.03101 cv
284.234 8.18402 283.938 8.258 283.504 8.25403 cv
283.059 8.258 282.758 8.18402 282.609 8.039 cv
282.453 7.89502 282.379 7.633 282.379 7.25 cv
282.379 6.85498 282.457 6.58197 282.617 6.42999 cv
282.773 6.27698 283.074 6.19897 283.52 6.19897 cv
283.953 6.19897 284.25 6.27301 284.406 6.422 cv
284.563 6.57001 284.641 6.836 284.641 7.211 cv
cp
f
297.543 16.516 mo
297.539 16.57 297.523 16.613 297.496 16.652 cv
297.461 16.691 297.41 16.727 297.34 16.75 cv
297.266 16.777 297.164 16.793 297.043 16.809 cv
296.918 16.82 296.762 16.828 296.57 16.828 cv
296.371 16.828 296.211 16.82 296.086 16.809 cv
295.961 16.793 295.859 16.777 295.785 16.75 cv
295.707 16.727 295.656 16.691 295.629 16.652 cv
295.602 16.613 295.586 16.57 295.59 16.516 cv
295.59 12.395 li
295.586 12.164 295.566 11.949 295.523 11.754 cv
295.477 11.562 295.406 11.398 295.32 11.262 cv
295.227 11.125 295.113 11.02 294.977 10.941 cv
294.836 10.867 294.672 10.828 294.48 10.828 cv
294.246 10.828 294.008 10.922 293.77 11.102 cv
293.531 11.285 293.273 11.547 292.992 11.895 cv
292.992 16.516 li
292.992 16.57 292.977 16.613 292.945 16.652 cv
292.914 16.691 292.859 16.727 292.785 16.75 cv
292.707 16.777 292.605 16.793 292.484 16.809 cv
292.359 16.82 292.207 16.828 292.02 16.828 cv
291.824 16.828 291.664 16.82 291.543 16.809 cv
291.414 16.793 291.313 16.777 291.242 16.75 cv
291.164 16.727 291.113 16.691 291.082 16.652 cv
291.051 16.613 291.035 16.57 291.035 16.516 cv
291.035 12.395 li
291.035 12.164 291.012 11.949 290.969 11.754 cv
290.926 11.562 290.859 11.398 290.773 11.262 cv
290.68 11.125 290.566 11.02 290.43 10.941 cv
290.285 10.867 290.121 10.828 289.938 10.828 cv
289.695 10.828 289.457 10.922 289.219 11.102 cv
288.98 11.285 288.723 11.547 288.449 11.895 cv
288.449 16.516 li
288.445 16.57 288.43 16.613 288.402 16.652 cv
288.367 16.691 288.313 16.727 288.242 16.75 cv
288.164 16.777 288.066 16.793 287.941 16.809 cv
287.816 16.82 287.656 16.828 287.469 16.828 cv
287.273 16.828 287.117 16.82 286.992 16.809 cv
286.867 16.793 286.766 16.777 286.691 16.75 cv
286.613 16.727 286.559 16.691 286.531 16.652 cv
286.496 16.613 286.48 16.57 286.484 16.516 cv
286.484 9.56598 li
286.48 9.52002 286.496 9.47302 286.523 9.42999 cv
286.547 9.39502 286.594 9.36298 286.664 9.33197 cv
286.73 9.30902 286.816 9.289 286.926 9.27301 cv
287.031 9.26599 287.164 9.258 287.328 9.25403 cv
287.492 9.258 287.629 9.26599 287.738 9.27301 cv
287.844 9.289 287.93 9.30902 287.992 9.33197 cv
288.051 9.36298 288.094 9.39502 288.121 9.42999 cv
288.145 9.47302 288.156 9.52002 288.16 9.56598 cv
288.16 10.367 li
288.543 9.95697 288.926 9.64502 289.309 9.43402 cv
289.688 9.22699 290.09 9.125 290.508 9.12097 cv
290.793 9.125 291.047 9.15198 291.277 9.211 cv
291.504 9.27301 291.711 9.35901 291.891 9.46899 cv
292.07 9.58197 292.223 9.71899 292.352 9.87097 cv
292.48 10.027 292.59 10.199 292.68 10.391 cv
292.887 10.168 293.09 9.97699 293.293 9.81598 cv
293.488 9.65601 293.688 9.52301 293.883 9.422 cv
294.078 9.32001 294.273 9.24597 294.469 9.19501 cv
294.664 9.14801 294.863 9.125 295.066 9.12097 cv
295.527 9.125 295.914 9.203 296.234 9.35498 cv
296.547 9.51599 296.805 9.72699 297 9.992 cv
297.195 10.262 297.332 10.574 297.418 10.93 cv
297.496 11.289 297.539 11.668 297.543 12.066 cv
cp
f
305.883 12.84 mo
305.879 13.078 305.828 13.254 305.723 13.367 cv
305.613 13.484 305.465 13.543 305.285 13.539 cv
301.051 13.539 li
301.047 13.84 301.082 14.109 301.156 14.348 cv
301.223 14.59 301.336 14.793 301.492 14.961 cv
301.645 15.133 301.84 15.262 302.082 15.348 cv
302.32 15.437 302.609 15.48 302.953 15.48 cv
303.293 15.48 303.594 15.457 303.855 15.406 cv
304.113 15.359 304.34 15.305 304.531 15.242 cv
304.719 15.184 304.875 15.129 305.004 15.078 cv
305.125 15.031 305.227 15.008 305.309 15.004 cv
305.352 15.008 305.391 15.016 305.426 15.031 cv
305.453 15.051 305.48 15.082 305.5 15.129 cv
305.52 15.176 305.531 15.242 305.543 15.328 cv
305.547 15.414 305.551 15.523 305.555 15.652 cv
305.551 15.77 305.551 15.867 305.547 15.945 cv
305.539 16.027 305.531 16.094 305.523 16.148 cv
305.512 16.207 305.496 16.258 305.477 16.293 cv
305.457 16.336 305.43 16.371 305.398 16.406 cv
305.363 16.445 305.27 16.496 305.121 16.555 cv
304.965 16.621 304.773 16.684 304.543 16.738 cv
304.305 16.801 304.035 16.848 303.738 16.895 cv
303.434 16.934 303.113 16.957 302.773 16.961 cv
302.152 16.957 301.609 16.883 301.148 16.727 cv
300.68 16.574 300.293 16.336 299.984 16.02 cv
299.668 15.703 299.434 15.305 299.285 14.82 cv
299.129 14.34 299.055 13.773 299.059 13.117 cv
299.055 12.504 299.133 11.945 299.297 11.449 cv
299.453 10.953 299.688 10.535 300 10.187 cv
300.305 9.84399 300.68 9.578 301.117 9.39502 cv
301.555 9.21503 302.047 9.125 302.602 9.12097 cv
303.18 9.125 303.68 9.211 304.094 9.37903 cv
304.508 9.55499 304.844 9.79303 305.109 10.094 cv
305.371 10.398 305.566 10.758 305.695 11.172 cv
305.816 11.59 305.879 12.039 305.883 12.527 cv
cp
303.98 12.277 mo
303.992 11.727 303.883 11.293 303.648 10.98 cv
303.414 10.668 303.047 10.512 302.555 10.508 cv
302.305 10.512 302.09 10.559 301.906 10.648 cv
301.719 10.746 301.566 10.871 301.445 11.027 cv
301.32 11.187 301.227 11.375 301.164 11.59 cv
301.098 11.805 301.059 12.035 301.051 12.277 cv
cp
f
312.383 14.551 mo
312.379 14.949 312.305 15.297 312.16 15.598 cv
312.012 15.898 311.805 16.152 311.535 16.352 cv
311.262 16.559 310.941 16.707 310.574 16.809 cv
310.207 16.906 309.805 16.957 309.375 16.961 cv
309.109 16.957 308.863 16.937 308.629 16.902 cv
308.395 16.859 308.184 16.812 307.996 16.754 cv
307.809 16.695 307.652 16.633 307.527 16.57 cv
307.402 16.508 307.309 16.449 307.254 16.395 cv
307.195 16.34 307.152 16.258 307.125 16.141 cv
307.09 16.027 307.074 15.852 307.078 15.621 cv
307.074 15.473 307.082 15.352 307.094 15.258 cv
307.102 15.168 307.117 15.098 307.141 15.039 cv
307.16 14.988 307.184 14.949 307.219 14.93 cv
307.246 14.914 307.285 14.906 307.332 14.902 cv
307.387 14.906 307.473 14.937 307.586 15 cv
307.695 15.066 307.832 15.141 308.004 15.215 cv
308.168 15.297 308.363 15.367 308.582 15.434 cv
308.801 15.504 309.051 15.539 309.336 15.535 cv
309.512 15.539 309.668 15.52 309.809 15.48 cv
309.941 15.445 310.063 15.395 310.168 15.324 cv
310.266 15.258 310.34 15.172 310.395 15.066 cv
310.441 14.965 310.469 14.844 310.473 14.707 cv
310.469 14.551 310.422 14.418 310.328 14.309 cv
310.234 14.199 310.105 14.102 309.949 14.016 cv
309.785 13.934 309.605 13.855 309.41 13.781 cv
309.207 13.711 309.004 13.633 308.793 13.539 cv
308.582 13.453 308.375 13.352 308.18 13.234 cv
307.977 13.125 307.797 12.984 307.641 12.816 cv
307.477 12.652 307.352 12.453 307.258 12.215 cv
307.164 11.984 307.117 11.703 307.117 11.371 cv
307.117 11.043 307.18 10.738 307.309 10.457 cv
307.438 10.184 307.625 9.94501 307.871 9.74597 cv
308.113 9.55103 308.41 9.39801 308.762 9.28497 cv
309.109 9.17999 309.504 9.125 309.945 9.12097 cv
310.16 9.125 310.371 9.14099 310.578 9.16803 cv
310.781 9.203 310.969 9.242 311.137 9.28497 cv
311.301 9.336 311.441 9.38702 311.559 9.43701 cv
311.672 9.49597 311.754 9.54303 311.805 9.578 cv
311.852 9.62097 311.887 9.65997 311.91 9.69501 cv
311.93 9.73798 311.941 9.78497 311.953 9.836 cv
311.961 9.89099 311.973 9.95697 311.98 10.035 cv
311.988 10.121 311.992 10.219 311.992 10.336 cv
311.992 10.477 311.988 10.594 311.98 10.68 cv
311.973 10.773 311.957 10.844 311.941 10.891 cv
311.922 10.945 311.898 10.98 311.871 10.996 cv
311.836 11.02 311.801 11.027 311.762 11.023 cv
311.711 11.027 311.637 11 311.543 10.941 cv
311.441 10.891 311.32 10.832 311.172 10.766 cv
311.023 10.707 310.852 10.648 310.656 10.59 cv
310.461 10.539 310.238 10.512 309.992 10.508 cv
309.813 10.512 309.66 10.531 309.531 10.562 cv
309.398 10.602 309.289 10.652 309.211 10.719 cv
309.125 10.789 309.063 10.867 309.023 10.957 cv
308.977 11.051 308.957 11.148 308.961 11.25 cv
308.957 11.41 309.008 11.547 309.109 11.652 cv
309.207 11.766 309.336 11.859 309.5 11.941 cv
309.66 12.027 309.844 12.105 310.051 12.176 cv
310.254 12.25 310.461 12.332 310.672 12.414 cv
310.879 12.504 311.086 12.602 311.297 12.715 cv
311.5 12.828 311.684 12.969 311.844 13.133 cv
312.004 13.301 312.133 13.5 312.234 13.73 cv
312.328 13.965 312.379 14.238 312.383 14.551 cv
cp
f
324.574 12.969 mo
324.57 13.566 324.492 14.109 324.34 14.594 cv
324.18 15.086 323.945 15.504 323.629 15.855 cv
323.313 16.207 322.914 16.48 322.438 16.672 cv
321.957 16.863 321.398 16.957 320.762 16.961 cv
320.141 16.957 319.602 16.875 319.148 16.703 cv
318.688 16.535 318.309 16.285 318.012 15.957 cv
317.707 15.633 317.484 15.23 317.34 14.75 cv
317.195 14.273 317.125 13.727 317.125 13.109 cv
317.125 12.52 317.203 11.98 317.359 11.488 cv
317.516 11 317.754 10.578 318.074 10.227 cv
318.391 9.87903 318.785 9.60498 319.262 9.40997 cv
319.734 9.21899 320.293 9.125 320.934 9.12097 cv
321.559 9.125 322.098 9.20697 322.555 9.375 cv
323.012 9.547 323.391 9.797 323.688 10.121 cv
323.984 10.449 324.207 10.852 324.355 11.328 cv
324.5 11.809 324.57 12.355 324.574 12.969 cv
cp
322.555 13.047 mo
322.551 12.711 322.523 12.395 322.473 12.102 cv
322.414 11.816 322.32 11.566 322.195 11.352 cv
322.063 11.141 321.891 10.973 321.68 10.852 cv
321.461 10.734 321.191 10.676 320.863 10.672 cv
320.574 10.676 320.32 10.73 320.102 10.832 cv
319.883 10.941 319.703 11.098 319.563 11.301 cv
319.422 11.508 319.316 11.754 319.246 12.039 cv
319.176 12.332 319.141 12.66 319.141 13.023 cv
319.141 13.371 319.168 13.687 319.227 13.973 cv
319.281 14.266 319.375 14.516 319.504 14.727 cv
319.629 14.941 319.801 15.105 320.023 15.219 cv
320.238 15.34 320.508 15.398 320.832 15.395 cv
321.125 15.398 321.383 15.344 321.605 15.234 cv
321.82 15.129 322 14.977 322.141 14.77 cv
322.281 14.57 322.383 14.324 322.453 14.035 cv
322.516 13.75 322.551 13.422 322.555 13.047 cv
cp
f
330.355 6.914 mo
330.352 7.06598 330.348 7.18701 330.34 7.27698 cv
330.328 7.37097 330.313 7.44098 330.293 7.48798 cv
330.27 7.539 330.246 7.57397 330.223 7.59003 cv
330.195 7.60901 330.168 7.617 330.137 7.617 cv
330.098 7.617 330.055 7.60901 330.016 7.59003 cv
329.969 7.57397 329.914 7.55499 329.852 7.53101 cv
329.781 7.51202 329.707 7.492 329.621 7.47302 cv
329.531 7.45697 329.426 7.44897 329.309 7.44501 cv
329.164 7.44897 329.043 7.46899 328.945 7.51202 cv
328.844 7.55902 328.762 7.62903 328.695 7.72302 cv
328.625 7.82001 328.574 7.94501 328.547 8.09802 cv
328.512 8.25 328.496 8.43701 328.5 8.65997 cv
328.5 9.30103 li
329.77 9.30103 li
329.813 9.30499 329.855 9.31598 329.898 9.34003 cv
329.934 9.367 329.969 9.40997 329.996 9.46899 cv
330.02 9.53101 330.039 9.61298 330.055 9.71503 cv
330.066 9.81598 330.07 9.94501 330.074 10.094 cv
330.07 10.383 330.047 10.586 329.996 10.707 cv
329.941 10.832 329.863 10.895 329.77 10.891 cv
328.5 10.891 li
328.5 16.516 li
328.496 16.57 328.48 16.613 328.453 16.652 cv
328.418 16.691 328.367 16.727 328.297 16.75 cv
328.223 16.777 328.121 16.793 327.992 16.809 cv
327.859 16.82 327.699 16.828 327.516 16.828 cv
327.328 16.828 327.172 16.82 327.047 16.809 cv
326.918 16.793 326.816 16.777 326.742 16.75 cv
326.664 16.727 326.613 16.691 326.586 16.652 cv
326.555 16.613 326.539 16.57 326.543 16.516 cv
326.543 10.891 li
325.672 10.891 li
325.57 10.895 325.496 10.832 325.449 10.707 cv
325.398 10.586 325.371 10.383 325.375 10.094 cv
325.371 9.94501 325.379 9.81598 325.395 9.71503 cv
325.406 9.61298 325.426 9.53101 325.449 9.46899 cv
325.473 9.40997 325.504 9.367 325.543 9.34003 cv
325.582 9.31598 325.625 9.30499 325.68 9.30103 cv
326.543 9.30103 li
326.543 8.71503 li
326.539 8.24597 326.586 7.83197 326.684 7.47302 cv
326.773 7.117 326.922 6.82001 327.125 6.586 cv
327.324 6.35199 327.578 6.17603 327.887 6.05103 cv
328.195 5.93402 328.559 5.87097 328.984 5.87097 cv
329.18 5.87097 329.371 5.89099 329.559 5.922 cv
329.738 5.961 329.883 5.99597 329.988 6.03101 cv
330.09 6.07397 330.16 6.10901 330.199 6.14099 cv
330.234 6.17603 330.266 6.22699 330.289 6.289 cv
330.313 6.35498 330.328 6.43701 330.34 6.539 cv
330.348 6.64099 330.352 6.76599 330.355 6.914 cv
cp
f
340.906 13.758 mo
340.902 14.289 340.805 14.754 340.609 15.152 cv
340.41 15.555 340.145 15.891 339.809 16.156 cv
339.469 16.426 339.07 16.625 338.621 16.758 cv
338.168 16.891 337.688 16.957 337.176 16.961 cv
336.824 16.957 336.5 16.93 336.203 16.875 cv
335.902 16.816 335.641 16.75 335.414 16.668 cv
335.184 16.59 334.992 16.504 334.84 16.414 cv
334.688 16.328 334.578 16.25 334.512 16.18 cv
334.441 16.113 334.391 16.016 334.367 15.891 cv
334.336 15.766 334.324 15.582 334.324 15.34 cv
334.324 15.18 334.328 15.047 334.34 14.934 cv
334.348 14.828 334.363 14.738 334.391 14.668 cv
334.41 14.602 334.441 14.555 334.484 14.523 cv
334.52 14.5 334.566 14.484 334.617 14.48 cv
334.688 14.484 334.789 14.527 334.926 14.609 cv
335.055 14.699 335.227 14.793 335.438 14.895 cv
335.645 15 335.891 15.098 336.18 15.18 cv
336.465 15.27 336.801 15.312 337.184 15.309 cv
337.434 15.312 337.656 15.281 337.852 15.219 cv
338.047 15.16 338.215 15.074 338.355 14.965 cv
338.492 14.855 338.598 14.723 338.672 14.562 cv
338.742 14.402 338.777 14.223 338.781 14.023 cv
338.777 13.797 338.715 13.602 338.594 13.434 cv
338.465 13.273 338.301 13.129 338.105 13 cv
337.902 12.875 337.676 12.754 337.422 12.641 cv
337.168 12.531 336.906 12.414 336.637 12.285 cv
336.363 12.164 336.102 12.02 335.848 11.859 cv
335.594 11.703 335.367 11.516 335.168 11.293 cv
334.965 11.074 334.801 10.812 334.68 10.508 cv
334.555 10.207 334.492 9.84802 334.496 9.42603 cv
334.492 8.94501 334.582 8.52002 334.762 8.15198 cv
334.938 7.789 335.18 7.48401 335.488 7.23798 cv
335.789 7 336.148 6.82001 336.563 6.69897 cv
336.977 6.58197 337.414 6.52301 337.875 6.52002 cv
338.113 6.52301 338.352 6.539 338.594 6.57397 cv
338.832 6.61298 339.055 6.664 339.262 6.72302 cv
339.469 6.78497 339.652 6.85498 339.816 6.92999 cv
339.973 7.01202 340.082 7.07397 340.137 7.125 cv
340.188 7.17999 340.223 7.22699 340.242 7.258 cv
340.258 7.297 340.273 7.34399 340.289 7.40198 cv
340.301 7.46503 340.309 7.539 340.316 7.62903 cv
340.32 7.72302 340.324 7.836 340.324 7.96899 cv
340.324 8.12097 340.32 8.25 340.313 8.35199 cv
340.305 8.45697 340.289 8.54303 340.273 8.60498 cv
340.25 8.67603 340.227 8.72302 340.195 8.75403 cv
340.16 8.78497 340.113 8.80103 340.059 8.80103 cv
340 8.80103 339.91 8.76599 339.785 8.69098 cv
339.66 8.62097 339.504 8.54303 339.324 8.453 cv
339.141 8.37097 338.934 8.29303 338.695 8.22302 cv
338.453 8.15601 338.188 8.12097 337.906 8.117 cv
337.68 8.12097 337.488 8.14801 337.324 8.19897 cv
337.156 8.25403 337.016 8.328 336.906 8.422 cv
336.793 8.52002 336.711 8.63702 336.656 8.77002 cv
336.602 8.90997 336.574 9.05103 336.574 9.19897 cv
336.574 9.42603 336.633 9.62097 336.758 9.78101 cv
336.875 9.94501 337.039 10.09 337.25 10.215 cv
337.453 10.344 337.688 10.465 337.945 10.574 cv
338.203 10.691 338.469 10.809 338.742 10.93 cv
339.012 11.059 339.273 11.199 339.535 11.355 cv
339.793 11.512 340.027 11.703 340.23 11.922 cv
340.434 12.148 340.594 12.406 340.719 12.703 cv
340.84 13 340.902 13.352 340.906 13.758 cv
cp
f
348.953 16.516 mo
348.949 16.57 348.938 16.613 348.914 16.652 cv
348.887 16.691 348.84 16.727 348.777 16.75 cv
348.711 16.777 348.625 16.793 348.52 16.809 cv
348.414 16.82 348.281 16.828 348.121 16.828 cv
347.945 16.828 347.805 16.82 347.703 16.809 cv
347.594 16.793 347.512 16.777 347.449 16.75 cv
347.387 16.727 347.34 16.691 347.316 16.652 cv
347.285 16.613 347.273 16.57 347.277 16.516 cv
347.277 15.715 li
346.891 16.129 346.5 16.441 346.105 16.648 cv
345.703 16.855 345.293 16.957 344.871 16.961 cv
344.391 16.957 343.988 16.883 343.664 16.727 cv
343.34 16.574 343.078 16.359 342.879 16.09 cv
342.676 15.82 342.531 15.508 342.449 15.148 cv
342.359 14.793 342.316 14.352 342.32 13.82 cv
342.32 9.56598 li
342.316 9.52002 342.332 9.47302 342.363 9.42999 cv
342.391 9.39502 342.441 9.36298 342.52 9.33197 cv
342.594 9.30902 342.695 9.289 342.824 9.27301 cv
342.949 9.26599 343.105 9.258 343.297 9.25403 cv
343.484 9.258 343.645 9.26599 343.77 9.27301 cv
343.895 9.289 343.992 9.30902 344.07 9.33197 cv
344.141 9.36298 344.195 9.39502 344.23 9.42999 cv
344.258 9.47302 344.273 9.52002 344.277 9.56598 cv
344.277 13.492 li
344.273 13.859 344.297 14.137 344.348 14.328 cv
344.391 14.52 344.461 14.684 344.563 14.82 cv
344.656 14.961 344.781 15.066 344.93 15.141 cv
345.078 15.219 345.25 15.258 345.445 15.254 cv
345.695 15.258 345.945 15.168 346.199 14.98 cv
346.449 14.801 346.719 14.535 347.004 14.187 cv
347.004 9.56598 li
347.004 9.52002 347.016 9.47302 347.047 9.42999 cv
347.07 9.39502 347.125 9.36298 347.203 9.33197 cv
347.277 9.30902 347.375 9.289 347.504 9.27301 cv
347.625 9.26599 347.785 9.258 347.98 9.25403 cv
348.172 9.258 348.328 9.26599 348.453 9.27301 cv
348.574 9.289 348.676 9.30902 348.75 9.33197 cv
348.82 9.36298 348.871 9.39502 348.906 9.42999 cv
348.934 9.47302 348.949 9.52002 348.953 9.56598 cv
cp
f
357.883 12.945 mo
357.883 13.566 357.813 14.125 357.68 14.617 cv
357.539 15.113 357.344 15.531 357.094 15.879 cv
356.836 16.227 356.523 16.496 356.156 16.68 cv
355.781 16.867 355.359 16.957 354.891 16.961 cv
354.652 16.957 354.434 16.934 354.234 16.895 cv
354.027 16.848 353.836 16.781 353.652 16.68 cv
353.469 16.586 353.285 16.461 353.109 16.305 cv
352.926 16.156 352.742 15.973 352.559 15.762 cv
352.559 16.516 li
352.555 16.578 352.543 16.625 352.516 16.66 cv
352.484 16.703 352.438 16.734 352.375 16.758 cv
352.309 16.781 352.219 16.797 352.113 16.812 cv
352.004 16.82 351.875 16.828 351.719 16.828 cv
351.555 16.828 351.418 16.82 351.316 16.812 cv
351.207 16.797 351.121 16.781 351.059 16.758 cv
350.988 16.734 350.945 16.703 350.922 16.66 cv
350.895 16.625 350.879 16.578 350.883 16.516 cv
350.883 6.27002 li
350.879 6.21899 350.895 6.172 350.93 6.12903 cv
350.957 6.09003 351.012 6.05499 351.09 6.02301 cv
351.164 5.99597 351.266 5.97699 351.391 5.95697 cv
351.516 5.94501 351.672 5.93701 351.867 5.93402 cv
352.055 5.93701 352.215 5.94501 352.34 5.95697 cv
352.465 5.97699 352.563 5.99597 352.641 6.02301 cv
352.711 6.05499 352.766 6.09003 352.801 6.12903 cv
352.828 6.172 352.844 6.21899 352.848 6.27002 cv
352.848 10.109 li
353.023 9.93402 353.199 9.78497 353.379 9.65997 cv
353.551 9.539 353.727 9.43402 353.906 9.35199 cv
354.078 9.27301 354.262 9.21503 354.453 9.17603 cv
354.637 9.14099 354.836 9.125 355.047 9.12097 cv
355.559 9.125 355.992 9.22699 356.355 9.42999 cv
356.711 9.63702 357.004 9.914 357.23 10.262 cv
357.453 10.609 357.617 11.016 357.727 11.48 cv
357.828 11.945 357.883 12.434 357.883 12.945 cv
cp
355.848 13.086 mo
355.844 12.793 355.82 12.508 355.781 12.23 cv
355.734 11.957 355.66 11.715 355.551 11.5 cv
355.441 11.289 355.297 11.117 355.125 10.988 cv
354.949 10.863 354.73 10.801 354.469 10.797 cv
354.336 10.801 354.211 10.816 354.086 10.852 cv
353.961 10.891 353.832 10.953 353.699 11.039 cv
353.566 11.129 353.43 11.246 353.293 11.383 cv
353.148 11.523 353 11.695 352.848 11.902 cv
352.848 14.211 li
353.121 14.566 353.383 14.836 353.637 15.016 cv
353.887 15.203 354.152 15.293 354.43 15.293 cv
354.684 15.293 354.898 15.23 355.078 15.098 cv
355.25 14.973 355.398 14.805 355.516 14.594 cv
355.633 14.391 355.715 14.152 355.77 13.883 cv
355.816 13.621 355.844 13.355 355.848 13.086 cv
cp
f
363.004 12.863 mo
363 13.164 362.973 13.375 362.918 13.492 cv
362.859 13.617 362.77 13.676 362.645 13.672 cv
359.402 13.672 li
359.273 13.676 359.18 13.613 359.125 13.488 cv
359.063 13.367 359.035 13.16 359.039 12.863 cv
359.035 12.574 359.063 12.367 359.125 12.246 cv
359.18 12.129 359.273 12.07 359.402 12.066 cv
362.645 12.066 li
362.707 12.07 362.758 12.082 362.805 12.105 cv
362.844 12.133 362.883 12.18 362.918 12.238 cv
362.945 12.305 362.969 12.387 362.984 12.488 cv
362.996 12.594 363 12.719 363.004 12.863 cv
cp
f
366.656 16.5 mo
366.652 16.555 366.637 16.602 366.605 16.641 cv
366.57 16.684 366.512 16.719 366.438 16.742 cv
366.355 16.77 366.254 16.789 366.125 16.805 cv
365.992 16.82 365.824 16.828 365.629 16.828 cv
365.426 16.828 365.262 16.82 365.133 16.805 cv
364.996 16.789 364.891 16.77 364.816 16.742 cv
364.734 16.719 364.68 16.684 364.648 16.641 cv
364.613 16.602 364.594 16.555 364.598 16.5 cv
364.598 6.97699 li
364.594 6.92999 364.613 6.883 364.648 6.836 cv
364.68 6.797 364.734 6.76202 364.82 6.73401 cv
364.898 6.711 365.004 6.69098 365.137 6.672 cv
365.262 6.65997 365.426 6.65198 365.629 6.64801 cv
365.824 6.65198 365.992 6.65997 366.125 6.672 cv
366.254 6.69098 366.355 6.711 366.438 6.73401 cv
366.512 6.76202 366.57 6.797 366.605 6.836 cv
366.637 6.883 366.652 6.92999 366.656 6.97699 cv
cp
f
379.738 16.516 mo
379.734 16.57 379.719 16.613 379.691 16.652 cv
379.656 16.691 379.605 16.727 379.535 16.75 cv
379.461 16.777 379.359 16.793 379.238 16.809 cv
379.113 16.82 378.957 16.828 378.766 16.828 cv
378.566 16.828 378.406 16.82 378.281 16.809 cv
378.156 16.793 378.055 16.777 377.98 16.75 cv
377.902 16.727 377.852 16.691 377.824 16.652 cv
377.797 16.613 377.781 16.57 377.785 16.516 cv
377.785 12.395 li
377.781 12.164 377.762 11.949 377.719 11.754 cv
377.672 11.562 377.602 11.398 377.516 11.262 cv
377.422 11.125 377.309 11.02 377.172 10.941 cv
377.031 10.867 376.867 10.828 376.676 10.828 cv
376.441 10.828 376.203 10.922 375.965 11.102 cv
375.727 11.285 375.469 11.547 375.188 11.895 cv
375.188 16.516 li
375.188 16.57 375.172 16.613 375.141 16.652 cv
375.109 16.691 375.055 16.727 374.98 16.75 cv
374.902 16.777 374.801 16.793 374.68 16.809 cv
374.555 16.82 374.402 16.828 374.215 16.828 cv
374.02 16.828 373.859 16.82 373.738 16.809 cv
373.609 16.793 373.508 16.777 373.438 16.75 cv
373.359 16.727 373.309 16.691 373.277 16.652 cv
373.246 16.613 373.23 16.57 373.23 16.516 cv
373.23 12.395 li
373.23 12.164 373.207 11.949 373.164 11.754 cv
373.121 11.562 373.055 11.398 372.969 11.262 cv
372.875 11.125 372.762 11.02 372.625 10.941 cv
372.48 10.867 372.316 10.828 372.133 10.828 cv
371.891 10.828 371.652 10.922 371.414 11.102 cv
371.176 11.285 370.918 11.547 370.645 11.895 cv
370.645 16.516 li
370.641 16.57 370.625 16.613 370.598 16.652 cv
370.563 16.691 370.508 16.727 370.438 16.75 cv
370.359 16.777 370.262 16.793 370.137 16.809 cv
370.012 16.82 369.852 16.828 369.664 16.828 cv
369.469 16.828 369.313 16.82 369.188 16.809 cv
369.063 16.793 368.961 16.777 368.887 16.75 cv
368.809 16.727 368.754 16.691 368.727 16.652 cv
368.691 16.613 368.676 16.57 368.68 16.516 cv
368.68 9.56598 li
368.676 9.52002 368.691 9.47302 368.719 9.42999 cv
368.742 9.39502 368.789 9.36298 368.859 9.33197 cv
368.926 9.30902 369.012 9.289 369.121 9.27301 cv
369.227 9.26599 369.359 9.258 369.523 9.25403 cv
369.688 9.258 369.824 9.26599 369.934 9.27301 cv
370.039 9.289 370.125 9.30902 370.188 9.33197 cv
370.246 9.36298 370.289 9.39502 370.316 9.42999 cv
370.34 9.47302 370.352 9.52002 370.355 9.56598 cv
370.355 10.367 li
370.738 9.95697 371.121 9.64502 371.504 9.43402 cv
371.883 9.22699 372.285 9.125 372.703 9.12097 cv
372.988 9.125 373.242 9.15198 373.473 9.211 cv
373.699 9.27301 373.906 9.35901 374.086 9.46899 cv
374.266 9.58197 374.418 9.71899 374.547 9.87097 cv
374.676 10.027 374.785 10.199 374.875 10.391 cv
375.082 10.168 375.285 9.97699 375.488 9.81598 cv
375.684 9.65601 375.883 9.52301 376.078 9.422 cv
376.273 9.32001 376.469 9.24597 376.664 9.19501 cv
376.859 9.14801 377.059 9.125 377.262 9.12097 cv
377.723 9.125 378.109 9.203 378.43 9.35498 cv
378.742 9.51599 379 9.72699 379.195 9.992 cv
379.391 10.262 379.527 10.574 379.613 10.93 cv
379.691 11.289 379.734 11.668 379.738 12.066 cv
cp
f
387.578 16.539 mo
387.574 16.617 387.547 16.672 387.5 16.711 cv
387.445 16.754 387.363 16.781 387.254 16.801 cv
387.137 16.816 386.973 16.828 386.758 16.828 cv
386.52 16.828 386.348 16.816 386.246 16.801 cv
386.137 16.781 386.063 16.754 386.023 16.711 cv
385.977 16.672 385.957 16.617 385.957 16.539 cv
385.957 15.988 li
385.668 16.297 385.34 16.535 384.977 16.703 cv
384.609 16.875 384.203 16.957 383.758 16.961 cv
383.387 16.957 383.047 16.91 382.738 16.816 cv
382.43 16.723 382.164 16.582 381.938 16.387 cv
381.711 16.199 381.535 15.965 381.41 15.684 cv
381.285 15.406 381.223 15.078 381.227 14.699 cv
381.223 14.301 381.301 13.949 381.461 13.645 cv
381.617 13.348 381.855 13.102 382.172 12.906 cv
382.484 12.715 382.875 12.57 383.344 12.473 cv
383.813 12.383 384.355 12.336 384.973 12.332 cv
385.652 12.332 li
385.652 11.91 li
385.652 11.695 385.629 11.504 385.586 11.34 cv
385.539 11.18 385.465 11.043 385.367 10.93 cv
385.262 10.824 385.129 10.742 384.961 10.687 cv
384.789 10.637 384.578 10.613 384.336 10.609 cv
384.004 10.613 383.711 10.648 383.457 10.719 cv
383.195 10.793 382.969 10.875 382.773 10.961 cv
382.574 11.055 382.41 11.133 382.281 11.203 cv
382.145 11.277 382.035 11.316 381.957 11.312 cv
381.895 11.316 381.844 11.297 381.805 11.258 cv
381.758 11.223 381.723 11.172 381.695 11.102 cv
381.664 11.039 381.641 10.953 381.629 10.852 cv
381.609 10.754 381.602 10.645 381.605 10.523 cv
381.602 10.363 381.617 10.238 381.645 10.141 cv
381.668 10.051 381.715 9.96503 381.793 9.88702 cv
381.863 9.81201 381.992 9.72998 382.176 9.64099 cv
382.355 9.55103 382.566 9.46503 382.813 9.38702 cv
383.055 9.30902 383.324 9.24597 383.613 9.19501 cv
383.902 9.14801 384.199 9.125 384.508 9.12097 cv
385.051 9.125 385.516 9.17603 385.902 9.28101 cv
386.289 9.39099 386.609 9.55499 386.859 9.77301 cv
387.109 9.992 387.289 10.277 387.406 10.625 cv
387.516 10.977 387.574 11.391 387.578 11.863 cv
cp
385.652 13.562 mo
384.902 13.562 li
384.586 13.566 384.316 13.59 384.094 13.633 cv
383.867 13.684 383.684 13.754 383.547 13.844 cv
383.402 13.941 383.301 14.055 383.238 14.184 cv
383.172 14.32 383.137 14.469 383.141 14.637 cv
383.137 14.93 383.23 15.16 383.418 15.324 cv
383.602 15.492 383.859 15.574 384.188 15.574 cv
384.461 15.574 384.711 15.504 384.945 15.363 cv
385.172 15.223 385.41 15.02 385.652 14.746 cv
cp
f
395.805 10.047 mo
395.801 10.301 395.773 10.484 395.719 10.602 cv
395.66 10.723 395.59 10.781 395.512 10.781 cv
394.691 10.781 li
394.805 10.906 394.887 11.051 394.938 11.207 cv
394.984 11.367 395.008 11.531 395.012 11.699 cv
395.008 12.109 394.941 12.469 394.809 12.781 cv
394.672 13.098 394.477 13.363 394.227 13.574 cv
393.973 13.793 393.672 13.957 393.316 14.066 cv
392.957 14.184 392.559 14.238 392.129 14.234 cv
391.902 14.238 391.691 14.211 391.488 14.152 cv
391.285 14.102 391.129 14.039 391.02 13.961 cv
390.957 14.031 390.898 14.109 390.852 14.203 cv
390.801 14.297 390.777 14.402 390.781 14.512 cv
390.777 14.668 390.844 14.789 390.977 14.883 cv
391.105 14.98 391.293 15.035 391.535 15.043 cv
393.227 15.105 li
393.621 15.121 393.973 15.18 394.281 15.273 cv
394.59 15.375 394.852 15.508 395.063 15.68 cv
395.273 15.855 395.434 16.066 395.543 16.309 cv
395.652 16.555 395.707 16.828 395.711 17.141 cv
395.707 17.477 395.633 17.801 395.484 18.109 cv
395.336 18.41 395.109 18.672 394.809 18.898 cv
394.504 19.117 394.125 19.297 393.672 19.43 cv
393.215 19.559 392.684 19.621 392.082 19.625 cv
391.484 19.621 390.98 19.574 390.563 19.484 cv
390.145 19.387 389.801 19.258 389.535 19.094 cv
389.266 18.926 389.07 18.727 388.953 18.5 cv
388.828 18.266 388.77 18.012 388.77 17.738 cv
388.77 17.566 388.789 17.406 388.836 17.25 cv
388.875 17.094 388.941 16.941 389.031 16.801 cv
389.113 16.656 389.219 16.523 389.344 16.391 cv
389.469 16.262 389.609 16.137 389.773 16.016 cv
389.547 15.902 389.375 15.742 389.254 15.531 cv
389.133 15.328 389.074 15.102 389.074 14.855 cv
389.074 14.555 389.141 14.277 389.281 14.02 cv
389.418 13.77 389.602 13.539 389.828 13.336 cv
389.645 13.156 389.5 12.941 389.391 12.684 cv
389.281 12.434 389.227 12.113 389.23 11.73 cv
389.227 11.328 389.297 10.969 389.441 10.645 cv
389.582 10.328 389.781 10.059 390.039 9.836 cv
390.293 9.617 390.598 9.44501 390.949 9.328 cv
391.301 9.211 391.691 9.15198 392.121 9.15198 cv
392.34 9.15198 392.547 9.16803 392.746 9.19098 cv
392.945 9.22302 393.133 9.258 393.305 9.30103 cv
395.512 9.30103 li
395.594 9.30499 395.664 9.36298 395.723 9.47302 cv
395.773 9.59003 395.801 9.78101 395.805 10.047 cv
cp
393.289 11.691 mo
393.285 11.32 393.184 11.031 392.977 10.82 cv
392.766 10.617 392.473 10.512 392.098 10.508 cv
391.902 10.512 391.73 10.543 391.59 10.605 cv
391.441 10.672 391.32 10.762 391.227 10.871 cv
391.125 10.984 391.055 11.113 391.012 11.262 cv
390.961 11.41 390.938 11.566 390.941 11.723 cv
390.938 12.082 391.043 12.359 391.254 12.562 cv
391.461 12.77 391.75 12.875 392.121 12.871 cv
392.316 12.875 392.484 12.844 392.633 12.777 cv
392.773 12.719 392.895 12.633 392.996 12.52 cv
393.09 12.414 393.164 12.285 393.215 12.141 cv
393.262 12 393.285 11.852 393.289 11.691 cv
cp
393.75 17.242 mo
393.75 17.004 393.656 16.828 393.469 16.703 cv
393.281 16.582 393.023 16.512 392.695 16.5 cv
391.301 16.461 li
391.164 16.562 391.055 16.656 390.977 16.746 cv
390.895 16.836 390.832 16.922 390.785 17.008 cv
390.734 17.09 390.699 17.172 390.688 17.25 cv
390.668 17.328 390.66 17.406 390.664 17.492 cv
390.66 17.746 390.793 17.945 391.055 18.082 cv
391.316 18.215 391.688 18.281 392.168 18.285 cv
392.461 18.281 392.707 18.25 392.914 18.195 cv
393.113 18.133 393.277 18.055 393.406 17.957 cv
393.527 17.855 393.617 17.746 393.672 17.625 cv
393.723 17.504 393.75 17.375 393.75 17.242 cv
cp
f
403.414 12.84 mo
403.41 13.078 403.359 13.254 403.254 13.367 cv
403.145 13.484 402.996 13.543 402.816 13.539 cv
398.582 13.539 li
398.578 13.84 398.613 14.109 398.688 14.348 cv
398.754 14.59 398.867 14.793 399.023 14.961 cv
399.176 15.133 399.371 15.262 399.613 15.348 cv
399.852 15.437 400.141 15.48 400.484 15.48 cv
400.824 15.48 401.125 15.457 401.387 15.406 cv
401.645 15.359 401.871 15.305 402.063 15.242 cv
402.25 15.184 402.406 15.129 402.535 15.078 cv
402.656 15.031 402.758 15.008 402.84 15.004 cv
402.883 15.008 402.922 15.016 402.957 15.031 cv
402.984 15.051 403.012 15.082 403.031 15.129 cv
403.051 15.176 403.063 15.242 403.074 15.328 cv
403.078 15.414 403.082 15.523 403.086 15.652 cv
403.082 15.77 403.082 15.867 403.078 15.945 cv
403.07 16.027 403.063 16.094 403.055 16.148 cv
403.043 16.207 403.027 16.258 403.008 16.293 cv
402.988 16.336 402.961 16.371 402.93 16.406 cv
402.895 16.445 402.801 16.496 402.652 16.555 cv
402.496 16.621 402.305 16.684 402.074 16.738 cv
401.836 16.801 401.566 16.848 401.27 16.895 cv
400.965 16.934 400.645 16.957 400.305 16.961 cv
399.684 16.957 399.141 16.883 398.68 16.727 cv
398.211 16.574 397.824 16.336 397.516 16.02 cv
397.199 15.703 396.965 15.305 396.816 14.82 cv
396.66 14.34 396.586 13.773 396.59 13.117 cv
396.586 12.504 396.664 11.945 396.828 11.449 cv
396.984 10.953 397.219 10.535 397.531 10.187 cv
397.836 9.84399 398.211 9.578 398.648 9.39502 cv
399.086 9.21503 399.578 9.125 400.133 9.12097 cv
400.711 9.125 401.211 9.211 401.625 9.37903 cv
402.039 9.55499 402.375 9.79303 402.641 10.094 cv
402.902 10.398 403.098 10.758 403.227 11.172 cv
403.348 11.59 403.41 12.039 403.414 12.527 cv
cp
401.512 12.277 mo
401.523 11.727 401.414 11.293 401.18 10.98 cv
400.945 10.668 400.578 10.512 400.086 10.508 cv
399.836 10.512 399.621 10.559 399.438 10.648 cv
399.25 10.746 399.098 10.871 398.977 11.027 cv
398.852 11.187 398.758 11.375 398.695 11.59 cv
398.629 11.805 398.59 12.035 398.582 12.277 cv
cp
f
409.914 14.551 mo
409.91 14.949 409.836 15.297 409.691 15.598 cv
409.543 15.898 409.336 16.152 409.066 16.352 cv
408.793 16.559 408.473 16.707 408.105 16.809 cv
407.738 16.906 407.336 16.957 406.906 16.961 cv
406.641 16.957 406.395 16.937 406.16 16.902 cv
405.926 16.859 405.715 16.812 405.527 16.754 cv
405.34 16.695 405.184 16.633 405.059 16.57 cv
404.934 16.508 404.84 16.449 404.785 16.395 cv
404.727 16.34 404.684 16.258 404.656 16.141 cv
404.621 16.027 404.605 15.852 404.609 15.621 cv
404.605 15.473 404.613 15.352 404.625 15.258 cv
404.633 15.168 404.648 15.098 404.672 15.039 cv
404.691 14.988 404.715 14.949 404.75 14.93 cv
404.777 14.914 404.816 14.906 404.863 14.902 cv
404.918 14.906 405.004 14.937 405.117 15 cv
405.227 15.066 405.363 15.141 405.535 15.215 cv
405.699 15.297 405.895 15.367 406.113 15.434 cv
406.332 15.504 406.582 15.539 406.867 15.535 cv
407.043 15.539 407.199 15.52 407.34 15.48 cv
407.473 15.445 407.594 15.395 407.699 15.324 cv
407.797 15.258 407.871 15.172 407.926 15.066 cv
407.973 14.965 408 14.844 408.004 14.707 cv
408 14.551 407.953 14.418 407.859 14.309 cv
407.766 14.199 407.637 14.102 407.48 14.016 cv
407.316 13.934 407.137 13.855 406.941 13.781 cv
406.738 13.711 406.535 13.633 406.324 13.539 cv
406.113 13.453 405.906 13.352 405.711 13.234 cv
405.508 13.125 405.328 12.984 405.172 12.816 cv
405.008 12.652 404.883 12.453 404.789 12.215 cv
404.695 11.984 404.648 11.703 404.648 11.371 cv
404.648 11.043 404.711 10.738 404.84 10.457 cv
404.969 10.184 405.156 9.94501 405.402 9.74597 cv
405.645 9.55103 405.941 9.39801 406.293 9.28497 cv
406.641 9.17999 407.035 9.125 407.477 9.12097 cv
407.691 9.125 407.902 9.14099 408.109 9.16803 cv
408.313 9.203 408.5 9.242 408.668 9.28497 cv
408.832 9.336 408.973 9.38702 409.09 9.43701 cv
409.203 9.49597 409.285 9.54303 409.336 9.578 cv
409.383 9.62097 409.418 9.65997 409.441 9.69501 cv
409.461 9.73798 409.473 9.78497 409.484 9.836 cv
409.492 9.89099 409.504 9.95697 409.512 10.035 cv
409.52 10.121 409.523 10.219 409.523 10.336 cv
409.523 10.477 409.52 10.594 409.512 10.68 cv
409.504 10.773 409.488 10.844 409.473 10.891 cv
409.453 10.945 409.43 10.98 409.402 10.996 cv
409.367 11.02 409.332 11.027 409.293 11.023 cv
409.242 11.027 409.168 11 409.074 10.941 cv
408.973 10.891 408.852 10.832 408.703 10.766 cv
408.555 10.707 408.383 10.648 408.188 10.59 cv
407.992 10.539 407.77 10.512 407.523 10.508 cv
407.344 10.512 407.191 10.531 407.063 10.562 cv
406.93 10.602 406.82 10.652 406.742 10.719 cv
406.656 10.789 406.594 10.867 406.555 10.957 cv
406.508 11.051 406.488 11.148 406.492 11.25 cv
406.488 11.41 406.539 11.547 406.641 11.652 cv
406.738 11.766 406.867 11.859 407.031 11.941 cv
407.191 12.027 407.375 12.105 407.582 12.176 cv
407.785 12.25 407.992 12.332 408.203 12.414 cv
408.41 12.504 408.617 12.602 408.828 12.715 cv
409.031 12.828 409.215 12.969 409.375 13.133 cv
409.535 13.301 409.664 13.5 409.766 13.73 cv
409.859 13.965 409.91 14.238 409.914 14.551 cv
cp
f
418.715 12.863 mo
418.711 13.164 418.684 13.375 418.629 13.492 cv
418.57 13.617 418.48 13.676 418.355 13.672 cv
415.113 13.672 li
414.984 13.676 414.891 13.613 414.836 13.488 cv
414.773 13.367 414.746 13.16 414.75 12.863 cv
414.746 12.574 414.773 12.367 414.836 12.246 cv
414.891 12.129 414.984 12.07 415.113 12.066 cv
418.355 12.066 li
418.418 12.07 418.469 12.082 418.516 12.105 cv
418.555 12.133 418.594 12.18 418.629 12.238 cv
418.656 12.305 418.68 12.387 418.695 12.488 cv
418.707 12.594 418.711 12.719 418.715 12.863 cv
cp
f
431.387 16.516 mo
431.387 16.578 431.375 16.625 431.355 16.66 cv
431.336 16.703 431.289 16.734 431.211 16.758 cv
431.133 16.781 431.016 16.797 430.867 16.812 cv
430.711 16.82 430.508 16.828 430.25 16.828 cv
430.031 16.828 429.855 16.82 429.727 16.812 cv
429.598 16.797 429.496 16.781 429.422 16.754 cv
429.344 16.727 429.289 16.691 429.262 16.645 cv
429.227 16.605 429.203 16.551 429.184 16.484 cv
428.277 14.234 li
428.168 13.98 428.063 13.754 427.961 13.555 cv
427.852 13.359 427.738 13.195 427.613 13.062 cv
427.484 12.934 427.336 12.832 427.172 12.762 cv
427.004 12.695 426.813 12.664 426.598 12.66 cv
425.957 12.66 li
425.957 16.5 li
425.953 16.555 425.938 16.602 425.906 16.641 cv
425.871 16.684 425.816 16.719 425.738 16.742 cv
425.66 16.77 425.555 16.789 425.426 16.805 cv
425.293 16.82 425.129 16.828 424.93 16.828 cv
424.73 16.828 424.563 16.82 424.434 16.805 cv
424.297 16.789 424.191 16.77 424.117 16.742 cv
424.035 16.719 423.98 16.684 423.953 16.641 cv
423.918 16.602 423.902 16.555 423.906 16.5 cv
423.906 7.34399 li
423.902 7.117 423.961 6.953 424.082 6.84802 cv
424.195 6.75 424.34 6.69897 424.516 6.69501 cv
427.125 6.69501 li
427.387 6.69897 427.605 6.703 427.781 6.711 cv
427.949 6.72302 428.105 6.73401 428.25 6.75 cv
428.652 6.80902 429.016 6.90997 429.34 7.047 cv
429.664 7.19098 429.941 7.375 430.168 7.59802 cv
430.395 7.828 430.566 8.09399 430.688 8.40198 cv
430.805 8.711 430.863 9.06598 430.867 9.46503 cv
430.863 9.80499 430.82 10.113 430.738 10.387 cv
430.648 10.668 430.523 10.914 430.359 11.133 cv
430.191 11.352 429.984 11.543 429.742 11.699 cv
429.496 11.863 429.219 11.992 428.91 12.09 cv
429.059 12.164 429.203 12.254 429.336 12.355 cv
429.469 12.465 429.59 12.59 429.707 12.734 cv
429.82 12.883 429.934 13.051 430.039 13.238 cv
430.141 13.43 430.242 13.645 430.344 13.883 cv
431.195 15.871 li
431.27 16.07 431.32 16.211 431.348 16.301 cv
431.371 16.395 431.387 16.469 431.387 16.516 cv
cp
428.746 9.67603 mo
428.742 9.34399 428.668 9.06201 428.52 8.83197 cv
428.367 8.60498 428.121 8.44501 427.781 8.34802 cv
427.676 8.32397 427.559 8.30103 427.426 8.28497 cv
427.293 8.27002 427.109 8.26202 426.875 8.26202 cv
425.957 8.26202 li
425.957 11.125 li
427 11.125 li
427.289 11.129 427.547 11.094 427.766 11.02 cv
427.984 10.953 428.164 10.852 428.309 10.723 cv
428.453 10.598 428.563 10.445 428.637 10.266 cv
428.707 10.09 428.742 9.89502 428.746 9.67603 cv
cp
f
438.973 12.84 mo
438.969 13.078 438.918 13.254 438.813 13.367 cv
438.703 13.484 438.555 13.543 438.375 13.539 cv
434.141 13.539 li
434.137 13.84 434.172 14.109 434.246 14.348 cv
434.313 14.59 434.426 14.793 434.582 14.961 cv
434.734 15.133 434.93 15.262 435.172 15.348 cv
435.41 15.437 435.699 15.48 436.043 15.48 cv
436.383 15.48 436.684 15.457 436.945 15.406 cv
437.203 15.359 437.43 15.305 437.621 15.242 cv
437.809 15.184 437.965 15.129 438.094 15.078 cv
438.215 15.031 438.316 15.008 438.398 15.004 cv
438.441 15.008 438.48 15.016 438.516 15.031 cv
438.543 15.051 438.57 15.082 438.59 15.129 cv
438.609 15.176 438.621 15.242 438.633 15.328 cv
438.637 15.414 438.641 15.523 438.645 15.652 cv
438.641 15.77 438.641 15.867 438.637 15.945 cv
438.629 16.027 438.621 16.094 438.613 16.148 cv
438.602 16.207 438.586 16.258 438.566 16.293 cv
438.547 16.336 438.52 16.371 438.488 16.406 cv
438.453 16.445 438.359 16.496 438.211 16.555 cv
438.055 16.621 437.863 16.684 437.633 16.738 cv
437.395 16.801 437.125 16.848 436.828 16.895 cv
436.523 16.934 436.203 16.957 435.863 16.961 cv
435.242 16.957 434.699 16.883 434.238 16.727 cv
433.77 16.574 433.383 16.336 433.074 16.02 cv
432.758 15.703 432.523 15.305 432.375 14.82 cv
432.219 14.34 432.145 13.773 432.148 13.117 cv
432.145 12.504 432.223 11.945 432.387 11.449 cv
432.543 10.953 432.777 10.535 433.09 10.187 cv
433.395 9.84399 433.77 9.578 434.207 9.39502 cv
434.645 9.21503 435.137 9.125 435.691 9.12097 cv
436.27 9.125 436.77 9.211 437.184 9.37903 cv
437.598 9.55499 437.934 9.79303 438.199 10.094 cv
438.461 10.398 438.656 10.758 438.785 11.172 cv
438.906 11.59 438.969 12.039 438.973 12.527 cv
cp
437.07 12.277 mo
437.082 11.727 436.973 11.293 436.738 10.98 cv
436.504 10.668 436.137 10.512 435.645 10.508 cv
435.395 10.512 435.18 10.559 434.996 10.648 cv
434.809 10.746 434.656 10.871 434.535 11.027 cv
434.41 11.187 434.316 11.375 434.254 11.59 cv
434.188 11.805 434.148 12.035 434.141 12.277 cv
cp
f
451.641 16.516 mo
451.637 16.57 451.621 16.613 451.594 16.652 cv
451.559 16.691 451.508 16.727 451.438 16.75 cv
451.363 16.777 451.262 16.793 451.141 16.809 cv
451.016 16.82 450.859 16.828 450.668 16.828 cv
450.469 16.828 450.309 16.82 450.184 16.809 cv
450.059 16.793 449.957 16.777 449.883 16.75 cv
449.805 16.727 449.754 16.691 449.727 16.652 cv
449.699 16.613 449.684 16.57 449.688 16.516 cv
449.688 12.395 li
449.684 12.164 449.664 11.949 449.621 11.754 cv
449.574 11.562 449.504 11.398 449.418 11.262 cv
449.324 11.125 449.211 11.02 449.074 10.941 cv
448.934 10.867 448.77 10.828 448.578 10.828 cv
448.344 10.828 448.105 10.922 447.867 11.102 cv
447.629 11.285 447.371 11.547 447.09 11.895 cv
447.09 16.516 li
447.09 16.57 447.074 16.613 447.043 16.652 cv
447.012 16.691 446.957 16.727 446.883 16.75 cv
446.805 16.777 446.703 16.793 446.582 16.809 cv
446.457 16.82 446.305 16.828 446.117 16.828 cv
445.922 16.828 445.762 16.82 445.641 16.809 cv
445.512 16.793 445.41 16.777 445.34 16.75 cv
445.262 16.727 445.211 16.691 445.18 16.652 cv
445.148 16.613 445.133 16.57 445.133 16.516 cv
445.133 12.395 li
445.133 12.164 445.109 11.949 445.066 11.754 cv
445.023 11.562 444.957 11.398 444.871 11.262 cv
444.777 11.125 444.664 11.02 444.527 10.941 cv
444.383 10.867 444.219 10.828 444.035 10.828 cv
443.793 10.828 443.555 10.922 443.316 11.102 cv
443.078 11.285 442.82 11.547 442.547 11.895 cv
442.547 16.516 li
442.543 16.57 442.527 16.613 442.5 16.652 cv
442.465 16.691 442.41 16.727 442.34 16.75 cv
442.262 16.777 442.164 16.793 442.039 16.809 cv
441.914 16.82 441.754 16.828 441.566 16.828 cv
441.371 16.828 441.215 16.82 441.09 16.809 cv
440.965 16.793 440.863 16.777 440.789 16.75 cv
440.711 16.727 440.656 16.691 440.629 16.652 cv
440.594 16.613 440.578 16.57 440.582 16.516 cv
440.582 9.56598 li
440.578 9.52002 440.594 9.47302 440.621 9.42999 cv
440.645 9.39502 440.691 9.36298 440.762 9.33197 cv
440.828 9.30902 440.914 9.289 441.023 9.27301 cv
441.129 9.26599 441.262 9.258 441.426 9.25403 cv
441.59 9.258 441.727 9.26599 441.836 9.27301 cv
441.941 9.289 442.027 9.30902 442.09 9.33197 cv
442.148 9.36298 442.191 9.39502 442.219 9.42999 cv
442.242 9.47302 442.254 9.52002 442.258 9.56598 cv
442.258 10.367 li
442.641 9.95697 443.023 9.64502 443.406 9.43402 cv
443.785 9.22699 444.188 9.125 444.605 9.12097 cv
444.891 9.125 445.145 9.15198 445.375 9.211 cv
445.602 9.27301 445.809 9.35901 445.988 9.46899 cv
446.168 9.58197 446.32 9.71899 446.449 9.87097 cv
446.578 10.027 446.688 10.199 446.777 10.391 cv
446.984 10.168 447.188 9.97699 447.391 9.81598 cv
447.586 9.65601 447.785 9.52301 447.98 9.422 cv
448.176 9.32001 448.371 9.24597 448.566 9.19501 cv
448.762 9.14801 448.961 9.125 449.164 9.12097 cv
449.625 9.125 450.012 9.203 450.332 9.35498 cv
450.645 9.51599 450.902 9.72699 451.098 9.992 cv
451.293 10.262 451.43 10.574 451.516 10.93 cv
451.594 11.289 451.637 11.668 451.641 12.066 cv
cp
f
460.586 12.969 mo
460.582 13.566 460.504 14.109 460.352 14.594 cv
460.191 15.086 459.957 15.504 459.641 15.855 cv
459.324 16.207 458.926 16.48 458.449 16.672 cv
457.969 16.863 457.41 16.957 456.773 16.961 cv
456.152 16.957 455.613 16.875 455.16 16.703 cv
454.699 16.535 454.32 16.285 454.023 15.957 cv
453.719 15.633 453.496 15.23 453.352 14.75 cv
453.207 14.273 453.137 13.727 453.137 13.109 cv
453.137 12.52 453.215 11.98 453.371 11.488 cv
453.527 11 453.766 10.578 454.086 10.227 cv
454.402 9.87903 454.797 9.60498 455.273 9.40997 cv
455.746 9.21899 456.305 9.125 456.945 9.12097 cv
457.57 9.125 458.109 9.20697 458.566 9.375 cv
459.023 9.547 459.402 9.797 459.699 10.121 cv
459.996 10.449 460.219 10.852 460.367 11.328 cv
460.512 11.809 460.582 12.355 460.586 12.969 cv
cp
458.566 13.047 mo
458.563 12.711 458.535 12.395 458.484 12.102 cv
458.426 11.816 458.332 11.566 458.207 11.352 cv
458.074 11.141 457.902 10.973 457.691 10.852 cv
457.473 10.734 457.203 10.676 456.875 10.672 cv
456.586 10.676 456.332 10.73 456.113 10.832 cv
455.895 10.941 455.715 11.098 455.574 11.301 cv
455.434 11.508 455.328 11.754 455.258 12.039 cv
455.188 12.332 455.152 12.66 455.152 13.023 cv
455.152 13.371 455.18 13.687 455.238 13.973 cv
455.293 14.266 455.387 14.516 455.516 14.727 cv
455.641 14.941 455.813 15.105 456.035 15.219 cv
456.25 15.34 456.52 15.398 456.844 15.395 cv
457.137 15.398 457.395 15.344 457.617 15.234 cv
457.832 15.129 458.012 14.977 458.152 14.77 cv
458.293 14.57 458.395 14.324 458.465 14.035 cv
458.527 13.75 458.563 13.422 458.566 13.047 cv
cp
f
466.293 15.832 mo
466.293 16.059 466.277 16.234 466.25 16.355 cv
466.219 16.48 466.18 16.566 466.137 16.613 cv
466.086 16.664 466.02 16.707 465.93 16.746 cv
465.836 16.785 465.727 16.816 465.609 16.848 cv
465.484 16.871 465.352 16.895 465.211 16.914 cv
465.066 16.926 464.926 16.934 464.781 16.937 cv
464.391 16.934 464.051 16.883 463.766 16.789 cv
463.48 16.687 463.246 16.539 463.059 16.332 cv
462.871 16.129 462.73 15.871 462.645 15.559 cv
462.551 15.25 462.508 14.879 462.512 14.449 cv
462.512 10.891 li
461.68 10.891 li
461.578 10.895 461.504 10.832 461.453 10.707 cv
461.398 10.586 461.371 10.383 461.375 10.094 cv
461.371 9.94501 461.379 9.81598 461.395 9.71503 cv
461.406 9.61298 461.426 9.53101 461.453 9.46899 cv
461.477 9.40997 461.508 9.367 461.551 9.34003 cv
461.586 9.31598 461.633 9.30499 461.688 9.30103 cv
462.512 9.30103 li
462.512 7.75 li
462.508 7.703 462.523 7.65601 462.555 7.60901 cv
462.582 7.57001 462.633 7.53497 462.711 7.50403 cv
462.785 7.47998 462.887 7.45697 463.016 7.44098 cv
463.141 7.42999 463.297 7.42603 463.488 7.422 cv
463.676 7.42603 463.836 7.42999 463.965 7.44098 cv
464.09 7.45697 464.191 7.47998 464.266 7.50403 cv
464.336 7.53497 464.387 7.57001 464.422 7.60901 cv
464.449 7.65601 464.465 7.703 464.469 7.75 cv
464.469 9.30103 li
465.98 9.30103 li
466.031 9.30499 466.078 9.31598 466.117 9.34003 cv
466.156 9.367 466.188 9.40997 466.215 9.46899 cv
466.238 9.53101 466.258 9.61298 466.273 9.71503 cv
466.285 9.81598 466.293 9.94501 466.293 10.094 cv
466.293 10.383 466.266 10.586 466.215 10.707 cv
466.16 10.832 466.086 10.895 465.988 10.891 cv
464.469 10.891 li
464.469 14.156 li
464.465 14.535 464.523 14.82 464.648 15.008 cv
464.766 15.199 464.98 15.293 465.285 15.293 cv
465.387 15.293 465.48 15.285 465.566 15.266 cv
465.648 15.25 465.723 15.23 465.789 15.203 cv
465.852 15.184 465.906 15.16 465.953 15.141 cv
465.996 15.125 466.035 15.117 466.074 15.113 cv
466.102 15.117 466.133 15.125 466.164 15.141 cv
466.191 15.16 466.211 15.199 466.23 15.25 cv
466.242 15.309 466.258 15.383 466.273 15.473 cv
466.285 15.57 466.293 15.687 466.293 15.832 cv
cp
f
473.879 12.84 mo
473.875 13.078 473.824 13.254 473.719 13.367 cv
473.609 13.484 473.461 13.543 473.281 13.539 cv
469.047 13.539 li
469.043 13.84 469.078 14.109 469.152 14.348 cv
469.219 14.59 469.332 14.793 469.488 14.961 cv
469.641 15.133 469.836 15.262 470.078 15.348 cv
470.316 15.437 470.605 15.48 470.949 15.48 cv
471.289 15.48 471.59 15.457 471.852 15.406 cv
472.109 15.359 472.336 15.305 472.527 15.242 cv
472.715 15.184 472.871 15.129 473 15.078 cv
473.121 15.031 473.223 15.008 473.305 15.004 cv
473.348 15.008 473.387 15.016 473.422 15.031 cv
473.449 15.051 473.477 15.082 473.496 15.129 cv
473.516 15.176 473.527 15.242 473.539 15.328 cv
473.543 15.414 473.547 15.523 473.551 15.652 cv
473.547 15.77 473.547 15.867 473.543 15.945 cv
473.535 16.027 473.527 16.094 473.52 16.148 cv
473.508 16.207 473.492 16.258 473.473 16.293 cv
473.453 16.336 473.426 16.371 473.395 16.406 cv
473.359 16.445 473.266 16.496 473.117 16.555 cv
472.961 16.621 472.77 16.684 472.539 16.738 cv
472.301 16.801 472.031 16.848 471.734 16.895 cv
471.43 16.934 471.109 16.957 470.77 16.961 cv
470.148 16.957 469.605 16.883 469.145 16.727 cv
468.676 16.574 468.289 16.336 467.98 16.02 cv
467.664 15.703 467.43 15.305 467.281 14.82 cv
467.125 14.34 467.051 13.773 467.055 13.117 cv
467.051 12.504 467.129 11.945 467.293 11.449 cv
467.449 10.953 467.684 10.535 467.996 10.187 cv
468.301 9.84399 468.676 9.578 469.113 9.39502 cv
469.551 9.21503 470.043 9.125 470.598 9.12097 cv
471.176 9.125 471.676 9.211 472.09 9.37903 cv
472.504 9.55499 472.84 9.79303 473.105 10.094 cv
473.367 10.398 473.563 10.758 473.691 11.172 cv
473.813 11.59 473.875 12.039 473.879 12.527 cv
cp
471.977 12.277 mo
471.988 11.727 471.879 11.293 471.645 10.98 cv
471.41 10.668 471.043 10.512 470.551 10.508 cv
470.301 10.512 470.086 10.559 469.902 10.648 cv
469.715 10.746 469.563 10.871 469.441 11.027 cv
469.316 11.187 469.223 11.375 469.16 11.59 cv
469.094 11.805 469.055 12.035 469.047 12.277 cv
cp
f
491.074 16.5 mo
491.07 16.555 491.059 16.602 491.031 16.641 cv
491 16.684 490.945 16.719 490.875 16.742 cv
490.797 16.77 490.699 16.789 490.574 16.805 cv
490.449 16.82 490.289 16.828 490.098 16.828 cv
489.91 16.828 489.754 16.82 489.633 16.805 cv
489.504 16.789 489.406 16.77 489.336 16.742 cv
489.262 16.719 489.211 16.684 489.18 16.641 cv
489.148 16.602 489.133 16.555 489.133 16.5 cv
489.133 8.29303 li
489.117 8.29303 li
486.195 16.492 li
486.172 16.562 486.137 16.617 486.094 16.66 cv
486.043 16.707 485.98 16.742 485.902 16.766 cv
485.82 16.793 485.719 16.809 485.594 16.816 cv
485.469 16.824 485.316 16.828 485.145 16.828 cv
484.965 16.828 484.816 16.82 484.691 16.809 cv
484.566 16.793 484.461 16.773 484.383 16.746 cv
484.297 16.719 484.234 16.684 484.191 16.641 cv
484.141 16.602 484.109 16.555 484.098 16.492 cv
481.277 8.29303 li
481.262 8.29303 li
481.262 16.5 li
481.258 16.555 481.242 16.602 481.219 16.641 cv
481.188 16.684 481.137 16.719 481.059 16.742 cv
480.98 16.77 480.879 16.789 480.758 16.805 cv
480.633 16.82 480.477 16.828 480.289 16.828 cv
480.098 16.828 479.941 16.82 479.82 16.805 cv
479.691 16.789 479.59 16.77 479.52 16.742 cv
479.441 16.719 479.391 16.684 479.363 16.641 cv
479.332 16.602 479.316 16.555 479.32 16.5 cv
479.32 7.51599 li
479.316 7.25403 479.387 7.05103 479.531 6.90601 cv
479.668 6.77002 479.855 6.69897 480.094 6.69501 cv
481.434 6.69501 li
481.672 6.69897 481.875 6.71899 482.047 6.75403 cv
482.215 6.797 482.363 6.85901 482.492 6.94897 cv
482.613 7.04303 482.719 7.164 482.805 7.30902 cv
482.887 7.461 482.957 7.64502 483.023 7.85901 cv
485.207 13.867 li
485.238 13.867 li
487.496 7.875 li
487.563 7.65601 487.637 7.47302 487.719 7.32001 cv
487.797 7.172 487.891 7.05103 488 6.953 cv
488.105 6.86298 488.23 6.797 488.375 6.75403 cv
488.52 6.71899 488.688 6.69897 488.883 6.69501 cv
490.262 6.69501 li
490.398 6.69897 490.52 6.71503 490.625 6.75 cv
490.723 6.789 490.805 6.84399 490.875 6.90997 cv
490.938 6.98401 490.988 7.07001 491.023 7.16803 cv
491.055 7.27301 491.07 7.39099 491.074 7.51599 cv
cp
f
500.184 12.969 mo
500.18 13.566 500.102 14.109 499.949 14.594 cv
499.789 15.086 499.555 15.504 499.238 15.855 cv
498.922 16.207 498.523 16.48 498.047 16.672 cv
497.566 16.863 497.008 16.957 496.371 16.961 cv
495.75 16.957 495.211 16.875 494.758 16.703 cv
494.297 16.535 493.918 16.285 493.621 15.957 cv
493.316 15.633 493.094 15.23 492.949 14.75 cv
492.805 14.273 492.734 13.727 492.734 13.109 cv
492.734 12.52 492.813 11.98 492.969 11.488 cv
493.125 11 493.363 10.578 493.684 10.227 cv
494 9.87903 494.395 9.60498 494.871 9.40997 cv
495.344 9.21899 495.902 9.125 496.543 9.12097 cv
497.168 9.125 497.707 9.20697 498.164 9.375 cv
498.621 9.547 499 9.797 499.297 10.121 cv
499.594 10.449 499.816 10.852 499.965 11.328 cv
500.109 11.809 500.18 12.355 500.184 12.969 cv
cp
498.164 13.047 mo
498.16 12.711 498.133 12.395 498.082 12.102 cv
498.023 11.816 497.93 11.566 497.805 11.352 cv
497.672 11.141 497.5 10.973 497.289 10.852 cv
497.07 10.734 496.801 10.676 496.473 10.672 cv
496.184 10.676 495.93 10.73 495.711 10.832 cv
495.492 10.941 495.313 11.098 495.172 11.301 cv
495.031 11.508 494.926 11.754 494.855 12.039 cv
494.785 12.332 494.75 12.66 494.75 13.023 cv
494.75 13.371 494.777 13.687 494.836 13.973 cv
494.891 14.266 494.984 14.516 495.113 14.727 cv
495.238 14.941 495.41 15.105 495.633 15.219 cv
495.848 15.34 496.117 15.398 496.441 15.395 cv
496.734 15.398 496.992 15.344 497.215 15.234 cv
497.43 15.129 497.609 14.977 497.75 14.77 cv
497.891 14.57 497.992 14.324 498.063 14.035 cv
498.125 13.75 498.16 13.422 498.164 13.047 cv
cp
f
508.332 16.516 mo
508.328 16.578 508.316 16.625 508.293 16.66 cv
508.266 16.703 508.219 16.734 508.16 16.758 cv
508.094 16.781 508.012 16.797 507.906 16.812 cv
507.801 16.82 507.668 16.828 507.516 16.828 cv
507.344 16.828 507.211 16.82 507.109 16.812 cv
507.004 16.797 506.918 16.781 506.855 16.758 cv
506.789 16.734 506.742 16.703 506.715 16.66 cv
506.684 16.625 506.668 16.578 506.672 16.516 cv
506.672 15.746 li
506.313 16.133 505.938 16.43 505.547 16.641 cv
505.148 16.852 504.715 16.957 504.242 16.961 cv
503.707 16.957 503.258 16.855 502.895 16.652 cv
502.527 16.449 502.23 16.176 502 15.824 cv
501.766 15.48 501.598 15.074 501.496 14.605 cv
501.395 14.145 501.344 13.652 501.344 13.133 cv
501.344 12.52 501.406 11.965 501.539 11.469 cv
501.668 10.977 501.863 10.555 502.121 10.207 cv
502.375 9.85901 502.691 9.59399 503.07 9.40198 cv
503.449 9.21899 503.887 9.125 504.383 9.12097 cv
504.77 9.125 505.121 9.203 505.441 9.35901 cv
505.754 9.52002 506.07 9.75 506.383 10.055 cv
506.383 6.29303 li
506.383 6.242 506.395 6.19501 506.426 6.15198 cv
506.449 6.11298 506.504 6.078 506.582 6.047 cv
506.656 6.02002 506.754 6 506.883 5.97998 cv
507.004 5.96899 507.164 5.961 507.359 5.95697 cv
507.551 5.961 507.707 5.96899 507.832 5.97998 cv
507.953 6 508.055 6.02002 508.129 6.047 cv
508.199 6.078 508.25 6.11298 508.285 6.15198 cv
508.313 6.19501 508.328 6.242 508.332 6.29303 cv
cp
506.383 11.871 mo
506.102 11.52 505.832 11.25 505.578 11.062 cv
505.316 10.875 505.047 10.781 504.77 10.781 cv
504.516 10.781 504.297 10.848 504.113 10.973 cv
503.926 11.105 503.777 11.273 503.668 11.484 cv
503.555 11.695 503.473 11.934 503.418 12.195 cv
503.363 12.461 503.336 12.73 503.336 13 cv
503.336 13.297 503.359 13.578 503.406 13.852 cv
503.453 14.129 503.527 14.375 503.637 14.59 cv
503.738 14.805 503.883 14.977 504.063 15.105 cv
504.238 15.238 504.461 15.305 504.73 15.301 cv
504.863 15.305 504.992 15.285 505.125 15.242 cv
505.25 15.207 505.383 15.145 505.516 15.051 cv
505.648 14.965 505.785 14.848 505.926 14.703 cv
506.066 14.562 506.219 14.387 506.383 14.18 cv
cp
f
516.73 12.84 mo
516.727 13.078 516.676 13.254 516.57 13.367 cv
516.461 13.484 516.313 13.543 516.133 13.539 cv
511.898 13.539 li
511.895 13.84 511.93 14.109 512.004 14.348 cv
512.07 14.59 512.184 14.793 512.34 14.961 cv
512.492 15.133 512.688 15.262 512.93 15.348 cv
513.168 15.437 513.457 15.48 513.801 15.48 cv
514.141 15.48 514.441 15.457 514.703 15.406 cv
514.961 15.359 515.188 15.305 515.379 15.242 cv
515.566 15.184 515.723 15.129 515.852 15.078 cv
515.973 15.031 516.074 15.008 516.156 15.004 cv
516.199 15.008 516.238 15.016 516.273 15.031 cv
516.301 15.051 516.328 15.082 516.348 15.129 cv
516.367 15.176 516.379 15.242 516.391 15.328 cv
516.395 15.414 516.398 15.523 516.402 15.652 cv
516.398 15.77 516.398 15.867 516.395 15.945 cv
516.387 16.027 516.379 16.094 516.371 16.148 cv
516.359 16.207 516.344 16.258 516.324 16.293 cv
516.305 16.336 516.277 16.371 516.246 16.406 cv
516.211 16.445 516.117 16.496 515.969 16.555 cv
515.813 16.621 515.621 16.684 515.391 16.738 cv
515.152 16.801 514.883 16.848 514.586 16.895 cv
514.281 16.934 513.961 16.957 513.621 16.961 cv
513 16.957 512.457 16.883 511.996 16.727 cv
511.527 16.574 511.141 16.336 510.832 16.02 cv
510.516 15.703 510.281 15.305 510.133 14.82 cv
509.977 14.34 509.902 13.773 509.906 13.117 cv
509.902 12.504 509.98 11.945 510.145 11.449 cv
510.301 10.953 510.535 10.535 510.848 10.187 cv
511.152 9.84399 511.527 9.578 511.965 9.39502 cv
512.402 9.21503 512.895 9.125 513.449 9.12097 cv
514.027 9.125 514.527 9.211 514.941 9.37903 cv
515.355 9.55499 515.691 9.79303 515.957 10.094 cv
516.219 10.398 516.414 10.758 516.543 11.172 cv
516.664 11.59 516.727 12.039 516.73 12.527 cv
cp
514.828 12.277 mo
514.84 11.727 514.73 11.293 514.496 10.98 cv
514.262 10.668 513.895 10.512 513.402 10.508 cv
513.152 10.512 512.938 10.559 512.754 10.648 cv
512.566 10.746 512.414 10.871 512.293 11.027 cv
512.168 11.187 512.074 11.375 512.012 11.59 cv
511.945 11.805 511.906 12.035 511.898 12.277 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
