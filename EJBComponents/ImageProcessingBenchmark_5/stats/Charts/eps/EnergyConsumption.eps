%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: EnergyConsumption.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:40:48 p.m.
%%BoundingBox: 0 0 701 545
%%HiResBoundingBox: 0 0 700.6800 544.8000
%%CropBox: 0 0 700.6800 544.8000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -544.8 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 544.8 li
700.68 544.8 li
700.68 0 li
cp
clp
gsave
0 544.8 mo
701 544.8 li
701 -.200012 li
0 -.200012 li
cp
clp
0 0 mo
700.68 0 li
700.68 544.801 li
0 544.801 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
61.078 476.16 mo
683.52 476.16 li
61.078 437.398 mo
683.52 437.398 li
61.078 398.641 mo
683.52 398.641 li
61.078 359.879 mo
683.52 359.879 li
61.078 321.238 mo
683.52 321.238 li
61.078 282.48 mo
683.52 282.48 li
61.078 243.719 mo
683.52 243.719 li
61.078 204.961 mo
683.52 204.961 li
61.078 166.32 mo
683.52 166.32 li
61.078 127.559 mo
683.52 127.559 li
61.078 88.801 mo
683.52 88.801 li
61.078 50.039 mo
683.52 50.039 li
.135805 .104005 .108583 0 cmyk
@
61.078 456.719 mo
683.52 456.719 li
61.078 418.078 mo
683.52 418.078 li
61.078 379.32 mo
683.52 379.32 li
61.078 340.559 mo
683.52 340.559 li
61.078 301.801 mo
683.52 301.801 li
61.078 263.16 mo
683.52 263.16 li
61.078 224.398 mo
683.52 224.398 li
61.078 185.641 mo
683.52 185.641 li
61.078 146.879 mo
683.52 146.879 li
61.078 108.238 mo
683.52 108.238 li
61.078 69.48 mo
683.52 69.48 li
61.078 30.719 mo
683.52 30.719 li
.326574 .281529 .277562 0 cmyk
@
99.961 30.719 mo
99.961 495.48 li
177.84 30.719 mo
177.84 495.48 li
255.602 30.719 mo
255.602 495.48 li
333.359 30.719 mo
333.359 495.48 li
411.238 30.719 mo
411.238 495.48 li
489 30.719 mo
489 495.48 li
566.762 30.719 mo
566.762 495.48 li
644.641 30.719 mo
644.641 495.48 li
.175235 .144778 .143648 0 cmyk
@
61.078 30.719 mo
61.078 495.48 li
138.84 30.719 mo
138.84 495.48 li
216.719 30.719 mo
216.719 495.48 li
294.48 30.719 mo
294.48 495.48 li
372.359 30.719 mo
372.359 495.48 li
450.121 30.719 mo
450.121 495.48 li
527.879 30.719 mo
527.879 495.48 li
605.762 30.719 mo
605.762 495.48 li
683.52 30.719 mo
683.52 495.48 li
.326574 .281529 .277562 0 cmyk
@
41.039 486.121 mo
48.121 486.121 li
48.121 503.281 li
41.039 503.281 li
cp
0 0 0 0 cmyk
ef
41.039 447.48 mo
48.121 447.48 li
48.121 464.519 li
41.039 464.519 li
cp
ef
33.84 408.719 mo
48.121 408.719 li
48.121 425.762 li
33.84 425.762 li
cp
ef
33.84 369.961 mo
48.121 369.961 li
48.121 387.121 li
33.84 387.121 li
cp
ef
33.84 331.199 mo
48.121 331.199 li
48.121 348.359 li
33.84 348.359 li
cp
ef
33.84 292.559 mo
48.121 292.559 li
48.121 309.602 li
33.84 309.602 li
cp
ef
33.84 253.801 mo
48.121 253.801 li
48.121 270.84 li
33.84 270.84 li
cp
ef
33.84 215.039 mo
48.121 215.039 li
48.121 232.199 li
33.84 232.199 li
cp
ef
33.84 176.281 mo
48.121 176.281 li
48.121 193.441 li
33.84 193.441 li
cp
ef
33.84 137.641 mo
48.121 137.641 li
48.121 154.68 li
33.84 154.68 li
cp
ef
33.84 98.879 mo
48.121 98.879 li
48.121 115.922 li
33.84 115.922 li
cp
ef
33.84 60.121 mo
48.121 60.121 li
48.121 77.281 li
33.84 77.281 li
cp
ef
33.84 21.359 mo
48.121 21.359 li
48.121 38.519 li
33.84 38.519 li
cp
ef
.96 lw
61.078 495.48 mo
683.52 495.48 li
.369879 .299321 .304356 .000976577 cmyk
@
61.078 495.48 mo
61.078 499.922 li
138.84 495.48 mo
138.84 499.922 li
216.719 495.48 mo
216.719 499.922 li
294.48 495.48 mo
294.48 499.922 li
372.359 495.48 mo
372.359 499.922 li
450.121 495.48 mo
450.121 499.922 li
527.879 495.48 mo
527.879 499.922 li
605.762 495.48 mo
605.762 499.922 li
683.52 495.48 mo
683.52 499.922 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
1 lc
61.078 133.32 mo
138.84 68.039 li
216.719 30.719 li
294.48 133.801 li
372.359 114.719 li
450.121 114 li
527.879 114.359 li
605.762 113.398 li
683.52 113.398 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
66.039 138.27 mo
55.961 128.191 li
55.961 138.27 mo
66.039 128.191 li
.62829 .284672 0 0 cmyk
@
143.922 73.109 mo
133.84 63.031 li
133.84 73.109 mo
143.922 63.031 li
@
221.68 35.789 mo
211.602 25.711 li
211.602 35.789 mo
221.68 25.711 li
@
299.559 138.75 mo
289.48 128.672 li
289.48 138.75 mo
299.559 128.672 li
@
377.32 119.672 mo
367.238 109.59 li
367.238 119.672 mo
377.32 109.59 li
@
455.078 118.949 mo
445 108.871 li
445 118.949 mo
455.078 108.871 li
@
532.961 119.309 mo
522.879 109.23 li
522.879 119.309 mo
532.961 109.23 li
@
610.719 118.352 mo
600.641 108.27 li
600.641 118.352 mo
610.719 108.27 li
@
688.602 118.352 mo
678.52 108.27 li
678.52 118.352 mo
688.602 108.27 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 135.719 mo
138.84 250.078 li
216.719 318.961 li
294.48 332.398 li
372.359 345.602 li
450.121 351.238 li
527.879 350.52 li
605.762 367.199 li
683.52 355.199 li
@
grestore
55.961 130.711 mo
65.922 130.711 li
65.922 140.672 li
55.961 140.672 li
cp
@
133.84 245.07 mo
143.801 245.07 li
143.801 255.031 li
133.84 255.031 li
cp
@
211.602 313.828 mo
221.559 313.828 li
221.559 323.789 li
211.602 323.789 li
cp
@
289.48 327.27 mo
299.441 327.27 li
299.441 337.231 li
289.48 337.231 li
cp
@
367.238 340.59 mo
377.199 340.59 li
377.199 350.551 li
367.238 350.551 li
cp
@
445 346.23 mo
454.961 346.23 li
454.961 356.191 li
445 356.191 li
cp
@
522.879 345.391 mo
532.84 345.391 li
532.84 355.352 li
522.879 355.352 li
cp
@
600.641 362.191 mo
610.602 362.191 li
610.602 372.148 li
600.641 372.148 li
cp
@
678.52 350.191 mo
688.481 350.191 li
688.481 360.148 li
678.52 360.148 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 203.281 mo
138.84 220.801 li
216.719 211.801 li
294.48 297.238 li
372.359 249.121 li
450.121 248.879 li
527.879 248.52 li
605.762 248.879 li
683.52 248.52 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
66.039 208.352 mo
55.961 198.27 li
55.961 208.352 mo
66.039 198.27 li
.0321965 .622736 .922606 .000579843 cmyk
@
143.922 225.871 mo
133.84 215.789 li
133.84 225.871 mo
143.922 215.789 li
@
221.68 216.75 mo
211.602 206.672 li
211.602 216.75 mo
221.68 206.672 li
@
299.559 302.309 mo
289.48 292.23 li
289.48 302.309 mo
299.559 292.23 li
@
377.32 254.191 mo
367.238 244.109 li
367.238 254.191 mo
377.32 244.109 li
@
455.078 253.949 mo
445 243.871 li
445 253.949 mo
455.078 243.871 li
@
532.961 253.469 mo
522.879 243.391 li
522.879 253.469 mo
532.961 243.391 li
@
610.719 253.949 mo
600.641 243.871 li
600.641 253.949 mo
610.719 243.871 li
@
688.602 253.469 mo
678.52 243.391 li
678.52 253.469 mo
688.602 243.391 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 124.922 mo
138.84 303.602 li
216.719 380.52 li
294.48 366.719 li
372.359 400.559 li
450.121 422.039 li
527.879 405.602 li
605.762 373.801 li
683.52 400.68 li
@
grestore
55.961 119.91 mo
65.922 119.91 li
65.922 129.871 li
55.961 129.871 li
cp
@
133.84 298.59 mo
143.801 298.59 li
143.801 308.551 li
133.84 308.551 li
cp
@
211.602 375.512 mo
221.559 375.512 li
221.559 385.469 li
211.602 385.469 li
cp
@
289.48 361.59 mo
299.441 361.59 li
299.441 371.551 li
289.48 371.551 li
cp
@
367.238 395.551 mo
377.199 395.551 li
377.199 405.512 li
367.238 405.512 li
cp
@
445 417.031 mo
454.961 417.031 li
454.961 426.988 li
445 426.988 li
cp
@
522.879 400.469 mo
532.84 400.469 li
532.84 410.43 li
522.879 410.43 li
cp
@
600.641 368.672 mo
610.602 368.672 li
610.602 378.629 li
600.641 378.629 li
cp
@
678.52 395.551 mo
688.481 395.551 li
688.481 405.512 li
678.52 405.512 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 186.48 mo
138.84 213.121 li
216.719 276.121 li
294.48 335.641 li
372.359 247.078 li
450.121 244.199 li
527.879 258.121 li
605.762 249.84 li
683.52 254.281 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
66.039 191.43 mo
55.961 181.352 li
55.961 191.43 mo
66.039 181.352 li
.621118 .109194 .980743 .0040589 cmyk
@
143.922 218.07 mo
133.84 207.988 li
133.84 218.07 mo
143.922 207.988 li
@
221.68 281.07 mo
211.602 270.988 li
211.602 281.07 mo
221.68 270.988 li
@
299.559 340.59 mo
289.48 330.512 li
289.48 340.59 mo
299.559 330.512 li
@
377.32 252.031 mo
367.238 241.949 li
367.238 252.031 mo
377.32 241.949 li
@
455.078 249.27 mo
445 239.191 li
445 249.27 mo
455.078 239.191 li
@
532.961 263.191 mo
522.879 253.109 li
522.879 263.191 mo
532.961 253.109 li
@
610.719 254.789 mo
600.641 244.711 li
600.641 254.789 mo
610.719 244.711 li
@
688.602 259.23 mo
678.52 249.148 li
678.52 259.23 mo
688.602 249.148 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 124.32 mo
138.84 310.078 li
216.719 379.68 li
294.48 367.199 li
372.359 388.801 li
450.121 380.16 li
527.879 395.16 li
605.762 388.078 li
683.52 408.359 li
@
grestore
55.961 119.309 mo
65.922 119.309 li
65.922 129.27 li
55.961 129.27 li
cp
@
133.84 304.949 mo
143.801 304.949 li
143.801 314.91 li
133.84 314.91 li
cp
@
211.602 374.551 mo
221.559 374.551 li
221.559 384.512 li
211.602 384.512 li
cp
@
289.48 362.191 mo
299.441 362.191 li
299.441 372.148 li
289.48 372.148 li
cp
@
367.238 383.789 mo
377.199 383.789 li
377.199 393.75 li
367.238 393.75 li
cp
@
445 375.148 mo
454.961 375.148 li
454.961 385.109 li
445 385.109 li
cp
@
522.879 390.148 mo
532.84 390.148 li
532.84 400.109 li
522.879 400.109 li
cp
@
600.641 383.07 mo
610.602 383.07 li
610.602 393.031 li
600.641 393.031 li
cp
@
678.52 403.23 mo
688.481 403.23 li
688.481 413.191 li
678.52 413.191 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 145.68 mo
138.84 256.32 li
216.719 331.801 li
294.48 273.359 li
372.359 281.039 li
450.121 260.879 li
527.879 276 li
605.762 263.039 li
683.52 269.879 li
0 .993988 1 0 cmyk
@
grestore
66.039 150.629 mo
55.961 140.551 li
55.961 150.629 mo
66.039 140.551 li
0 .993988 1 0 cmyk
@
143.922 261.391 mo
133.84 251.309 li
133.84 261.391 mo
143.922 251.309 li
@
221.68 336.871 mo
211.602 326.789 li
211.602 336.871 mo
221.68 326.789 li
@
299.559 278.43 mo
289.48 268.352 li
289.48 278.43 mo
299.559 268.352 li
@
377.32 285.988 mo
367.238 275.91 li
367.238 285.988 mo
377.32 275.91 li
@
455.078 265.949 mo
445 255.871 li
445 265.949 mo
455.078 255.871 li
@
532.961 280.949 mo
522.879 270.871 li
522.879 280.949 mo
532.961 270.871 li
@
610.719 268.109 mo
600.641 258.031 li
600.641 268.109 mo
610.719 258.031 li
@
688.602 274.828 mo
678.52 264.75 li
678.52 274.828 mo
688.602 264.75 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
61.078 124.32 mo
138.84 276.602 li
216.719 321.238 li
294.48 395.762 li
372.359 369.719 li
450.121 393.48 li
527.879 380.16 li
605.762 381.961 li
683.52 401.16 li
@
grestore
55.961 119.309 mo
65.922 119.309 li
65.922 129.27 li
55.961 129.27 li
cp
@
133.84 271.469 mo
143.801 271.469 li
143.801 281.43 li
133.84 281.43 li
cp
@
211.602 316.109 mo
221.559 316.109 li
221.559 326.07 li
211.602 326.07 li
cp
@
289.48 390.75 mo
299.441 390.75 li
299.441 400.711 li
289.48 400.711 li
cp
@
367.238 364.59 mo
377.199 364.59 li
377.199 374.551 li
367.238 374.551 li
cp
@
445 388.352 mo
454.961 388.352 li
454.961 398.309 li
445 398.309 li
cp
@
522.879 375.031 mo
532.84 375.031 li
532.84 384.988 li
522.879 384.988 li
cp
@
600.641 376.949 mo
610.602 376.949 li
610.602 386.91 li
600.641 386.91 li
cp
@
678.52 396.031 mo
688.481 396.031 li
688.481 405.988 li
678.52 405.988 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 158.641 mo
138.84 300.238 li
216.719 331.801 li
294.48 276.719 li
372.359 271.922 li
450.121 276.961 li
527.879 265.32 li
605.762 278.641 li
683.52 267.961 li
.62829 .284672 0 0 cmyk
@
grestore
65.559 163.23 mo
56.441 154.109 li
56.441 163.23 mo
65.559 154.109 li
.62829 .284672 0 0 cmyk
@
143.441 304.828 mo
134.32 295.711 li
134.32 304.828 mo
143.441 295.711 li
@
221.199 336.391 mo
212.078 327.27 li
212.078 336.391 mo
221.199 327.27 li
@
299.078 281.191 mo
289.961 272.07 li
289.961 281.191 mo
299.078 272.07 li
@
376.84 276.512 mo
367.719 267.391 li
367.719 276.512 mo
376.84 267.391 li
@
454.602 281.551 mo
445.48 272.43 li
445.48 281.551 mo
454.602 272.43 li
@
532.48 269.789 mo
523.359 260.672 li
523.359 269.789 mo
532.48 260.672 li
@
610.238 283.23 mo
601.121 274.109 li
601.121 283.23 mo
610.238 274.109 li
@
688.121 272.43 mo
679 263.309 li
679 272.43 mo
688.121 263.309 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 123.48 mo
138.84 299.398 li
216.719 363.359 li
294.48 394.559 li
372.359 391.078 li
450.121 403.922 li
527.879 405.719 li
605.762 387.602 li
683.52 429.238 li
@
grestore
55.961 118.469 mo
65.922 118.469 li
65.922 128.43 li
55.961 128.43 li
cp
@
133.84 294.391 mo
143.801 294.391 li
143.801 304.352 li
133.84 304.352 li
cp
@
211.602 358.352 mo
221.559 358.352 li
221.559 368.309 li
211.602 368.309 li
cp
@
289.48 389.43 mo
299.441 389.43 li
299.441 399.391 li
289.48 399.391 li
cp
@
367.238 385.949 mo
377.199 385.949 li
377.199 395.91 li
367.238 395.91 li
cp
@
445 398.789 mo
454.961 398.789 li
454.961 408.75 li
445 408.75 li
cp
@
522.879 400.59 mo
532.84 400.59 li
532.84 410.551 li
522.879 410.551 li
cp
@
600.641 382.469 mo
610.602 382.469 li
610.602 392.43 li
600.641 392.43 li
cp
@
678.52 424.23 mo
688.481 424.23 li
688.481 434.191 li
678.52 434.191 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 155.16 mo
138.84 253.559 li
216.719 343.199 li
294.48 328.801 li
372.359 277.68 li
450.121 279.602 li
527.879 283.68 li
605.762 270.238 li
683.52 317.039 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
66.039 160.109 mo
55.961 150.031 li
55.961 160.109 mo
66.039 150.031 li
.0321965 .622736 .922606 .000579843 cmyk
@
143.922 258.629 mo
133.84 248.551 li
133.84 258.629 mo
143.922 248.551 li
@
221.68 348.27 mo
211.602 338.191 li
211.602 348.27 mo
221.68 338.191 li
@
299.559 333.871 mo
289.48 323.789 li
289.48 333.871 mo
299.559 323.789 li
@
377.32 282.629 mo
367.238 272.551 li
367.238 282.629 mo
377.32 272.551 li
@
455.078 284.672 mo
445 274.59 li
445 284.672 mo
455.078 274.59 li
@
532.961 288.629 mo
522.879 278.551 li
522.879 288.629 mo
532.961 278.551 li
@
610.719 275.309 mo
600.641 265.23 li
600.641 275.309 mo
610.719 265.23 li
@
688.602 321.988 mo
678.52 311.91 li
678.52 321.988 mo
688.602 311.91 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 130.32 mo
138.84 293.762 li
216.719 377.641 li
294.48 371.281 li
372.359 396.84 li
450.121 393.84 li
527.879 386.762 li
605.762 387.961 li
683.52 391.078 li
@
grestore
56.441 125.789 mo
65.441 125.789 li
65.441 134.789 li
56.441 134.789 li
cp
@
134.32 289.23 mo
143.32 289.23 li
143.32 298.23 li
134.32 298.23 li
cp
@
212.078 372.988 mo
221.078 372.988 li
221.078 381.988 li
212.078 381.988 li
cp
@
289.961 366.629 mo
298.961 366.629 li
298.961 375.629 li
289.961 375.629 li
cp
@
367.719 392.309 mo
376.719 392.309 li
376.719 401.309 li
367.719 401.309 li
cp
@
445.48 389.309 mo
454.48 389.309 li
454.48 398.309 li
445.48 398.309 li
cp
@
523.359 382.23 mo
532.359 382.23 li
532.359 391.23 li
523.359 391.23 li
cp
@
601.121 383.43 mo
610.121 383.43 li
610.121 392.43 li
601.121 392.43 li
cp
@
679 386.43 mo
688 386.43 li
688 395.43 li
679 395.43 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 155.16 mo
138.84 257.039 li
216.719 330.48 li
294.48 313.801 li
372.359 269.281 li
450.121 269.879 li
527.879 287.039 li
605.762 283.68 li
683.52 310.68 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
66.039 160.109 mo
55.961 150.031 li
55.961 160.109 mo
66.039 150.031 li
.621118 .109194 .980743 .0040589 cmyk
@
143.922 261.988 mo
133.84 251.91 li
133.84 261.988 mo
143.922 251.91 li
@
221.68 335.551 mo
211.602 325.469 li
211.602 335.551 mo
221.68 325.469 li
@
299.559 318.75 mo
289.48 308.672 li
289.48 318.75 mo
299.559 308.672 li
@
377.32 274.23 mo
367.238 264.148 li
367.238 274.23 mo
377.32 264.148 li
@
455.078 274.828 mo
445 264.75 li
445 274.828 mo
455.078 264.75 li
@
532.961 291.988 mo
522.879 281.91 li
522.879 291.988 mo
532.961 281.91 li
@
610.719 288.75 mo
600.641 278.672 li
600.641 288.75 mo
610.719 278.672 li
@
688.602 315.75 mo
678.52 305.672 li
678.52 315.75 mo
688.602 305.672 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 135.719 mo
138.84 303.602 li
216.719 395.762 li
294.48 387.602 li
372.359 380.52 li
450.121 382.559 li
527.879 381.238 li
605.762 395.52 li
683.52 422.762 li
@
grestore
55.961 130.711 mo
65.922 130.711 li
65.922 140.672 li
55.961 140.672 li
cp
@
133.84 298.59 mo
143.801 298.59 li
143.801 308.551 li
133.84 308.551 li
cp
@
211.602 390.75 mo
221.559 390.75 li
221.559 400.711 li
211.602 400.711 li
cp
@
289.48 382.469 mo
299.441 382.469 li
299.441 392.43 li
289.48 392.43 li
cp
@
367.238 375.512 mo
377.199 375.512 li
377.199 385.469 li
367.238 385.469 li
cp
@
445 377.43 mo
454.961 377.43 li
454.961 387.391 li
445 387.391 li
cp
@
522.879 376.23 mo
532.84 376.23 li
532.84 386.191 li
522.879 386.191 li
cp
@
600.641 390.512 mo
610.602 390.512 li
610.602 400.469 li
600.641 400.469 li
cp
@
678.52 417.629 mo
688.481 417.629 li
688.481 427.59 li
678.52 427.59 li
cp
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 144.359 mo
138.84 257.039 li
216.719 347.281 li
294.48 308.039 li
372.359 288.238 li
450.121 269.641 li
527.879 282 li
605.762 279.359 li
683.52 313.078 li
0 .993988 1 0 cmyk
@
grestore
66.039 149.309 mo
55.961 139.23 li
55.961 149.309 mo
66.039 139.23 li
0 .993988 1 0 cmyk
@
143.922 261.988 mo
133.84 251.91 li
133.84 261.988 mo
143.922 251.91 li
@
221.68 352.23 mo
211.602 342.148 li
211.602 352.23 mo
221.68 342.148 li
@
299.559 313.109 mo
289.48 303.031 li
289.48 313.109 mo
299.559 303.031 li
@
377.32 293.309 mo
367.238 283.23 li
367.238 293.309 mo
377.32 283.23 li
@
455.078 274.59 mo
445 264.512 li
445 274.59 mo
455.078 264.512 li
@
532.961 286.949 mo
522.879 276.871 li
522.879 286.949 mo
532.961 276.871 li
@
610.719 284.309 mo
600.641 274.23 li
600.641 284.309 mo
610.719 274.23 li
@
688.602 318.148 mo
678.52 308.07 li
678.52 318.148 mo
688.602 308.07 li
@
gsave
61.078 30.719 mo
684.238 30.719 li
684.238 496.199 li
61.078 496.199 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
61.078 135.719 mo
138.84 307.32 li
216.719 405.121 li
294.48 418.199 li
372.359 391.801 li
450.121 395.16 li
527.879 385.922 li
605.762 402.961 li
683.52 408.602 li
@
grestore
55.961 130.711 mo
65.922 130.711 li
65.922 140.672 li
55.961 140.672 li
cp
@
133.84 302.309 mo
143.801 302.309 li
143.801 312.27 li
133.84 312.27 li
cp
@
211.602 400.109 mo
221.559 400.109 li
221.559 410.07 li
211.602 410.07 li
cp
@
289.48 413.07 mo
299.441 413.07 li
299.441 423.031 li
289.48 423.031 li
cp
@
367.238 386.789 mo
377.199 386.789 li
377.199 396.75 li
367.238 396.75 li
cp
@
445 390.148 mo
454.961 390.148 li
454.961 400.109 li
445 400.109 li
cp
@
522.879 380.789 mo
532.84 380.789 li
532.84 390.75 li
522.879 390.75 li
cp
@
600.641 397.828 mo
610.602 397.828 li
610.602 407.789 li
600.641 407.789 li
cp
@
678.52 403.59 mo
688.481 403.59 li
688.481 413.551 li
678.52 413.551 li
cp
@
41.031 486.195 mo
48.125 486.195 li
48.125 503.285 li
41.031 503.285 li
cp
0 0 0 0 cmyk
ef
47.668 495.152 mo
47.664 495.836 47.613 496.457 47.508 497.02 cv
47.398 497.582 47.219 498.066 46.973 498.469 cv
46.719 498.875 46.391 499.187 45.992 499.406 cv
45.586 499.629 45.094 499.738 44.508 499.738 cv
43.949 499.738 43.477 499.641 43.098 499.441 cv
42.715 499.246 42.41 498.953 42.176 498.566 cv
41.941 498.18 41.773 497.707 41.68 497.141 cv
41.578 496.578 41.531 495.93 41.531 495.195 cv
41.531 494.523 41.586 493.902 41.695 493.336 cv
41.805 492.773 41.98 492.289 42.23 491.883 cv
42.473 491.48 42.797 491.168 43.203 490.941 cv
43.602 490.723 44.098 490.609 44.688 490.609 cv
45.246 490.609 45.719 490.711 46.102 490.906 cv
46.484 491.109 46.789 491.402 47.023 491.785 cv
47.254 492.176 47.422 492.648 47.52 493.211 cv
47.617 493.773 47.664 494.422 47.668 495.152 cv
cp
46.461 495.234 mo
46.457 494.793 46.441 494.395 46.414 494.043 cv
46.379 493.691 46.332 493.383 46.273 493.113 cv
46.207 492.844 46.129 492.613 46.031 492.418 cv
45.934 492.227 45.816 492.066 45.68 491.937 cv
45.539 491.812 45.379 491.719 45.207 491.66 cv
45.027 491.605 44.832 491.578 44.617 491.574 cv
44.227 491.578 43.91 491.668 43.672 491.852 cv
43.426 492.035 43.234 492.289 43.098 492.605 cv
42.957 492.926 42.863 493.297 42.813 493.727 cv
42.762 494.156 42.738 494.621 42.738 495.113 cv
42.738 495.777 42.77 496.34 42.84 496.801 cv
42.906 497.27 43.016 497.648 43.168 497.937 cv
43.313 498.234 43.504 498.445 43.734 498.574 cv
43.965 498.711 44.246 498.777 44.578 498.773 cv
44.832 498.777 45.055 498.738 45.25 498.652 cv
45.441 498.574 45.609 498.453 45.75 498.297 cv
45.891 498.145 46.004 497.961 46.098 497.746 cv
46.184 497.531 46.258 497.293 46.316 497.031 cv
46.367 496.773 46.406 496.492 46.43 496.187 cv
46.449 495.883 46.457 495.566 46.461 495.234 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.031 447.461 mo
48.125 447.461 li
48.125 464.551 li
41.031 464.551 li
cp
0 0 0 0 cmyk
ef
47.332 458.02 mo
47.332 458.496 47.25 458.918 47.09 459.289 cv
46.93 459.66 46.703 459.973 46.414 460.227 cv
46.117 460.48 45.77 460.676 45.367 460.805 cv
44.961 460.937 44.512 461 44.02 461 cv
43.742 461 43.48 460.98 43.238 460.941 cv
42.988 460.902 42.77 460.855 42.582 460.801 cv
42.387 460.746 42.23 460.691 42.105 460.633 cv
41.98 460.582 41.902 460.539 41.871 460.504 cv
41.836 460.473 41.813 460.441 41.801 460.414 cv
41.785 460.387 41.77 460.355 41.762 460.312 cv
41.746 460.277 41.738 460.227 41.738 460.164 cv
41.73 460.105 41.73 460.035 41.73 459.953 cv
41.73 459.879 41.734 459.809 41.742 459.746 cv
41.75 459.684 41.762 459.633 41.781 459.594 cv
41.797 459.555 41.816 459.527 41.844 459.508 cv
41.867 459.492 41.898 459.484 41.93 459.48 cv
41.977 459.484 42.047 459.512 42.141 459.566 cv
42.234 459.625 42.363 459.687 42.527 459.754 cv
42.691 459.82 42.891 459.883 43.133 459.941 cv
43.367 460 43.652 460.027 43.988 460.027 cv
44.289 460.027 44.57 459.992 44.828 459.918 cv
45.082 459.848 45.305 459.734 45.492 459.578 cv
45.676 459.426 45.82 459.23 45.926 458.992 cv
46.031 458.758 46.082 458.469 46.086 458.129 cv
46.082 457.848 46.039 457.598 45.949 457.379 cv
45.859 457.16 45.723 456.98 45.539 456.836 cv
45.352 456.695 45.117 456.59 44.836 456.516 cv
44.551 456.445 44.211 456.406 43.824 456.406 cv
43.539 456.406 43.301 456.422 43.102 456.449 cv
42.898 456.48 42.711 456.496 42.539 456.492 cv
42.41 456.496 42.316 456.465 42.266 456.402 cv
42.207 456.344 42.18 456.23 42.184 456.059 cv
42.184 452.445 li
42.18 452.297 42.215 452.187 42.289 452.109 cv
42.355 452.039 42.457 452 42.594 452 cv
46.523 452 li
46.559 452 46.594 452.012 46.629 452.031 cv
46.66 452.055 46.688 452.086 46.715 452.125 cv
46.734 452.168 46.75 452.219 46.766 452.281 cv
46.773 452.348 46.781 452.426 46.785 452.508 cv
46.781 452.676 46.758 452.801 46.719 452.891 cv
46.672 452.984 46.613 453.031 46.535 453.027 cv
43.363 453.027 li
43.363 455.516 li
43.516 455.496 43.672 455.484 43.836 455.477 cv
43.992 455.473 44.18 455.469 44.395 455.469 cv
44.879 455.469 45.305 455.531 45.672 455.652 cv
46.035 455.773 46.34 455.945 46.59 456.164 cv
46.832 456.391 47.02 456.656 47.145 456.969 cv
47.27 457.285 47.332 457.637 47.332 458.02 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
33.941 408.738 mo
48.129 408.738 li
48.129 425.828 li
33.941 425.828 li
cp
0 0 0 0 cmyk
ef
40.316 421.676 mo
40.313 421.766 40.305 421.836 40.293 421.895 cv
40.277 421.957 40.258 422.008 40.238 422.039 cv
40.215 422.078 40.191 422.102 40.16 422.117 cv
40.129 422.133 40.098 422.141 40.07 422.141 cv
35.434 422.141 li
35.398 422.141 35.371 422.133 35.344 422.117 cv
35.316 422.102 35.289 422.078 35.266 422.039 cv
35.238 422.008 35.219 421.957 35.207 421.895 cv
35.191 421.836 35.184 421.766 35.188 421.676 cv
35.184 421.598 35.191 421.523 35.207 421.461 cv
35.219 421.402 35.234 421.355 35.258 421.316 cv
35.273 421.281 35.301 421.25 35.332 421.227 cv
35.363 421.207 35.395 421.199 35.434 421.195 cv
37.285 421.195 li
37.285 414.449 li
35.57 415.469 li
35.48 415.52 35.41 415.547 35.363 415.555 cv
35.309 415.562 35.266 415.555 35.234 415.523 cv
35.199 415.496 35.18 415.445 35.168 415.375 cv
35.156 415.309 35.148 415.223 35.152 415.113 cv
35.148 415.039 35.152 414.973 35.164 414.914 cv
35.168 414.863 35.18 414.816 35.195 414.777 cv
35.207 414.742 35.227 414.711 35.25 414.684 cv
35.273 414.656 35.305 414.629 35.352 414.602 cv
37.395 413.289 li
37.41 413.277 37.43 413.266 37.461 413.258 cv
37.484 413.25 37.52 413.242 37.566 413.23 cv
37.605 413.223 37.656 413.215 37.711 413.211 cv
37.766 413.211 37.832 413.211 37.918 413.207 cv
38.023 413.211 38.117 413.215 38.191 413.223 cv
38.262 413.23 38.316 413.246 38.363 413.262 cv
38.402 413.281 38.43 413.301 38.445 413.324 cv
38.453 413.352 38.461 413.375 38.465 413.398 cv
38.465 421.195 li
40.07 421.195 li
40.105 421.199 40.141 421.207 40.172 421.227 cv
40.203 421.25 40.227 421.281 40.25 421.316 cv
40.266 421.355 40.281 421.402 40.297 421.461 cv
40.305 421.523 40.313 421.598 40.316 421.676 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 417.684 mo
47.664 418.367 47.613 418.988 47.508 419.551 cv
47.398 420.113 47.219 420.598 46.973 421 cv
46.719 421.406 46.391 421.719 45.992 421.937 cv
45.586 422.16 45.094 422.27 44.508 422.27 cv
43.949 422.27 43.477 422.172 43.098 421.973 cv
42.715 421.777 42.41 421.484 42.176 421.098 cv
41.941 420.711 41.773 420.238 41.68 419.672 cv
41.578 419.109 41.531 418.461 41.531 417.727 cv
41.531 417.055 41.586 416.434 41.695 415.867 cv
41.805 415.305 41.98 414.82 42.23 414.414 cv
42.473 414.012 42.797 413.699 43.203 413.473 cv
43.602 413.254 44.098 413.141 44.688 413.141 cv
45.246 413.141 45.719 413.242 46.102 413.437 cv
46.484 413.641 46.789 413.934 47.023 414.316 cv
47.254 414.707 47.422 415.18 47.52 415.742 cv
47.617 416.305 47.664 416.953 47.668 417.684 cv
cp
46.461 417.766 mo
46.457 417.324 46.441 416.926 46.414 416.574 cv
46.379 416.223 46.332 415.914 46.273 415.645 cv
46.207 415.375 46.129 415.145 46.031 414.949 cv
45.934 414.758 45.816 414.598 45.68 414.469 cv
45.539 414.344 45.379 414.25 45.207 414.191 cv
45.027 414.137 44.832 414.109 44.617 414.105 cv
44.227 414.109 43.91 414.199 43.672 414.383 cv
43.426 414.566 43.234 414.82 43.098 415.137 cv
42.957 415.457 42.863 415.828 42.813 416.258 cv
42.762 416.687 42.738 417.152 42.738 417.645 cv
42.738 418.309 42.77 418.871 42.84 419.332 cv
42.906 419.801 43.016 420.18 43.168 420.469 cv
43.313 420.766 43.504 420.977 43.734 421.105 cv
43.965 421.242 44.246 421.309 44.578 421.305 cv
44.832 421.309 45.055 421.27 45.25 421.184 cv
45.441 421.105 45.609 420.984 45.75 420.828 cv
45.891 420.676 46.004 420.492 46.098 420.277 cv
46.184 420.062 46.258 419.824 46.316 419.562 cv
46.367 419.305 46.406 419.023 46.43 418.719 cv
46.449 418.414 46.457 418.098 46.461 417.766 cv
cp
f
33.941 370.012 mo
48.129 370.012 li
48.129 387.102 li
33.941 387.102 li
cp
0 0 0 0 cmyk
ef
40.316 382.934 mo
40.313 383.023 40.305 383.094 40.293 383.152 cv
40.277 383.215 40.258 383.266 40.238 383.297 cv
40.215 383.336 40.191 383.359 40.16 383.375 cv
40.129 383.391 40.098 383.398 40.07 383.398 cv
35.434 383.398 li
35.398 383.398 35.371 383.391 35.344 383.375 cv
35.316 383.359 35.289 383.336 35.266 383.297 cv
35.238 383.266 35.219 383.215 35.207 383.152 cv
35.191 383.094 35.184 383.023 35.188 382.934 cv
35.184 382.855 35.191 382.781 35.207 382.719 cv
35.219 382.66 35.234 382.613 35.258 382.574 cv
35.273 382.539 35.301 382.508 35.332 382.484 cv
35.363 382.465 35.395 382.457 35.434 382.453 cv
37.285 382.453 li
37.285 375.707 li
35.57 376.727 li
35.48 376.777 35.41 376.805 35.363 376.812 cv
35.309 376.82 35.266 376.812 35.234 376.781 cv
35.199 376.754 35.18 376.703 35.168 376.633 cv
35.156 376.566 35.148 376.48 35.152 376.371 cv
35.148 376.297 35.152 376.23 35.164 376.172 cv
35.168 376.121 35.18 376.074 35.195 376.035 cv
35.207 376 35.227 375.969 35.25 375.941 cv
35.273 375.914 35.305 375.887 35.352 375.859 cv
37.395 374.547 li
37.41 374.535 37.43 374.523 37.461 374.516 cv
37.484 374.508 37.52 374.5 37.566 374.488 cv
37.605 374.48 37.656 374.473 37.711 374.469 cv
37.766 374.469 37.832 374.469 37.918 374.465 cv
38.023 374.469 38.117 374.473 38.191 374.48 cv
38.262 374.488 38.316 374.504 38.363 374.52 cv
38.402 374.539 38.43 374.559 38.445 374.582 cv
38.453 374.609 38.461 374.633 38.465 374.656 cv
38.465 382.453 li
40.07 382.453 li
40.105 382.457 40.141 382.465 40.172 382.484 cv
40.203 382.508 40.227 382.539 40.25 382.574 cv
40.266 382.613 40.281 382.66 40.297 382.719 cv
40.305 382.781 40.313 382.855 40.316 382.934 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.332 380.547 mo
47.332 381.023 47.25 381.445 47.09 381.816 cv
46.93 382.187 46.703 382.5 46.414 382.754 cv
46.117 383.008 45.77 383.203 45.367 383.332 cv
44.961 383.465 44.512 383.527 44.02 383.527 cv
43.742 383.527 43.48 383.508 43.238 383.469 cv
42.988 383.43 42.77 383.383 42.582 383.328 cv
42.387 383.273 42.23 383.219 42.105 383.16 cv
41.98 383.109 41.902 383.066 41.871 383.031 cv
41.836 383 41.813 382.969 41.801 382.941 cv
41.785 382.914 41.77 382.883 41.762 382.84 cv
41.746 382.805 41.738 382.754 41.738 382.691 cv
41.73 382.633 41.73 382.562 41.73 382.48 cv
41.73 382.406 41.734 382.336 41.742 382.273 cv
41.75 382.211 41.762 382.16 41.781 382.121 cv
41.797 382.082 41.816 382.055 41.844 382.035 cv
41.867 382.02 41.898 382.012 41.93 382.008 cv
41.977 382.012 42.047 382.039 42.141 382.094 cv
42.234 382.152 42.363 382.215 42.527 382.281 cv
42.691 382.348 42.891 382.41 43.133 382.469 cv
43.367 382.527 43.652 382.555 43.988 382.555 cv
44.289 382.555 44.57 382.52 44.828 382.445 cv
45.082 382.375 45.305 382.262 45.492 382.105 cv
45.676 381.953 45.82 381.758 45.926 381.52 cv
46.031 381.285 46.082 380.996 46.086 380.656 cv
46.082 380.375 46.039 380.125 45.949 379.906 cv
45.859 379.687 45.723 379.508 45.539 379.363 cv
45.352 379.223 45.117 379.117 44.836 379.043 cv
44.551 378.973 44.211 378.934 43.824 378.934 cv
43.539 378.934 43.301 378.949 43.102 378.977 cv
42.898 379.008 42.711 379.023 42.539 379.02 cv
42.41 379.023 42.316 378.992 42.266 378.93 cv
42.207 378.871 42.18 378.758 42.184 378.586 cv
42.184 374.973 li
42.18 374.824 42.215 374.715 42.289 374.637 cv
42.355 374.566 42.457 374.527 42.594 374.527 cv
46.523 374.527 li
46.559 374.527 46.594 374.539 46.629 374.559 cv
46.66 374.582 46.688 374.613 46.715 374.652 cv
46.734 374.695 46.75 374.746 46.766 374.809 cv
46.773 374.875 46.781 374.953 46.785 375.035 cv
46.781 375.203 46.758 375.328 46.719 375.418 cv
46.672 375.512 46.613 375.559 46.535 375.555 cv
43.363 375.555 li
43.363 378.043 li
43.516 378.023 43.672 378.012 43.836 378.004 cv
43.992 378 44.18 377.996 44.395 377.996 cv
44.879 377.996 45.305 378.059 45.672 378.18 cv
46.035 378.301 46.34 378.473 46.59 378.691 cv
46.832 378.918 47.02 379.184 47.145 379.496 cv
47.27 379.812 47.332 380.164 47.332 380.547 cv
cp
f
33.941 331.281 mo
48.129 331.281 li
48.129 348.371 li
33.941 348.371 li
cp
0 0 0 0 cmyk
ef
40.297 344.152 mo
40.293 344.238 40.289 344.312 40.277 344.375 cv
40.266 344.441 40.25 344.496 40.23 344.535 cv
40.207 344.582 40.18 344.613 40.148 344.629 cv
40.113 344.652 40.074 344.66 40.035 344.66 cv
35.133 344.66 li
35.07 344.66 35.012 344.652 34.965 344.637 cv
34.914 344.621 34.875 344.598 34.84 344.559 cv
34.805 344.527 34.777 344.473 34.766 344.402 cv
34.746 344.332 34.738 344.246 34.742 344.145 cv
34.738 344.055 34.742 343.977 34.75 343.906 cv
34.754 343.84 34.77 343.781 34.797 343.727 cv
34.82 343.676 34.852 343.621 34.887 343.566 cv
34.922 343.516 34.965 343.461 35.023 343.398 cv
36.797 341.574 li
37.207 341.156 37.535 340.781 37.785 340.445 cv
38.031 340.117 38.223 339.812 38.355 339.535 cv
38.488 339.262 38.574 339.012 38.621 338.785 cv
38.66 338.562 38.684 338.352 38.684 338.156 cv
38.684 337.961 38.648 337.777 38.582 337.598 cv
38.516 337.426 38.422 337.27 38.297 337.133 cv
38.172 337.004 38.016 336.898 37.828 336.816 cv
37.641 336.742 37.422 336.703 37.176 336.699 cv
36.887 336.703 36.629 336.742 36.402 336.816 cv
36.172 336.898 35.973 336.984 35.801 337.07 cv
35.629 337.164 35.484 337.246 35.367 337.324 cv
35.25 337.402 35.164 337.441 35.113 337.441 cv
35.078 337.441 35.047 337.434 35.023 337.414 cv
34.992 337.398 34.973 337.367 34.957 337.324 cv
34.941 337.285 34.926 337.23 34.918 337.16 cv
34.906 337.094 34.902 337.012 34.906 336.914 cv
34.902 336.848 34.906 336.789 34.914 336.738 cv
34.918 336.687 34.926 336.645 34.938 336.605 cv
34.945 336.57 34.961 336.535 34.98 336.504 cv
35 336.473 35.035 336.434 35.094 336.383 cv
35.145 336.336 35.238 336.27 35.375 336.187 cv
35.508 336.105 35.68 336.027 35.883 335.945 cv
36.086 335.867 36.309 335.797 36.555 335.742 cv
36.797 335.687 37.055 335.66 37.328 335.66 cv
37.754 335.66 38.129 335.723 38.453 335.844 cv
38.773 335.965 39.039 336.129 39.254 336.34 cv
39.465 336.551 39.625 336.797 39.73 337.07 cv
39.836 337.352 39.891 337.648 39.891 337.961 cv
39.891 338.25 39.863 338.531 39.813 338.809 cv
39.762 339.094 39.656 339.398 39.496 339.723 cv
39.332 340.051 39.098 340.414 38.793 340.812 cv
38.484 341.215 38.078 341.676 37.574 342.191 cv
36.168 343.66 li
40.027 343.66 li
40.059 343.664 40.094 343.676 40.133 343.691 cv
40.164 343.715 40.195 343.746 40.223 343.785 cv
40.246 343.828 40.266 343.879 40.277 343.937 cv
40.289 344.004 40.293 344.074 40.297 344.152 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 340.203 mo
47.664 340.887 47.613 341.508 47.508 342.07 cv
47.398 342.633 47.219 343.117 46.973 343.52 cv
46.719 343.926 46.391 344.238 45.992 344.457 cv
45.586 344.68 45.094 344.789 44.508 344.789 cv
43.949 344.789 43.477 344.691 43.098 344.492 cv
42.715 344.297 42.41 344.004 42.176 343.617 cv
41.941 343.23 41.773 342.758 41.68 342.191 cv
41.578 341.629 41.531 340.98 41.531 340.246 cv
41.531 339.574 41.586 338.953 41.695 338.387 cv
41.805 337.824 41.98 337.34 42.23 336.934 cv
42.473 336.531 42.797 336.219 43.203 335.992 cv
43.602 335.773 44.098 335.66 44.688 335.66 cv
45.246 335.66 45.719 335.762 46.102 335.957 cv
46.484 336.16 46.789 336.453 47.023 336.836 cv
47.254 337.227 47.422 337.699 47.52 338.262 cv
47.617 338.824 47.664 339.473 47.668 340.203 cv
cp
46.461 340.285 mo
46.457 339.844 46.441 339.445 46.414 339.094 cv
46.379 338.742 46.332 338.434 46.273 338.164 cv
46.207 337.895 46.129 337.664 46.031 337.469 cv
45.934 337.277 45.816 337.117 45.68 336.988 cv
45.539 336.863 45.379 336.77 45.207 336.711 cv
45.027 336.656 44.832 336.629 44.617 336.625 cv
44.227 336.629 43.91 336.719 43.672 336.902 cv
43.426 337.086 43.234 337.34 43.098 337.656 cv
42.957 337.977 42.863 338.348 42.813 338.777 cv
42.762 339.207 42.738 339.672 42.738 340.164 cv
42.738 340.828 42.77 341.391 42.84 341.852 cv
42.906 342.32 43.016 342.699 43.168 342.988 cv
43.313 343.285 43.504 343.496 43.734 343.625 cv
43.965 343.762 44.246 343.828 44.578 343.824 cv
44.832 343.828 45.055 343.789 45.25 343.703 cv
45.441 343.625 45.609 343.504 45.75 343.348 cv
45.891 343.195 46.004 343.012 46.098 342.797 cv
46.184 342.582 46.258 342.344 46.316 342.082 cv
46.367 341.824 46.406 341.543 46.43 341.238 cv
46.449 340.934 46.457 340.617 46.461 340.285 cv
cp
f
33.941 292.551 mo
48.129 292.551 li
48.129 309.641 li
33.941 309.641 li
cp
0 0 0 0 cmyk
ef
40.297 305.422 mo
40.293 305.508 40.289 305.582 40.277 305.645 cv
40.266 305.711 40.25 305.766 40.23 305.805 cv
40.207 305.852 40.18 305.883 40.148 305.898 cv
40.113 305.922 40.074 305.93 40.035 305.93 cv
35.133 305.93 li
35.07 305.93 35.012 305.922 34.965 305.906 cv
34.914 305.891 34.875 305.867 34.84 305.828 cv
34.805 305.797 34.777 305.742 34.766 305.672 cv
34.746 305.602 34.738 305.516 34.742 305.414 cv
34.738 305.324 34.742 305.246 34.75 305.176 cv
34.754 305.109 34.77 305.051 34.797 304.996 cv
34.82 304.945 34.852 304.891 34.887 304.836 cv
34.922 304.785 34.965 304.73 35.023 304.668 cv
36.797 302.844 li
37.207 302.426 37.535 302.051 37.785 301.715 cv
38.031 301.387 38.223 301.082 38.355 300.805 cv
38.488 300.531 38.574 300.281 38.621 300.055 cv
38.66 299.832 38.684 299.621 38.684 299.426 cv
38.684 299.23 38.648 299.047 38.582 298.867 cv
38.516 298.695 38.422 298.539 38.297 298.402 cv
38.172 298.273 38.016 298.168 37.828 298.086 cv
37.641 298.012 37.422 297.973 37.176 297.969 cv
36.887 297.973 36.629 298.012 36.402 298.086 cv
36.172 298.168 35.973 298.254 35.801 298.34 cv
35.629 298.434 35.484 298.516 35.367 298.594 cv
35.25 298.672 35.164 298.711 35.113 298.711 cv
35.078 298.711 35.047 298.703 35.023 298.684 cv
34.992 298.668 34.973 298.637 34.957 298.594 cv
34.941 298.555 34.926 298.5 34.918 298.43 cv
34.906 298.363 34.902 298.281 34.906 298.184 cv
34.902 298.117 34.906 298.059 34.914 298.008 cv
34.918 297.957 34.926 297.914 34.938 297.875 cv
34.945 297.84 34.961 297.805 34.98 297.773 cv
35 297.742 35.035 297.703 35.094 297.652 cv
35.145 297.605 35.238 297.539 35.375 297.457 cv
35.508 297.375 35.68 297.297 35.883 297.215 cv
36.086 297.137 36.309 297.066 36.555 297.012 cv
36.797 296.957 37.055 296.93 37.328 296.93 cv
37.754 296.93 38.129 296.992 38.453 297.113 cv
38.773 297.234 39.039 297.398 39.254 297.609 cv
39.465 297.82 39.625 298.066 39.73 298.34 cv
39.836 298.621 39.891 298.918 39.891 299.23 cv
39.891 299.52 39.863 299.801 39.813 300.078 cv
39.762 300.363 39.656 300.668 39.496 300.992 cv
39.332 301.32 39.098 301.684 38.793 302.082 cv
38.484 302.484 38.078 302.945 37.574 303.461 cv
36.168 304.93 li
40.027 304.93 li
40.059 304.934 40.094 304.945 40.133 304.961 cv
40.164 304.984 40.195 305.016 40.223 305.055 cv
40.246 305.098 40.266 305.148 40.277 305.207 cv
40.289 305.273 40.293 305.344 40.297 305.422 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.332 303.078 mo
47.332 303.555 47.25 303.977 47.09 304.348 cv
46.93 304.719 46.703 305.031 46.414 305.285 cv
46.117 305.539 45.77 305.734 45.367 305.863 cv
44.961 305.996 44.512 306.059 44.02 306.059 cv
43.742 306.059 43.48 306.039 43.238 306 cv
42.988 305.961 42.77 305.914 42.582 305.859 cv
42.387 305.805 42.23 305.75 42.105 305.691 cv
41.98 305.641 41.902 305.598 41.871 305.562 cv
41.836 305.531 41.813 305.5 41.801 305.473 cv
41.785 305.445 41.77 305.414 41.762 305.371 cv
41.746 305.336 41.738 305.285 41.738 305.223 cv
41.73 305.164 41.73 305.094 41.73 305.012 cv
41.73 304.937 41.734 304.867 41.742 304.805 cv
41.75 304.742 41.762 304.691 41.781 304.652 cv
41.797 304.613 41.816 304.586 41.844 304.566 cv
41.867 304.551 41.898 304.543 41.93 304.539 cv
41.977 304.543 42.047 304.57 42.141 304.625 cv
42.234 304.684 42.363 304.746 42.527 304.812 cv
42.691 304.879 42.891 304.941 43.133 305 cv
43.367 305.059 43.652 305.086 43.988 305.086 cv
44.289 305.086 44.57 305.051 44.828 304.977 cv
45.082 304.906 45.305 304.793 45.492 304.637 cv
45.676 304.484 45.82 304.289 45.926 304.051 cv
46.031 303.816 46.082 303.527 46.086 303.187 cv
46.082 302.906 46.039 302.656 45.949 302.437 cv
45.859 302.219 45.723 302.039 45.539 301.895 cv
45.352 301.754 45.117 301.648 44.836 301.574 cv
44.551 301.504 44.211 301.465 43.824 301.465 cv
43.539 301.465 43.301 301.48 43.102 301.508 cv
42.898 301.539 42.711 301.555 42.539 301.551 cv
42.41 301.555 42.316 301.523 42.266 301.461 cv
42.207 301.402 42.18 301.289 42.184 301.117 cv
42.184 297.504 li
42.18 297.355 42.215 297.246 42.289 297.168 cv
42.355 297.098 42.457 297.059 42.594 297.059 cv
46.523 297.059 li
46.559 297.059 46.594 297.07 46.629 297.09 cv
46.66 297.113 46.688 297.145 46.715 297.184 cv
46.734 297.227 46.75 297.277 46.766 297.34 cv
46.773 297.406 46.781 297.484 46.785 297.566 cv
46.781 297.734 46.758 297.859 46.719 297.949 cv
46.672 298.043 46.613 298.09 46.535 298.086 cv
43.363 298.086 li
43.363 300.574 li
43.516 300.555 43.672 300.543 43.836 300.535 cv
43.992 300.531 44.18 300.527 44.395 300.527 cv
44.879 300.527 45.305 300.59 45.672 300.711 cv
46.035 300.832 46.34 301.004 46.59 301.223 cv
46.832 301.449 47.02 301.715 47.145 302.027 cv
47.27 302.344 47.332 302.695 47.332 303.078 cv
cp
f
33.941 253.82 mo
48.129 253.82 li
48.129 270.91 li
33.941 270.91 li
cp
0 0 0 0 cmyk
ef
40.227 264.656 mo
40.223 265.066 40.152 265.434 40.012 265.758 cv
39.867 266.086 39.664 266.367 39.402 266.598 cv
39.137 266.832 38.809 267.008 38.422 267.133 cv
38.031 267.258 37.594 267.32 37.109 267.32 cv
36.805 267.32 36.527 267.293 36.273 267.246 cv
36.012 267.199 35.781 267.148 35.586 267.078 cv
35.383 267.016 35.219 266.945 35.086 266.875 cv
34.953 266.805 34.867 266.754 34.836 266.719 cv
34.797 266.691 34.773 266.66 34.758 266.625 cv
34.738 266.594 34.719 266.555 34.707 266.508 cv
34.691 266.465 34.684 266.41 34.676 266.34 cv
34.668 266.277 34.664 266.195 34.668 266.094 cv
34.664 265.934 34.68 265.82 34.715 265.754 cv
34.746 265.691 34.793 265.656 34.855 265.656 cv
34.898 265.656 34.98 265.695 35.105 265.766 cv
35.227 265.844 35.387 265.922 35.582 266.004 cv
35.773 266.09 36 266.168 36.266 266.238 cv
36.523 266.312 36.816 266.348 37.137 266.348 cv
37.445 266.348 37.715 266.309 37.953 266.23 cv
38.184 266.152 38.383 266.043 38.543 265.902 cv
38.699 265.762 38.816 265.594 38.898 265.398 cv
38.977 265.203 39.016 264.992 39.02 264.766 cv
39.016 264.516 38.965 264.289 38.867 264.086 cv
38.762 263.887 38.613 263.715 38.422 263.566 cv
38.223 263.422 37.984 263.309 37.699 263.23 cv
37.414 263.152 37.09 263.113 36.727 263.113 cv
35.855 263.113 li
35.813 263.113 35.777 263.105 35.742 263.09 cv
35.707 263.074 35.676 263.047 35.652 263.008 cv
35.625 262.973 35.605 262.926 35.59 262.867 cv
35.574 262.809 35.566 262.73 35.566 262.633 cv
35.566 262.547 35.57 262.477 35.586 262.418 cv
35.594 262.363 35.613 262.316 35.645 262.281 cv
35.668 262.246 35.699 262.223 35.73 262.203 cv
35.762 262.191 35.797 262.184 35.84 262.18 cv
36.613 262.18 li
36.914 262.184 37.184 262.145 37.426 262.062 cv
37.66 261.988 37.863 261.875 38.035 261.727 cv
38.199 261.582 38.328 261.406 38.418 261.203 cv
38.508 261 38.555 260.773 38.555 260.52 cv
38.555 260.34 38.523 260.164 38.465 259.996 cv
38.402 259.832 38.313 259.687 38.195 259.562 cv
38.074 259.437 37.922 259.34 37.742 259.27 cv
37.555 259.199 37.344 259.164 37.102 259.164 cv
36.836 259.164 36.59 259.207 36.371 259.285 cv
36.145 259.367 35.949 259.453 35.777 259.543 cv
35.602 259.637 35.457 259.723 35.344 259.801 cv
35.23 259.883 35.148 259.922 35.105 259.918 cv
35.07 259.922 35.043 259.914 35.02 259.902 cv
34.992 259.891 34.973 259.867 34.957 259.832 cv
34.941 259.801 34.93 259.754 34.922 259.687 cv
34.914 259.629 34.91 259.547 34.914 259.445 cv
34.91 259.379 34.91 259.32 34.918 259.266 cv
34.918 259.215 34.93 259.168 34.945 259.125 cv
34.961 259.09 34.977 259.055 34.996 259.02 cv
35.012 258.992 35.043 258.953 35.086 258.906 cv
35.129 258.863 35.215 258.801 35.352 258.719 cv
35.48 258.637 35.645 258.559 35.84 258.477 cv
36.031 258.398 36.254 258.328 36.512 258.273 cv
36.762 258.219 37.035 258.191 37.332 258.191 cv
37.738 258.191 38.102 258.246 38.414 258.348 cv
38.727 258.457 38.984 258.605 39.195 258.793 cv
39.398 258.988 39.555 259.219 39.66 259.484 cv
39.762 259.754 39.813 260.047 39.816 260.371 cv
39.813 260.652 39.777 260.914 39.707 261.148 cv
39.633 261.391 39.523 261.602 39.383 261.785 cv
39.238 261.973 39.066 262.129 38.863 262.258 cv
38.656 262.391 38.418 262.484 38.148 262.531 cv
38.148 262.543 li
38.453 262.578 38.734 262.652 38.988 262.773 cv
39.242 262.895 39.461 263.047 39.645 263.23 cv
39.824 263.414 39.965 263.629 40.07 263.871 cv
40.172 264.117 40.223 264.379 40.227 264.656 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 262.734 mo
47.664 263.418 47.613 264.039 47.508 264.602 cv
47.398 265.164 47.219 265.648 46.973 266.051 cv
46.719 266.457 46.391 266.77 45.992 266.988 cv
45.586 267.211 45.094 267.32 44.508 267.32 cv
43.949 267.32 43.477 267.223 43.098 267.023 cv
42.715 266.828 42.41 266.535 42.176 266.148 cv
41.941 265.762 41.773 265.289 41.68 264.723 cv
41.578 264.16 41.531 263.512 41.531 262.777 cv
41.531 262.105 41.586 261.484 41.695 260.918 cv
41.805 260.355 41.98 259.871 42.23 259.465 cv
42.473 259.062 42.797 258.75 43.203 258.523 cv
43.602 258.305 44.098 258.191 44.688 258.191 cv
45.246 258.191 45.719 258.293 46.102 258.488 cv
46.484 258.691 46.789 258.984 47.023 259.367 cv
47.254 259.758 47.422 260.23 47.52 260.793 cv
47.617 261.355 47.664 262.004 47.668 262.734 cv
cp
46.461 262.816 mo
46.457 262.375 46.441 261.977 46.414 261.625 cv
46.379 261.273 46.332 260.965 46.273 260.695 cv
46.207 260.426 46.129 260.195 46.031 260 cv
45.934 259.809 45.816 259.648 45.68 259.52 cv
45.539 259.395 45.379 259.301 45.207 259.242 cv
45.027 259.187 44.832 259.16 44.617 259.156 cv
44.227 259.16 43.91 259.25 43.672 259.434 cv
43.426 259.617 43.234 259.871 43.098 260.187 cv
42.957 260.508 42.863 260.879 42.813 261.309 cv
42.762 261.738 42.738 262.203 42.738 262.695 cv
42.738 263.359 42.77 263.922 42.84 264.383 cv
42.906 264.852 43.016 265.23 43.168 265.52 cv
43.313 265.816 43.504 266.027 43.734 266.156 cv
43.965 266.293 44.246 266.359 44.578 266.355 cv
44.832 266.359 45.055 266.32 45.25 266.234 cv
45.441 266.156 45.609 266.035 45.75 265.879 cv
45.891 265.727 46.004 265.543 46.098 265.328 cv
46.184 265.113 46.258 264.875 46.316 264.613 cv
46.367 264.355 46.406 264.074 46.43 263.77 cv
46.449 263.465 46.457 263.148 46.461 262.816 cv
cp
f
33.941 215.09 mo
48.129 215.09 li
48.129 232.18 li
33.941 232.18 li
cp
0 0 0 0 cmyk
ef
40.227 225.926 mo
40.223 226.336 40.152 226.703 40.012 227.027 cv
39.867 227.355 39.664 227.637 39.402 227.867 cv
39.137 228.102 38.809 228.277 38.422 228.402 cv
38.031 228.527 37.594 228.59 37.109 228.59 cv
36.805 228.59 36.527 228.562 36.273 228.516 cv
36.012 228.469 35.781 228.418 35.586 228.348 cv
35.383 228.285 35.219 228.215 35.086 228.145 cv
34.953 228.074 34.867 228.023 34.836 227.988 cv
34.797 227.961 34.773 227.93 34.758 227.895 cv
34.738 227.863 34.719 227.824 34.707 227.777 cv
34.691 227.734 34.684 227.68 34.676 227.609 cv
34.668 227.547 34.664 227.465 34.668 227.363 cv
34.664 227.203 34.68 227.09 34.715 227.023 cv
34.746 226.961 34.793 226.926 34.855 226.926 cv
34.898 226.926 34.98 226.965 35.105 227.035 cv
35.227 227.113 35.387 227.191 35.582 227.273 cv
35.773 227.359 36 227.437 36.266 227.508 cv
36.523 227.582 36.816 227.617 37.137 227.617 cv
37.445 227.617 37.715 227.578 37.953 227.5 cv
38.184 227.422 38.383 227.312 38.543 227.172 cv
38.699 227.031 38.816 226.863 38.898 226.668 cv
38.977 226.473 39.016 226.262 39.02 226.035 cv
39.016 225.785 38.965 225.559 38.867 225.355 cv
38.762 225.156 38.613 224.984 38.422 224.836 cv
38.223 224.691 37.984 224.578 37.699 224.5 cv
37.414 224.422 37.09 224.383 36.727 224.383 cv
35.855 224.383 li
35.813 224.383 35.777 224.375 35.742 224.359 cv
35.707 224.344 35.676 224.316 35.652 224.277 cv
35.625 224.242 35.605 224.195 35.59 224.137 cv
35.574 224.078 35.566 224 35.566 223.902 cv
35.566 223.816 35.57 223.746 35.586 223.687 cv
35.594 223.633 35.613 223.586 35.645 223.551 cv
35.668 223.516 35.699 223.492 35.73 223.473 cv
35.762 223.461 35.797 223.453 35.84 223.449 cv
36.613 223.449 li
36.914 223.453 37.184 223.414 37.426 223.332 cv
37.66 223.258 37.863 223.145 38.035 222.996 cv
38.199 222.852 38.328 222.676 38.418 222.473 cv
38.508 222.27 38.555 222.043 38.555 221.789 cv
38.555 221.609 38.523 221.434 38.465 221.266 cv
38.402 221.102 38.313 220.957 38.195 220.832 cv
38.074 220.707 37.922 220.609 37.742 220.539 cv
37.555 220.469 37.344 220.434 37.102 220.434 cv
36.836 220.434 36.59 220.477 36.371 220.555 cv
36.145 220.637 35.949 220.723 35.777 220.812 cv
35.602 220.906 35.457 220.992 35.344 221.07 cv
35.23 221.152 35.148 221.191 35.105 221.187 cv
35.07 221.191 35.043 221.184 35.02 221.172 cv
34.992 221.16 34.973 221.137 34.957 221.102 cv
34.941 221.07 34.93 221.023 34.922 220.957 cv
34.914 220.898 34.91 220.816 34.914 220.715 cv
34.91 220.648 34.91 220.59 34.918 220.535 cv
34.918 220.484 34.93 220.437 34.945 220.395 cv
34.961 220.359 34.977 220.324 34.996 220.289 cv
35.012 220.262 35.043 220.223 35.086 220.176 cv
35.129 220.133 35.215 220.07 35.352 219.988 cv
35.48 219.906 35.645 219.828 35.84 219.746 cv
36.031 219.668 36.254 219.598 36.512 219.543 cv
36.762 219.488 37.035 219.461 37.332 219.461 cv
37.738 219.461 38.102 219.516 38.414 219.617 cv
38.727 219.727 38.984 219.875 39.195 220.062 cv
39.398 220.258 39.555 220.488 39.66 220.754 cv
39.762 221.023 39.813 221.316 39.816 221.641 cv
39.813 221.922 39.777 222.184 39.707 222.418 cv
39.633 222.66 39.523 222.871 39.383 223.055 cv
39.238 223.242 39.066 223.398 38.863 223.527 cv
38.656 223.66 38.418 223.754 38.148 223.801 cv
38.148 223.812 li
38.453 223.848 38.734 223.922 38.988 224.043 cv
39.242 224.164 39.461 224.316 39.645 224.5 cv
39.824 224.684 39.965 224.898 40.07 225.141 cv
40.172 225.387 40.223 225.648 40.227 225.926 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.332 225.609 mo
47.332 226.086 47.25 226.508 47.09 226.879 cv
46.93 227.25 46.703 227.562 46.414 227.816 cv
46.117 228.07 45.77 228.266 45.367 228.395 cv
44.961 228.527 44.512 228.59 44.02 228.59 cv
43.742 228.59 43.48 228.57 43.238 228.531 cv
42.988 228.492 42.77 228.445 42.582 228.391 cv
42.387 228.336 42.23 228.281 42.105 228.223 cv
41.98 228.172 41.902 228.129 41.871 228.094 cv
41.836 228.062 41.813 228.031 41.801 228.004 cv
41.785 227.977 41.77 227.945 41.762 227.902 cv
41.746 227.867 41.738 227.816 41.738 227.754 cv
41.73 227.695 41.73 227.625 41.73 227.543 cv
41.73 227.469 41.734 227.398 41.742 227.336 cv
41.75 227.273 41.762 227.223 41.781 227.184 cv
41.797 227.145 41.816 227.117 41.844 227.098 cv
41.867 227.082 41.898 227.074 41.93 227.07 cv
41.977 227.074 42.047 227.102 42.141 227.156 cv
42.234 227.215 42.363 227.277 42.527 227.344 cv
42.691 227.41 42.891 227.473 43.133 227.531 cv
43.367 227.59 43.652 227.617 43.988 227.617 cv
44.289 227.617 44.57 227.582 44.828 227.508 cv
45.082 227.437 45.305 227.324 45.492 227.168 cv
45.676 227.016 45.82 226.82 45.926 226.582 cv
46.031 226.348 46.082 226.059 46.086 225.719 cv
46.082 225.437 46.039 225.187 45.949 224.969 cv
45.859 224.75 45.723 224.57 45.539 224.426 cv
45.352 224.285 45.117 224.18 44.836 224.105 cv
44.551 224.035 44.211 223.996 43.824 223.996 cv
43.539 223.996 43.301 224.012 43.102 224.039 cv
42.898 224.07 42.711 224.086 42.539 224.082 cv
42.41 224.086 42.316 224.055 42.266 223.992 cv
42.207 223.934 42.18 223.82 42.184 223.648 cv
42.184 220.035 li
42.18 219.887 42.215 219.777 42.289 219.699 cv
42.355 219.629 42.457 219.59 42.594 219.59 cv
46.523 219.59 li
46.559 219.59 46.594 219.602 46.629 219.621 cv
46.66 219.645 46.688 219.676 46.715 219.715 cv
46.734 219.758 46.75 219.809 46.766 219.871 cv
46.773 219.937 46.781 220.016 46.785 220.098 cv
46.781 220.266 46.758 220.391 46.719 220.48 cv
46.672 220.574 46.613 220.621 46.535 220.617 cv
43.363 220.617 li
43.363 223.105 li
43.516 223.086 43.672 223.074 43.836 223.066 cv
43.992 223.062 44.18 223.059 44.395 223.059 cv
44.879 223.059 45.305 223.121 45.672 223.242 cv
46.035 223.363 46.34 223.535 46.59 223.754 cv
46.832 223.98 47.02 224.246 47.145 224.559 cv
47.27 224.875 47.332 225.227 47.332 225.609 cv
cp
f
33.941 176.359 mo
48.129 176.359 li
48.129 193.449 li
33.941 193.449 li
cp
0 0 0 0 cmyk
ef
40.672 187.195 mo
40.668 187.348 40.645 187.469 40.602 187.555 cv
40.555 187.645 40.492 187.687 40.41 187.684 cv
39.41 187.684 li
39.41 189.547 li
39.41 189.586 39.398 189.617 39.383 189.641 cv
39.359 189.668 39.328 189.687 39.285 189.707 cv
39.234 189.723 39.172 189.734 39.102 189.746 cv
39.023 189.754 38.93 189.758 38.813 189.762 cv
38.695 189.758 38.598 189.754 38.527 189.746 cv
38.449 189.734 38.391 189.723 38.348 189.707 cv
38.301 189.687 38.27 189.668 38.254 189.641 cv
38.234 189.617 38.227 189.586 38.23 189.547 cv
38.23 187.684 li
34.602 187.684 li
34.543 187.687 34.5 187.68 34.465 187.664 cv
34.43 187.652 34.395 187.625 34.367 187.586 cv
34.336 187.551 34.316 187.5 34.305 187.43 cv
34.293 187.363 34.289 187.273 34.289 187.16 cv
34.289 187.078 34.289 187 34.297 186.93 cv
34.297 186.859 34.309 186.797 34.324 186.742 cv
34.336 186.687 34.352 186.633 34.379 186.578 cv
34.398 186.523 34.426 186.469 34.461 186.406 cv
37.621 181.02 li
37.641 180.984 37.676 180.953 37.723 180.926 cv
37.766 180.898 37.82 180.875 37.895 180.855 cv
37.961 180.84 38.047 180.828 38.152 180.816 cv
38.254 180.812 38.375 180.809 38.516 180.805 cv
38.664 180.809 38.801 180.812 38.918 180.824 cv
39.031 180.836 39.121 180.852 39.195 180.867 cv
39.262 180.887 39.316 180.91 39.355 180.941 cv
39.391 180.973 39.41 181.008 39.41 181.047 cv
39.41 186.711 li
40.41 186.711 li
40.484 186.715 40.547 186.754 40.598 186.832 cv
40.645 186.914 40.668 187.035 40.672 187.195 cv
cp
38.23 181.844 mo
38.219 181.844 li
35.367 186.711 li
38.23 186.711 li
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 185.262 mo
47.664 185.945 47.613 186.566 47.508 187.129 cv
47.398 187.691 47.219 188.176 46.973 188.578 cv
46.719 188.984 46.391 189.297 45.992 189.516 cv
45.586 189.738 45.094 189.848 44.508 189.848 cv
43.949 189.848 43.477 189.75 43.098 189.551 cv
42.715 189.355 42.41 189.062 42.176 188.676 cv
41.941 188.289 41.773 187.816 41.68 187.25 cv
41.578 186.687 41.531 186.039 41.531 185.305 cv
41.531 184.633 41.586 184.012 41.695 183.445 cv
41.805 182.883 41.98 182.398 42.23 181.992 cv
42.473 181.59 42.797 181.277 43.203 181.051 cv
43.602 180.832 44.098 180.719 44.688 180.719 cv
45.246 180.719 45.719 180.82 46.102 181.016 cv
46.484 181.219 46.789 181.512 47.023 181.895 cv
47.254 182.285 47.422 182.758 47.52 183.32 cv
47.617 183.883 47.664 184.531 47.668 185.262 cv
cp
46.461 185.344 mo
46.457 184.902 46.441 184.504 46.414 184.152 cv
46.379 183.801 46.332 183.492 46.273 183.223 cv
46.207 182.953 46.129 182.723 46.031 182.527 cv
45.934 182.336 45.816 182.176 45.68 182.047 cv
45.539 181.922 45.379 181.828 45.207 181.77 cv
45.027 181.715 44.832 181.687 44.617 181.684 cv
44.227 181.687 43.91 181.777 43.672 181.961 cv
43.426 182.145 43.234 182.398 43.098 182.715 cv
42.957 183.035 42.863 183.406 42.813 183.836 cv
42.762 184.266 42.738 184.73 42.738 185.223 cv
42.738 185.887 42.77 186.449 42.84 186.91 cv
42.906 187.379 43.016 187.758 43.168 188.047 cv
43.313 188.344 43.504 188.555 43.734 188.684 cv
43.965 188.82 44.246 188.887 44.578 188.883 cv
44.832 188.887 45.055 188.848 45.25 188.762 cv
45.441 188.684 45.609 188.562 45.75 188.406 cv
45.891 188.254 46.004 188.07 46.098 187.855 cv
46.184 187.641 46.258 187.402 46.316 187.141 cv
46.367 186.883 46.406 186.602 46.43 186.297 cv
46.449 185.992 46.457 185.676 46.461 185.344 cv
cp
f
33.941 137.629 mo
48.129 137.629 li
48.129 154.719 li
33.941 154.719 li
cp
0 0 0 0 cmyk
ef
40.672 148.457 mo
40.668 148.609 40.645 148.73 40.602 148.816 cv
40.555 148.906 40.492 148.949 40.41 148.945 cv
39.41 148.945 li
39.41 150.809 li
39.41 150.848 39.398 150.879 39.383 150.902 cv
39.359 150.93 39.328 150.949 39.285 150.969 cv
39.234 150.984 39.172 150.996 39.102 151.008 cv
39.023 151.016 38.93 151.02 38.813 151.023 cv
38.695 151.02 38.598 151.016 38.527 151.008 cv
38.449 150.996 38.391 150.984 38.348 150.969 cv
38.301 150.949 38.27 150.93 38.254 150.902 cv
38.234 150.879 38.227 150.848 38.23 150.809 cv
38.23 148.945 li
34.602 148.945 li
34.543 148.949 34.5 148.941 34.465 148.926 cv
34.43 148.914 34.395 148.887 34.367 148.848 cv
34.336 148.812 34.316 148.762 34.305 148.691 cv
34.293 148.625 34.289 148.535 34.289 148.422 cv
34.289 148.34 34.289 148.262 34.297 148.191 cv
34.297 148.121 34.309 148.059 34.324 148.004 cv
34.336 147.949 34.352 147.895 34.379 147.84 cv
34.398 147.785 34.426 147.73 34.461 147.668 cv
37.621 142.281 li
37.641 142.246 37.676 142.215 37.723 142.187 cv
37.766 142.16 37.82 142.137 37.895 142.117 cv
37.961 142.102 38.047 142.09 38.152 142.078 cv
38.254 142.074 38.375 142.07 38.516 142.066 cv
38.664 142.07 38.801 142.074 38.918 142.086 cv
39.031 142.098 39.121 142.113 39.195 142.129 cv
39.262 142.148 39.316 142.172 39.355 142.203 cv
39.391 142.234 39.41 142.27 39.41 142.309 cv
39.41 147.973 li
40.41 147.973 li
40.484 147.977 40.547 148.016 40.598 148.094 cv
40.645 148.176 40.668 148.297 40.672 148.457 cv
cp
38.23 143.105 mo
38.219 143.105 li
35.367 147.973 li
38.23 147.973 li
cp
.629236 .549432 .540154 .282963 cmyk
f
47.332 148.129 mo
47.332 148.605 47.25 149.027 47.09 149.398 cv
46.93 149.77 46.703 150.082 46.414 150.336 cv
46.117 150.59 45.77 150.785 45.367 150.914 cv
44.961 151.047 44.512 151.109 44.02 151.109 cv
43.742 151.109 43.48 151.09 43.238 151.051 cv
42.988 151.012 42.77 150.965 42.582 150.91 cv
42.387 150.855 42.23 150.801 42.105 150.742 cv
41.98 150.691 41.902 150.648 41.871 150.613 cv
41.836 150.582 41.813 150.551 41.801 150.523 cv
41.785 150.496 41.77 150.465 41.762 150.422 cv
41.746 150.387 41.738 150.336 41.738 150.273 cv
41.73 150.215 41.73 150.145 41.73 150.062 cv
41.73 149.988 41.734 149.918 41.742 149.855 cv
41.75 149.793 41.762 149.742 41.781 149.703 cv
41.797 149.664 41.816 149.637 41.844 149.617 cv
41.867 149.602 41.898 149.594 41.93 149.59 cv
41.977 149.594 42.047 149.621 42.141 149.676 cv
42.234 149.734 42.363 149.797 42.527 149.863 cv
42.691 149.93 42.891 149.992 43.133 150.051 cv
43.367 150.109 43.652 150.137 43.988 150.137 cv
44.289 150.137 44.57 150.102 44.828 150.027 cv
45.082 149.957 45.305 149.844 45.492 149.687 cv
45.676 149.535 45.82 149.34 45.926 149.102 cv
46.031 148.867 46.082 148.578 46.086 148.238 cv
46.082 147.957 46.039 147.707 45.949 147.488 cv
45.859 147.27 45.723 147.09 45.539 146.945 cv
45.352 146.805 45.117 146.699 44.836 146.625 cv
44.551 146.555 44.211 146.516 43.824 146.516 cv
43.539 146.516 43.301 146.531 43.102 146.559 cv
42.898 146.59 42.711 146.605 42.539 146.602 cv
42.41 146.605 42.316 146.574 42.266 146.512 cv
42.207 146.453 42.18 146.34 42.184 146.168 cv
42.184 142.555 li
42.18 142.406 42.215 142.297 42.289 142.219 cv
42.355 142.148 42.457 142.109 42.594 142.109 cv
46.523 142.109 li
46.559 142.109 46.594 142.121 46.629 142.141 cv
46.66 142.164 46.688 142.195 46.715 142.234 cv
46.734 142.277 46.75 142.328 46.766 142.391 cv
46.773 142.457 46.781 142.535 46.785 142.617 cv
46.781 142.785 46.758 142.91 46.719 143 cv
46.672 143.094 46.613 143.141 46.535 143.137 cv
43.363 143.137 li
43.363 145.625 li
43.516 145.605 43.672 145.594 43.836 145.586 cv
43.992 145.582 44.18 145.578 44.395 145.578 cv
44.879 145.578 45.305 145.641 45.672 145.762 cv
46.035 145.883 46.34 146.055 46.59 146.273 cv
46.832 146.5 47.02 146.766 47.145 147.078 cv
47.27 147.395 47.332 147.746 47.332 148.129 cv
cp
f
33.941 98.898 mo
48.129 98.898 li
48.129 115.988 li
33.941 115.988 li
cp
0 0 0 0 cmyk
ef
40.254 109.398 mo
40.254 109.875 40.172 110.297 40.012 110.668 cv
39.852 111.039 39.625 111.352 39.336 111.605 cv
39.039 111.859 38.691 112.055 38.289 112.184 cv
37.883 112.316 37.434 112.379 36.941 112.379 cv
36.664 112.379 36.402 112.359 36.16 112.32 cv
35.91 112.281 35.691 112.234 35.504 112.18 cv
35.309 112.125 35.152 112.07 35.027 112.012 cv
34.902 111.961 34.824 111.918 34.793 111.883 cv
34.758 111.852 34.734 111.82 34.723 111.793 cv
34.707 111.766 34.691 111.734 34.684 111.691 cv
34.668 111.656 34.66 111.605 34.66 111.543 cv
34.652 111.484 34.652 111.414 34.652 111.332 cv
34.652 111.258 34.656 111.187 34.664 111.125 cv
34.672 111.062 34.684 111.012 34.703 110.973 cv
34.719 110.934 34.738 110.906 34.766 110.887 cv
34.789 110.871 34.82 110.863 34.852 110.859 cv
34.898 110.863 34.969 110.891 35.063 110.945 cv
35.156 111.004 35.285 111.066 35.449 111.133 cv
35.613 111.199 35.813 111.262 36.055 111.32 cv
36.289 111.379 36.574 111.406 36.91 111.406 cv
37.211 111.406 37.492 111.371 37.75 111.297 cv
38.004 111.227 38.227 111.113 38.414 110.957 cv
38.598 110.805 38.742 110.609 38.848 110.371 cv
38.953 110.137 39.004 109.848 39.008 109.508 cv
39.004 109.227 38.961 108.977 38.871 108.758 cv
38.781 108.539 38.645 108.359 38.461 108.215 cv
38.273 108.074 38.039 107.969 37.758 107.895 cv
37.473 107.824 37.133 107.785 36.746 107.785 cv
36.461 107.785 36.223 107.801 36.023 107.828 cv
35.82 107.859 35.633 107.875 35.461 107.871 cv
35.332 107.875 35.238 107.844 35.188 107.781 cv
35.129 107.723 35.102 107.609 35.105 107.437 cv
35.105 103.824 li
35.102 103.676 35.137 103.566 35.211 103.488 cv
35.277 103.418 35.379 103.379 35.516 103.379 cv
39.445 103.379 li
39.48 103.379 39.516 103.391 39.551 103.41 cv
39.582 103.434 39.609 103.465 39.637 103.504 cv
39.656 103.547 39.672 103.598 39.688 103.66 cv
39.695 103.727 39.703 103.805 39.707 103.887 cv
39.703 104.055 39.68 104.18 39.641 104.27 cv
39.594 104.363 39.535 104.41 39.457 104.406 cv
36.285 104.406 li
36.285 106.895 li
36.438 106.875 36.594 106.863 36.758 106.855 cv
36.914 106.852 37.102 106.848 37.316 106.848 cv
37.801 106.848 38.227 106.91 38.594 107.031 cv
38.957 107.152 39.262 107.324 39.512 107.543 cv
39.754 107.77 39.941 108.035 40.066 108.348 cv
40.191 108.664 40.254 109.016 40.254 109.398 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 107.793 mo
47.664 108.477 47.613 109.098 47.508 109.66 cv
47.398 110.223 47.219 110.707 46.973 111.109 cv
46.719 111.516 46.391 111.828 45.992 112.047 cv
45.586 112.27 45.094 112.379 44.508 112.379 cv
43.949 112.379 43.477 112.281 43.098 112.082 cv
42.715 111.887 42.41 111.594 42.176 111.207 cv
41.941 110.82 41.773 110.348 41.68 109.781 cv
41.578 109.219 41.531 108.57 41.531 107.836 cv
41.531 107.164 41.586 106.543 41.695 105.977 cv
41.805 105.414 41.98 104.93 42.23 104.523 cv
42.473 104.121 42.797 103.809 43.203 103.582 cv
43.602 103.363 44.098 103.25 44.688 103.25 cv
45.246 103.25 45.719 103.352 46.102 103.547 cv
46.484 103.75 46.789 104.043 47.023 104.426 cv
47.254 104.816 47.422 105.289 47.52 105.852 cv
47.617 106.414 47.664 107.062 47.668 107.793 cv
cp
46.461 107.875 mo
46.457 107.434 46.441 107.035 46.414 106.684 cv
46.379 106.332 46.332 106.023 46.273 105.754 cv
46.207 105.484 46.129 105.254 46.031 105.059 cv
45.934 104.867 45.816 104.707 45.68 104.578 cv
45.539 104.453 45.379 104.359 45.207 104.301 cv
45.027 104.246 44.832 104.219 44.617 104.215 cv
44.227 104.219 43.91 104.309 43.672 104.492 cv
43.426 104.676 43.234 104.93 43.098 105.246 cv
42.957 105.566 42.863 105.937 42.813 106.367 cv
42.762 106.797 42.738 107.262 42.738 107.754 cv
42.738 108.418 42.77 108.98 42.84 109.441 cv
42.906 109.91 43.016 110.289 43.168 110.578 cv
43.313 110.875 43.504 111.086 43.734 111.215 cv
43.965 111.352 44.246 111.418 44.578 111.414 cv
44.832 111.418 45.055 111.379 45.25 111.293 cv
45.441 111.215 45.609 111.094 45.75 110.937 cv
45.891 110.785 46.004 110.602 46.098 110.387 cv
46.184 110.172 46.258 109.934 46.316 109.672 cv
46.367 109.414 46.406 109.133 46.43 108.828 cv
46.449 108.523 46.457 108.207 46.461 107.875 cv
cp
f
33.941 60.172 mo
48.129 60.172 li
48.129 77.262 li
33.941 77.262 li
cp
0 0 0 0 cmyk
ef
40.254 70.66 mo
40.254 71.137 40.172 71.559 40.012 71.93 cv
39.852 72.301 39.625 72.613 39.336 72.867 cv
39.039 73.121 38.691 73.316 38.289 73.445 cv
37.883 73.578 37.434 73.641 36.941 73.641 cv
36.664 73.641 36.402 73.621 36.16 73.582 cv
35.91 73.543 35.691 73.496 35.504 73.441 cv
35.309 73.387 35.152 73.332 35.027 73.273 cv
34.902 73.223 34.824 73.18 34.793 73.145 cv
34.758 73.113 34.734 73.082 34.723 73.055 cv
34.707 73.027 34.691 72.996 34.684 72.953 cv
34.668 72.918 34.66 72.867 34.66 72.805 cv
34.652 72.746 34.652 72.676 34.652 72.594 cv
34.652 72.52 34.656 72.449 34.664 72.387 cv
34.672 72.324 34.684 72.273 34.703 72.234 cv
34.719 72.195 34.738 72.168 34.766 72.148 cv
34.789 72.133 34.82 72.125 34.852 72.121 cv
34.898 72.125 34.969 72.152 35.063 72.207 cv
35.156 72.266 35.285 72.328 35.449 72.395 cv
35.613 72.461 35.813 72.523 36.055 72.582 cv
36.289 72.641 36.574 72.668 36.91 72.668 cv
37.211 72.668 37.492 72.633 37.75 72.559 cv
38.004 72.488 38.227 72.375 38.414 72.219 cv
38.598 72.066 38.742 71.871 38.848 71.633 cv
38.953 71.398 39.004 71.109 39.008 70.77 cv
39.004 70.488 38.961 70.238 38.871 70.02 cv
38.781 69.801 38.645 69.621 38.461 69.477 cv
38.273 69.336 38.039 69.23 37.758 69.156 cv
37.473 69.086 37.133 69.047 36.746 69.047 cv
36.461 69.047 36.223 69.062 36.023 69.09 cv
35.82 69.121 35.633 69.137 35.461 69.133 cv
35.332 69.137 35.238 69.105 35.188 69.043 cv
35.129 68.984 35.102 68.871 35.105 68.699 cv
35.105 65.086 li
35.102 64.937 35.137 64.828 35.211 64.75 cv
35.277 64.68 35.379 64.641 35.516 64.641 cv
39.445 64.641 li
39.48 64.641 39.516 64.652 39.551 64.672 cv
39.582 64.695 39.609 64.727 39.637 64.766 cv
39.656 64.809 39.672 64.859 39.688 64.922 cv
39.695 64.988 39.703 65.066 39.707 65.148 cv
39.703 65.316 39.68 65.441 39.641 65.531 cv
39.594 65.625 39.535 65.672 39.457 65.668 cv
36.285 65.668 li
36.285 68.156 li
36.438 68.137 36.594 68.125 36.758 68.117 cv
36.914 68.113 37.102 68.109 37.316 68.109 cv
37.801 68.109 38.227 68.172 38.594 68.293 cv
38.957 68.414 39.262 68.586 39.512 68.805 cv
39.754 69.031 39.941 69.297 40.066 69.609 cv
40.191 69.926 40.254 70.277 40.254 70.66 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.332 70.66 mo
47.332 71.137 47.25 71.559 47.09 71.93 cv
46.93 72.301 46.703 72.613 46.414 72.867 cv
46.117 73.121 45.77 73.316 45.367 73.445 cv
44.961 73.578 44.512 73.641 44.02 73.641 cv
43.742 73.641 43.48 73.621 43.238 73.582 cv
42.988 73.543 42.77 73.496 42.582 73.441 cv
42.387 73.387 42.23 73.332 42.105 73.273 cv
41.98 73.223 41.902 73.18 41.871 73.145 cv
41.836 73.113 41.813 73.082 41.801 73.055 cv
41.785 73.027 41.77 72.996 41.762 72.953 cv
41.746 72.918 41.738 72.867 41.738 72.805 cv
41.73 72.746 41.73 72.676 41.73 72.594 cv
41.73 72.52 41.734 72.449 41.742 72.387 cv
41.75 72.324 41.762 72.273 41.781 72.234 cv
41.797 72.195 41.816 72.168 41.844 72.148 cv
41.867 72.133 41.898 72.125 41.93 72.121 cv
41.977 72.125 42.047 72.152 42.141 72.207 cv
42.234 72.266 42.363 72.328 42.527 72.395 cv
42.691 72.461 42.891 72.523 43.133 72.582 cv
43.367 72.641 43.652 72.668 43.988 72.668 cv
44.289 72.668 44.57 72.633 44.828 72.559 cv
45.082 72.488 45.305 72.375 45.492 72.219 cv
45.676 72.066 45.82 71.871 45.926 71.633 cv
46.031 71.398 46.082 71.109 46.086 70.77 cv
46.082 70.488 46.039 70.238 45.949 70.02 cv
45.859 69.801 45.723 69.621 45.539 69.477 cv
45.352 69.336 45.117 69.23 44.836 69.156 cv
44.551 69.086 44.211 69.047 43.824 69.047 cv
43.539 69.047 43.301 69.062 43.102 69.09 cv
42.898 69.121 42.711 69.137 42.539 69.133 cv
42.41 69.137 42.316 69.105 42.266 69.043 cv
42.207 68.984 42.18 68.871 42.184 68.699 cv
42.184 65.086 li
42.18 64.937 42.215 64.828 42.289 64.75 cv
42.355 64.68 42.457 64.641 42.594 64.641 cv
46.523 64.641 li
46.559 64.641 46.594 64.652 46.629 64.672 cv
46.66 64.695 46.688 64.727 46.715 64.766 cv
46.734 64.809 46.75 64.859 46.766 64.922 cv
46.773 64.988 46.781 65.066 46.785 65.148 cv
46.781 65.316 46.758 65.441 46.719 65.531 cv
46.672 65.625 46.613 65.672 46.535 65.668 cv
43.363 65.668 li
43.363 68.156 li
43.516 68.137 43.672 68.125 43.836 68.117 cv
43.992 68.113 44.18 68.109 44.395 68.109 cv
44.879 68.109 45.305 68.172 45.672 68.293 cv
46.035 68.414 46.34 68.586 46.59 68.805 cv
46.832 69.031 47.02 69.297 47.145 69.609 cv
47.27 69.926 47.332 70.277 47.332 70.66 cv
cp
f
33.941 21.441 mo
48.129 21.441 li
48.129 38.531 li
33.941 38.531 li
cp
0 0 0 0 cmyk
ef
40.523 31.91 mo
40.523 32.301 40.461 32.68 40.344 33.039 cv
40.219 33.406 40.035 33.723 39.793 33.996 cv
39.543 34.273 39.23 34.496 38.855 34.66 cv
38.473 34.828 38.027 34.91 37.512 34.91 cv
37.141 34.91 36.813 34.867 36.531 34.773 cv
36.246 34.687 36 34.555 35.789 34.383 cv
35.578 34.215 35.402 34.008 35.266 33.762 cv
35.125 33.516 35.012 33.234 34.93 32.918 cv
34.844 32.605 34.785 32.262 34.75 31.883 cv
34.711 31.512 34.691 31.109 34.695 30.676 cv
34.691 30.297 34.711 29.914 34.754 29.523 cv
34.793 29.141 34.867 28.766 34.973 28.398 cv
35.078 28.039 35.223 27.699 35.402 27.383 cv
35.582 27.066 35.809 26.789 36.082 26.555 cv
36.355 26.32 36.68 26.133 37.059 25.992 cv
37.438 25.855 37.879 25.789 38.383 25.785 cv
38.551 25.789 38.723 25.797 38.895 25.816 cv
39.066 25.84 39.227 25.871 39.375 25.902 cv
39.523 25.941 39.645 25.977 39.746 26.016 cv
39.844 26.055 39.91 26.09 39.945 26.113 cv
39.973 26.141 39.996 26.168 40.016 26.195 cv
40.031 26.227 40.047 26.258 40.055 26.293 cv
40.063 26.328 40.066 26.367 40.074 26.41 cv
40.074 26.453 40.078 26.508 40.082 26.57 cv
40.078 26.656 40.078 26.727 40.078 26.781 cv
40.074 26.844 40.063 26.891 40.051 26.926 cv
40.031 26.965 40.012 26.992 39.988 27.008 cv
39.961 27.027 39.93 27.035 39.891 27.035 cv
39.84 27.035 39.77 27.02 39.684 26.988 cv
39.594 26.957 39.488 26.922 39.367 26.879 cv
39.242 26.844 39.094 26.809 38.918 26.773 cv
38.742 26.746 38.539 26.73 38.309 26.727 cv
37.879 26.73 37.512 26.816 37.207 26.988 cv
36.902 27.16 36.652 27.395 36.457 27.687 cv
36.262 27.98 36.117 28.32 36.027 28.703 cv
35.93 29.094 35.875 29.496 35.867 29.914 cv
35.984 29.848 36.121 29.781 36.27 29.711 cv
36.418 29.645 36.578 29.582 36.754 29.523 cv
36.93 29.473 37.117 29.426 37.313 29.391 cv
37.508 29.359 37.719 29.344 37.945 29.34 cv
38.422 29.344 38.824 29.41 39.156 29.535 cv
39.484 29.668 39.75 29.848 39.957 30.078 cv
40.156 30.309 40.301 30.578 40.391 30.891 cv
40.477 31.203 40.523 31.543 40.523 31.91 cv
cp
39.328 32.02 mo
39.328 31.758 39.301 31.516 39.25 31.297 cv
39.195 31.082 39.105 30.898 38.984 30.742 cv
38.859 30.594 38.695 30.477 38.492 30.395 cv
38.281 30.312 38.027 30.27 37.73 30.27 cv
37.559 30.27 37.391 30.285 37.223 30.316 cv
37.051 30.348 36.887 30.391 36.73 30.437 cv
36.57 30.492 36.422 30.555 36.281 30.625 cv
36.137 30.699 36.004 30.773 35.887 30.852 cv
35.883 31.445 35.922 31.941 36 32.336 cv
36.074 32.734 36.184 33.051 36.328 33.289 cv
36.473 33.531 36.652 33.703 36.867 33.805 cv
37.082 33.91 37.332 33.961 37.621 33.957 cv
37.91 33.961 38.164 33.906 38.379 33.793 cv
38.594 33.687 38.77 33.539 38.914 33.352 cv
39.055 33.168 39.16 32.961 39.227 32.73 cv
39.293 32.5 39.328 32.266 39.328 32.02 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
47.668 30.324 mo
47.664 31.008 47.613 31.629 47.508 32.191 cv
47.398 32.754 47.219 33.238 46.973 33.641 cv
46.719 34.047 46.391 34.359 45.992 34.578 cv
45.586 34.801 45.094 34.91 44.508 34.91 cv
43.949 34.91 43.477 34.812 43.098 34.613 cv
42.715 34.418 42.41 34.125 42.176 33.738 cv
41.941 33.352 41.773 32.879 41.68 32.312 cv
41.578 31.75 41.531 31.102 41.531 30.367 cv
41.531 29.695 41.586 29.074 41.695 28.508 cv
41.805 27.945 41.98 27.461 42.23 27.055 cv
42.473 26.652 42.797 26.34 43.203 26.113 cv
43.602 25.895 44.098 25.781 44.688 25.781 cv
45.246 25.781 45.719 25.883 46.102 26.078 cv
46.484 26.281 46.789 26.574 47.023 26.957 cv
47.254 27.348 47.422 27.82 47.52 28.383 cv
47.617 28.945 47.664 29.594 47.668 30.324 cv
cp
46.461 30.406 mo
46.457 29.965 46.441 29.566 46.414 29.215 cv
46.379 28.863 46.332 28.555 46.273 28.285 cv
46.207 28.016 46.129 27.785 46.031 27.59 cv
45.934 27.398 45.816 27.238 45.68 27.109 cv
45.539 26.984 45.379 26.891 45.207 26.832 cv
45.027 26.777 44.832 26.75 44.617 26.746 cv
44.227 26.75 43.91 26.84 43.672 27.023 cv
43.426 27.207 43.234 27.461 43.098 27.777 cv
42.957 28.098 42.863 28.469 42.813 28.898 cv
42.762 29.328 42.738 29.793 42.738 30.285 cv
42.738 30.949 42.77 31.512 42.84 31.973 cv
42.906 32.441 43.016 32.82 43.168 33.109 cv
43.313 33.406 43.504 33.617 43.734 33.746 cv
43.965 33.883 44.246 33.949 44.578 33.945 cv
44.832 33.949 45.055 33.91 45.25 33.824 cv
45.441 33.746 45.609 33.625 45.75 33.469 cv
45.891 33.316 46.004 33.133 46.098 32.918 cv
46.184 32.703 46.258 32.465 46.316 32.203 cv
46.367 31.945 46.406 31.664 46.43 31.359 cv
46.449 31.055 46.457 30.738 46.461 30.406 cv
cp
f
63.934 517.359 mo
63.93 517.449 63.922 517.52 63.91 517.578 cv
63.895 517.641 63.875 517.691 63.855 517.723 cv
63.832 517.762 63.809 517.785 63.777 517.801 cv
63.746 517.816 63.715 517.824 63.688 517.824 cv
59.051 517.824 li
59.016 517.824 58.988 517.816 58.961 517.801 cv
58.934 517.785 58.906 517.762 58.883 517.723 cv
58.855 517.691 58.836 517.641 58.824 517.578 cv
58.809 517.52 58.801 517.449 58.805 517.359 cv
58.801 517.281 58.809 517.207 58.824 517.145 cv
58.836 517.086 58.852 517.039 58.875 517 cv
58.891 516.965 58.918 516.934 58.949 516.91 cv
58.98 516.891 59.012 516.883 59.051 516.879 cv
60.902 516.879 li
60.902 510.133 li
59.188 511.152 li
59.098 511.203 59.027 511.23 58.98 511.238 cv
58.926 511.246 58.883 511.238 58.852 511.207 cv
58.816 511.18 58.797 511.129 58.785 511.059 cv
58.773 510.992 58.766 510.906 58.77 510.797 cv
58.766 510.723 58.77 510.656 58.781 510.598 cv
58.785 510.547 58.797 510.5 58.813 510.461 cv
58.824 510.426 58.844 510.395 58.867 510.367 cv
58.891 510.34 58.922 510.312 58.969 510.285 cv
61.012 508.973 li
61.027 508.961 61.047 508.949 61.078 508.941 cv
61.102 508.934 61.137 508.926 61.184 508.914 cv
61.223 508.906 61.273 508.898 61.328 508.895 cv
61.383 508.895 61.449 508.895 61.535 508.891 cv
61.641 508.895 61.734 508.898 61.809 508.906 cv
61.879 508.914 61.934 508.93 61.98 508.945 cv
62.02 508.965 62.047 508.984 62.063 509.008 cv
62.07 509.035 62.078 509.059 62.082 509.082 cv
62.082 516.879 li
63.688 516.879 li
63.723 516.883 63.758 516.891 63.789 516.91 cv
63.82 516.934 63.844 516.965 63.867 517 cv
63.883 517.039 63.898 517.086 63.914 517.145 cv
63.922 517.207 63.93 517.281 63.934 517.359 cv
cp
f
141.746 517.316 mo
141.742 517.402 141.738 517.477 141.727 517.539 cv
141.715 517.605 141.699 517.66 141.68 517.699 cv
141.656 517.746 141.629 517.777 141.598 517.793 cv
141.563 517.816 141.523 517.824 141.484 517.824 cv
136.582 517.824 li
136.52 517.824 136.461 517.816 136.414 517.801 cv
136.363 517.785 136.324 517.762 136.289 517.723 cv
136.254 517.691 136.227 517.637 136.215 517.566 cv
136.195 517.496 136.188 517.41 136.191 517.309 cv
136.188 517.219 136.191 517.141 136.199 517.07 cv
136.203 517.004 136.219 516.945 136.246 516.891 cv
136.27 516.84 136.301 516.785 136.336 516.73 cv
136.371 516.68 136.414 516.625 136.473 516.562 cv
138.246 514.738 li
138.656 514.32 138.984 513.945 139.234 513.609 cv
139.48 513.281 139.672 512.977 139.805 512.699 cv
139.938 512.426 140.023 512.176 140.07 511.949 cv
140.109 511.727 140.133 511.516 140.133 511.32 cv
140.133 511.125 140.098 510.941 140.031 510.762 cv
139.965 510.59 139.871 510.434 139.746 510.297 cv
139.621 510.168 139.465 510.062 139.277 509.98 cv
139.09 509.906 138.871 509.867 138.625 509.863 cv
138.336 509.867 138.078 509.906 137.852 509.98 cv
137.621 510.062 137.422 510.148 137.25 510.234 cv
137.078 510.328 136.934 510.41 136.816 510.488 cv
136.699 510.566 136.613 510.605 136.563 510.605 cv
136.527 510.605 136.496 510.598 136.473 510.578 cv
136.441 510.562 136.422 510.531 136.406 510.488 cv
136.391 510.449 136.375 510.395 136.367 510.324 cv
136.355 510.258 136.352 510.176 136.355 510.078 cv
136.352 510.012 136.355 509.953 136.363 509.902 cv
136.367 509.852 136.375 509.809 136.387 509.77 cv
136.395 509.734 136.41 509.699 136.43 509.668 cv
136.449 509.637 136.484 509.598 136.543 509.547 cv
136.594 509.5 136.688 509.434 136.824 509.352 cv
136.957 509.27 137.129 509.191 137.332 509.109 cv
137.535 509.031 137.758 508.961 138.004 508.906 cv
138.246 508.852 138.504 508.824 138.777 508.824 cv
139.203 508.824 139.578 508.887 139.902 509.008 cv
140.223 509.129 140.488 509.293 140.703 509.504 cv
140.914 509.715 141.074 509.961 141.18 510.234 cv
141.285 510.516 141.34 510.812 141.34 511.125 cv
141.34 511.414 141.313 511.695 141.262 511.973 cv
141.211 512.258 141.105 512.562 140.945 512.887 cv
140.781 513.215 140.547 513.578 140.242 513.977 cv
139.934 514.379 139.527 514.84 139.023 515.355 cv
137.617 516.824 li
141.477 516.824 li
141.508 516.828 141.543 516.84 141.582 516.855 cv
141.613 516.879 141.645 516.91 141.672 516.949 cv
141.695 516.992 141.715 517.043 141.727 517.102 cv
141.738 517.168 141.742 517.238 141.746 517.316 cv
cp
f
219.93 515.301 mo
219.926 515.453 219.902 515.574 219.859 515.66 cv
219.813 515.75 219.75 515.793 219.668 515.789 cv
218.668 515.789 li
218.668 517.652 li
218.668 517.691 218.656 517.723 218.641 517.746 cv
218.617 517.773 218.586 517.793 218.543 517.812 cv
218.492 517.828 218.43 517.84 218.359 517.852 cv
218.281 517.859 218.188 517.863 218.07 517.867 cv
217.953 517.863 217.855 517.859 217.785 517.852 cv
217.707 517.84 217.648 517.828 217.605 517.812 cv
217.559 517.793 217.527 517.773 217.512 517.746 cv
217.492 517.723 217.484 517.691 217.488 517.652 cv
217.488 515.789 li
213.859 515.789 li
213.801 515.793 213.758 515.785 213.723 515.77 cv
213.688 515.758 213.652 515.73 213.625 515.691 cv
213.594 515.656 213.574 515.605 213.563 515.535 cv
213.551 515.469 213.547 515.379 213.547 515.266 cv
213.547 515.184 213.547 515.105 213.555 515.035 cv
213.555 514.965 213.566 514.902 213.582 514.848 cv
213.594 514.793 213.609 514.738 213.637 514.684 cv
213.656 514.629 213.684 514.574 213.719 514.512 cv
216.879 509.125 li
216.898 509.09 216.934 509.059 216.98 509.031 cv
217.023 509.004 217.078 508.98 217.152 508.961 cv
217.219 508.945 217.305 508.934 217.41 508.922 cv
217.512 508.918 217.633 508.914 217.773 508.91 cv
217.922 508.914 218.059 508.918 218.176 508.93 cv
218.289 508.941 218.379 508.957 218.453 508.973 cv
218.52 508.992 218.574 509.016 218.613 509.047 cv
218.648 509.078 218.668 509.113 218.668 509.152 cv
218.668 514.816 li
219.668 514.816 li
219.742 514.82 219.805 514.859 219.855 514.937 cv
219.902 515.02 219.926 515.141 219.93 515.301 cv
cp
217.488 509.949 mo
217.477 509.949 li
214.625 514.816 li
217.488 514.816 li
cp
f
297.582 514.953 mo
297.582 515.344 297.52 515.723 297.402 516.082 cv
297.277 516.449 297.094 516.766 296.852 517.039 cv
296.602 517.316 296.289 517.539 295.914 517.703 cv
295.531 517.871 295.086 517.953 294.57 517.953 cv
294.199 517.953 293.871 517.91 293.59 517.816 cv
293.305 517.73 293.059 517.598 292.848 517.426 cv
292.637 517.258 292.461 517.051 292.324 516.805 cv
292.184 516.559 292.07 516.277 291.988 515.961 cv
291.902 515.648 291.844 515.305 291.809 514.926 cv
291.77 514.555 291.75 514.152 291.754 513.719 cv
291.75 513.34 291.77 512.957 291.813 512.566 cv
291.852 512.184 291.926 511.809 292.031 511.441 cv
292.137 511.082 292.281 510.742 292.461 510.426 cv
292.641 510.109 292.867 509.832 293.141 509.598 cv
293.414 509.363 293.738 509.176 294.117 509.035 cv
294.496 508.898 294.938 508.832 295.441 508.828 cv
295.609 508.832 295.781 508.84 295.953 508.859 cv
296.125 508.883 296.285 508.914 296.434 508.945 cv
296.582 508.984 296.703 509.02 296.805 509.059 cv
296.902 509.098 296.969 509.133 297.004 509.156 cv
297.031 509.184 297.055 509.211 297.074 509.238 cv
297.09 509.27 297.105 509.301 297.113 509.336 cv
297.121 509.371 297.125 509.41 297.133 509.453 cv
297.133 509.496 297.137 509.551 297.141 509.613 cv
297.137 509.699 297.137 509.77 297.137 509.824 cv
297.133 509.887 297.121 509.934 297.109 509.969 cv
297.09 510.008 297.07 510.035 297.047 510.051 cv
297.02 510.07 296.988 510.078 296.949 510.078 cv
296.898 510.078 296.828 510.062 296.742 510.031 cv
296.652 510 296.547 509.965 296.426 509.922 cv
296.301 509.887 296.152 509.852 295.977 509.816 cv
295.801 509.789 295.598 509.773 295.367 509.77 cv
294.938 509.773 294.57 509.859 294.266 510.031 cv
293.961 510.203 293.711 510.437 293.516 510.73 cv
293.32 511.023 293.176 511.363 293.086 511.746 cv
292.988 512.137 292.934 512.539 292.926 512.957 cv
293.043 512.891 293.18 512.824 293.328 512.754 cv
293.477 512.687 293.637 512.625 293.813 512.566 cv
293.988 512.516 294.176 512.469 294.371 512.434 cv
294.566 512.402 294.777 512.387 295.004 512.383 cv
295.48 512.387 295.883 512.453 296.215 512.578 cv
296.543 512.711 296.809 512.891 297.016 513.121 cv
297.215 513.352 297.359 513.621 297.449 513.934 cv
297.535 514.246 297.582 514.586 297.582 514.953 cv
cp
296.387 515.062 mo
296.387 514.801 296.359 514.559 296.309 514.34 cv
296.254 514.125 296.164 513.941 296.043 513.785 cv
295.918 513.637 295.754 513.52 295.551 513.437 cv
295.34 513.355 295.086 513.312 294.789 513.312 cv
294.617 513.312 294.449 513.328 294.281 513.359 cv
294.109 513.391 293.945 513.434 293.789 513.48 cv
293.629 513.535 293.48 513.598 293.34 513.668 cv
293.195 513.742 293.063 513.816 292.945 513.895 cv
292.941 514.488 292.98 514.984 293.059 515.379 cv
293.133 515.777 293.242 516.094 293.387 516.332 cv
293.531 516.574 293.711 516.746 293.926 516.848 cv
294.141 516.953 294.391 517.004 294.68 517 cv
294.969 517.004 295.223 516.949 295.438 516.836 cv
295.652 516.73 295.828 516.582 295.973 516.395 cv
296.113 516.211 296.219 516.004 296.285 515.773 cv
296.352 515.543 296.387 515.309 296.387 515.062 cv
cp
f
375.398 515.547 mo
375.398 515.934 375.328 516.277 375.191 516.574 cv
375.055 516.879 374.859 517.129 374.602 517.332 cv
374.344 517.539 374.023 517.695 373.645 517.797 cv
373.262 517.902 372.828 517.953 372.344 517.953 cv
371.883 517.953 371.473 517.906 371.113 517.812 cv
370.75 517.719 370.445 517.578 370.195 517.387 cv
369.945 517.203 369.754 516.973 369.621 516.695 cv
369.488 516.422 369.422 516.109 369.422 515.754 cv
369.422 515.48 369.465 515.223 369.559 514.988 cv
369.645 514.754 369.777 514.539 369.953 514.344 cv
370.121 514.148 370.332 513.965 370.586 513.789 cv
370.836 513.621 371.121 513.457 371.438 513.301 cv
371.164 513.16 370.922 513.012 370.711 512.852 cv
370.5 512.695 370.32 512.523 370.176 512.336 cv
370.027 512.152 369.918 511.957 369.844 511.746 cv
369.766 511.539 369.727 511.309 369.73 511.059 cv
369.727 510.75 369.781 510.457 369.898 510.184 cv
370.008 509.914 370.18 509.68 370.406 509.477 cv
370.633 509.277 370.918 509.117 371.27 509 cv
371.613 508.883 372.023 508.824 372.492 508.824 cv
372.938 508.824 373.324 508.879 373.652 508.984 cv
373.98 509.094 374.25 509.238 374.461 509.422 cv
374.672 509.609 374.828 509.828 374.934 510.078 cv
375.031 510.328 375.082 510.598 375.086 510.887 cv
375.082 511.121 375.043 511.348 374.973 511.559 cv
374.895 511.777 374.785 511.98 374.637 512.168 cv
374.488 512.363 374.309 512.543 374.098 512.707 cv
373.887 512.879 373.645 513.035 373.371 513.176 cv
373.691 513.34 373.977 513.504 374.234 513.672 cv
374.484 513.84 374.699 514.02 374.875 514.215 cv
375.043 514.41 375.172 514.617 375.266 514.832 cv
375.352 515.051 375.398 515.289 375.398 515.547 cv
cp
373.918 510.996 mo
373.914 510.809 373.883 510.633 373.816 510.477 cv
373.75 510.32 373.652 510.187 373.527 510.078 cv
373.398 509.969 373.238 509.887 373.051 509.828 cv
372.855 509.773 372.641 509.746 372.402 509.742 cv
371.906 509.746 371.531 509.855 371.281 510.078 cv
371.023 510.305 370.898 510.613 370.902 510.996 cv
370.898 511.176 370.93 511.34 370.992 511.492 cv
371.055 511.648 371.148 511.793 371.281 511.93 cv
371.406 512.066 371.57 512.199 371.773 512.328 cv
371.969 512.461 372.207 512.598 372.484 512.738 cv
372.945 512.504 373.301 512.242 373.547 511.949 cv
373.793 511.664 373.914 511.348 373.918 510.996 cv
cp
374.207 515.672 mo
374.203 515.465 374.164 515.273 374.09 515.102 cv
374.008 514.934 373.891 514.773 373.734 514.621 cv
373.578 514.473 373.379 514.328 373.145 514.187 cv
372.906 514.051 372.637 513.906 372.328 513.754 cv
372.039 513.898 371.785 514.039 371.57 514.18 cv
371.352 514.32 371.172 514.469 371.035 514.617 cv
370.895 514.773 370.789 514.93 370.719 515.094 cv
370.645 515.262 370.609 515.445 370.613 515.645 cv
370.609 516.09 370.762 516.434 371.07 516.672 cv
371.371 516.918 371.824 517.039 372.43 517.035 cv
373.012 517.039 373.457 516.918 373.758 516.668 cv
374.055 516.426 374.203 516.094 374.207 515.672 cv
cp
f
449.465 517.359 mo
449.461 517.449 449.453 517.52 449.441 517.578 cv
449.426 517.641 449.406 517.691 449.387 517.723 cv
449.363 517.762 449.34 517.785 449.309 517.801 cv
449.277 517.816 449.246 517.824 449.219 517.824 cv
444.582 517.824 li
444.547 517.824 444.52 517.816 444.492 517.801 cv
444.465 517.785 444.438 517.762 444.414 517.723 cv
444.387 517.691 444.367 517.641 444.355 517.578 cv
444.34 517.52 444.332 517.449 444.336 517.359 cv
444.332 517.281 444.34 517.207 444.355 517.145 cv
444.367 517.086 444.383 517.039 444.406 517 cv
444.422 516.965 444.449 516.934 444.48 516.91 cv
444.512 516.891 444.543 516.883 444.582 516.879 cv
446.434 516.879 li
446.434 510.133 li
444.719 511.152 li
444.629 511.203 444.559 511.23 444.512 511.238 cv
444.457 511.246 444.414 511.238 444.383 511.207 cv
444.348 511.18 444.328 511.129 444.316 511.059 cv
444.305 510.992 444.297 510.906 444.301 510.797 cv
444.297 510.723 444.301 510.656 444.313 510.598 cv
444.316 510.547 444.328 510.5 444.344 510.461 cv
444.355 510.426 444.375 510.395 444.398 510.367 cv
444.422 510.34 444.453 510.312 444.5 510.285 cv
446.543 508.973 li
446.559 508.961 446.578 508.949 446.609 508.941 cv
446.633 508.934 446.668 508.926 446.715 508.914 cv
446.754 508.906 446.805 508.898 446.859 508.895 cv
446.914 508.895 446.98 508.895 447.066 508.891 cv
447.172 508.895 447.266 508.898 447.34 508.906 cv
447.41 508.914 447.465 508.93 447.512 508.945 cv
447.551 508.965 447.578 508.984 447.594 509.008 cv
447.602 509.035 447.609 509.059 447.613 509.082 cv
447.613 516.879 li
449.219 516.879 li
449.254 516.883 449.289 516.891 449.32 516.91 cv
449.352 516.934 449.375 516.965 449.398 517 cv
449.414 517.039 449.43 517.086 449.445 517.145 cv
449.453 517.207 449.461 517.281 449.465 517.359 cv
cp
f
456.82 513.367 mo
456.816 514.051 456.766 514.672 456.66 515.234 cv
456.551 515.797 456.371 516.281 456.125 516.684 cv
455.871 517.09 455.543 517.402 455.145 517.621 cv
454.738 517.844 454.246 517.953 453.66 517.953 cv
453.102 517.953 452.629 517.855 452.25 517.656 cv
451.867 517.461 451.563 517.168 451.328 516.781 cv
451.094 516.395 450.926 515.922 450.832 515.355 cv
450.73 514.793 450.684 514.145 450.684 513.41 cv
450.684 512.738 450.738 512.117 450.848 511.551 cv
450.957 510.988 451.133 510.504 451.383 510.098 cv
451.625 509.695 451.949 509.383 452.355 509.156 cv
452.754 508.937 453.25 508.824 453.84 508.824 cv
454.398 508.824 454.871 508.926 455.254 509.121 cv
455.637 509.324 455.941 509.617 456.176 510 cv
456.406 510.391 456.574 510.863 456.672 511.426 cv
456.77 511.988 456.816 512.637 456.82 513.367 cv
cp
455.613 513.449 mo
455.609 513.008 455.594 512.609 455.566 512.258 cv
455.531 511.906 455.484 511.598 455.426 511.328 cv
455.359 511.059 455.281 510.828 455.184 510.633 cv
455.086 510.441 454.969 510.281 454.832 510.152 cv
454.691 510.027 454.531 509.934 454.359 509.875 cv
454.18 509.82 453.984 509.793 453.77 509.789 cv
453.379 509.793 453.063 509.883 452.824 510.066 cv
452.578 510.25 452.387 510.504 452.25 510.82 cv
452.109 511.141 452.016 511.512 451.965 511.941 cv
451.914 512.371 451.891 512.836 451.891 513.328 cv
451.891 513.992 451.922 514.555 451.992 515.016 cv
452.059 515.484 452.168 515.863 452.32 516.152 cv
452.465 516.449 452.656 516.66 452.887 516.789 cv
453.117 516.926 453.398 516.992 453.73 516.988 cv
453.984 516.992 454.207 516.953 454.402 516.867 cv
454.594 516.789 454.762 516.668 454.902 516.512 cv
455.043 516.359 455.156 516.176 455.25 515.961 cv
455.336 515.746 455.41 515.508 455.469 515.246 cv
455.52 514.988 455.559 514.707 455.582 514.402 cv
455.602 514.098 455.609 513.781 455.613 513.449 cv
cp
f
527.297 517.359 mo
527.293 517.449 527.285 517.52 527.273 517.578 cv
527.258 517.641 527.238 517.691 527.219 517.723 cv
527.195 517.762 527.172 517.785 527.141 517.801 cv
527.109 517.816 527.078 517.824 527.051 517.824 cv
522.414 517.824 li
522.379 517.824 522.352 517.816 522.324 517.801 cv
522.297 517.785 522.27 517.762 522.246 517.723 cv
522.219 517.691 522.199 517.641 522.188 517.578 cv
522.172 517.52 522.164 517.449 522.168 517.359 cv
522.164 517.281 522.172 517.207 522.188 517.145 cv
522.199 517.086 522.215 517.039 522.238 517 cv
522.254 516.965 522.281 516.934 522.313 516.91 cv
522.344 516.891 522.375 516.883 522.414 516.879 cv
524.266 516.879 li
524.266 510.133 li
522.551 511.152 li
522.461 511.203 522.391 511.23 522.344 511.238 cv
522.289 511.246 522.246 511.238 522.215 511.207 cv
522.18 511.18 522.16 511.129 522.148 511.059 cv
522.137 510.992 522.129 510.906 522.133 510.797 cv
522.129 510.723 522.133 510.656 522.145 510.598 cv
522.148 510.547 522.16 510.5 522.176 510.461 cv
522.188 510.426 522.207 510.395 522.23 510.367 cv
522.254 510.34 522.285 510.312 522.332 510.285 cv
524.375 508.973 li
524.391 508.961 524.41 508.949 524.441 508.941 cv
524.465 508.934 524.5 508.926 524.547 508.914 cv
524.586 508.906 524.637 508.898 524.691 508.895 cv
524.746 508.895 524.813 508.895 524.898 508.891 cv
525.004 508.895 525.098 508.898 525.172 508.906 cv
525.242 508.914 525.297 508.93 525.344 508.945 cv
525.383 508.965 525.41 508.984 525.426 509.008 cv
525.434 509.035 525.441 509.059 525.445 509.082 cv
525.445 516.879 li
527.051 516.879 li
527.086 516.883 527.121 516.891 527.152 516.91 cv
527.184 516.934 527.207 516.965 527.23 517 cv
527.246 517.039 527.262 517.086 527.277 517.145 cv
527.285 517.207 527.293 517.281 527.297 517.359 cv
cp
f
534.355 517.316 mo
534.352 517.402 534.348 517.477 534.336 517.539 cv
534.324 517.605 534.309 517.66 534.289 517.699 cv
534.266 517.746 534.238 517.777 534.207 517.793 cv
534.172 517.816 534.133 517.824 534.094 517.824 cv
529.191 517.824 li
529.129 517.824 529.07 517.816 529.023 517.801 cv
528.973 517.785 528.934 517.762 528.898 517.723 cv
528.863 517.691 528.836 517.637 528.824 517.566 cv
528.805 517.496 528.797 517.41 528.801 517.309 cv
528.797 517.219 528.801 517.141 528.809 517.07 cv
528.813 517.004 528.828 516.945 528.855 516.891 cv
528.879 516.84 528.91 516.785 528.945 516.73 cv
528.98 516.68 529.023 516.625 529.082 516.562 cv
530.855 514.738 li
531.266 514.32 531.594 513.945 531.844 513.609 cv
532.09 513.281 532.281 512.977 532.414 512.699 cv
532.547 512.426 532.633 512.176 532.68 511.949 cv
532.719 511.727 532.742 511.516 532.742 511.32 cv
532.742 511.125 532.707 510.941 532.641 510.762 cv
532.574 510.59 532.48 510.434 532.355 510.297 cv
532.23 510.168 532.074 510.062 531.887 509.98 cv
531.699 509.906 531.48 509.867 531.234 509.863 cv
530.945 509.867 530.688 509.906 530.461 509.98 cv
530.23 510.062 530.031 510.148 529.859 510.234 cv
529.688 510.328 529.543 510.41 529.426 510.488 cv
529.309 510.566 529.223 510.605 529.172 510.605 cv
529.137 510.605 529.105 510.598 529.082 510.578 cv
529.051 510.562 529.031 510.531 529.016 510.488 cv
529 510.449 528.984 510.395 528.977 510.324 cv
528.965 510.258 528.961 510.176 528.965 510.078 cv
528.961 510.012 528.965 509.953 528.973 509.902 cv
528.977 509.852 528.984 509.809 528.996 509.77 cv
529.004 509.734 529.02 509.699 529.039 509.668 cv
529.059 509.637 529.094 509.598 529.152 509.547 cv
529.203 509.5 529.297 509.434 529.434 509.352 cv
529.566 509.27 529.738 509.191 529.941 509.109 cv
530.145 509.031 530.367 508.961 530.613 508.906 cv
530.855 508.852 531.113 508.824 531.387 508.824 cv
531.813 508.824 532.188 508.887 532.512 509.008 cv
532.832 509.129 533.098 509.293 533.313 509.504 cv
533.523 509.715 533.684 509.961 533.789 510.234 cv
533.895 510.516 533.949 510.812 533.949 511.125 cv
533.949 511.414 533.922 511.695 533.871 511.973 cv
533.82 512.258 533.715 512.562 533.555 512.887 cv
533.391 513.215 533.156 513.578 532.852 513.977 cv
532.543 514.379 532.137 514.84 531.633 515.355 cv
530.227 516.824 li
534.086 516.824 li
534.117 516.828 534.152 516.84 534.191 516.855 cv
534.223 516.879 534.254 516.91 534.281 516.949 cv
534.305 516.992 534.324 517.043 534.336 517.102 cv
534.348 517.168 534.352 517.238 534.355 517.316 cv
cp
f
605.105 517.359 mo
605.102 517.449 605.094 517.52 605.082 517.578 cv
605.066 517.641 605.047 517.691 605.027 517.723 cv
605.004 517.762 604.98 517.785 604.949 517.801 cv
604.918 517.816 604.887 517.824 604.859 517.824 cv
600.223 517.824 li
600.188 517.824 600.16 517.816 600.133 517.801 cv
600.105 517.785 600.078 517.762 600.055 517.723 cv
600.027 517.691 600.008 517.641 599.996 517.578 cv
599.98 517.52 599.973 517.449 599.977 517.359 cv
599.973 517.281 599.98 517.207 599.996 517.145 cv
600.008 517.086 600.023 517.039 600.047 517 cv
600.063 516.965 600.09 516.934 600.121 516.91 cv
600.152 516.891 600.184 516.883 600.223 516.879 cv
602.074 516.879 li
602.074 510.133 li
600.359 511.152 li
600.27 511.203 600.199 511.23 600.152 511.238 cv
600.098 511.246 600.055 511.238 600.023 511.207 cv
599.988 511.18 599.969 511.129 599.957 511.059 cv
599.945 510.992 599.938 510.906 599.941 510.797 cv
599.938 510.723 599.941 510.656 599.953 510.598 cv
599.957 510.547 599.969 510.5 599.984 510.461 cv
599.996 510.426 600.016 510.395 600.039 510.367 cv
600.063 510.34 600.094 510.312 600.141 510.285 cv
602.184 508.973 li
602.199 508.961 602.219 508.949 602.25 508.941 cv
602.273 508.934 602.309 508.926 602.355 508.914 cv
602.395 508.906 602.445 508.898 602.5 508.895 cv
602.555 508.895 602.621 508.895 602.707 508.891 cv
602.813 508.895 602.906 508.898 602.98 508.906 cv
603.051 508.914 603.105 508.93 603.152 508.945 cv
603.191 508.965 603.219 508.984 603.234 509.008 cv
603.242 509.035 603.25 509.059 603.254 509.082 cv
603.254 516.879 li
604.859 516.879 li
604.895 516.883 604.93 516.891 604.961 516.91 cv
604.992 516.934 605.016 516.965 605.039 517 cv
605.055 517.039 605.07 517.086 605.086 517.145 cv
605.094 517.207 605.102 517.281 605.105 517.359 cv
cp
f
612.539 515.301 mo
612.535 515.453 612.512 515.574 612.469 515.66 cv
612.422 515.75 612.359 515.793 612.277 515.789 cv
611.277 515.789 li
611.277 517.652 li
611.277 517.691 611.266 517.723 611.25 517.746 cv
611.227 517.773 611.195 517.793 611.152 517.812 cv
611.102 517.828 611.039 517.84 610.969 517.852 cv
610.891 517.859 610.797 517.863 610.68 517.867 cv
610.563 517.863 610.465 517.859 610.395 517.852 cv
610.316 517.84 610.258 517.828 610.215 517.812 cv
610.168 517.793 610.137 517.773 610.121 517.746 cv
610.102 517.723 610.094 517.691 610.098 517.652 cv
610.098 515.789 li
606.469 515.789 li
606.41 515.793 606.367 515.785 606.332 515.77 cv
606.297 515.758 606.262 515.73 606.234 515.691 cv
606.203 515.656 606.184 515.605 606.172 515.535 cv
606.16 515.469 606.156 515.379 606.156 515.266 cv
606.156 515.184 606.156 515.105 606.164 515.035 cv
606.164 514.965 606.176 514.902 606.191 514.848 cv
606.203 514.793 606.219 514.738 606.246 514.684 cv
606.266 514.629 606.293 514.574 606.328 514.512 cv
609.488 509.125 li
609.508 509.09 609.543 509.059 609.59 509.031 cv
609.633 509.004 609.688 508.98 609.762 508.961 cv
609.828 508.945 609.914 508.934 610.02 508.922 cv
610.121 508.918 610.242 508.914 610.383 508.91 cv
610.531 508.914 610.668 508.918 610.785 508.93 cv
610.898 508.941 610.988 508.957 611.063 508.973 cv
611.129 508.992 611.184 509.016 611.223 509.047 cv
611.258 509.078 611.277 509.113 611.277 509.152 cv
611.277 514.816 li
612.277 514.816 li
612.352 514.82 612.414 514.859 612.465 514.937 cv
612.512 515.02 612.535 515.141 612.539 515.301 cv
cp
610.098 509.949 mo
610.086 509.949 li
607.234 514.816 li
610.098 514.816 li
cp
f
682.914 517.359 mo
682.91 517.449 682.902 517.52 682.891 517.578 cv
682.875 517.641 682.855 517.691 682.836 517.723 cv
682.813 517.762 682.789 517.785 682.758 517.801 cv
682.727 517.816 682.695 517.824 682.668 517.824 cv
678.031 517.824 li
677.996 517.824 677.969 517.816 677.941 517.801 cv
677.914 517.785 677.887 517.762 677.863 517.723 cv
677.836 517.691 677.816 517.641 677.805 517.578 cv
677.789 517.52 677.781 517.449 677.785 517.359 cv
677.781 517.281 677.789 517.207 677.805 517.145 cv
677.816 517.086 677.832 517.039 677.855 517 cv
677.871 516.965 677.898 516.934 677.93 516.91 cv
677.961 516.891 677.992 516.883 678.031 516.879 cv
679.883 516.879 li
679.883 510.133 li
678.168 511.152 li
678.078 511.203 678.008 511.23 677.961 511.238 cv
677.906 511.246 677.863 511.238 677.832 511.207 cv
677.797 511.18 677.777 511.129 677.766 511.059 cv
677.754 510.992 677.746 510.906 677.75 510.797 cv
677.746 510.723 677.75 510.656 677.762 510.598 cv
677.766 510.547 677.777 510.5 677.793 510.461 cv
677.805 510.426 677.824 510.395 677.848 510.367 cv
677.871 510.34 677.902 510.312 677.949 510.285 cv
679.992 508.973 li
680.008 508.961 680.027 508.949 680.059 508.941 cv
680.082 508.934 680.117 508.926 680.164 508.914 cv
680.203 508.906 680.254 508.898 680.309 508.895 cv
680.363 508.895 680.43 508.895 680.516 508.891 cv
680.621 508.895 680.715 508.898 680.789 508.906 cv
680.859 508.914 680.914 508.93 680.961 508.945 cv
681 508.965 681.027 508.984 681.043 509.008 cv
681.051 509.035 681.059 509.059 681.063 509.082 cv
681.063 516.879 li
682.668 516.879 li
682.703 516.883 682.738 516.891 682.77 516.91 cv
682.801 516.934 682.824 516.965 682.848 517 cv
682.863 517.039 682.879 517.086 682.895 517.145 cv
682.902 517.207 682.91 517.281 682.914 517.359 cv
cp
f
690.203 514.953 mo
690.203 515.344 690.141 515.723 690.023 516.082 cv
689.898 516.449 689.715 516.766 689.473 517.039 cv
689.223 517.316 688.91 517.539 688.535 517.703 cv
688.152 517.871 687.707 517.953 687.191 517.953 cv
686.82 517.953 686.492 517.91 686.211 517.816 cv
685.926 517.73 685.68 517.598 685.469 517.426 cv
685.258 517.258 685.082 517.051 684.945 516.805 cv
684.805 516.559 684.691 516.277 684.609 515.961 cv
684.523 515.648 684.465 515.305 684.43 514.926 cv
684.391 514.555 684.371 514.152 684.375 513.719 cv
684.371 513.34 684.391 512.957 684.434 512.566 cv
684.473 512.184 684.547 511.809 684.652 511.441 cv
684.758 511.082 684.902 510.742 685.082 510.426 cv
685.262 510.109 685.488 509.832 685.762 509.598 cv
686.035 509.363 686.359 509.176 686.738 509.035 cv
687.117 508.898 687.559 508.832 688.063 508.828 cv
688.23 508.832 688.402 508.84 688.574 508.859 cv
688.746 508.883 688.906 508.914 689.055 508.945 cv
689.203 508.984 689.324 509.02 689.426 509.059 cv
689.523 509.098 689.59 509.133 689.625 509.156 cv
689.652 509.184 689.676 509.211 689.695 509.238 cv
689.711 509.27 689.727 509.301 689.734 509.336 cv
689.742 509.371 689.746 509.41 689.754 509.453 cv
689.754 509.496 689.758 509.551 689.762 509.613 cv
689.758 509.699 689.758 509.77 689.758 509.824 cv
689.754 509.887 689.742 509.934 689.73 509.969 cv
689.711 510.008 689.691 510.035 689.668 510.051 cv
689.641 510.07 689.609 510.078 689.57 510.078 cv
689.52 510.078 689.449 510.062 689.363 510.031 cv
689.273 510 689.168 509.965 689.047 509.922 cv
688.922 509.887 688.773 509.852 688.598 509.816 cv
688.422 509.789 688.219 509.773 687.988 509.77 cv
687.559 509.773 687.191 509.859 686.887 510.031 cv
686.582 510.203 686.332 510.437 686.137 510.73 cv
685.941 511.023 685.797 511.363 685.707 511.746 cv
685.609 512.137 685.555 512.539 685.547 512.957 cv
685.664 512.891 685.801 512.824 685.949 512.754 cv
686.098 512.687 686.258 512.625 686.434 512.566 cv
686.609 512.516 686.797 512.469 686.992 512.434 cv
687.188 512.402 687.398 512.387 687.625 512.383 cv
688.102 512.387 688.504 512.453 688.836 512.578 cv
689.164 512.711 689.43 512.891 689.637 513.121 cv
689.836 513.352 689.98 513.621 690.07 513.934 cv
690.156 514.246 690.203 514.586 690.203 514.953 cv
cp
689.008 515.062 mo
689.008 514.801 688.98 514.559 688.93 514.34 cv
688.875 514.125 688.785 513.941 688.664 513.785 cv
688.539 513.637 688.375 513.52 688.172 513.437 cv
687.961 513.355 687.707 513.312 687.41 513.312 cv
687.238 513.312 687.07 513.328 686.902 513.359 cv
686.73 513.391 686.566 513.434 686.41 513.48 cv
686.25 513.535 686.102 513.598 685.961 513.668 cv
685.816 513.742 685.684 513.816 685.566 513.895 cv
685.563 514.488 685.602 514.984 685.68 515.379 cv
685.754 515.777 685.863 516.094 686.008 516.332 cv
686.152 516.574 686.332 516.746 686.547 516.848 cv
686.762 516.953 687.012 517.004 687.301 517 cv
687.59 517.004 687.844 516.949 688.059 516.836 cv
688.273 516.73 688.449 516.582 688.594 516.395 cv
688.734 516.211 688.84 516.004 688.906 515.773 cv
688.973 515.543 689.008 515.309 689.008 515.062 cv
cp
f
16.703 381.605 mo
16.801 381.609 16.883 381.613 16.949 381.621 cv
17.023 381.633 17.082 381.652 17.125 381.676 cv
17.176 381.703 17.211 381.734 17.227 381.766 cv
17.25 381.805 17.258 381.84 17.258 381.879 cv
17.258 386.719 li
17.258 386.84 17.219 386.953 17.137 387.059 cv
17.059 387.168 16.918 387.223 16.711 387.219 cv
7.719 387.219 li
7.516 387.223 7.375 387.168 7.293 387.059 cv
7.215 386.953 7.176 386.84 7.172 386.719 cv
7.172 381.934 li
7.176 381.895 7.184 381.855 7.203 381.82 cv
7.227 381.789 7.262 381.762 7.305 381.738 cv
7.355 381.719 7.414 381.703 7.48 381.687 cv
7.555 381.676 7.641 381.668 7.742 381.668 cv
7.836 381.668 7.918 381.676 7.988 381.687 cv
8.059 381.703 8.117 381.719 8.16 381.738 cv
8.207 381.762 8.238 381.789 8.258 381.82 cv
8.281 381.855 8.293 381.895 8.289 381.934 cv
8.289 385.879 li
11.453 385.879 li
11.453 382.496 li
11.457 382.457 11.469 382.418 11.488 382.383 cv
11.516 382.352 11.547 382.324 11.586 382.297 cv
11.629 382.277 11.688 382.262 11.758 382.246 cv
11.832 382.238 11.918 382.23 12.012 382.23 cv
12.109 382.23 12.188 382.238 12.254 382.246 cv
12.324 382.262 12.379 382.277 12.418 382.297 cv
12.461 382.324 12.492 382.352 12.508 382.383 cv
12.527 382.418 12.535 382.457 12.535 382.496 cv
12.535 385.879 li
16.145 385.879 li
16.145 381.879 li
16.145 381.84 16.156 381.805 16.176 381.766 cv
16.199 381.734 16.23 381.703 16.273 381.676 cv
16.32 381.652 16.379 381.633 16.445 381.621 cv
16.516 381.613 16.602 381.609 16.703 381.605 cv
cp
f
17.063 373.543 mo
17.109 373.543 17.145 373.555 17.168 373.574 cv
17.199 373.598 17.223 373.633 17.242 373.676 cv
17.262 373.727 17.273 373.789 17.289 373.871 cv
17.297 373.953 17.305 374.059 17.305 374.18 cv
17.305 374.312 17.297 374.418 17.289 374.5 cv
17.273 374.586 17.262 374.652 17.242 374.695 cv
17.223 374.746 17.199 374.777 17.168 374.797 cv
17.145 374.82 17.109 374.832 17.063 374.828 cv
12.957 374.828 li
12.559 374.832 12.238 374.863 11.992 374.922 cv
11.75 374.988 11.539 375.078 11.359 375.195 cv
11.184 375.312 11.047 375.469 10.953 375.656 cv
10.859 375.852 10.813 376.07 10.813 376.316 cv
10.813 376.641 10.93 376.965 11.156 377.285 cv
11.391 377.609 11.723 377.945 12.16 378.297 cv
17.063 378.297 li
17.109 378.301 17.145 378.312 17.168 378.328 cv
17.199 378.352 17.223 378.383 17.242 378.43 cv
17.262 378.477 17.273 378.543 17.289 378.621 cv
17.297 378.707 17.305 378.812 17.305 378.941 cv
17.305 379.07 17.297 379.176 17.289 379.254 cv
17.273 379.34 17.262 379.406 17.242 379.453 cv
17.223 379.508 17.199 379.539 17.168 379.555 cv
17.145 379.574 17.109 379.586 17.063 379.582 cv
10.051 379.582 li
10.012 379.586 9.977 379.578 9.945 379.559 cv
9.918 379.547 9.895 379.516 9.867 379.465 cv
9.848 379.422 9.832 379.359 9.82 379.285 cv
9.816 379.215 9.813 379.121 9.809 378.996 cv
9.813 378.887 9.816 378.789 9.82 378.711 cv
9.832 378.637 9.848 378.578 9.867 378.535 cv
9.895 378.496 9.918 378.469 9.945 378.449 cv
9.977 378.434 10.012 378.426 10.051 378.422 cv
10.977 378.422 li
10.535 378.031 10.215 377.637 10.008 377.242 cv
9.805 376.852 9.699 376.453 9.699 376.051 cv
9.699 375.582 9.781 375.191 9.938 374.871 cv
10.102 374.555 10.313 374.293 10.574 374.094 cv
10.84 373.898 11.148 373.758 11.504 373.672 cv
11.859 373.586 12.289 373.543 12.785 373.543 cv
cp
f
13.254 365.215 mo
13.457 365.219 13.598 365.27 13.684 365.367 cv
13.77 365.473 13.813 365.59 13.813 365.715 cv
13.813 370.332 li
14.203 370.336 14.555 370.297 14.867 370.215 cv
15.18 370.141 15.449 370.008 15.668 369.824 cv
15.895 369.645 16.066 369.41 16.184 369.113 cv
16.309 368.824 16.367 368.465 16.363 368.039 cv
16.367 367.707 16.34 367.41 16.281 367.148 cv
16.23 366.887 16.168 366.66 16.098 366.469 cv
16.031 366.281 15.973 366.125 15.914 366 cv
15.863 365.879 15.836 365.785 15.832 365.723 cv
15.836 365.687 15.844 365.656 15.859 365.625 cv
15.879 365.598 15.906 365.574 15.941 365.555 cv
15.98 365.543 16.031 365.531 16.094 365.52 cv
16.16 365.516 16.238 365.512 16.332 365.508 cv
16.402 365.512 16.461 365.516 16.508 365.516 cv
16.555 365.523 16.598 365.527 16.637 365.535 cv
16.676 365.543 16.711 365.559 16.742 365.574 cv
16.773 365.598 16.805 365.621 16.832 365.645 cv
16.863 365.676 16.91 365.758 16.973 365.898 cv
17.039 366.039 17.102 366.223 17.164 366.445 cv
17.227 366.672 17.281 366.93 17.332 367.223 cv
17.379 367.516 17.402 367.828 17.406 368.16 cv
17.402 368.738 17.324 369.246 17.164 369.676 cv
17.004 370.113 16.766 370.477 16.449 370.77 cv
16.133 371.07 15.738 371.293 15.258 371.441 cv
14.781 371.59 14.223 371.664 13.586 371.664 cv
12.988 371.664 12.449 371.59 11.965 371.434 cv
11.488 371.281 11.078 371.055 10.742 370.758 cv
10.406 370.465 10.148 370.109 9.969 369.695 cv
9.789 369.281 9.699 368.816 9.699 368.301 cv
9.699 367.75 9.789 367.281 9.965 366.895 cv
10.145 366.508 10.383 366.191 10.68 365.937 cv
10.98 365.691 11.332 365.508 11.73 365.391 cv
12.137 365.277 12.566 365.219 13.02 365.215 cv
cp
12.871 366.508 mo
12.195 366.492 11.664 366.645 11.281 366.961 cv
10.898 367.277 10.707 367.746 10.703 368.363 cv
10.707 368.687 10.766 368.969 10.883 369.207 cv
11.004 369.449 11.164 369.648 11.359 369.809 cv
11.559 369.973 11.789 370.098 12.051 370.184 cv
12.313 370.273 12.586 370.324 12.871 370.332 cv
cp
f
10.508 359.152 mo
10.625 359.156 10.723 359.156 10.797 359.16 cv
10.879 359.168 10.941 359.18 10.98 359.191 cv
11.027 359.211 11.059 359.23 11.082 359.25 cv
11.105 359.277 11.117 359.309 11.117 359.348 cv
11.117 359.391 11.105 359.441 11.082 359.5 cv
11.059 359.562 11.035 359.633 11.012 359.703 cv
10.988 359.781 10.969 359.863 10.945 359.957 cv
10.93 360.051 10.918 360.152 10.914 360.262 cv
10.918 360.395 10.945 360.523 10.992 360.645 cv
11.047 360.77 11.133 360.898 11.25 361.035 cv
11.375 361.176 11.531 361.32 11.727 361.469 cv
11.922 361.621 12.164 361.789 12.449 361.969 cv
17.063 361.969 li
17.109 361.973 17.145 361.984 17.168 362 cv
17.199 362.023 17.223 362.055 17.242 362.102 cv
17.262 362.148 17.273 362.215 17.289 362.293 cv
17.297 362.379 17.305 362.484 17.305 362.613 cv
17.305 362.742 17.297 362.848 17.289 362.926 cv
17.273 363.012 17.262 363.078 17.242 363.125 cv
17.223 363.18 17.199 363.211 17.168 363.227 cv
17.145 363.246 17.109 363.258 17.063 363.254 cv
10.051 363.254 li
10.012 363.258 9.977 363.25 9.945 363.23 cv
9.918 363.219 9.895 363.187 9.867 363.137 cv
9.848 363.094 9.832 363.031 9.82 362.957 cv
9.816 362.887 9.813 362.793 9.809 362.668 cv
9.813 362.559 9.816 362.461 9.82 362.383 cv
9.832 362.309 9.848 362.25 9.867 362.207 cv
9.895 362.168 9.918 362.141 9.945 362.121 cv
9.977 362.105 10.012 362.098 10.051 362.094 cv
11.07 362.094 li
10.789 361.906 10.563 361.723 10.387 361.551 cv
10.211 361.383 10.07 361.223 9.969 361.07 cv
9.867 360.922 9.797 360.773 9.758 360.625 cv
9.719 360.477 9.699 360.328 9.699 360.176 cv
9.699 360.109 9.703 360.031 9.711 359.945 cv
9.719 359.859 9.734 359.77 9.754 359.676 cv
9.777 359.582 9.801 359.5 9.824 359.422 cv
9.852 359.352 9.879 359.297 9.902 359.262 cv
9.934 359.234 9.957 359.215 9.977 359.199 cv
10.004 359.191 10.035 359.18 10.066 359.172 cv
10.105 359.164 10.156 359.16 10.227 359.156 cv
10.297 359.156 10.391 359.156 10.508 359.152 cv
cp
f
10.367 352.109 mo
10.551 352.113 10.684 352.137 10.762 352.184 cv
10.844 352.234 10.883 352.297 10.883 352.371 cv
10.883 353.379 li
11.07 353.199 11.277 353.07 11.504 352.996 cv
11.73 352.926 11.965 352.891 12.207 352.887 cv
12.613 352.891 12.973 352.957 13.285 353.082 cv
13.598 353.215 13.863 353.398 14.074 353.641 cv
14.293 353.883 14.457 354.172 14.57 354.5 cv
14.688 354.836 14.746 355.203 14.742 355.605 cv
14.746 355.895 14.707 356.168 14.629 356.422 cv
14.555 356.684 14.461 356.879 14.344 357.016 cv
14.441 357.109 14.547 357.187 14.664 357.246 cv
14.785 357.309 14.922 357.34 15.074 357.336 cv
15.258 357.34 15.41 357.254 15.527 357.082 cv
15.652 356.914 15.715 356.691 15.723 356.41 cv
15.801 354.578 li
15.813 354.23 15.859 353.914 15.945 353.621 cv
16.031 353.332 16.156 353.078 16.313 352.863 cv
16.473 352.652 16.664 352.484 16.895 352.363 cv
17.129 352.246 17.398 352.187 17.703 352.184 cv
18.023 352.187 18.328 352.254 18.621 352.387 cv
18.91 352.523 19.164 352.73 19.387 353.008 cv
19.605 353.289 19.781 353.645 19.91 354.074 cv
20.035 354.504 20.098 355.012 20.102 355.598 cv
20.098 356.168 20.051 356.652 19.957 357.047 cv
19.859 357.445 19.727 357.77 19.563 358.023 cv
19.395 358.277 19.199 358.461 18.969 358.574 cv
18.734 358.691 18.48 358.75 18.215 358.746 cv
18.043 358.75 17.879 358.73 17.719 358.684 cv
17.555 358.645 17.402 358.582 17.258 358.496 cv
17.113 358.414 16.977 358.305 16.84 358.176 cv
16.711 358.051 16.578 357.906 16.449 357.734 cv
16.32 357.992 16.156 358.18 15.957 358.301 cv
15.762 358.422 15.551 358.48 15.316 358.48 cv
15.004 358.48 14.719 358.418 14.469 358.289 cv
14.219 358.16 13.996 358 13.797 357.805 cv
13.605 357.969 13.391 358.094 13.148 358.187 cv
12.91 358.281 12.617 358.328 12.27 358.328 cv
11.875 358.328 11.516 358.262 11.195 358.125 cv
10.879 357.992 10.613 357.805 10.395 357.562 cv
10.18 357.324 10.012 357.039 9.891 356.703 cv
9.777 356.371 9.719 356.004 9.715 355.605 cv
9.719 355.395 9.73 355.195 9.75 355.012 cv
9.777 354.828 9.809 354.656 9.848 354.492 cv
9.848 352.371 li
9.852 352.285 9.895 352.219 9.977 352.176 cv
10.066 352.133 10.195 352.113 10.367 352.109 cv
cp
12.215 354.117 mo
11.742 354.121 11.371 354.254 11.098 354.512 cv
10.832 354.777 10.695 355.148 10.695 355.629 cv
10.695 355.883 10.738 356.102 10.82 356.281 cv
10.906 356.469 11.02 356.621 11.164 356.742 cv
11.313 356.863 11.48 356.953 11.668 357.012 cv
11.855 357.074 12.055 357.105 12.262 357.102 cv
12.727 357.105 13.09 356.973 13.355 356.711 cv
13.621 356.449 13.754 356.082 13.75 355.605 cv
13.754 355.355 13.715 355.137 13.629 354.945 cv
13.551 354.762 13.438 354.605 13.297 354.48 cv
13.156 354.359 12.992 354.27 12.801 354.207 cv
12.617 354.152 12.422 354.121 12.215 354.117 cv
cp
17.773 353.473 mo
17.469 353.477 17.238 353.602 17.074 353.844 cv
16.914 354.094 16.824 354.426 16.813 354.844 cv
16.75 356.66 li
16.883 356.828 17.008 356.965 17.121 357.066 cv
17.238 357.176 17.348 357.258 17.457 357.32 cv
17.563 357.383 17.668 357.426 17.773 357.449 cv
17.875 357.473 17.98 357.484 18.09 357.484 cv
18.426 357.484 18.68 357.316 18.859 356.973 cv
19.031 356.633 19.121 356.152 19.121 355.535 cv
19.121 355.148 19.082 354.824 19.008 354.559 cv
18.93 354.301 18.828 354.09 18.707 353.926 cv
18.578 353.77 18.438 353.652 18.277 353.578 cv
18.117 353.512 17.949 353.477 17.773 353.473 cv
cp
f
17.258 347.258 mo
19.836 348.191 li
19.918 348.227 19.98 348.305 20.027 348.43 cv
20.07 348.559 20.094 348.754 20.094 349.012 cv
20.094 349.152 20.086 349.262 20.074 349.34 cv
20.059 349.426 20.035 349.488 20.008 349.527 cv
19.973 349.574 19.934 349.598 19.883 349.602 cv
19.828 349.609 19.766 349.598 19.695 349.562 cv
17.258 348.598 li
17.238 348.645 17.207 348.691 17.156 348.73 cv
17.113 348.777 17.063 348.805 17.008 348.816 cv
10.305 351.316 li
10.199 351.359 10.113 351.383 10.051 351.379 cv
9.988 351.383 9.941 351.359 9.902 351.316 cv
9.871 351.277 9.844 351.211 9.828 351.113 cv
9.816 351.023 9.813 350.898 9.809 350.742 cv
9.813 350.586 9.816 350.465 9.82 350.375 cv
9.832 350.289 9.844 350.219 9.863 350.164 cv
9.887 350.113 9.918 350.074 9.953 350.051 cv
9.996 350.027 10.051 350.004 10.113 349.977 cv
15.738 347.973 li
15.738 347.949 li
10.082 346.02 li
9.984 345.988 9.922 345.953 9.891 345.906 cv
9.867 345.867 9.844 345.801 9.828 345.707 cv
9.816 345.621 9.813 345.492 9.809 345.324 cv
9.813 345.18 9.816 345.059 9.828 344.965 cv
9.844 344.871 9.871 344.805 9.902 344.758 cv
9.941 344.719 9.988 344.695 10.051 344.691 cv
10.113 344.695 10.191 344.711 10.281 344.738 cv
cp
f
15.832 332.621 mo
15.918 332.621 15.988 332.625 16.051 332.629 cv
16.113 332.637 16.168 332.645 16.215 332.656 cv
16.262 332.672 16.305 332.691 16.34 332.707 cv
16.379 332.73 16.422 332.766 16.473 332.816 cv
16.523 332.871 16.602 332.98 16.707 333.145 cv
16.816 333.312 16.922 333.52 17.02 333.766 cv
17.125 334.012 17.207 334.293 17.277 334.613 cv
17.344 334.934 17.379 335.285 17.383 335.66 cv
17.379 336.32 17.273 336.91 17.055 337.437 cv
16.84 337.965 16.52 338.414 16.09 338.785 cv
15.668 339.156 15.141 339.441 14.512 339.641 cv
13.887 339.84 13.164 339.941 12.348 339.937 cv
11.512 339.941 10.77 339.832 10.113 339.617 cv
9.461 339.402 8.906 339.102 8.449 338.711 cv
7.996 338.324 7.648 337.859 7.41 337.312 cv
7.172 336.773 7.051 336.168 7.051 335.504 cv
7.051 335.215 7.078 334.934 7.133 334.656 cv
7.188 334.383 7.258 334.129 7.336 333.895 cv
7.422 333.664 7.516 333.457 7.625 333.27 cv
7.734 333.09 7.824 332.961 7.895 332.891 cv
7.965 332.82 8.02 332.777 8.055 332.754 cv
8.094 332.738 8.137 332.719 8.184 332.703 cv
8.234 332.691 8.293 332.684 8.359 332.672 cv
8.43 332.668 8.512 332.664 8.602 332.66 cv
8.707 332.664 8.793 332.668 8.863 332.676 cv
8.938 332.687 9 332.703 9.047 332.723 cv
9.102 332.746 9.137 332.77 9.156 332.797 cv
9.184 332.828 9.195 332.863 9.191 332.902 cv
9.195 332.977 9.145 333.082 9.039 333.211 cv
8.941 333.344 8.832 333.512 8.707 333.715 cv
8.59 333.926 8.477 334.176 8.371 334.469 cv
8.273 334.766 8.223 335.117 8.219 335.527 cv
8.223 335.98 8.313 336.391 8.488 336.758 cv
8.668 337.125 8.93 337.441 9.277 337.699 cv
9.629 337.965 10.055 338.164 10.555 338.305 cv
11.055 338.449 11.629 338.523 12.27 338.52 cv
12.914 338.523 13.48 338.453 13.969 338.312 cv
14.461 338.176 14.871 337.977 15.199 337.719 cv
15.531 337.461 15.777 337.145 15.945 336.77 cv
16.117 336.395 16.203 335.969 16.199 335.488 cv
16.203 335.09 16.152 334.738 16.051 334.437 cv
15.953 334.137 15.844 333.883 15.719 333.668 cv
15.598 333.461 15.488 333.285 15.387 333.148 cv
15.293 333.012 15.242 332.906 15.238 332.824 cv
15.242 332.793 15.25 332.762 15.262 332.73 cv
15.281 332.707 15.313 332.684 15.352 332.668 cv
15.398 332.652 15.457 332.641 15.535 332.633 cv
15.613 332.625 15.715 332.621 15.832 332.621 cv
cp
f
13.477 324.473 mo
14.055 324.477 14.582 324.551 15.059 324.699 cv
15.543 324.852 15.957 325.078 16.301 325.375 cv
16.652 325.676 16.922 326.051 17.113 326.496 cv
17.309 326.949 17.402 327.469 17.406 328.059 cv
17.402 328.637 17.32 329.141 17.148 329.566 cv
16.98 329.996 16.73 330.352 16.402 330.637 cv
16.074 330.926 15.68 331.141 15.211 331.277 cv
14.746 331.418 14.215 331.484 13.617 331.484 cv
13.051 331.484 12.523 331.414 12.043 331.266 cv
11.563 331.121 11.148 330.895 10.797 330.594 cv
10.449 330.297 10.18 329.926 9.988 329.477 cv
9.797 329.031 9.699 328.508 9.699 327.91 cv
9.699 327.332 9.785 326.832 9.957 326.402 cv
10.129 325.977 10.379 325.617 10.707 325.332 cv
11.035 325.047 11.434 324.832 11.898 324.687 cv
12.367 324.547 12.895 324.477 13.477 324.473 cv
cp
13.563 325.805 mo
13.188 325.809 12.828 325.844 12.488 325.91 cv
12.152 325.984 11.859 326.102 11.602 326.262 cv
11.352 326.426 11.148 326.645 10.996 326.922 cv
10.852 327.203 10.777 327.551 10.773 327.961 cv
10.777 328.348 10.844 328.676 10.977 328.949 cv
11.113 329.227 11.305 329.453 11.551 329.629 cv
11.797 329.809 12.09 329.941 12.426 330.023 cv
12.766 330.113 13.133 330.156 13.531 330.152 cv
13.918 330.156 14.281 330.121 14.617 330.047 cv
14.957 329.98 15.25 329.863 15.5 329.695 cv
15.754 329.531 15.957 329.309 16.102 329.031 cv
16.254 328.754 16.328 328.406 16.324 327.992 cv
16.328 327.617 16.258 327.289 16.121 327.008 cv
15.988 326.73 15.801 326.504 15.551 326.324 cv
15.309 326.148 15.016 326.02 14.68 325.934 cv
14.344 325.852 13.973 325.809 13.563 325.805 cv
cp
f
17.063 316.547 mo
17.109 316.547 17.145 316.559 17.168 316.578 cv
17.199 316.602 17.223 316.637 17.242 316.68 cv
17.262 316.73 17.273 316.793 17.289 316.875 cv
17.297 316.957 17.305 317.062 17.305 317.184 cv
17.305 317.316 17.297 317.422 17.289 317.504 cv
17.273 317.59 17.262 317.656 17.242 317.699 cv
17.223 317.75 17.199 317.781 17.168 317.801 cv
17.145 317.824 17.109 317.836 17.063 317.832 cv
12.957 317.832 li
12.559 317.836 12.238 317.867 11.992 317.926 cv
11.75 317.992 11.539 318.082 11.359 318.199 cv
11.184 318.316 11.047 318.473 10.953 318.66 cv
10.859 318.855 10.813 319.074 10.813 319.32 cv
10.813 319.645 10.93 319.969 11.156 320.289 cv
11.391 320.613 11.723 320.949 12.16 321.301 cv
17.063 321.301 li
17.109 321.305 17.145 321.316 17.168 321.332 cv
17.199 321.355 17.223 321.387 17.242 321.434 cv
17.262 321.48 17.273 321.547 17.289 321.625 cv
17.297 321.711 17.305 321.816 17.305 321.945 cv
17.305 322.074 17.297 322.18 17.289 322.258 cv
17.273 322.344 17.262 322.41 17.242 322.457 cv
17.223 322.512 17.199 322.543 17.168 322.559 cv
17.145 322.578 17.109 322.59 17.063 322.586 cv
10.051 322.586 li
10.012 322.59 9.977 322.582 9.945 322.562 cv
9.918 322.551 9.895 322.52 9.867 322.469 cv
9.848 322.426 9.832 322.363 9.82 322.289 cv
9.816 322.219 9.813 322.125 9.809 322 cv
9.813 321.891 9.816 321.793 9.82 321.715 cv
9.832 321.641 9.848 321.582 9.867 321.539 cv
9.895 321.5 9.918 321.473 9.945 321.453 cv
9.977 321.437 10.012 321.43 10.051 321.426 cv
10.977 321.426 li
10.535 321.035 10.215 320.641 10.008 320.246 cv
9.805 319.855 9.699 319.457 9.699 319.055 cv
9.699 318.586 9.781 318.195 9.938 317.875 cv
10.102 317.559 10.313 317.297 10.574 317.098 cv
10.84 316.902 11.148 316.762 11.504 316.676 cv
11.859 316.59 12.289 316.547 12.785 316.547 cv
cp
f
15.152 309.805 mo
15.516 309.809 15.836 309.875 16.113 310.004 cv
16.395 310.137 16.629 310.324 16.82 310.566 cv
17.016 310.812 17.16 311.105 17.258 311.441 cv
17.355 311.781 17.402 312.152 17.406 312.555 cv
17.402 312.809 17.383 313.047 17.348 313.27 cv
17.305 313.496 17.258 313.695 17.199 313.875 cv
17.141 314.055 17.078 314.207 17.012 314.332 cv
16.949 314.457 16.891 314.551 16.836 314.605 cv
16.785 314.664 16.715 314.703 16.617 314.727 cv
16.527 314.754 16.398 314.766 16.238 314.766 cv
16.141 314.766 16.059 314.762 15.988 314.75 cv
15.922 314.742 15.867 314.73 15.824 314.711 cv
15.785 314.699 15.754 314.676 15.734 314.648 cv
15.719 314.621 15.711 314.59 15.707 314.551 cv
15.711 314.496 15.746 314.41 15.813 314.297 cv
15.887 314.187 15.965 314.051 16.043 313.883 cv
16.129 313.723 16.203 313.531 16.273 313.305 cv
16.344 313.086 16.379 312.828 16.379 312.531 cv
16.379 312.316 16.355 312.117 16.309 311.937 cv
16.262 311.762 16.195 311.609 16.102 311.48 cv
16.016 311.352 15.898 311.25 15.754 311.18 cv
15.617 311.109 15.449 311.074 15.254 311.074 cv
15.059 311.074 14.895 311.125 14.758 311.227 cv
14.625 311.328 14.504 311.465 14.398 311.629 cv
14.297 311.797 14.207 311.98 14.121 312.187 cv
14.043 312.398 13.957 312.613 13.867 312.832 cv
13.781 313.051 13.68 313.266 13.566 313.477 cv
13.457 313.687 13.324 313.879 13.16 314.043 cv
13.004 314.215 12.809 314.348 12.582 314.445 cv
12.359 314.551 12.094 314.602 11.781 314.598 cv
11.508 314.602 11.242 314.547 10.988 314.437 cv
10.738 314.332 10.52 314.172 10.328 313.957 cv
10.141 313.746 9.988 313.48 9.871 313.16 cv
9.758 312.84 9.699 312.469 9.699 312.039 cv
9.699 311.855 9.715 311.668 9.746 311.48 cv
9.777 311.297 9.816 311.129 9.863 310.973 cv
9.91 310.824 9.961 310.695 10.016 310.586 cv
10.07 310.484 10.121 310.402 10.16 310.344 cv
10.207 310.293 10.242 310.258 10.27 310.234 cv
10.301 310.219 10.336 310.203 10.371 310.195 cv
10.414 310.187 10.461 310.18 10.516 310.172 cv
10.574 310.164 10.645 310.16 10.727 310.16 cv
10.816 310.16 10.895 310.164 10.957 310.172 cv
11.027 310.18 11.078 310.195 11.117 310.211 cv
11.16 310.234 11.191 310.254 11.207 310.277 cv
11.227 310.305 11.234 310.336 11.234 310.363 cv
11.234 310.414 11.207 310.48 11.148 310.566 cv
11.094 310.656 11.031 310.77 10.965 310.91 cv
10.902 311.051 10.844 311.219 10.781 311.406 cv
10.727 311.598 10.695 311.812 10.695 312.055 cv
10.695 312.277 10.723 312.469 10.77 312.633 cv
10.824 312.801 10.895 312.937 10.98 313.043 cv
11.074 313.148 11.18 313.23 11.305 313.281 cv
11.43 313.34 11.566 313.367 11.711 313.363 cv
11.914 313.367 12.082 313.316 12.219 313.211 cv
12.359 313.109 12.48 312.973 12.582 312.805 cv
12.688 312.641 12.781 312.449 12.863 312.234 cv
12.949 312.023 13.035 311.809 13.121 311.586 cv
13.211 311.367 13.313 311.148 13.418 310.93 cv
13.527 310.715 13.656 310.523 13.813 310.355 cv
13.969 310.191 14.156 310.059 14.375 309.957 cv
14.594 309.859 14.855 309.809 15.152 309.805 cv
cp
f
17.063 301.961 mo
17.109 301.965 17.145 301.973 17.168 301.988 cv
17.199 302.008 17.223 302.043 17.242 302.086 cv
17.262 302.133 17.273 302.191 17.289 302.266 cv
17.297 302.344 17.305 302.437 17.305 302.543 cv
17.305 302.668 17.297 302.766 17.289 302.836 cv
17.273 302.914 17.262 302.973 17.242 303.016 cv
17.223 303.062 17.199 303.094 17.168 303.105 cv
17.145 303.125 17.109 303.133 17.063 303.129 cv
16.137 303.129 li
16.582 303.531 16.902 303.926 17.102 304.312 cv
17.305 304.707 17.402 305.102 17.406 305.496 cv
17.402 305.969 17.328 306.363 17.172 306.68 cv
17.02 307 16.809 307.258 16.539 307.453 cv
16.273 307.656 15.961 307.797 15.602 307.879 cv
15.246 307.969 14.813 308.012 14.305 308.008 cv
10.051 308.008 li
10.012 308.012 9.977 308.004 9.945 307.98 cv
9.918 307.965 9.895 307.93 9.867 307.875 cv
9.848 307.828 9.832 307.758 9.82 307.672 cv
9.816 307.59 9.813 307.488 9.809 307.359 cv
9.813 307.238 9.816 307.133 9.82 307.047 cv
9.832 306.965 9.848 306.898 9.867 306.852 cv
9.895 306.805 9.918 306.77 9.945 306.746 cv
9.977 306.727 10.012 306.719 10.051 306.715 cv
14.133 306.715 li
14.547 306.719 14.875 306.687 15.121 306.625 cv
15.367 306.566 15.578 306.477 15.75 306.352 cv
15.93 306.234 16.063 306.078 16.156 305.887 cv
16.254 305.703 16.305 305.484 16.301 305.234 cv
16.305 304.914 16.188 304.594 15.957 304.27 cv
15.73 303.953 15.395 303.613 14.949 303.254 cv
10.051 303.254 li
10.012 303.254 9.977 303.246 9.945 303.227 cv
9.918 303.211 9.895 303.176 9.867 303.121 cv
9.848 303.07 9.832 303.004 9.82 302.922 cv
9.816 302.844 9.813 302.738 9.809 302.605 cv
9.813 302.484 9.816 302.379 9.82 302.293 cv
9.832 302.211 9.848 302.148 9.867 302.102 cv
9.895 302.059 9.918 302.023 9.945 301.996 cv
9.977 301.977 10.012 301.965 10.051 301.961 cv
cp
f
17.063 289.184 mo
17.109 289.187 17.145 289.195 17.168 289.215 cv
17.199 289.238 17.223 289.273 17.242 289.316 cv
17.262 289.367 17.273 289.434 17.289 289.512 cv
17.297 289.598 17.305 289.699 17.305 289.824 cv
17.305 289.957 17.297 290.066 17.289 290.145 cv
17.273 290.23 17.262 290.297 17.242 290.344 cv
17.223 290.398 17.199 290.434 17.168 290.449 cv
17.145 290.473 17.109 290.48 17.063 290.48 cv
12.801 290.48 li
12.508 290.48 12.238 290.508 11.992 290.559 cv
11.75 290.613 11.539 290.695 11.359 290.809 cv
11.184 290.922 11.047 291.066 10.953 291.242 cv
10.859 291.422 10.813 291.633 10.813 291.867 cv
10.813 292.164 10.93 292.461 11.156 292.758 cv
11.391 293.062 11.723 293.391 12.16 293.746 cv
17.063 293.746 li
17.109 293.75 17.145 293.762 17.168 293.777 cv
17.199 293.801 17.223 293.832 17.242 293.879 cv
17.262 293.93 17.273 293.996 17.289 294.078 cv
17.297 294.164 17.305 294.27 17.305 294.391 cv
17.305 294.512 17.297 294.613 17.289 294.699 cv
17.273 294.785 17.262 294.855 17.242 294.902 cv
17.223 294.957 17.199 294.988 17.168 295.004 cv
17.145 295.023 17.109 295.035 17.063 295.031 cv
12.801 295.031 li
12.508 295.035 12.238 295.062 11.992 295.117 cv
11.75 295.176 11.539 295.262 11.359 295.375 cv
11.184 295.488 11.047 295.633 10.953 295.805 cv
10.859 295.984 10.813 296.191 10.813 296.426 cv
10.813 296.727 10.93 297.023 11.156 297.324 cv
11.391 297.625 11.723 297.953 12.16 298.305 cv
17.063 298.305 li
17.109 298.309 17.145 298.32 17.168 298.336 cv
17.199 298.359 17.223 298.391 17.242 298.437 cv
17.262 298.484 17.273 298.551 17.289 298.629 cv
17.297 298.715 17.305 298.82 17.305 298.949 cv
17.305 299.078 17.297 299.184 17.289 299.262 cv
17.273 299.348 17.262 299.414 17.242 299.461 cv
17.223 299.516 17.199 299.547 17.168 299.562 cv
17.145 299.582 17.109 299.594 17.063 299.59 cv
10.051 299.59 li
10.012 299.594 9.977 299.586 9.945 299.566 cv
9.918 299.555 9.895 299.523 9.867 299.473 cv
9.848 299.43 9.832 299.367 9.82 299.293 cv
9.816 299.223 9.813 299.129 9.809 299.004 cv
9.813 298.895 9.816 298.797 9.82 298.719 cv
9.832 298.645 9.848 298.586 9.867 298.543 cv
9.895 298.504 9.918 298.477 9.945 298.457 cv
9.977 298.441 10.012 298.434 10.051 298.43 cv
10.977 298.43 li
10.535 298.039 10.215 297.656 10.008 297.281 cv
9.805 296.914 9.699 296.535 9.699 296.152 cv
9.699 295.863 9.734 295.605 9.801 295.371 cv
9.871 295.145 9.965 294.937 10.086 294.758 cv
10.207 294.582 10.352 294.434 10.52 294.305 cv
10.691 294.184 10.883 294.078 11.086 293.992 cv
10.836 293.762 10.621 293.539 10.441 293.328 cv
10.27 293.117 10.125 292.914 10.012 292.719 cv
9.906 292.523 9.828 292.336 9.773 292.152 cv
9.727 291.969 9.699 291.781 9.699 291.594 cv
9.699 291.141 9.781 290.762 9.938 290.457 cv
10.102 290.152 10.313 289.906 10.574 289.711 cv
10.84 289.523 11.148 289.387 11.504 289.305 cv
11.859 289.227 12.234 289.187 12.629 289.184 cv
cp
f
13.445 280.383 mo
14.063 280.387 14.613 280.453 15.102 280.582 cv
15.59 280.719 16.004 280.914 16.344 281.168 cv
16.684 281.426 16.945 281.742 17.129 282.121 cv
17.313 282.5 17.402 282.934 17.406 283.422 cv
17.402 283.633 17.383 283.828 17.344 284 cv
17.301 284.18 17.238 284.352 17.148 284.516 cv
17.063 284.687 16.949 284.855 16.813 285.02 cv
16.68 285.191 16.523 285.367 16.34 285.551 cv
19.844 285.551 li
19.883 285.555 19.922 285.566 19.953 285.582 cv
19.984 285.605 20.008 285.637 20.031 285.684 cv
20.047 285.73 20.063 285.797 20.078 285.875 cv
20.086 285.961 20.094 286.066 20.094 286.195 cv
20.094 286.324 20.086 286.43 20.078 286.508 cv
20.063 286.594 20.047 286.66 20.031 286.707 cv
20.008 286.762 19.984 286.793 19.953 286.809 cv
19.922 286.828 19.883 286.84 19.844 286.836 cv
10.051 286.836 li
10.004 286.84 9.969 286.832 9.938 286.812 cv
9.914 286.801 9.887 286.77 9.863 286.719 cv
9.844 286.676 9.832 286.613 9.82 286.539 cv
9.816 286.469 9.813 286.383 9.809 286.273 cv
9.813 286.168 9.816 286.078 9.82 286.004 cv
9.832 285.937 9.844 285.879 9.863 285.828 cv
9.887 285.785 9.914 285.75 9.938 285.73 cv
9.969 285.715 10.004 285.707 10.051 285.703 cv
10.992 285.703 li
10.777 285.496 10.586 285.293 10.426 285.09 cv
10.266 284.895 10.133 284.695 10.023 284.492 cv
9.918 284.297 9.836 284.09 9.781 283.879 cv
9.727 283.668 9.699 283.445 9.699 283.211 cv
9.699 282.703 9.801 282.27 9.996 281.91 cv
10.195 281.551 10.465 281.262 10.805 281.035 cv
11.152 280.812 11.551 280.645 12.004 280.539 cv
12.461 280.437 12.941 280.387 13.445 280.383 cv
cp
13.594 281.715 mo
13.242 281.719 12.895 281.746 12.555 281.797 cv
12.223 281.855 11.926 281.949 11.664 282.082 cv
11.406 282.219 11.199 282.398 11.039 282.617 cv
10.887 282.844 10.809 283.121 10.805 283.457 cv
10.809 283.625 10.832 283.789 10.879 283.949 cv
10.93 284.113 11.008 284.281 11.113 284.445 cv
11.223 284.617 11.363 284.789 11.535 284.969 cv
11.711 285.152 11.926 285.348 12.176 285.551 cv
14.965 285.551 li
15.402 285.195 15.73 284.859 15.957 284.539 cv
16.188 284.223 16.305 283.887 16.301 283.535 cv
16.305 283.211 16.227 282.934 16.066 282.699 cv
15.914 282.473 15.703 282.285 15.441 282.137 cv
15.184 281.996 14.895 281.887 14.57 281.816 cv
14.25 281.75 13.926 281.719 13.594 281.715 cv
cp
f
16.547 274.891 mo
16.703 274.891 16.82 274.902 16.906 274.922 cv
16.996 274.945 17.063 274.977 17.102 275.016 cv
17.145 275.059 17.184 275.121 17.219 275.203 cv
17.254 275.289 17.281 275.383 17.309 275.488 cv
17.328 275.598 17.348 275.711 17.367 275.828 cv
17.379 275.945 17.387 276.066 17.391 276.184 cv
17.387 276.551 17.34 276.863 17.246 277.121 cv
17.152 277.383 17.008 277.594 16.809 277.758 cv
16.617 277.926 16.371 278.047 16.07 278.121 cv
15.773 278.199 15.422 278.238 15.012 278.234 cv
10.914 278.234 li
10.914 279.215 li
10.918 279.293 10.875 279.355 10.789 279.402 cv
10.707 279.449 10.574 279.473 10.383 279.473 cv
10.289 279.473 10.207 279.469 10.137 279.453 cv
10.074 279.445 10.016 279.426 9.969 279.402 cv
9.926 279.383 9.895 279.355 9.875 279.32 cv
9.859 279.289 9.852 279.254 9.848 279.207 cv
9.848 278.234 li
8.18 278.234 li
8.148 278.238 8.113 278.227 8.078 278.207 cv
8.051 278.191 8.023 278.16 7.996 278.105 cv
7.977 278.059 7.961 277.992 7.945 277.906 cv
7.938 277.828 7.93 277.723 7.93 277.594 cv
7.93 277.465 7.938 277.359 7.945 277.277 cv
7.961 277.195 7.977 277.129 7.996 277.082 cv
8.023 277.035 8.051 277.004 8.078 276.98 cv
8.113 276.965 8.148 276.953 8.18 276.949 cv
9.848 276.949 li
9.848 275.148 li
9.852 275.109 9.859 275.074 9.875 275.039 cv
9.895 275.012 9.926 274.984 9.969 274.957 cv
10.016 274.937 10.074 274.922 10.137 274.906 cv
10.207 274.898 10.289 274.891 10.383 274.891 cv
10.574 274.891 10.707 274.914 10.789 274.961 cv
10.875 275.008 10.918 275.07 10.914 275.148 cv
10.914 276.949 li
14.828 276.949 li
15.313 276.953 15.676 276.883 15.922 276.734 cv
16.172 276.594 16.297 276.336 16.293 275.965 cv
16.297 275.852 16.285 275.746 16.258 275.648 cv
16.238 275.559 16.215 275.477 16.184 275.398 cv
16.16 275.328 16.133 275.266 16.109 275.211 cv
16.086 275.164 16.074 275.117 16.074 275.07 cv
16.074 275.047 16.082 275.02 16.094 274.996 cv
16.109 274.973 16.133 274.957 16.168 274.941 cv
16.207 274.934 16.258 274.922 16.316 274.906 cv
16.383 274.898 16.461 274.891 16.547 274.891 cv
cp
f
17.063 271.875 mo
17.109 271.879 17.145 271.891 17.168 271.906 cv
17.199 271.93 17.223 271.961 17.242 272.008 cv
17.262 272.055 17.273 272.121 17.289 272.199 cv
17.297 272.285 17.305 272.391 17.305 272.52 cv
17.305 272.648 17.297 272.754 17.289 272.832 cv
17.273 272.918 17.262 272.984 17.242 273.031 cv
17.223 273.086 17.199 273.117 17.168 273.133 cv
17.145 273.152 17.109 273.164 17.063 273.16 cv
10.051 273.16 li
10.016 273.164 9.984 273.152 9.949 273.133 cv
9.922 273.117 9.895 273.086 9.871 273.031 cv
9.852 272.984 9.836 272.918 9.824 272.832 cv
9.816 272.754 9.813 272.648 9.809 272.52 cv
9.813 272.391 9.816 272.285 9.824 272.199 cv
9.836 272.121 9.852 272.055 9.871 272.008 cv
9.895 271.961 9.922 271.93 9.949 271.906 cv
9.984 271.891 10.016 271.879 10.051 271.875 cv
cp
7.68 271.727 mo
7.984 271.727 8.191 271.785 8.297 271.898 cv
8.41 272.012 8.465 272.223 8.461 272.527 cv
8.465 272.832 8.41 273.039 8.301 273.148 cv
8.195 273.266 7.992 273.32 7.695 273.316 cv
7.395 273.32 7.191 273.262 7.082 273.145 cv
6.977 273.031 6.922 272.82 6.918 272.512 cv
6.922 272.211 6.977 272.008 7.078 271.895 cv
7.188 271.785 7.387 271.727 7.68 271.727 cv
cp
f
13.477 262.934 mo
14.055 262.937 14.582 263.012 15.059 263.16 cv
15.543 263.312 15.957 263.539 16.301 263.836 cv
16.652 264.137 16.922 264.512 17.113 264.957 cv
17.309 265.41 17.402 265.93 17.406 266.52 cv
17.402 267.098 17.32 267.602 17.148 268.027 cv
16.98 268.457 16.73 268.812 16.402 269.098 cv
16.074 269.387 15.68 269.602 15.211 269.738 cv
14.746 269.879 14.215 269.945 13.617 269.945 cv
13.051 269.945 12.523 269.875 12.043 269.727 cv
11.563 269.582 11.148 269.355 10.797 269.055 cv
10.449 268.758 10.18 268.387 9.988 267.937 cv
9.797 267.492 9.699 266.969 9.699 266.371 cv
9.699 265.793 9.785 265.293 9.957 264.863 cv
10.129 264.437 10.379 264.078 10.707 263.793 cv
11.035 263.508 11.434 263.293 11.898 263.148 cv
12.367 263.008 12.895 262.937 13.477 262.934 cv
cp
13.563 264.266 mo
13.188 264.27 12.828 264.305 12.488 264.371 cv
12.152 264.445 11.859 264.562 11.602 264.723 cv
11.352 264.887 11.148 265.105 10.996 265.383 cv
10.852 265.664 10.777 266.012 10.773 266.422 cv
10.777 266.809 10.844 267.137 10.977 267.41 cv
11.113 267.687 11.305 267.914 11.551 268.09 cv
11.797 268.27 12.09 268.402 12.426 268.484 cv
12.766 268.574 13.133 268.617 13.531 268.613 cv
13.918 268.617 14.281 268.582 14.617 268.508 cv
14.957 268.441 15.25 268.324 15.5 268.156 cv
15.754 267.992 15.957 267.77 16.102 267.492 cv
16.254 267.215 16.328 266.867 16.324 266.453 cv
16.328 266.078 16.258 265.75 16.121 265.469 cv
15.988 265.191 15.801 264.965 15.551 264.785 cv
15.309 264.609 15.016 264.48 14.68 264.395 cv
14.344 264.312 13.973 264.27 13.563 264.266 cv
cp
f
17.063 255.008 mo
17.109 255.008 17.145 255.02 17.168 255.039 cv
17.199 255.062 17.223 255.098 17.242 255.141 cv
17.262 255.191 17.273 255.254 17.289 255.336 cv
17.297 255.418 17.305 255.523 17.305 255.645 cv
17.305 255.777 17.297 255.883 17.289 255.965 cv
17.273 256.051 17.262 256.117 17.242 256.16 cv
17.223 256.211 17.199 256.242 17.168 256.262 cv
17.145 256.285 17.109 256.297 17.063 256.293 cv
12.957 256.293 li
12.559 256.297 12.238 256.328 11.992 256.387 cv
11.75 256.453 11.539 256.543 11.359 256.66 cv
11.184 256.777 11.047 256.934 10.953 257.121 cv
10.859 257.316 10.813 257.535 10.813 257.781 cv
10.813 258.105 10.93 258.43 11.156 258.75 cv
11.391 259.074 11.723 259.41 12.16 259.762 cv
17.063 259.762 li
17.109 259.766 17.145 259.777 17.168 259.793 cv
17.199 259.816 17.223 259.848 17.242 259.895 cv
17.262 259.941 17.273 260.008 17.289 260.086 cv
17.297 260.172 17.305 260.277 17.305 260.406 cv
17.305 260.535 17.297 260.641 17.289 260.719 cv
17.273 260.805 17.262 260.871 17.242 260.918 cv
17.223 260.973 17.199 261.004 17.168 261.02 cv
17.145 261.039 17.109 261.051 17.063 261.047 cv
10.051 261.047 li
10.012 261.051 9.977 261.043 9.945 261.023 cv
9.918 261.012 9.895 260.98 9.867 260.93 cv
9.848 260.887 9.832 260.824 9.82 260.75 cv
9.816 260.68 9.813 260.586 9.809 260.461 cv
9.813 260.352 9.816 260.254 9.82 260.176 cv
9.832 260.102 9.848 260.043 9.867 260 cv
9.895 259.961 9.918 259.934 9.945 259.914 cv
9.977 259.898 10.012 259.891 10.051 259.887 cv
10.977 259.887 li
10.535 259.496 10.215 259.102 10.008 258.707 cv
9.805 258.316 9.699 257.918 9.699 257.516 cv
9.699 257.047 9.781 256.656 9.938 256.336 cv
10.102 256.02 10.313 255.758 10.574 255.559 cv
10.84 255.363 11.148 255.223 11.504 255.137 cv
11.859 255.051 12.289 255.008 12.785 255.008 cv
cp
f
6.52 246.168 mo
7.566 246.664 8.637 247.031 9.734 247.273 cv
10.836 247.516 11.941 247.637 13.051 247.637 cv
14.168 247.637 15.277 247.516 16.371 247.266 cv
17.469 247.023 18.539 246.66 19.594 246.184 cv
19.652 246.16 19.707 246.148 19.754 246.141 cv
19.797 246.141 19.832 246.156 19.863 246.191 cv
19.891 246.23 19.91 246.285 19.926 246.359 cv
19.934 246.437 19.941 246.543 19.945 246.668 cv
19.941 246.766 19.938 246.844 19.938 246.91 cv
19.93 246.98 19.922 247.039 19.906 247.086 cv
19.891 247.137 19.871 247.18 19.852 247.207 cv
19.828 247.242 19.805 247.266 19.781 247.277 cv
19.25 247.559 18.715 247.805 18.172 248.016 cv
17.629 248.234 17.078 248.414 16.52 248.555 cv
15.957 248.703 15.391 248.812 14.816 248.883 cv
14.242 248.961 13.66 248.996 13.074 248.992 cv
12.488 248.996 11.91 248.957 11.336 248.871 cv
10.766 248.793 10.199 248.676 9.633 248.527 cv
9.07 248.379 8.516 248.199 7.969 247.988 cv
7.426 247.777 6.883 247.539 6.348 247.27 cv
6.328 247.266 6.313 247.25 6.293 247.227 cv
6.281 247.203 6.266 247.172 6.246 247.129 cv
6.234 247.09 6.223 247.031 6.211 246.957 cv
6.207 246.887 6.203 246.793 6.199 246.676 cv
6.203 246.559 6.211 246.465 6.223 246.387 cv
6.242 246.316 6.262 246.258 6.285 246.215 cv
6.313 246.176 6.348 246.152 6.387 246.145 cv
6.434 246.141 6.477 246.148 6.52 246.168 cv
cp
f
17.039 237.273 mo
17.086 237.277 17.121 237.285 17.152 237.301 cv
17.188 237.32 17.215 237.355 17.234 237.406 cv
17.254 237.461 17.27 237.531 17.285 237.617 cv
17.297 237.707 17.305 237.82 17.305 237.961 cv
17.305 238.141 17.297 238.289 17.281 238.402 cv
17.266 238.52 17.238 238.605 17.195 238.66 cv
17.156 238.719 17.109 238.766 17.055 238.801 cv
12.012 242.512 li
17.055 242.512 li
17.094 242.516 17.129 242.523 17.16 242.543 cv
17.195 242.566 17.223 242.605 17.238 242.652 cv
17.258 242.707 17.27 242.773 17.285 242.859 cv
17.297 242.945 17.305 243.055 17.305 243.18 cv
17.305 243.309 17.297 243.414 17.285 243.5 cv
17.27 243.59 17.258 243.66 17.238 243.711 cv
17.223 243.766 17.195 243.801 17.16 243.82 cv
17.129 243.844 17.094 243.855 17.055 243.852 cv
7.375 243.852 li
7.336 243.855 7.301 243.844 7.266 243.82 cv
7.238 243.801 7.211 243.766 7.191 243.711 cv
7.176 243.66 7.16 243.59 7.145 243.5 cv
7.133 243.414 7.129 243.309 7.125 243.18 cv
7.129 243.055 7.133 242.945 7.145 242.859 cv
7.16 242.773 7.176 242.707 7.191 242.652 cv
7.211 242.605 7.238 242.566 7.266 242.543 cv
7.301 242.523 7.336 242.516 7.375 242.512 cv
11.855 242.512 li
7.375 238.941 li
7.332 238.914 7.293 238.879 7.258 238.832 cv
7.23 238.793 7.207 238.742 7.184 238.68 cv
7.168 238.625 7.152 238.551 7.141 238.461 cv
7.133 238.379 7.129 238.27 7.125 238.133 cv
7.129 238 7.133 237.891 7.145 237.805 cv
7.16 237.723 7.18 237.656 7.195 237.605 cv
7.219 237.559 7.242 237.523 7.273 237.504 cv
7.305 237.488 7.34 237.48 7.375 237.477 cv
7.445 237.48 7.512 237.496 7.578 237.527 cv
7.648 237.562 7.742 237.629 7.859 237.719 cv
11.855 241.062 li
16.641 237.461 li
16.781 237.375 16.871 237.32 16.918 237.301 cv
16.969 237.285 17.012 237.277 17.039 237.273 cv
cp
f
17.063 234.465 mo
17.109 234.469 17.145 234.48 17.168 234.496 cv
17.199 234.52 17.223 234.551 17.242 234.598 cv
17.262 234.645 17.273 234.711 17.289 234.789 cv
17.297 234.875 17.305 234.98 17.305 235.109 cv
17.305 235.238 17.297 235.344 17.289 235.422 cv
17.273 235.508 17.262 235.574 17.242 235.621 cv
17.223 235.676 17.199 235.707 17.168 235.723 cv
17.145 235.742 17.109 235.754 17.063 235.75 cv
10.051 235.75 li
10.016 235.754 9.984 235.742 9.949 235.723 cv
9.922 235.707 9.895 235.676 9.871 235.621 cv
9.852 235.574 9.836 235.508 9.824 235.422 cv
9.816 235.344 9.813 235.238 9.809 235.109 cv
9.813 234.98 9.816 234.875 9.824 234.789 cv
9.836 234.711 9.852 234.645 9.871 234.598 cv
9.895 234.551 9.922 234.52 9.949 234.496 cv
9.984 234.48 10.016 234.469 10.051 234.465 cv
cp
7.68 234.316 mo
7.984 234.316 8.191 234.375 8.297 234.488 cv
8.41 234.602 8.465 234.812 8.461 235.117 cv
8.465 235.422 8.41 235.629 8.301 235.738 cv
8.195 235.855 7.992 235.91 7.695 235.906 cv
7.395 235.91 7.191 235.852 7.082 235.734 cv
6.977 235.621 6.922 235.41 6.918 235.102 cv
6.922 234.801 6.977 234.598 7.078 234.484 cv
7.188 234.375 7.387 234.316 7.68 234.316 cv
cp
f
17.063 230.762 mo
17.109 230.766 17.145 230.777 17.168 230.793 cv
17.199 230.816 17.223 230.848 17.242 230.895 cv
17.262 230.941 17.273 231.008 17.289 231.086 cv
17.297 231.172 17.305 231.277 17.305 231.406 cv
17.305 231.535 17.297 231.641 17.289 231.719 cv
17.273 231.805 17.262 231.871 17.242 231.918 cv
17.223 231.973 17.199 232.004 17.168 232.02 cv
17.145 232.039 17.109 232.051 17.063 232.047 cv
6.652 232.047 li
6.613 232.051 6.578 232.039 6.543 232.02 cv
6.516 232.004 6.488 231.973 6.465 231.918 cv
6.445 231.871 6.43 231.805 6.418 231.719 cv
6.41 231.641 6.406 231.535 6.402 231.406 cv
6.406 231.277 6.41 231.172 6.418 231.086 cv
6.43 231.008 6.445 230.941 6.465 230.895 cv
6.488 230.848 6.516 230.816 6.543 230.793 cv
6.578 230.777 6.613 230.766 6.652 230.762 cv
cp
f
13.477 221.82 mo
14.055 221.824 14.582 221.898 15.059 222.047 cv
15.543 222.199 15.957 222.426 16.301 222.723 cv
16.652 223.023 16.922 223.398 17.113 223.844 cv
17.309 224.297 17.402 224.816 17.406 225.406 cv
17.402 225.984 17.32 226.488 17.148 226.914 cv
16.98 227.344 16.73 227.699 16.402 227.984 cv
16.074 228.273 15.68 228.488 15.211 228.625 cv
14.746 228.766 14.215 228.832 13.617 228.832 cv
13.051 228.832 12.523 228.762 12.043 228.613 cv
11.563 228.469 11.148 228.242 10.797 227.941 cv
10.449 227.645 10.18 227.273 9.988 226.824 cv
9.797 226.379 9.699 225.855 9.699 225.258 cv
9.699 224.68 9.785 224.18 9.957 223.75 cv
10.129 223.324 10.379 222.965 10.707 222.68 cv
11.035 222.395 11.434 222.18 11.898 222.035 cv
12.367 221.895 12.895 221.824 13.477 221.82 cv
cp
13.563 223.152 mo
13.188 223.156 12.828 223.191 12.488 223.258 cv
12.152 223.332 11.859 223.449 11.602 223.609 cv
11.352 223.773 11.148 223.992 10.996 224.27 cv
10.852 224.551 10.777 224.898 10.773 225.309 cv
10.777 225.695 10.844 226.023 10.977 226.297 cv
11.113 226.574 11.305 226.801 11.551 226.977 cv
11.797 227.156 12.09 227.289 12.426 227.371 cv
12.766 227.461 13.133 227.504 13.531 227.5 cv
13.918 227.504 14.281 227.469 14.617 227.395 cv
14.957 227.328 15.25 227.211 15.5 227.043 cv
15.754 226.879 15.957 226.656 16.102 226.379 cv
16.254 226.102 16.328 225.754 16.324 225.34 cv
16.328 224.965 16.258 224.637 16.121 224.355 cv
15.988 224.078 15.801 223.852 15.551 223.672 cv
15.309 223.496 15.016 223.367 14.68 223.281 cv
14.344 223.199 13.973 223.156 13.563 223.152 cv
cp
f
16.961 206.52 mo
17.035 206.543 17.094 206.574 17.137 206.613 cv
17.184 206.656 17.219 206.715 17.238 206.785 cv
17.262 206.863 17.273 206.953 17.289 207.055 cv
17.297 207.164 17.305 207.293 17.305 207.445 cv
17.305 207.609 17.297 207.746 17.289 207.855 cv
17.273 207.969 17.262 208.062 17.238 208.133 cv
17.219 208.211 17.184 208.266 17.137 208.297 cv
17.094 208.336 17.035 208.363 16.961 208.383 cv
9.348 210.496 li
9.348 210.508 li
16.961 212.457 li
17.035 212.477 17.094 212.5 17.137 212.535 cv
17.184 212.574 17.219 212.629 17.238 212.691 cv
17.262 212.762 17.273 212.848 17.289 212.953 cv
17.297 213.062 17.305 213.199 17.305 213.363 cv
17.305 213.535 17.297 213.676 17.289 213.789 cv
17.273 213.906 17.262 214 17.238 214.07 cv
17.219 214.145 17.184 214.203 17.137 214.238 cv
17.094 214.281 17.035 214.309 16.961 214.32 cv
7.648 216.984 li
7.531 217.02 7.438 217.035 7.367 217.035 cv
7.301 217.039 7.25 217.02 7.211 216.973 cv
7.176 216.93 7.152 216.859 7.141 216.762 cv
7.133 216.664 7.129 216.531 7.125 216.363 cv
7.129 216.203 7.133 216.074 7.137 215.98 cv
7.148 215.887 7.16 215.816 7.18 215.766 cv
7.203 215.719 7.234 215.684 7.266 215.664 cv
7.305 215.648 7.352 215.637 7.406 215.621 cv
15.855 213.355 li
15.855 213.348 li
7.422 211.195 li
7.367 211.184 7.32 211.164 7.277 211.137 cv
7.242 211.117 7.211 211.078 7.188 211.023 cv
7.168 210.973 7.152 210.898 7.141 210.801 cv
7.133 210.707 7.129 210.582 7.125 210.426 cv
7.129 210.281 7.133 210.168 7.141 210.078 cv
7.152 209.996 7.168 209.926 7.188 209.871 cv
7.211 209.82 7.242 209.781 7.277 209.758 cv
7.32 209.734 7.367 209.715 7.422 209.699 cv
15.855 207.383 li
15.855 207.371 li
7.414 205.148 li
7.363 205.137 7.32 205.121 7.277 205.102 cv
7.242 205.09 7.211 205.059 7.188 205.004 cv
7.168 204.957 7.152 204.887 7.141 204.793 cv
7.133 204.707 7.129 204.586 7.125 204.43 cv
7.129 204.281 7.133 204.156 7.145 204.062 cv
7.16 203.973 7.188 203.906 7.219 203.863 cv
7.258 203.824 7.309 203.805 7.375 203.805 cv
7.445 203.809 7.539 203.824 7.656 203.848 cv
cp
f
17.07 197.488 mo
17.133 197.492 17.18 197.512 17.211 197.551 cv
17.242 197.594 17.266 197.652 17.281 197.723 cv
17.297 197.801 17.305 197.906 17.305 198.043 cv
17.305 198.18 17.297 198.289 17.281 198.367 cv
17.266 198.453 17.242 198.512 17.211 198.543 cv
17.18 198.582 17.133 198.598 17.07 198.594 cv
16.371 198.594 li
16.699 198.902 16.953 199.246 17.133 199.621 cv
17.316 200 17.402 200.398 17.406 200.816 cv
17.402 201.191 17.355 201.523 17.262 201.82 cv
17.164 202.117 17.027 202.371 16.844 202.582 cv
16.664 202.793 16.441 202.957 16.176 203.074 cv
15.914 203.191 15.613 203.25 15.27 203.246 cv
14.879 203.25 14.535 203.172 14.242 203.008 cv
13.953 202.852 13.711 202.617 13.52 202.312 cv
13.328 202.012 13.184 201.645 13.086 201.207 cv
12.992 200.773 12.945 200.281 12.941 199.734 cv
12.941 198.766 li
12.395 198.766 li
12.125 198.77 11.887 198.797 11.68 198.852 cv
11.473 198.91 11.301 199.004 11.16 199.129 cv
11.023 199.262 10.918 199.426 10.848 199.625 cv
10.777 199.832 10.742 200.082 10.742 200.371 cv
10.742 200.691 10.781 200.977 10.855 201.227 cv
10.934 201.484 11.016 201.703 11.105 201.891 cv
11.199 202.078 11.285 202.238 11.355 202.363 cv
11.434 202.496 11.469 202.59 11.469 202.648 cv
11.469 202.691 11.461 202.727 11.438 202.758 cv
11.422 202.789 11.391 202.816 11.344 202.84 cv
11.305 202.863 11.25 202.883 11.184 202.891 cv
11.121 202.906 11.051 202.91 10.969 202.906 cv
10.844 202.91 10.738 202.902 10.66 202.879 cv
10.586 202.863 10.516 202.816 10.445 202.746 cv
10.379 202.676 10.301 202.555 10.211 202.383 cv
10.121 202.211 10.039 202.016 9.961 201.793 cv
9.891 201.57 9.828 201.324 9.773 201.059 cv
9.727 200.793 9.699 200.527 9.699 200.254 cv
9.699 199.754 9.758 199.324 9.871 198.973 cv
9.988 198.621 10.156 198.336 10.375 198.113 cv
10.598 197.898 10.871 197.738 11.195 197.637 cv
11.527 197.539 11.91 197.492 12.34 197.488 cv
cp
13.867 198.766 mo
13.867 199.867 li
13.871 200.223 13.902 200.527 13.957 200.785 cv
14.02 201.047 14.105 201.262 14.223 201.434 cv
14.34 201.605 14.48 201.73 14.645 201.809 cv
14.809 201.891 14.996 201.934 15.207 201.93 cv
15.574 201.934 15.867 201.816 16.078 201.586 cv
16.297 201.355 16.402 201.031 16.402 200.613 cv
16.402 200.277 16.316 199.965 16.145 199.676 cv
15.973 199.387 15.711 199.086 15.355 198.766 cv
cp
f
16.547 191.562 mo
16.703 191.562 16.82 191.574 16.906 191.594 cv
16.996 191.617 17.063 191.648 17.102 191.687 cv
17.145 191.73 17.184 191.793 17.219 191.875 cv
17.254 191.961 17.281 192.055 17.309 192.16 cv
17.328 192.27 17.348 192.383 17.367 192.5 cv
17.379 192.617 17.387 192.738 17.391 192.855 cv
17.387 193.223 17.34 193.535 17.246 193.793 cv
17.152 194.055 17.008 194.266 16.809 194.43 cv
16.617 194.598 16.371 194.719 16.07 194.793 cv
15.773 194.871 15.422 194.91 15.012 194.906 cv
10.914 194.906 li
10.914 195.887 li
10.918 195.965 10.875 196.027 10.789 196.074 cv
10.707 196.121 10.574 196.145 10.383 196.145 cv
10.289 196.145 10.207 196.141 10.137 196.125 cv
10.074 196.117 10.016 196.098 9.969 196.074 cv
9.926 196.055 9.895 196.027 9.875 195.992 cv
9.859 195.961 9.852 195.926 9.848 195.879 cv
9.848 194.906 li
8.18 194.906 li
8.148 194.91 8.113 194.898 8.078 194.879 cv
8.051 194.863 8.023 194.832 7.996 194.777 cv
7.977 194.73 7.961 194.664 7.945 194.578 cv
7.938 194.5 7.93 194.395 7.93 194.266 cv
7.93 194.137 7.938 194.031 7.945 193.949 cv
7.961 193.867 7.977 193.801 7.996 193.754 cv
8.023 193.707 8.051 193.676 8.078 193.652 cv
8.113 193.637 8.148 193.625 8.18 193.621 cv
9.848 193.621 li
9.848 191.82 li
9.852 191.781 9.859 191.746 9.875 191.711 cv
9.895 191.684 9.926 191.656 9.969 191.629 cv
10.016 191.609 10.074 191.594 10.137 191.578 cv
10.207 191.57 10.289 191.562 10.383 191.562 cv
10.574 191.562 10.707 191.586 10.789 191.633 cv
10.875 191.68 10.918 191.742 10.914 191.82 cv
10.914 193.621 li
14.828 193.621 li
15.313 193.625 15.676 193.555 15.922 193.406 cv
16.172 193.266 16.297 193.008 16.293 192.637 cv
16.297 192.523 16.285 192.418 16.258 192.32 cv
16.238 192.23 16.215 192.148 16.184 192.07 cv
16.16 192 16.133 191.937 16.109 191.883 cv
16.086 191.836 16.074 191.789 16.074 191.742 cv
16.074 191.719 16.082 191.691 16.094 191.668 cv
16.109 191.645 16.133 191.629 16.168 191.613 cv
16.207 191.605 16.258 191.594 16.316 191.578 cv
16.383 191.57 16.461 191.562 16.547 191.562 cv
cp
f
16.547 186.406 mo
16.703 186.406 16.82 186.418 16.906 186.437 cv
16.996 186.461 17.063 186.492 17.102 186.531 cv
17.145 186.574 17.184 186.637 17.219 186.719 cv
17.254 186.805 17.281 186.898 17.309 187.004 cv
17.328 187.113 17.348 187.227 17.367 187.344 cv
17.379 187.461 17.387 187.582 17.391 187.699 cv
17.387 188.066 17.34 188.379 17.246 188.637 cv
17.152 188.898 17.008 189.109 16.809 189.273 cv
16.617 189.441 16.371 189.562 16.07 189.637 cv
15.773 189.715 15.422 189.754 15.012 189.75 cv
10.914 189.75 li
10.914 190.73 li
10.918 190.809 10.875 190.871 10.789 190.918 cv
10.707 190.965 10.574 190.988 10.383 190.988 cv
10.289 190.988 10.207 190.984 10.137 190.969 cv
10.074 190.961 10.016 190.941 9.969 190.918 cv
9.926 190.898 9.895 190.871 9.875 190.836 cv
9.859 190.805 9.852 190.77 9.848 190.723 cv
9.848 189.75 li
8.18 189.75 li
8.148 189.754 8.113 189.742 8.078 189.723 cv
8.051 189.707 8.023 189.676 7.996 189.621 cv
7.977 189.574 7.961 189.508 7.945 189.422 cv
7.938 189.344 7.93 189.238 7.93 189.109 cv
7.93 188.98 7.938 188.875 7.945 188.793 cv
7.961 188.711 7.977 188.645 7.996 188.598 cv
8.023 188.551 8.051 188.52 8.078 188.496 cv
8.113 188.48 8.148 188.469 8.18 188.465 cv
9.848 188.465 li
9.848 186.664 li
9.852 186.625 9.859 186.59 9.875 186.555 cv
9.895 186.527 9.926 186.5 9.969 186.473 cv
10.016 186.453 10.074 186.437 10.137 186.422 cv
10.207 186.414 10.289 186.406 10.383 186.406 cv
10.574 186.406 10.707 186.43 10.789 186.477 cv
10.875 186.523 10.918 186.586 10.914 186.664 cv
10.914 188.465 li
14.828 188.465 li
15.313 188.469 15.676 188.398 15.922 188.25 cv
16.172 188.109 16.297 187.852 16.293 187.48 cv
16.297 187.367 16.285 187.262 16.258 187.164 cv
16.238 187.074 16.215 186.992 16.184 186.914 cv
16.16 186.844 16.133 186.781 16.109 186.727 cv
16.086 186.68 16.074 186.633 16.074 186.586 cv
16.074 186.562 16.082 186.535 16.094 186.512 cv
16.109 186.488 16.133 186.473 16.168 186.457 cv
16.207 186.449 16.258 186.437 16.316 186.422 cv
16.383 186.414 16.461 186.406 16.547 186.406 cv
cp
f
15.152 180.273 mo
15.516 180.277 15.836 180.344 16.113 180.473 cv
16.395 180.605 16.629 180.793 16.82 181.035 cv
17.016 181.281 17.16 181.574 17.258 181.91 cv
17.355 182.25 17.402 182.621 17.406 183.023 cv
17.402 183.277 17.383 183.516 17.348 183.738 cv
17.305 183.965 17.258 184.164 17.199 184.344 cv
17.141 184.523 17.078 184.676 17.012 184.801 cv
16.949 184.926 16.891 185.02 16.836 185.074 cv
16.785 185.133 16.715 185.172 16.617 185.195 cv
16.527 185.223 16.398 185.234 16.238 185.234 cv
16.141 185.234 16.059 185.23 15.988 185.219 cv
15.922 185.211 15.867 185.199 15.824 185.18 cv
15.785 185.168 15.754 185.145 15.734 185.117 cv
15.719 185.09 15.711 185.059 15.707 185.02 cv
15.711 184.965 15.746 184.879 15.813 184.766 cv
15.887 184.656 15.965 184.52 16.043 184.352 cv
16.129 184.191 16.203 184 16.273 183.773 cv
16.344 183.555 16.379 183.297 16.379 183 cv
16.379 182.785 16.355 182.586 16.309 182.406 cv
16.262 182.23 16.195 182.078 16.102 181.949 cv
16.016 181.82 15.898 181.719 15.754 181.648 cv
15.617 181.578 15.449 181.543 15.254 181.543 cv
15.059 181.543 14.895 181.594 14.758 181.695 cv
14.625 181.797 14.504 181.934 14.398 182.098 cv
14.297 182.266 14.207 182.449 14.121 182.656 cv
14.043 182.867 13.957 183.082 13.867 183.301 cv
13.781 183.52 13.68 183.734 13.566 183.945 cv
13.457 184.156 13.324 184.348 13.16 184.512 cv
13.004 184.684 12.809 184.816 12.582 184.914 cv
12.359 185.02 12.094 185.07 11.781 185.066 cv
11.508 185.07 11.242 185.016 10.988 184.906 cv
10.738 184.801 10.52 184.641 10.328 184.426 cv
10.141 184.215 9.988 183.949 9.871 183.629 cv
9.758 183.309 9.699 182.937 9.699 182.508 cv
9.699 182.324 9.715 182.137 9.746 181.949 cv
9.777 181.766 9.816 181.598 9.863 181.441 cv
9.91 181.293 9.961 181.164 10.016 181.055 cv
10.07 180.953 10.121 180.871 10.16 180.812 cv
10.207 180.762 10.242 180.727 10.27 180.703 cv
10.301 180.687 10.336 180.672 10.371 180.664 cv
10.414 180.656 10.461 180.648 10.516 180.641 cv
10.574 180.633 10.645 180.629 10.727 180.629 cv
10.816 180.629 10.895 180.633 10.957 180.641 cv
11.027 180.648 11.078 180.664 11.117 180.68 cv
11.16 180.703 11.191 180.723 11.207 180.746 cv
11.227 180.773 11.234 180.805 11.234 180.832 cv
11.234 180.883 11.207 180.949 11.148 181.035 cv
11.094 181.125 11.031 181.238 10.965 181.379 cv
10.902 181.52 10.844 181.687 10.781 181.875 cv
10.727 182.066 10.695 182.281 10.695 182.523 cv
10.695 182.746 10.723 182.937 10.77 183.102 cv
10.824 183.27 10.895 183.406 10.98 183.512 cv
11.074 183.617 11.18 183.699 11.305 183.75 cv
11.43 183.809 11.566 183.836 11.711 183.832 cv
11.914 183.836 12.082 183.785 12.219 183.68 cv
12.359 183.578 12.48 183.441 12.582 183.273 cv
12.688 183.109 12.781 182.918 12.863 182.703 cv
12.949 182.492 13.035 182.277 13.121 182.055 cv
13.211 181.836 13.313 181.617 13.418 181.398 cv
13.527 181.184 13.656 180.992 13.813 180.824 cv
13.969 180.66 14.156 180.527 14.375 180.426 cv
14.594 180.328 14.855 180.277 15.152 180.273 cv
cp
f
13.074 175.832 mo
13.66 175.832 14.242 175.871 14.816 175.941 cv
15.391 176.02 15.957 176.129 16.52 176.27 cv
17.078 176.418 17.629 176.594 18.172 176.805 cv
18.715 177.016 19.25 177.262 19.781 177.539 cv
19.805 177.559 19.828 177.582 19.852 177.609 cv
19.871 177.645 19.891 177.684 19.906 177.73 cv
19.922 177.781 19.93 177.84 19.938 177.906 cv
19.938 177.977 19.941 178.059 19.945 178.148 cv
19.941 178.285 19.934 178.391 19.926 178.465 cv
19.91 178.543 19.891 178.598 19.863 178.629 cv
19.832 178.664 19.797 178.68 19.754 178.676 cv
19.707 178.676 19.652 178.66 19.594 178.633 cv
18.543 178.156 17.473 177.797 16.375 177.551 cv
15.277 177.309 14.168 177.187 13.051 177.184 cv
11.941 177.187 10.836 177.309 9.734 177.551 cv
8.637 177.797 7.566 178.164 6.52 178.648 cv
6.477 178.672 6.434 178.68 6.387 178.672 cv
6.348 178.672 6.313 178.648 6.285 178.602 cv
6.262 178.562 6.242 178.504 6.223 178.43 cv
6.211 178.359 6.203 178.262 6.199 178.141 cv
6.203 178.031 6.207 177.941 6.211 177.867 cv
6.223 177.797 6.234 177.738 6.246 177.691 cv
6.266 177.648 6.281 177.617 6.293 177.594 cv
6.313 177.578 6.328 177.562 6.348 177.547 cv
7.414 177.016 8.512 176.594 9.633 176.289 cv
10.762 175.984 11.906 175.832 13.074 175.832 cv
cp
f
316.691 538.582 mo
316.688 538.687 316.672 538.777 316.637 538.848 cv
316.602 538.926 316.555 538.984 316.5 539.027 cv
316.441 539.078 316.379 539.113 316.313 539.129 cv
316.238 539.152 316.168 539.16 316.105 539.16 cv
315.66 539.16 li
315.52 539.16 315.398 539.148 315.293 539.117 cv
315.188 539.094 315.09 539.039 314.996 538.961 cv
314.902 538.887 314.809 538.785 314.715 538.652 cv
314.621 538.523 314.52 538.359 314.414 538.156 cv
311.34 532.418 li
311.176 532.125 311.012 531.816 310.852 531.488 cv
310.684 531.168 310.531 530.852 310.395 530.543 cv
310.379 530.543 li
310.387 530.918 310.395 531.301 310.402 531.687 cv
310.406 532.078 310.406 532.465 310.41 532.848 cv
310.41 538.934 li
310.406 538.973 310.395 539.008 310.375 539.039 cv
310.352 539.074 310.316 539.102 310.266 539.117 cv
310.211 539.137 310.141 539.148 310.059 539.164 cv
309.973 539.176 309.867 539.184 309.738 539.184 cv
309.602 539.184 309.492 539.176 309.41 539.164 cv
309.324 539.148 309.258 539.137 309.211 539.117 cv
309.16 539.102 309.125 539.074 309.102 539.039 cv
309.078 539.008 309.066 538.973 309.07 538.934 cv
309.07 529.629 li
309.066 529.422 309.125 529.273 309.246 529.184 cv
309.363 529.098 309.492 529.055 309.633 529.051 cv
310.293 529.051 li
310.445 529.055 310.578 529.066 310.684 529.09 cv
310.785 529.117 310.879 529.16 310.965 529.219 cv
311.047 529.281 311.125 529.363 311.207 529.469 cv
311.281 529.578 311.363 529.715 311.449 529.871 cv
313.816 534.297 li
313.961 534.57 314.102 534.836 314.238 535.09 cv
314.371 535.348 314.5 535.602 314.629 535.848 cv
314.75 536.102 314.875 536.348 315 536.586 cv
315.121 536.828 315.242 537.07 315.367 537.312 cv
315.375 537.312 li
315.363 536.906 315.355 536.477 315.355 536.031 cv
315.348 535.586 315.348 535.16 315.352 534.75 cv
315.352 529.277 li
315.348 529.242 315.359 529.207 315.383 529.176 cv
315.406 529.145 315.441 529.117 315.496 529.094 cv
315.543 529.07 315.613 529.055 315.699 529.043 cv
315.785 529.035 315.895 529.031 316.035 529.027 cv
316.152 529.031 316.258 529.035 316.348 529.043 cv
316.434 529.055 316.5 529.07 316.551 529.094 cv
316.598 529.117 316.633 529.145 316.656 529.176 cv
316.676 529.207 316.688 529.242 316.691 529.277 cv
cp
f
325.238 538.941 mo
325.234 538.988 325.227 539.023 325.211 539.047 cv
325.191 539.078 325.156 539.102 325.113 539.121 cv
325.066 539.141 325.008 539.152 324.934 539.168 cv
324.855 539.176 324.762 539.184 324.656 539.184 cv
324.531 539.184 324.434 539.176 324.363 539.168 cv
324.285 539.152 324.227 539.141 324.184 539.121 cv
324.137 539.102 324.105 539.078 324.094 539.047 cv
324.074 539.023 324.066 538.988 324.07 538.941 cv
324.07 538.016 li
323.668 538.461 323.273 538.781 322.887 538.98 cv
322.492 539.184 322.098 539.281 321.703 539.285 cv
321.23 539.281 320.836 539.207 320.52 539.051 cv
320.199 538.898 319.941 538.687 319.746 538.418 cv
319.543 538.152 319.402 537.84 319.32 537.48 cv
319.23 537.125 319.188 536.691 319.191 536.184 cv
319.191 531.93 li
319.188 531.891 319.195 531.855 319.219 531.824 cv
319.234 531.797 319.27 531.773 319.324 531.746 cv
319.371 531.727 319.441 531.711 319.527 531.699 cv
319.609 531.695 319.711 531.691 319.84 531.687 cv
319.961 531.691 320.066 531.695 320.152 531.699 cv
320.234 531.711 320.301 531.727 320.348 531.746 cv
320.395 531.773 320.43 531.797 320.453 531.824 cv
320.473 531.855 320.48 531.891 320.484 531.93 cv
320.484 536.012 li
320.48 536.426 320.512 536.754 320.574 537 cv
320.633 537.246 320.723 537.457 320.848 537.629 cv
320.965 537.809 321.121 537.941 321.313 538.035 cv
321.496 538.133 321.715 538.184 321.965 538.18 cv
322.285 538.184 322.605 538.066 322.93 537.836 cv
323.246 537.609 323.586 537.273 323.945 536.828 cv
323.945 531.93 li
323.945 531.891 323.953 531.855 323.973 531.824 cv
323.988 531.797 324.023 531.773 324.078 531.746 cv
324.129 531.727 324.195 531.711 324.277 531.699 cv
324.355 531.695 324.461 531.691 324.594 531.687 cv
324.715 531.691 324.82 531.695 324.906 531.699 cv
324.988 531.711 325.051 531.727 325.098 531.746 cv
325.141 531.773 325.176 531.797 325.203 531.824 cv
325.223 531.855 325.234 531.891 325.238 531.93 cv
cp
f
338.016 538.941 mo
338.012 538.988 338.004 539.023 337.984 539.047 cv
337.961 539.078 337.926 539.102 337.883 539.121 cv
337.832 539.141 337.766 539.152 337.688 539.168 cv
337.602 539.176 337.5 539.184 337.375 539.184 cv
337.242 539.184 337.133 539.176 337.055 539.168 cv
336.969 539.152 336.902 539.141 336.855 539.121 cv
336.801 539.102 336.766 539.078 336.75 539.047 cv
336.727 539.023 336.719 538.988 336.719 538.941 cv
336.719 534.68 li
336.719 534.387 336.691 534.117 336.641 533.871 cv
336.586 533.629 336.504 533.418 336.391 533.238 cv
336.277 533.062 336.133 532.926 335.957 532.832 cv
335.777 532.738 335.566 532.691 335.332 532.691 cv
335.035 532.691 334.738 532.809 334.441 533.035 cv
334.137 533.27 333.809 533.602 333.453 534.039 cv
333.453 538.941 li
333.449 538.988 333.438 539.023 333.422 539.047 cv
333.398 539.078 333.367 539.102 333.32 539.121 cv
333.27 539.141 333.203 539.152 333.121 539.168 cv
333.035 539.176 332.93 539.184 332.809 539.184 cv
332.688 539.184 332.586 539.176 332.5 539.168 cv
332.414 539.152 332.344 539.141 332.297 539.121 cv
332.242 539.102 332.211 539.078 332.195 539.047 cv
332.176 539.023 332.164 538.988 332.168 538.941 cv
332.168 534.68 li
332.164 534.387 332.137 534.117 332.082 533.871 cv
332.023 533.629 331.938 533.418 331.824 533.238 cv
331.711 533.062 331.566 532.926 331.395 532.832 cv
331.215 532.738 331.008 532.691 330.773 532.691 cv
330.473 532.691 330.176 532.809 329.875 533.035 cv
329.574 533.27 329.246 533.602 328.895 534.039 cv
328.895 538.941 li
328.891 538.988 328.879 539.023 328.863 539.047 cv
328.84 539.078 328.809 539.102 328.762 539.121 cv
328.715 539.141 328.648 539.152 328.57 539.168 cv
328.484 539.176 328.379 539.184 328.25 539.184 cv
328.121 539.184 328.016 539.176 327.938 539.168 cv
327.852 539.152 327.785 539.141 327.738 539.121 cv
327.684 539.102 327.652 539.078 327.637 539.047 cv
327.617 539.023 327.605 538.988 327.609 538.941 cv
327.609 531.93 li
327.605 531.891 327.613 531.855 327.633 531.824 cv
327.645 531.797 327.676 531.773 327.727 531.746 cv
327.77 531.727 327.832 531.711 327.906 531.699 cv
327.977 531.695 328.07 531.691 328.195 531.687 cv
328.305 531.691 328.402 531.695 328.48 531.699 cv
328.555 531.711 328.613 531.727 328.656 531.746 cv
328.695 531.773 328.723 531.797 328.742 531.824 cv
328.758 531.855 328.766 531.891 328.77 531.93 cv
328.77 532.855 li
329.16 532.414 329.543 532.094 329.918 531.887 cv
330.285 531.684 330.664 531.578 331.047 531.578 cv
331.336 531.578 331.594 531.613 331.828 531.68 cv
332.055 531.75 332.262 531.844 332.441 531.965 cv
332.617 532.086 332.766 532.23 332.895 532.398 cv
333.016 532.57 333.121 532.762 333.207 532.965 cv
333.438 532.715 333.66 532.5 333.871 532.32 cv
334.082 532.148 334.285 532.004 334.48 531.891 cv
334.676 531.785 334.863 531.707 335.047 531.652 cv
335.23 531.605 335.418 531.578 335.605 531.578 cv
336.059 531.578 336.438 531.66 336.742 531.816 cv
337.047 531.98 337.293 532.191 337.488 532.453 cv
337.676 532.719 337.813 533.027 337.895 533.383 cv
337.973 533.738 338.012 534.113 338.016 534.508 cv
cp
f
346.816 535.34 mo
346.813 535.949 346.746 536.5 346.617 536.984 cv
346.48 537.473 346.285 537.887 346.031 538.227 cv
345.773 538.57 345.457 538.832 345.086 539.012 cv
344.711 539.195 344.285 539.281 343.801 539.285 cv
343.574 539.281 343.367 539.262 343.18 539.219 cv
342.992 539.172 342.805 539.102 342.625 539.004 cv
342.438 538.906 342.258 538.781 342.078 538.629 cv
341.895 538.48 341.703 538.301 341.504 538.086 cv
341.504 538.941 li
341.504 538.988 341.492 539.023 341.473 539.051 cv
341.449 539.086 341.414 539.109 341.371 539.125 cv
341.32 539.141 341.262 539.152 341.195 539.168 cv
341.121 539.176 341.031 539.184 340.926 539.184 cv
340.816 539.184 340.73 539.176 340.66 539.168 cv
340.586 539.152 340.523 539.141 340.48 539.125 cv
340.43 539.109 340.398 539.086 340.387 539.051 cv
340.367 539.023 340.359 538.988 340.363 538.941 cv
340.363 528.531 li
340.359 528.492 340.371 528.457 340.391 528.422 cv
340.406 528.395 340.438 528.367 340.492 528.344 cv
340.539 528.324 340.605 528.309 340.691 528.297 cv
340.77 528.289 340.875 528.285 341.004 528.281 cv
341.133 528.285 341.238 528.289 341.324 528.297 cv
341.402 528.309 341.469 528.324 341.516 528.344 cv
341.563 528.367 341.594 528.395 341.617 528.422 cv
341.633 528.457 341.645 528.492 341.648 528.531 cv
341.648 532.73 li
341.855 532.52 342.059 532.34 342.254 532.195 cv
342.449 532.051 342.637 531.934 342.824 531.84 cv
343.008 531.754 343.195 531.687 343.387 531.641 cv
343.57 531.602 343.77 531.578 343.98 531.578 cv
344.484 531.578 344.918 531.68 345.285 531.883 cv
345.645 532.086 345.938 532.359 346.164 532.695 cv
346.387 533.039 346.555 533.437 346.66 533.895 cv
346.762 534.352 346.813 534.832 346.816 535.34 cv
cp
345.484 535.488 mo
345.48 535.133 345.453 534.785 345.402 534.445 cv
345.344 534.109 345.25 533.812 345.113 533.551 cv
344.977 533.293 344.797 533.082 344.574 532.922 cv
344.348 532.766 344.066 532.687 343.734 532.684 cv
343.566 532.687 343.402 532.711 343.242 532.754 cv
343.078 532.805 342.914 532.883 342.746 532.988 cv
342.578 533.102 342.402 533.242 342.227 533.41 cv
342.043 533.586 341.852 533.801 341.648 534.055 cv
341.648 536.852 li
342.004 537.285 342.344 537.617 342.668 537.84 cv
342.992 538.07 343.328 538.184 343.68 538.18 cv
344 538.184 344.277 538.105 344.512 537.945 cv
344.738 537.793 344.926 537.586 345.07 537.324 cv
345.215 537.07 345.32 536.781 345.387 536.461 cv
345.449 536.145 345.48 535.82 345.484 535.488 cv
cp
f
354.727 535.133 mo
354.723 535.336 354.672 535.477 354.574 535.562 cv
354.469 535.648 354.352 535.691 354.227 535.691 cv
349.609 535.691 li
349.605 536.082 349.645 536.434 349.727 536.746 cv
349.801 537.059 349.934 537.328 350.117 537.547 cv
350.297 537.773 350.531 537.945 350.828 538.062 cv
351.117 538.187 351.477 538.246 351.902 538.242 cv
352.234 538.246 352.531 538.219 352.793 538.16 cv
353.055 538.109 353.281 538.047 353.473 537.977 cv
353.66 537.91 353.816 537.852 353.941 537.793 cv
354.063 537.742 354.156 537.715 354.219 537.711 cv
354.254 537.715 354.285 537.723 354.316 537.738 cv
354.344 537.758 354.367 537.785 354.387 537.82 cv
354.398 537.859 354.41 537.91 354.422 537.973 cv
354.426 538.039 354.43 538.117 354.434 538.211 cv
354.43 538.281 354.426 538.34 354.426 538.387 cv
354.418 538.434 354.414 538.477 354.406 538.516 cv
354.398 538.555 354.383 538.59 354.367 538.621 cv
354.344 538.652 354.32 538.684 354.297 538.711 cv
354.266 538.742 354.184 538.789 354.043 538.852 cv
353.902 538.918 353.719 538.98 353.496 539.043 cv
353.27 539.105 353.012 539.16 352.719 539.211 cv
352.426 539.258 352.113 539.281 351.781 539.285 cv
351.203 539.281 350.695 539.203 350.266 539.043 cv
349.828 538.883 349.465 538.645 349.172 538.328 cv
348.871 538.012 348.648 537.617 348.5 537.137 cv
348.352 536.66 348.277 536.102 348.277 535.465 cv
348.277 534.867 348.352 534.328 348.508 533.844 cv
348.66 533.367 348.887 532.957 349.184 532.621 cv
349.477 532.285 349.832 532.027 350.246 531.848 cv
350.66 531.668 351.125 531.578 351.641 531.578 cv
352.191 531.578 352.66 531.668 353.047 531.844 cv
353.434 532.023 353.75 532.262 354.004 532.559 cv
354.25 532.859 354.434 533.211 354.551 533.609 cv
354.664 534.016 354.723 534.445 354.727 534.898 cv
cp
353.434 534.75 mo
353.449 534.074 353.297 533.543 352.98 533.16 cv
352.664 532.777 352.195 532.586 351.578 532.582 cv
351.254 532.586 350.973 532.645 350.734 532.762 cv
350.492 532.883 350.293 533.043 350.133 533.238 cv
349.969 533.437 349.844 533.668 349.758 533.93 cv
349.668 534.191 349.617 534.465 349.609 534.75 cv
cp
f
360.793 532.387 mo
360.789 532.504 360.789 532.602 360.785 532.676 cv
360.777 532.758 360.766 532.82 360.754 532.859 cv
360.734 532.906 360.715 532.937 360.695 532.961 cv
360.668 532.984 360.637 532.996 360.598 532.996 cv
360.555 532.996 360.504 532.984 360.445 532.961 cv
360.383 532.937 360.313 532.914 360.242 532.891 cv
360.164 532.867 360.082 532.848 359.988 532.824 cv
359.895 532.809 359.793 532.797 359.684 532.793 cv
359.551 532.797 359.422 532.824 359.301 532.871 cv
359.176 532.926 359.047 533.012 358.91 533.129 cv
358.77 533.254 358.625 533.41 358.477 533.605 cv
358.324 533.801 358.156 534.043 357.977 534.328 cv
357.977 538.941 li
357.973 538.988 357.961 539.023 357.945 539.047 cv
357.922 539.078 357.891 539.102 357.844 539.121 cv
357.797 539.141 357.73 539.152 357.652 539.168 cv
357.566 539.176 357.461 539.184 357.332 539.184 cv
357.203 539.184 357.098 539.176 357.02 539.168 cv
356.934 539.152 356.867 539.141 356.82 539.121 cv
356.766 539.102 356.734 539.078 356.719 539.047 cv
356.699 539.023 356.688 538.988 356.691 538.941 cv
356.691 531.93 li
356.688 531.891 356.695 531.855 356.715 531.824 cv
356.727 531.797 356.758 531.773 356.809 531.746 cv
356.852 531.727 356.914 531.711 356.988 531.699 cv
357.059 531.695 357.152 531.691 357.277 531.687 cv
357.387 531.691 357.484 531.695 357.563 531.699 cv
357.637 531.711 357.695 531.727 357.738 531.746 cv
357.777 531.773 357.805 531.797 357.824 531.824 cv
357.84 531.855 357.848 531.891 357.852 531.93 cv
357.852 532.949 li
358.039 532.668 358.223 532.441 358.395 532.266 cv
358.563 532.09 358.723 531.949 358.875 531.848 cv
359.023 531.746 359.172 531.676 359.32 531.637 cv
359.469 531.598 359.617 531.578 359.77 531.578 cv
359.836 531.578 359.914 531.582 360 531.59 cv
360.086 531.598 360.176 531.613 360.27 531.633 cv
360.363 531.656 360.445 531.68 360.523 531.703 cv
360.594 531.73 360.648 531.758 360.684 531.781 cv
360.711 531.812 360.73 531.836 360.746 531.855 cv
360.754 531.883 360.766 531.914 360.773 531.945 cv
360.781 531.984 360.785 532.035 360.789 532.105 cv
360.789 532.176 360.789 532.27 360.793 532.387 cv
cp
f
372.551 535.355 mo
372.547 535.934 372.473 536.461 372.324 536.937 cv
372.172 537.422 371.945 537.836 371.648 538.18 cv
371.348 538.531 370.973 538.801 370.527 538.992 cv
370.074 539.187 369.555 539.281 368.965 539.285 cv
368.387 539.281 367.883 539.199 367.457 539.027 cv
367.027 538.859 366.672 538.609 366.387 538.281 cv
366.098 537.953 365.883 537.559 365.746 537.09 cv
365.605 536.625 365.539 536.094 365.539 535.496 cv
365.539 534.93 365.609 534.402 365.758 533.922 cv
365.902 533.441 366.129 533.027 366.43 532.676 cv
366.727 532.328 367.098 532.059 367.547 531.867 cv
367.992 531.676 368.516 531.578 369.113 531.578 cv
369.691 531.578 370.191 531.664 370.621 531.836 cv
371.047 532.008 371.406 532.258 371.691 532.586 cv
371.977 532.914 372.191 533.312 372.336 533.777 cv
372.477 534.246 372.547 534.773 372.551 535.355 cv
cp
371.219 535.441 mo
371.215 535.066 371.18 534.707 371.113 534.367 cv
371.039 534.031 370.922 533.738 370.762 533.48 cv
370.598 533.23 370.379 533.027 370.102 532.875 cv
369.82 532.73 369.473 532.656 369.063 532.652 cv
368.676 532.656 368.348 532.723 368.074 532.855 cv
367.797 532.992 367.57 533.184 367.395 533.43 cv
367.215 533.676 367.082 533.969 367 534.305 cv
366.91 534.645 366.867 535.012 366.871 535.41 cv
366.867 535.797 366.902 536.16 366.977 536.496 cv
367.043 536.836 367.16 537.129 367.328 537.379 cv
367.492 537.633 367.715 537.836 367.992 537.98 cv
368.27 538.133 368.617 538.207 369.031 538.203 cv
369.406 538.207 369.734 538.137 370.016 538 cv
370.293 537.867 370.52 537.68 370.699 537.43 cv
370.875 537.187 371.004 536.895 371.09 536.559 cv
371.172 536.223 371.215 535.852 371.219 535.441 cv
cp
f
378.281 529.043 mo
378.277 529.145 378.273 529.223 378.266 529.281 cv
378.254 529.344 378.242 529.395 378.23 529.426 cv
378.215 529.465 378.199 529.488 378.18 529.5 cv
378.156 529.516 378.129 529.523 378.102 529.52 cv
378.063 529.523 378.016 529.512 377.965 529.484 cv
377.906 529.465 377.84 529.437 377.766 529.406 cv
377.684 529.379 377.594 529.352 377.488 529.328 cv
377.379 529.305 377.254 529.293 377.121 529.293 cv
376.926 529.293 376.762 529.324 376.629 529.387 cv
376.488 529.449 376.379 529.547 376.301 529.68 cv
376.215 529.812 376.156 529.984 376.121 530.195 cv
376.082 530.406 376.063 530.664 376.066 530.961 cv
376.066 531.727 li
377.633 531.727 li
377.672 531.73 377.707 531.738 377.738 531.754 cv
377.766 531.773 377.793 531.805 377.816 531.848 cv
377.84 531.895 377.855 531.953 377.871 532.016 cv
377.879 532.086 377.887 532.168 377.891 532.262 cv
377.887 532.453 377.863 532.586 377.82 532.668 cv
377.77 532.754 377.707 532.797 377.633 532.793 cv
376.066 532.793 li
376.066 538.941 li
376.063 538.988 376.055 539.023 376.035 539.047 cv
376.012 539.078 375.977 539.102 375.93 539.121 cv
375.879 539.141 375.813 539.152 375.73 539.168 cv
375.645 539.176 375.539 539.184 375.422 539.184 cv
375.293 539.184 375.191 539.176 375.109 539.168 cv
375.023 539.152 374.957 539.141 374.91 539.121 cv
374.859 539.102 374.824 539.078 374.805 539.047 cv
374.781 539.023 374.77 538.988 374.773 538.941 cv
374.773 532.793 li
373.785 532.793 li
373.699 532.797 373.637 532.754 373.598 532.668 cv
373.555 532.586 373.531 532.453 373.535 532.262 cv
373.531 532.168 373.539 532.086 373.551 532.016 cv
373.559 531.953 373.574 531.895 373.598 531.848 cv
373.617 531.805 373.641 531.773 373.676 531.754 cv
373.703 531.738 373.742 531.73 373.785 531.727 cv
374.773 531.727 li
374.773 531 li
374.77 530.516 374.816 530.098 374.91 529.742 cv
375 529.395 375.137 529.105 375.324 528.883 cv
375.508 528.66 375.742 528.496 376.031 528.387 cv
376.313 528.281 376.648 528.227 377.035 528.227 cv
377.211 528.227 377.387 528.246 377.563 528.277 cv
377.73 528.316 377.863 528.352 377.961 528.387 cv
378.051 528.43 378.113 528.465 378.148 528.492 cv
378.176 528.527 378.203 528.566 378.227 528.613 cv
378.246 528.664 378.258 528.727 378.27 528.793 cv
378.273 528.867 378.277 528.949 378.281 529.043 cv
cp
f
388.477 536.309 mo
388.473 536.781 388.387 537.203 388.215 537.57 cv
388.039 537.945 387.797 538.258 387.488 538.512 cv
387.18 538.77 386.816 538.961 386.398 539.09 cv
385.977 539.219 385.527 539.281 385.047 539.285 cv
384.707 539.281 384.391 539.254 384.105 539.199 cv
383.816 539.141 383.563 539.074 383.336 538.988 cv
383.109 538.91 382.918 538.824 382.766 538.73 cv
382.609 538.645 382.504 538.566 382.445 538.504 cv
382.387 538.441 382.344 538.363 382.316 538.27 cv
382.285 538.176 382.27 538.047 382.273 537.883 cv
382.27 537.77 382.273 537.676 382.289 537.598 cv
382.297 537.523 382.313 537.461 382.336 537.414 cv
382.352 537.367 382.379 537.336 382.414 537.316 cv
382.441 537.301 382.477 537.293 382.52 537.289 cv
382.59 537.293 382.691 537.336 382.828 537.422 cv
382.957 537.512 383.129 537.609 383.34 537.711 cv
383.547 537.82 383.797 537.918 384.09 538.004 cv
384.383 538.098 384.723 538.141 385.109 538.141 cv
385.398 538.141 385.664 538.102 385.906 538.023 cv
386.145 537.945 386.352 537.836 386.531 537.691 cv
386.703 537.551 386.84 537.375 386.934 537.164 cv
387.027 536.957 387.074 536.723 387.074 536.457 cv
387.074 536.176 387.008 535.93 386.879 535.723 cv
386.746 535.523 386.574 535.348 386.363 535.191 cv
386.148 535.043 385.906 534.902 385.633 534.77 cv
385.359 534.645 385.078 534.512 384.797 534.379 cv
384.508 534.246 384.23 534.102 383.961 533.937 cv
383.691 533.781 383.449 533.59 383.238 533.371 cv
383.02 533.152 382.848 532.898 382.719 532.602 cv
382.582 532.312 382.516 531.961 382.52 531.547 cv
382.516 531.129 382.594 530.754 382.75 530.422 cv
382.902 530.094 383.113 529.816 383.391 529.59 cv
383.66 529.371 383.984 529.199 384.363 529.082 cv
384.738 528.965 385.148 528.906 385.586 528.906 cv
385.805 528.906 386.027 528.926 386.258 528.965 cv
386.48 529.004 386.691 529.055 386.895 529.117 cv
387.09 529.184 387.27 529.258 387.43 529.336 cv
387.582 529.418 387.684 529.484 387.738 529.531 cv
387.785 529.586 387.82 529.625 387.836 529.648 cv
387.852 529.68 387.863 529.715 387.875 529.758 cv
387.883 529.805 387.891 529.859 387.898 529.918 cv
387.902 529.984 387.906 530.062 387.906 530.16 cv
387.906 530.254 387.902 530.34 387.895 530.41 cv
387.887 530.488 387.875 530.547 387.859 530.594 cv
387.844 530.641 387.82 530.676 387.793 530.699 cv
387.762 530.723 387.73 530.734 387.695 530.734 cv
387.637 530.734 387.547 530.699 387.426 530.629 cv
387.301 530.559 387.148 530.477 386.977 530.383 cv
386.797 530.293 386.59 530.211 386.352 530.133 cv
386.105 530.059 385.836 530.02 385.539 530.02 cv
385.258 530.02 385.012 530.059 384.805 530.133 cv
384.594 530.211 384.422 530.312 384.289 530.434 cv
384.152 530.559 384.051 530.703 383.984 530.875 cv
383.918 531.047 383.887 531.23 383.887 531.422 cv
383.887 531.707 383.949 531.949 384.078 532.148 cv
384.207 532.352 384.379 532.531 384.598 532.684 cv
384.809 532.844 385.055 532.984 385.332 533.113 cv
385.605 533.246 385.887 533.379 386.176 533.508 cv
386.461 533.641 386.742 533.785 387.016 533.941 cv
387.289 534.102 387.535 534.289 387.754 534.504 cv
387.969 534.723 388.141 534.977 388.277 535.27 cv
388.406 535.562 388.473 535.91 388.477 536.309 cv
cp
f
396.246 538.941 mo
396.242 538.988 396.234 539.023 396.219 539.047 cv
396.199 539.078 396.164 539.102 396.121 539.121 cv
396.074 539.141 396.016 539.152 395.941 539.168 cv
395.863 539.176 395.77 539.184 395.664 539.184 cv
395.539 539.184 395.441 539.176 395.371 539.168 cv
395.293 539.152 395.234 539.141 395.191 539.121 cv
395.145 539.102 395.113 539.078 395.102 539.047 cv
395.082 539.023 395.074 538.988 395.078 538.941 cv
395.078 538.016 li
394.676 538.461 394.281 538.781 393.895 538.98 cv
393.5 539.184 393.105 539.281 392.711 539.285 cv
392.238 539.281 391.844 539.207 391.527 539.051 cv
391.207 538.898 390.949 538.687 390.754 538.418 cv
390.551 538.152 390.41 537.84 390.328 537.48 cv
390.238 537.125 390.195 536.691 390.199 536.184 cv
390.199 531.93 li
390.195 531.891 390.203 531.855 390.227 531.824 cv
390.242 531.797 390.277 531.773 390.332 531.746 cv
390.379 531.727 390.449 531.711 390.535 531.699 cv
390.617 531.695 390.719 531.691 390.848 531.687 cv
390.969 531.691 391.074 531.695 391.16 531.699 cv
391.242 531.711 391.309 531.727 391.355 531.746 cv
391.402 531.773 391.438 531.797 391.461 531.824 cv
391.48 531.855 391.488 531.891 391.492 531.93 cv
391.492 536.012 li
391.488 536.426 391.52 536.754 391.582 537 cv
391.641 537.246 391.73 537.457 391.855 537.629 cv
391.973 537.809 392.129 537.941 392.32 538.035 cv
392.504 538.133 392.723 538.184 392.973 538.18 cv
393.293 538.184 393.613 538.066 393.938 537.836 cv
394.254 537.609 394.594 537.273 394.953 536.828 cv
394.953 531.93 li
394.953 531.891 394.961 531.855 394.98 531.824 cv
394.996 531.797 395.031 531.773 395.086 531.746 cv
395.137 531.727 395.203 531.711 395.285 531.699 cv
395.363 531.695 395.469 531.691 395.602 531.687 cv
395.723 531.691 395.828 531.695 395.914 531.699 cv
395.996 531.711 396.059 531.727 396.105 531.746 cv
396.148 531.773 396.184 531.797 396.211 531.824 cv
396.23 531.855 396.242 531.891 396.246 531.93 cv
cp
f
405.102 535.34 mo
405.098 535.949 405.031 536.5 404.902 536.984 cv
404.766 537.473 404.57 537.887 404.316 538.227 cv
404.059 538.57 403.742 538.832 403.371 539.012 cv
402.996 539.195 402.57 539.281 402.086 539.285 cv
401.859 539.281 401.652 539.262 401.465 539.219 cv
401.277 539.172 401.09 539.102 400.91 539.004 cv
400.723 538.906 400.543 538.781 400.363 538.629 cv
400.18 538.48 399.988 538.301 399.789 538.086 cv
399.789 538.941 li
399.789 538.988 399.777 539.023 399.758 539.051 cv
399.734 539.086 399.699 539.109 399.656 539.125 cv
399.605 539.141 399.547 539.152 399.48 539.168 cv
399.406 539.176 399.316 539.184 399.211 539.184 cv
399.102 539.184 399.016 539.176 398.945 539.168 cv
398.871 539.152 398.809 539.141 398.766 539.125 cv
398.715 539.109 398.684 539.086 398.672 539.051 cv
398.652 539.023 398.645 538.988 398.648 538.941 cv
398.648 528.531 li
398.645 528.492 398.656 528.457 398.676 528.422 cv
398.691 528.395 398.723 528.367 398.777 528.344 cv
398.824 528.324 398.891 528.309 398.977 528.297 cv
399.055 528.289 399.16 528.285 399.289 528.281 cv
399.418 528.285 399.523 528.289 399.609 528.297 cv
399.688 528.309 399.754 528.324 399.801 528.344 cv
399.848 528.367 399.879 528.395 399.902 528.422 cv
399.918 528.457 399.93 528.492 399.934 528.531 cv
399.934 532.73 li
400.141 532.52 400.344 532.34 400.539 532.195 cv
400.734 532.051 400.922 531.934 401.109 531.84 cv
401.293 531.754 401.48 531.687 401.672 531.641 cv
401.855 531.602 402.055 531.578 402.266 531.578 cv
402.77 531.578 403.203 531.68 403.57 531.883 cv
403.93 532.086 404.223 532.359 404.449 532.695 cv
404.672 533.039 404.84 533.437 404.945 533.895 cv
405.047 534.352 405.098 534.832 405.102 535.34 cv
cp
403.77 535.488 mo
403.766 535.133 403.738 534.785 403.688 534.445 cv
403.629 534.109 403.535 533.812 403.398 533.551 cv
403.262 533.293 403.082 533.082 402.859 532.922 cv
402.633 532.766 402.352 532.687 402.02 532.684 cv
401.852 532.687 401.688 532.711 401.527 532.754 cv
401.363 532.805 401.199 532.883 401.031 532.988 cv
400.863 533.102 400.688 533.242 400.512 533.41 cv
400.328 533.586 400.137 533.801 399.934 534.055 cv
399.934 536.852 li
400.289 537.285 400.629 537.617 400.953 537.84 cv
401.277 538.07 401.613 538.184 401.965 538.18 cv
402.285 538.184 402.563 538.105 402.797 537.945 cv
403.023 537.793 403.211 537.586 403.355 537.324 cv
403.5 537.07 403.605 536.781 403.672 536.461 cv
403.734 536.145 403.766 535.82 403.77 535.488 cv
cp
f
410.258 535.203 mo
410.258 535.406 410.234 535.543 410.188 535.621 cv
410.141 535.699 410.07 535.738 409.984 535.738 cv
406.727 535.738 li
406.633 535.738 406.566 535.699 406.52 535.617 cv
406.473 535.539 406.449 535.402 406.449 535.203 cv
406.449 535.008 406.473 534.867 406.52 534.789 cv
406.566 534.711 406.633 534.672 406.727 534.672 cv
409.984 534.672 li
410.023 534.672 410.063 534.68 410.098 534.695 cv
410.129 534.711 410.156 534.742 410.184 534.785 cv
410.203 534.832 410.223 534.887 410.238 534.953 cv
410.25 535.023 410.258 535.109 410.258 535.203 cv
cp
f
413.508 538.934 mo
413.504 538.977 413.496 539.012 413.477 539.043 cv
413.453 539.074 413.414 539.102 413.367 539.117 cv
413.313 539.137 413.246 539.148 413.16 539.164 cv
413.074 539.176 412.965 539.184 412.84 539.184 cv
412.711 539.184 412.605 539.176 412.52 539.164 cv
412.43 539.148 412.359 539.137 412.309 539.117 cv
412.254 539.102 412.219 539.074 412.199 539.043 cv
412.176 539.012 412.164 538.977 412.168 538.934 cv
412.168 529.254 li
412.164 529.215 412.176 529.18 412.203 529.145 cv
412.223 529.117 412.262 529.09 412.32 529.07 cv
412.371 529.055 412.441 529.039 412.531 529.023 cv
412.613 529.012 412.715 529.008 412.84 529.004 cv
412.965 529.008 413.074 529.012 413.16 529.023 cv
413.246 529.039 413.313 529.055 413.367 529.07 cv
413.414 529.09 413.453 529.117 413.477 529.145 cv
413.496 529.18 413.504 529.215 413.508 529.254 cv
cp
f
426.496 538.941 mo
426.492 538.988 426.484 539.023 426.465 539.047 cv
426.441 539.078 426.406 539.102 426.363 539.121 cv
426.313 539.141 426.246 539.152 426.168 539.168 cv
426.082 539.176 425.98 539.184 425.855 539.184 cv
425.723 539.184 425.613 539.176 425.535 539.168 cv
425.449 539.152 425.383 539.141 425.336 539.121 cv
425.281 539.102 425.246 539.078 425.23 539.047 cv
425.207 539.023 425.199 538.988 425.199 538.941 cv
425.199 534.68 li
425.199 534.387 425.172 534.117 425.121 533.871 cv
425.066 533.629 424.984 533.418 424.871 533.238 cv
424.758 533.062 424.613 532.926 424.438 532.832 cv
424.258 532.738 424.047 532.691 423.813 532.691 cv
423.516 532.691 423.219 532.809 422.922 533.035 cv
422.617 533.27 422.289 533.602 421.934 534.039 cv
421.934 538.941 li
421.93 538.988 421.918 539.023 421.902 539.047 cv
421.879 539.078 421.848 539.102 421.801 539.121 cv
421.75 539.141 421.684 539.152 421.602 539.168 cv
421.516 539.176 421.41 539.184 421.289 539.184 cv
421.168 539.184 421.066 539.176 420.98 539.168 cv
420.895 539.152 420.824 539.141 420.777 539.121 cv
420.723 539.102 420.691 539.078 420.676 539.047 cv
420.656 539.023 420.645 538.988 420.648 538.941 cv
420.648 534.68 li
420.645 534.387 420.617 534.117 420.563 533.871 cv
420.504 533.629 420.418 533.418 420.305 533.238 cv
420.191 533.062 420.047 532.926 419.875 532.832 cv
419.695 532.738 419.488 532.691 419.254 532.691 cv
418.953 532.691 418.656 532.809 418.355 533.035 cv
418.055 533.27 417.727 533.602 417.375 534.039 cv
417.375 538.941 li
417.371 538.988 417.359 539.023 417.344 539.047 cv
417.32 539.078 417.289 539.102 417.242 539.121 cv
417.195 539.141 417.129 539.152 417.051 539.168 cv
416.965 539.176 416.859 539.184 416.73 539.184 cv
416.602 539.184 416.496 539.176 416.418 539.168 cv
416.332 539.152 416.266 539.141 416.219 539.121 cv
416.164 539.102 416.133 539.078 416.117 539.047 cv
416.098 539.023 416.086 538.988 416.09 538.941 cv
416.09 531.93 li
416.086 531.891 416.094 531.855 416.113 531.824 cv
416.125 531.797 416.156 531.773 416.207 531.746 cv
416.25 531.727 416.313 531.711 416.387 531.699 cv
416.457 531.695 416.551 531.691 416.676 531.687 cv
416.785 531.691 416.883 531.695 416.961 531.699 cv
417.035 531.711 417.094 531.727 417.137 531.746 cv
417.176 531.773 417.203 531.797 417.223 531.824 cv
417.238 531.855 417.246 531.891 417.25 531.93 cv
417.25 532.855 li
417.641 532.414 418.023 532.094 418.398 531.887 cv
418.766 531.684 419.145 531.578 419.527 531.578 cv
419.816 531.578 420.074 531.613 420.309 531.68 cv
420.535 531.75 420.742 531.844 420.922 531.965 cv
421.098 532.086 421.246 532.23 421.375 532.398 cv
421.496 532.57 421.602 532.762 421.688 532.965 cv
421.918 532.715 422.141 532.5 422.352 532.32 cv
422.563 532.148 422.766 532.004 422.961 531.891 cv
423.156 531.785 423.344 531.707 423.527 531.652 cv
423.711 531.605 423.898 531.578 424.086 531.578 cv
424.539 531.578 424.918 531.66 425.223 531.816 cv
425.527 531.98 425.773 532.191 425.969 532.453 cv
426.156 532.719 426.293 533.027 426.375 533.383 cv
426.453 533.738 426.492 534.113 426.496 534.508 cv
cp
f
434.129 538.949 mo
434.125 539.012 434.105 539.059 434.066 539.09 cv
434.023 539.121 433.965 539.145 433.895 539.16 cv
433.816 539.176 433.711 539.184 433.574 539.184 cv
433.438 539.184 433.328 539.176 433.25 539.16 cv
433.164 539.145 433.105 539.121 433.074 539.09 cv
433.035 539.059 433.02 539.012 433.023 538.949 cv
433.023 538.25 li
432.715 538.578 432.371 538.832 431.996 539.012 cv
431.617 539.195 431.219 539.281 430.801 539.285 cv
430.426 539.281 430.094 539.234 429.797 539.141 cv
429.5 539.043 429.246 538.906 429.035 538.723 cv
428.824 538.543 428.66 538.32 428.543 538.055 cv
428.426 537.793 428.367 537.492 428.371 537.148 cv
428.367 536.758 428.445 536.414 428.609 536.121 cv
428.766 535.832 429 535.59 429.305 535.398 cv
429.605 535.207 429.973 535.062 430.41 534.965 cv
430.844 534.871 431.336 534.824 431.883 534.82 cv
432.852 534.82 li
432.852 534.273 li
432.848 534.004 432.82 533.766 432.766 533.559 cv
432.707 533.352 432.613 533.18 432.488 533.039 cv
432.355 532.902 432.191 532.797 431.992 532.727 cv
431.785 532.656 431.535 532.621 431.246 532.621 cv
430.926 532.621 430.641 532.66 430.391 532.734 cv
430.133 532.812 429.914 532.895 429.727 532.984 cv
429.539 533.078 429.379 533.164 429.254 533.234 cv
429.121 533.312 429.027 533.348 428.969 533.348 cv
428.926 533.348 428.891 533.34 428.859 533.316 cv
428.828 533.301 428.801 533.27 428.777 533.223 cv
428.754 533.184 428.734 533.129 428.727 533.062 cv
428.711 533 428.707 532.93 428.711 532.848 cv
428.707 532.723 428.715 532.617 428.738 532.539 cv
428.754 532.465 428.801 532.395 428.871 532.324 cv
428.941 532.258 429.063 532.18 429.234 532.09 cv
429.406 532 429.602 531.918 429.824 531.84 cv
430.047 531.77 430.293 531.707 430.559 531.652 cv
430.824 531.605 431.09 531.578 431.363 531.578 cv
431.863 531.578 432.293 531.637 432.645 531.75 cv
432.996 531.867 433.281 532.035 433.504 532.254 cv
433.719 532.477 433.879 532.75 433.98 533.074 cv
434.078 533.406 434.125 533.789 434.129 534.219 cv
cp
432.852 535.746 mo
431.75 535.746 li
431.395 535.75 431.09 535.781 430.832 535.836 cv
430.57 535.898 430.355 535.984 430.184 536.102 cv
430.012 536.219 429.887 536.359 429.809 536.523 cv
429.727 536.687 429.684 536.875 429.688 537.086 cv
429.684 537.453 429.801 537.746 430.031 537.957 cv
430.262 538.176 430.586 538.281 431.004 538.281 cv
431.34 538.281 431.652 538.195 431.941 538.023 cv
432.23 537.852 432.531 537.59 432.852 537.234 cv
cp
f
442.348 532.246 mo
442.344 532.43 442.32 532.562 442.273 532.641 cv
442.223 532.723 442.16 532.762 442.086 532.762 cv
441.078 532.762 li
441.258 532.949 441.387 533.156 441.461 533.383 cv
441.531 533.609 441.566 533.844 441.57 534.086 cv
441.566 534.492 441.5 534.852 441.375 535.164 cv
441.242 535.477 441.059 535.742 440.816 535.953 cv
440.574 536.172 440.285 536.336 439.957 536.449 cv
439.621 536.566 439.254 536.625 438.852 536.621 cv
438.563 536.625 438.289 536.586 438.035 536.508 cv
437.773 536.434 437.578 536.34 437.441 536.223 cv
437.348 536.32 437.27 536.426 437.211 536.543 cv
437.148 536.664 437.117 536.801 437.121 536.953 cv
437.117 537.137 437.203 537.289 437.375 537.406 cv
437.543 537.531 437.766 537.594 438.047 537.602 cv
439.879 537.68 li
440.227 537.691 440.543 537.738 440.836 537.824 cv
441.125 537.91 441.379 538.035 441.594 538.191 cv
441.805 538.352 441.973 538.543 442.094 538.773 cv
442.211 539.008 442.27 539.277 442.273 539.582 cv
442.27 539.902 442.203 540.207 442.07 540.5 cv
441.934 540.789 441.727 541.043 441.449 541.266 cv
441.168 541.484 440.813 541.66 440.383 541.789 cv
439.953 541.914 439.445 541.977 438.859 541.98 cv
438.289 541.977 437.805 541.93 437.41 541.836 cv
437.012 541.738 436.688 541.605 436.434 541.441 cv
436.18 541.273 435.996 541.078 435.883 540.848 cv
435.766 540.613 435.707 540.359 435.711 540.094 cv
435.707 539.922 435.727 539.758 435.773 539.598 cv
435.813 539.434 435.875 539.281 435.961 539.137 cv
436.043 538.992 436.152 538.855 436.281 538.719 cv
436.406 538.59 436.551 538.457 436.723 538.328 cv
436.465 538.199 436.277 538.035 436.156 537.836 cv
436.035 537.641 435.977 537.43 435.977 537.195 cv
435.977 536.883 436.039 536.598 436.168 536.348 cv
436.297 536.098 436.457 535.875 436.652 535.676 cv
436.488 535.484 436.363 535.27 436.27 535.027 cv
436.176 534.789 436.129 534.496 436.129 534.148 cv
436.129 533.754 436.195 533.395 436.332 533.074 cv
436.465 532.758 436.652 532.492 436.895 532.273 cv
437.133 532.059 437.418 531.891 437.754 531.77 cv
438.086 531.656 438.453 531.598 438.852 531.594 cv
439.063 531.598 439.262 531.609 439.445 531.629 cv
439.629 531.656 439.801 531.687 439.965 531.727 cv
442.086 531.727 li
442.172 531.73 442.238 531.773 442.281 531.855 cv
442.324 531.945 442.344 532.074 442.348 532.246 cv
cp
440.34 534.094 mo
440.336 533.621 440.203 533.25 439.945 532.977 cv
439.68 532.711 439.309 532.574 438.828 532.574 cv
438.574 532.574 438.355 532.617 438.176 532.699 cv
437.988 532.785 437.836 532.898 437.715 533.043 cv
437.594 533.191 437.504 533.359 437.445 533.547 cv
437.383 533.734 437.352 533.934 437.355 534.141 cv
437.352 534.605 437.484 534.969 437.746 535.234 cv
438.008 535.5 438.375 535.633 438.852 535.629 cv
439.102 535.633 439.32 535.594 439.512 535.508 cv
439.695 535.43 439.852 535.316 439.977 535.176 cv
440.098 535.035 440.188 534.871 440.25 534.68 cv
440.305 534.496 440.336 534.301 440.34 534.094 cv
cp
440.984 539.652 mo
440.98 539.348 440.855 539.117 440.613 538.953 cv
440.363 538.793 440.031 538.703 439.613 538.691 cv
437.797 538.629 li
437.629 538.762 437.492 538.887 437.391 539 cv
437.281 539.117 437.199 539.227 437.137 539.336 cv
437.074 539.441 437.031 539.547 437.008 539.652 cv
436.984 539.754 436.973 539.859 436.973 539.969 cv
436.973 540.305 437.141 540.559 437.484 540.738 cv
437.824 540.91 438.305 541 438.922 541 cv
439.309 541 439.633 540.961 439.898 540.887 cv
440.156 540.809 440.367 540.707 440.531 540.586 cv
440.688 540.457 440.805 540.316 440.879 540.156 cv
440.945 539.996 440.98 539.828 440.984 539.652 cv
cp
f
449.91 535.133 mo
449.906 535.336 449.855 535.477 449.758 535.562 cv
449.652 535.648 449.535 535.691 449.41 535.691 cv
444.793 535.691 li
444.789 536.082 444.828 536.434 444.91 536.746 cv
444.984 537.059 445.117 537.328 445.301 537.547 cv
445.48 537.773 445.715 537.945 446.012 538.062 cv
446.301 538.187 446.66 538.246 447.086 538.242 cv
447.418 538.246 447.715 538.219 447.977 538.16 cv
448.238 538.109 448.465 538.047 448.656 537.977 cv
448.844 537.91 449 537.852 449.125 537.793 cv
449.246 537.742 449.34 537.715 449.402 537.711 cv
449.438 537.715 449.469 537.723 449.5 537.738 cv
449.527 537.758 449.551 537.785 449.57 537.82 cv
449.582 537.859 449.594 537.91 449.605 537.973 cv
449.609 538.039 449.613 538.117 449.617 538.211 cv
449.613 538.281 449.609 538.34 449.609 538.387 cv
449.602 538.434 449.598 538.477 449.59 538.516 cv
449.582 538.555 449.566 538.59 449.551 538.621 cv
449.527 538.652 449.504 538.684 449.48 538.711 cv
449.449 538.742 449.367 538.789 449.227 538.852 cv
449.086 538.918 448.902 538.98 448.68 539.043 cv
448.453 539.105 448.195 539.16 447.902 539.211 cv
447.609 539.258 447.297 539.281 446.965 539.285 cv
446.387 539.281 445.879 539.203 445.449 539.043 cv
445.012 538.883 444.648 538.645 444.355 538.328 cv
444.055 538.012 443.832 537.617 443.684 537.137 cv
443.535 536.66 443.461 536.102 443.461 535.465 cv
443.461 534.867 443.535 534.328 443.691 533.844 cv
443.844 533.367 444.07 532.957 444.367 532.621 cv
444.66 532.285 445.016 532.027 445.43 531.848 cv
445.844 531.668 446.309 531.578 446.824 531.578 cv
447.375 531.578 447.844 531.668 448.23 531.844 cv
448.617 532.023 448.934 532.262 449.188 532.559 cv
449.434 532.859 449.617 533.211 449.734 533.609 cv
449.848 534.016 449.906 534.445 449.91 534.898 cv
cp
448.617 534.75 mo
448.633 534.074 448.48 533.543 448.164 533.16 cv
447.848 532.777 447.379 532.586 446.762 532.582 cv
446.438 532.586 446.156 532.645 445.918 532.762 cv
445.676 532.883 445.477 533.043 445.316 533.238 cv
445.152 533.437 445.027 533.668 444.941 533.93 cv
444.852 534.191 444.801 534.465 444.793 534.75 cv
cp
f
456.277 537.031 mo
456.273 537.395 456.207 537.715 456.078 537.992 cv
455.945 538.273 455.758 538.508 455.516 538.699 cv
455.27 538.895 454.977 539.039 454.641 539.137 cv
454.301 539.234 453.93 539.281 453.527 539.285 cv
453.273 539.281 453.035 539.262 452.813 539.227 cv
452.586 539.184 452.387 539.137 452.207 539.078 cv
452.027 539.02 451.875 538.957 451.75 538.891 cv
451.625 538.828 451.531 538.77 451.477 538.715 cv
451.418 538.664 451.379 538.594 451.355 538.496 cv
451.328 538.406 451.316 538.277 451.316 538.117 cv
451.316 538.02 451.32 537.937 451.332 537.867 cv
451.34 537.801 451.352 537.746 451.371 537.703 cv
451.383 537.664 451.406 537.633 451.434 537.613 cv
451.461 537.598 451.492 537.59 451.531 537.586 cv
451.586 537.59 451.672 537.625 451.785 537.691 cv
451.895 537.766 452.031 537.844 452.199 537.922 cv
452.359 538.008 452.551 538.082 452.777 538.152 cv
452.996 538.223 453.254 538.258 453.551 538.258 cv
453.766 538.258 453.965 538.234 454.145 538.187 cv
454.32 538.141 454.473 538.074 454.602 537.98 cv
454.73 537.895 454.832 537.777 454.902 537.633 cv
454.973 537.496 455.008 537.328 455.008 537.133 cv
455.008 536.937 454.957 536.773 454.855 536.637 cv
454.754 536.504 454.617 536.383 454.453 536.277 cv
454.285 536.176 454.102 536.086 453.895 536 cv
453.684 535.922 453.469 535.836 453.25 535.746 cv
453.031 535.66 452.816 535.559 452.605 535.445 cv
452.395 535.336 452.203 535.203 452.039 535.039 cv
451.867 534.883 451.734 534.687 451.637 534.461 cv
451.531 534.238 451.48 533.973 451.484 533.66 cv
451.48 533.387 451.535 533.121 451.645 532.867 cv
451.75 532.617 451.91 532.398 452.125 532.207 cv
452.336 532.02 452.602 531.867 452.922 531.75 cv
453.242 531.637 453.613 531.578 454.043 531.578 cv
454.227 531.578 454.414 531.594 454.602 531.625 cv
454.785 531.656 454.953 531.695 455.109 531.742 cv
455.258 531.789 455.387 531.84 455.496 531.895 cv
455.598 531.949 455.68 532 455.738 532.039 cv
455.789 532.086 455.824 532.121 455.848 532.148 cv
455.863 532.18 455.879 532.215 455.887 532.25 cv
455.895 532.293 455.902 532.34 455.91 532.395 cv
455.918 532.453 455.922 532.523 455.922 532.605 cv
455.922 532.695 455.918 532.773 455.91 532.836 cv
455.902 532.906 455.887 532.957 455.871 532.996 cv
455.848 533.039 455.828 533.07 455.805 533.086 cv
455.777 533.105 455.746 533.113 455.719 533.113 cv
455.668 533.113 455.602 533.086 455.516 533.027 cv
455.426 532.973 455.313 532.91 455.172 532.844 cv
455.031 532.781 454.863 532.723 454.676 532.66 cv
454.484 532.605 454.27 532.574 454.027 532.574 cv
453.805 532.574 453.613 532.602 453.449 532.648 cv
453.281 532.703 453.145 532.773 453.039 532.859 cv
452.934 532.953 452.852 533.059 452.801 533.184 cv
452.742 533.309 452.715 533.445 452.719 533.59 cv
452.715 533.793 452.766 533.961 452.871 534.098 cv
452.973 534.238 453.109 534.359 453.277 534.461 cv
453.441 534.566 453.633 534.66 453.848 534.742 cv
454.059 534.828 454.273 534.914 454.496 535 cv
454.715 535.09 454.934 535.191 455.152 535.297 cv
455.367 535.406 455.559 535.535 455.727 535.691 cv
455.891 535.848 456.023 536.035 456.125 536.254 cv
456.223 536.473 456.273 536.734 456.277 537.031 cv
cp
f
307.215 19.121 mo
307.211 19.273 307.207 19.398 307.195 19.496 cv
307.18 19.602 307.16 19.684 307.137 19.742 cv
307.113 19.809 307.082 19.855 307.043 19.879 cv
307.004 19.91 306.961 19.922 306.914 19.922 cv
301.848 19.922 li
301.672 19.922 301.527 19.871 301.414 19.77 cv
301.293 19.668 301.234 19.504 301.238 19.273 cv
301.238 10.484 li
301.234 10.258 301.293 10.094 301.414 9.98798 cv
301.527 9.89099 301.672 9.84003 301.848 9.836 cv
306.883 9.836 li
306.926 9.84003 306.969 9.85199 307.008 9.875 cv
307.043 9.90198 307.074 9.94897 307.102 10.012 cv
307.125 10.082 307.141 10.164 307.156 10.262 cv
307.164 10.367 307.172 10.496 307.176 10.648 cv
307.172 10.797 307.164 10.922 307.156 11.02 cv
307.141 11.125 307.125 11.207 307.102 11.266 cv
307.074 11.328 307.043 11.371 307.008 11.398 cv
306.969 11.43 306.926 11.445 306.883 11.441 cv
303.281 11.441 li
303.281 13.906 li
306.328 13.906 li
306.375 13.91 306.418 13.926 306.457 13.949 cv
306.496 13.98 306.527 14.023 306.555 14.082 cv
306.578 14.145 306.598 14.227 306.613 14.324 cv
306.625 14.426 306.633 14.547 306.633 14.691 cv
306.633 14.844 306.625 14.969 306.613 15.066 cv
306.598 15.168 306.578 15.246 306.555 15.305 cv
306.527 15.367 306.496 15.41 306.457 15.434 cv
306.418 15.461 306.375 15.477 306.328 15.473 cv
303.281 15.473 li
303.281 18.316 li
306.914 18.316 li
306.961 18.316 307.004 18.332 307.043 18.359 cv
307.082 18.391 307.113 18.437 307.137 18.496 cv
307.16 18.562 307.18 18.645 307.195 18.742 cv
307.207 18.848 307.211 18.973 307.215 19.121 cv
cp
f
315.551 19.656 mo
315.547 19.711 315.531 19.754 315.504 19.793 cv
315.469 19.832 315.418 19.867 315.348 19.891 cv
315.273 19.918 315.172 19.934 315.047 19.949 cv
314.918 19.961 314.762 19.969 314.578 19.969 cv
314.383 19.969 314.223 19.961 314.098 19.949 cv
313.969 19.934 313.867 19.918 313.797 19.891 cv
313.719 19.867 313.668 19.832 313.641 19.793 cv
313.605 19.754 313.59 19.711 313.594 19.656 cv
313.594 15.691 li
313.59 15.355 313.566 15.09 313.52 14.895 cv
313.469 14.703 313.395 14.539 313.305 14.402 cv
313.211 14.266 313.094 14.16 312.945 14.082 cv
312.797 14.008 312.621 13.969 312.426 13.969 cv
312.172 13.969 311.922 14.062 311.668 14.242 cv
311.414 14.426 311.148 14.687 310.875 15.035 cv
310.875 19.656 li
310.871 19.711 310.855 19.754 310.828 19.793 cv
310.793 19.832 310.738 19.867 310.668 19.891 cv
310.59 19.918 310.492 19.934 310.367 19.949 cv
310.242 19.961 310.082 19.969 309.895 19.969 cv
309.699 19.969 309.543 19.961 309.418 19.949 cv
309.293 19.934 309.191 19.918 309.117 19.891 cv
309.039 19.867 308.984 19.832 308.957 19.793 cv
308.922 19.754 308.906 19.711 308.91 19.656 cv
308.91 12.707 li
308.906 12.66 308.922 12.613 308.949 12.57 cv
308.973 12.535 309.02 12.504 309.09 12.473 cv
309.156 12.449 309.242 12.43 309.352 12.414 cv
309.457 12.406 309.59 12.398 309.754 12.395 cv
309.918 12.398 310.055 12.406 310.164 12.414 cv
310.27 12.43 310.355 12.449 310.418 12.473 cv
310.477 12.504 310.52 12.535 310.547 12.57 cv
310.57 12.613 310.582 12.66 310.586 12.707 cv
310.586 13.508 li
310.969 13.098 311.359 12.785 311.758 12.574 cv
312.152 12.367 312.57 12.266 313.004 12.262 cv
313.473 12.266 313.871 12.344 314.199 12.496 cv
314.523 12.656 314.785 12.867 314.984 13.133 cv
315.184 13.402 315.328 13.715 315.418 14.07 cv
315.504 14.43 315.547 14.859 315.551 15.363 cv
cp
f
323.902 15.98 mo
323.898 16.219 323.848 16.395 323.742 16.508 cv
323.633 16.625 323.484 16.684 323.305 16.68 cv
319.07 16.68 li
319.066 16.98 319.102 17.25 319.176 17.488 cv
319.242 17.73 319.355 17.934 319.512 18.102 cv
319.664 18.273 319.859 18.402 320.102 18.488 cv
320.34 18.578 320.629 18.621 320.973 18.621 cv
321.313 18.621 321.613 18.598 321.875 18.547 cv
322.133 18.5 322.359 18.445 322.551 18.383 cv
322.738 18.324 322.895 18.27 323.023 18.219 cv
323.145 18.172 323.246 18.148 323.328 18.145 cv
323.371 18.148 323.41 18.156 323.445 18.172 cv
323.473 18.191 323.5 18.223 323.52 18.27 cv
323.539 18.316 323.551 18.383 323.563 18.469 cv
323.566 18.555 323.57 18.664 323.574 18.793 cv
323.57 18.91 323.57 19.008 323.566 19.086 cv
323.559 19.168 323.551 19.234 323.543 19.289 cv
323.531 19.348 323.516 19.398 323.496 19.434 cv
323.477 19.477 323.449 19.512 323.418 19.547 cv
323.383 19.586 323.289 19.637 323.141 19.695 cv
322.984 19.762 322.793 19.824 322.563 19.879 cv
322.324 19.941 322.055 19.988 321.758 20.035 cv
321.453 20.074 321.133 20.098 320.793 20.102 cv
320.172 20.098 319.629 20.023 319.168 19.867 cv
318.699 19.715 318.313 19.477 318.004 19.16 cv
317.688 18.844 317.453 18.445 317.305 17.961 cv
317.148 17.48 317.074 16.914 317.078 16.258 cv
317.074 15.645 317.152 15.086 317.316 14.59 cv
317.473 14.094 317.707 13.676 318.02 13.328 cv
318.324 12.984 318.699 12.719 319.137 12.535 cv
319.574 12.355 320.066 12.266 320.621 12.262 cv
321.199 12.266 321.699 12.352 322.113 12.52 cv
322.527 12.695 322.863 12.934 323.129 13.234 cv
323.391 13.539 323.586 13.898 323.715 14.312 cv
323.836 14.73 323.898 15.18 323.902 15.668 cv
cp
322 15.418 mo
322.012 14.867 321.902 14.434 321.668 14.121 cv
321.434 13.809 321.066 13.652 320.574 13.648 cv
320.324 13.652 320.109 13.699 319.926 13.789 cv
319.738 13.887 319.586 14.012 319.465 14.168 cv
319.34 14.328 319.246 14.516 319.184 14.73 cv
319.117 14.945 319.078 15.176 319.07 15.418 cv
cp
f
329.977 13.352 mo
329.977 13.543 329.969 13.695 329.961 13.812 cv
329.945 13.934 329.93 14.027 329.914 14.094 cv
329.891 14.164 329.863 14.211 329.832 14.234 cv
329.793 14.262 329.75 14.273 329.703 14.273 cv
329.656 14.273 329.609 14.266 329.563 14.246 cv
329.508 14.23 329.449 14.211 329.387 14.187 cv
329.316 14.168 329.246 14.148 329.172 14.129 cv
329.09 14.113 329.004 14.105 328.914 14.102 cv
328.801 14.105 328.691 14.125 328.586 14.168 cv
328.477 14.215 328.363 14.285 328.25 14.375 cv
328.129 14.469 328.008 14.594 327.883 14.746 cv
327.754 14.906 327.617 15.098 327.473 15.324 cv
327.473 19.656 li
327.469 19.711 327.453 19.754 327.426 19.793 cv
327.391 19.832 327.336 19.867 327.266 19.891 cv
327.188 19.918 327.09 19.934 326.965 19.949 cv
326.84 19.961 326.68 19.969 326.492 19.969 cv
326.297 19.969 326.141 19.961 326.016 19.949 cv
325.891 19.934 325.789 19.918 325.715 19.891 cv
325.637 19.867 325.582 19.832 325.555 19.793 cv
325.52 19.754 325.504 19.711 325.508 19.656 cv
325.508 12.707 li
325.504 12.66 325.52 12.613 325.547 12.57 cv
325.57 12.535 325.617 12.504 325.688 12.473 cv
325.754 12.449 325.84 12.43 325.949 12.414 cv
326.055 12.406 326.188 12.398 326.352 12.395 cv
326.516 12.398 326.652 12.406 326.762 12.414 cv
326.867 12.43 326.953 12.449 327.016 12.473 cv
327.074 12.504 327.117 12.535 327.145 12.57 cv
327.168 12.613 327.18 12.66 327.184 12.707 cv
327.184 13.57 li
327.363 13.312 327.535 13.102 327.699 12.93 cv
327.855 12.766 328.012 12.629 328.16 12.527 cv
328.305 12.43 328.449 12.363 328.594 12.32 cv
328.738 12.285 328.883 12.266 329.031 12.262 cv
329.098 12.266 329.172 12.27 329.25 12.273 cv
329.328 12.285 329.406 12.297 329.492 12.312 cv
329.57 12.332 329.645 12.352 329.711 12.375 cv
329.77 12.398 329.816 12.426 329.848 12.449 cv
329.875 12.48 329.895 12.508 329.91 12.535 cv
329.922 12.57 329.934 12.613 329.945 12.664 cv
329.953 12.723 329.961 12.805 329.969 12.91 cv
329.973 13.02 329.977 13.168 329.977 13.352 cv
cp
f
337.152 13.187 mo
337.148 13.441 337.121 13.625 337.066 13.742 cv
337.008 13.863 336.938 13.922 336.859 13.922 cv
336.039 13.922 li
336.152 14.047 336.234 14.191 336.285 14.348 cv
336.332 14.508 336.355 14.672 336.359 14.84 cv
336.355 15.25 336.289 15.609 336.156 15.922 cv
336.02 16.238 335.824 16.504 335.574 16.715 cv
335.32 16.934 335.02 17.098 334.664 17.207 cv
334.305 17.324 333.906 17.379 333.477 17.375 cv
333.25 17.379 333.039 17.352 332.836 17.293 cv
332.633 17.242 332.477 17.18 332.367 17.102 cv
332.305 17.172 332.246 17.25 332.199 17.344 cv
332.148 17.437 332.125 17.543 332.129 17.652 cv
332.125 17.809 332.191 17.93 332.324 18.023 cv
332.453 18.121 332.641 18.176 332.883 18.184 cv
334.574 18.246 li
334.969 18.262 335.32 18.32 335.629 18.414 cv
335.938 18.516 336.199 18.648 336.41 18.82 cv
336.621 18.996 336.781 19.207 336.891 19.449 cv
337 19.695 337.055 19.969 337.059 20.281 cv
337.055 20.617 336.98 20.941 336.832 21.25 cv
336.684 21.551 336.457 21.812 336.156 22.039 cv
335.852 22.258 335.473 22.437 335.02 22.57 cv
334.563 22.699 334.031 22.762 333.43 22.766 cv
332.832 22.762 332.328 22.715 331.91 22.625 cv
331.492 22.527 331.148 22.398 330.883 22.234 cv
330.613 22.066 330.418 21.867 330.301 21.641 cv
330.176 21.406 330.117 21.152 330.117 20.879 cv
330.117 20.707 330.137 20.547 330.184 20.391 cv
330.223 20.234 330.289 20.082 330.379 19.941 cv
330.461 19.797 330.566 19.664 330.691 19.531 cv
330.816 19.402 330.957 19.277 331.121 19.156 cv
330.895 19.043 330.723 18.883 330.602 18.672 cv
330.48 18.469 330.422 18.242 330.422 17.996 cv
330.422 17.695 330.488 17.418 330.629 17.16 cv
330.766 16.91 330.949 16.68 331.176 16.477 cv
330.992 16.297 330.848 16.082 330.738 15.824 cv
330.629 15.574 330.574 15.254 330.578 14.871 cv
330.574 14.469 330.645 14.109 330.789 13.785 cv
330.93 13.469 331.129 13.199 331.387 12.977 cv
331.641 12.758 331.945 12.586 332.297 12.469 cv
332.648 12.352 333.039 12.293 333.469 12.293 cv
333.688 12.293 333.895 12.309 334.094 12.332 cv
334.293 12.363 334.48 12.398 334.652 12.441 cv
336.859 12.441 li
336.941 12.445 337.012 12.504 337.07 12.613 cv
337.121 12.73 337.148 12.922 337.152 13.187 cv
cp
334.637 14.832 mo
334.633 14.461 334.531 14.172 334.324 13.961 cv
334.113 13.758 333.82 13.652 333.445 13.648 cv
333.25 13.652 333.078 13.684 332.938 13.746 cv
332.789 13.812 332.668 13.902 332.574 14.012 cv
332.473 14.125 332.402 14.254 332.359 14.402 cv
332.309 14.551 332.285 14.707 332.289 14.863 cv
332.285 15.223 332.391 15.5 332.602 15.703 cv
332.809 15.91 333.098 16.016 333.469 16.012 cv
333.664 16.016 333.832 15.984 333.98 15.918 cv
334.121 15.859 334.242 15.773 334.344 15.66 cv
334.438 15.555 334.512 15.426 334.563 15.281 cv
334.609 15.141 334.633 14.992 334.637 14.832 cv
cp
335.098 20.383 mo
335.098 20.145 335.004 19.969 334.816 19.844 cv
334.629 19.723 334.371 19.652 334.043 19.641 cv
332.648 19.602 li
332.512 19.703 332.402 19.797 332.324 19.887 cv
332.242 19.977 332.18 20.062 332.133 20.148 cv
332.082 20.23 332.047 20.312 332.035 20.391 cv
332.016 20.469 332.008 20.547 332.012 20.633 cv
332.008 20.887 332.141 21.086 332.402 21.223 cv
332.664 21.355 333.035 21.422 333.516 21.426 cv
333.809 21.422 334.055 21.391 334.262 21.336 cv
334.461 21.273 334.625 21.195 334.754 21.098 cv
334.875 20.996 334.965 20.887 335.02 20.766 cv
335.07 20.645 335.098 20.516 335.098 20.383 cv
cp
f
342.48 19.922 mo
341.637 22.383 li
341.586 22.512 341.461 22.605 341.254 22.664 cv
341.047 22.719 340.742 22.746 340.344 22.75 cv
340.133 22.746 339.965 22.738 339.844 22.723 cv
339.719 22.703 339.629 22.672 339.566 22.633 cv
339.504 22.59 339.469 22.539 339.465 22.477 cv
339.457 22.414 339.473 22.34 339.512 22.254 cv
340.438 19.922 li
340.367 19.891 340.305 19.844 340.254 19.777 cv
340.195 19.715 340.156 19.645 340.133 19.57 cv
337.742 13.18 li
337.672 13 337.637 12.863 337.641 12.766 cv
337.637 12.672 337.668 12.594 337.734 12.539 cv
337.793 12.484 337.898 12.449 338.047 12.426 cv
338.191 12.41 338.387 12.398 338.637 12.395 cv
338.855 12.398 339.035 12.402 339.168 12.406 cv
339.297 12.418 339.398 12.437 339.473 12.465 cv
339.543 12.5 339.598 12.547 339.637 12.609 cv
339.672 12.676 339.707 12.77 339.746 12.887 cv
341.379 17.539 li
341.402 17.539 li
342.902 12.793 li
342.926 12.66 342.965 12.57 343.02 12.523 cv
343.066 12.48 343.148 12.449 343.266 12.426 cv
343.375 12.41 343.578 12.398 343.867 12.395 cv
344.09 12.398 344.273 12.41 344.422 12.426 cv
344.566 12.449 344.676 12.488 344.75 12.543 cv
344.816 12.605 344.852 12.68 344.855 12.773 cv
344.852 12.867 344.832 12.98 344.793 13.109 cv
cp
f
356.926 18.395 mo
356.926 18.527 356.922 18.637 356.914 18.727 cv
356.906 18.82 356.895 18.898 356.879 18.961 cv
356.863 19.027 356.84 19.086 356.816 19.129 cv
356.785 19.176 356.746 19.227 356.691 19.285 cv
356.633 19.348 356.52 19.426 356.359 19.516 cv
356.191 19.613 355.992 19.703 355.758 19.785 cv
355.52 19.875 355.25 19.941 354.949 20 cv
354.641 20.055 354.313 20.086 353.965 20.086 cv
353.27 20.086 352.645 19.98 352.09 19.766 cv
351.531 19.555 351.059 19.238 350.672 18.812 cv
350.281 18.391 349.984 17.859 349.777 17.227 cv
349.57 16.594 349.465 15.855 349.469 15.012 cv
349.465 14.156 349.578 13.398 349.809 12.73 cv
350.035 12.066 350.355 11.508 350.766 11.055 cv
351.176 10.605 351.668 10.262 352.242 10.027 cv
352.816 9.797 353.449 9.67999 354.145 9.67603 cv
354.418 9.67999 354.688 9.703 354.953 9.74597 cv
355.211 9.79303 355.453 9.85199 355.672 9.92603 cv
355.891 10.004 356.09 10.094 356.27 10.187 cv
356.445 10.289 356.566 10.371 356.641 10.441 cv
356.707 10.512 356.758 10.57 356.785 10.617 cv
356.809 10.664 356.828 10.727 356.848 10.797 cv
356.859 10.875 356.871 10.961 356.883 11.055 cv
356.887 11.156 356.891 11.277 356.895 11.418 cv
356.891 11.578 356.887 11.711 356.879 11.816 cv
356.867 11.93 356.848 12.016 356.824 12.082 cv
356.797 12.152 356.766 12.203 356.73 12.23 cv
356.691 12.266 356.648 12.281 356.605 12.277 cv
356.523 12.281 356.426 12.234 356.309 12.141 cv
356.188 12.051 356.031 11.949 355.844 11.836 cv
355.652 11.727 355.43 11.625 355.168 11.531 cv
354.902 11.441 354.59 11.398 354.23 11.395 cv
353.828 11.398 353.469 11.48 353.156 11.641 cv
352.84 11.809 352.574 12.043 352.355 12.344 cv
352.133 12.652 351.965 13.02 351.852 13.449 cv
351.734 13.883 351.676 14.367 351.68 14.902 cv
351.676 15.5 351.738 16.016 351.863 16.445 cv
351.984 16.883 352.156 17.238 352.387 17.516 cv
352.609 17.797 352.883 18.004 353.203 18.141 cv
353.52 18.281 353.879 18.352 354.285 18.348 cv
354.645 18.352 354.961 18.309 355.227 18.219 cv
355.492 18.137 355.719 18.043 355.906 17.934 cv
356.094 17.832 356.25 17.738 356.375 17.656 cv
356.496 17.574 356.59 17.531 356.66 17.531 cv
356.711 17.531 356.754 17.543 356.785 17.562 cv
356.816 17.582 356.84 17.621 356.863 17.684 cv
356.879 17.746 356.895 17.836 356.91 17.945 cv
356.918 18.062 356.926 18.211 356.926 18.395 cv
cp
f
365.305 16.109 mo
365.301 16.707 365.223 17.25 365.07 17.734 cv
364.91 18.227 364.676 18.645 364.359 18.996 cv
364.043 19.348 363.645 19.621 363.168 19.812 cv
362.688 20.004 362.129 20.098 361.492 20.102 cv
360.871 20.098 360.332 20.016 359.879 19.844 cv
359.418 19.676 359.039 19.426 358.742 19.098 cv
358.438 18.773 358.215 18.371 358.07 17.891 cv
357.926 17.414 357.855 16.867 357.855 16.25 cv
357.855 15.66 357.934 15.121 358.09 14.629 cv
358.246 14.141 358.484 13.719 358.805 13.367 cv
359.121 13.02 359.516 12.746 359.992 12.551 cv
360.465 12.359 361.023 12.266 361.664 12.262 cv
362.289 12.266 362.828 12.348 363.285 12.516 cv
363.742 12.687 364.121 12.937 364.418 13.262 cv
364.715 13.59 364.938 13.992 365.086 14.469 cv
365.23 14.949 365.301 15.496 365.305 16.109 cv
cp
363.285 16.187 mo
363.281 15.852 363.254 15.535 363.203 15.242 cv
363.145 14.957 363.051 14.707 362.926 14.492 cv
362.793 14.281 362.621 14.113 362.41 13.992 cv
362.191 13.875 361.922 13.816 361.594 13.812 cv
361.305 13.816 361.051 13.871 360.832 13.973 cv
360.613 14.082 360.434 14.238 360.293 14.441 cv
360.152 14.648 360.047 14.895 359.977 15.18 cv
359.906 15.473 359.871 15.801 359.871 16.164 cv
359.871 16.512 359.898 16.828 359.957 17.113 cv
360.012 17.406 360.105 17.656 360.234 17.867 cv
360.359 18.082 360.531 18.246 360.754 18.359 cv
360.969 18.48 361.238 18.539 361.563 18.535 cv
361.855 18.539 362.113 18.484 362.336 18.375 cv
362.551 18.27 362.73 18.117 362.871 17.91 cv
363.012 17.711 363.113 17.465 363.184 17.176 cv
363.246 16.891 363.281 16.562 363.285 16.187 cv
cp
f
373.5 19.656 mo
373.496 19.711 373.48 19.754 373.453 19.793 cv
373.418 19.832 373.367 19.867 373.297 19.891 cv
373.223 19.918 373.121 19.934 372.996 19.949 cv
372.867 19.961 372.711 19.969 372.527 19.969 cv
372.332 19.969 372.172 19.961 372.047 19.949 cv
371.918 19.934 371.816 19.918 371.746 19.891 cv
371.668 19.867 371.617 19.832 371.59 19.793 cv
371.555 19.754 371.539 19.711 371.543 19.656 cv
371.543 15.691 li
371.539 15.355 371.516 15.09 371.469 14.895 cv
371.418 14.703 371.344 14.539 371.254 14.402 cv
371.16 14.266 371.043 14.16 370.895 14.082 cv
370.746 14.008 370.57 13.969 370.375 13.969 cv
370.121 13.969 369.871 14.062 369.617 14.242 cv
369.363 14.426 369.098 14.687 368.824 15.035 cv
368.824 19.656 li
368.82 19.711 368.805 19.754 368.777 19.793 cv
368.742 19.832 368.688 19.867 368.617 19.891 cv
368.539 19.918 368.441 19.934 368.316 19.949 cv
368.191 19.961 368.031 19.969 367.844 19.969 cv
367.648 19.969 367.492 19.961 367.367 19.949 cv
367.242 19.934 367.141 19.918 367.066 19.891 cv
366.988 19.867 366.934 19.832 366.906 19.793 cv
366.871 19.754 366.855 19.711 366.859 19.656 cv
366.859 12.707 li
366.855 12.66 366.871 12.613 366.898 12.57 cv
366.922 12.535 366.969 12.504 367.039 12.473 cv
367.105 12.449 367.191 12.43 367.301 12.414 cv
367.406 12.406 367.539 12.398 367.703 12.395 cv
367.867 12.398 368.004 12.406 368.113 12.414 cv
368.219 12.43 368.305 12.449 368.367 12.473 cv
368.426 12.504 368.469 12.535 368.496 12.57 cv
368.52 12.613 368.531 12.66 368.535 12.707 cv
368.535 13.508 li
368.918 13.098 369.309 12.785 369.707 12.574 cv
370.102 12.367 370.52 12.266 370.953 12.262 cv
371.422 12.266 371.82 12.344 372.148 12.496 cv
372.473 12.656 372.734 12.867 372.934 13.133 cv
373.133 13.402 373.277 13.715 373.367 14.07 cv
373.453 14.43 373.496 14.859 373.5 15.363 cv
cp
f
380.324 17.691 mo
380.32 18.09 380.246 18.437 380.102 18.738 cv
379.953 19.039 379.746 19.293 379.477 19.492 cv
379.203 19.699 378.883 19.848 378.516 19.949 cv
378.148 20.047 377.746 20.098 377.316 20.102 cv
377.051 20.098 376.805 20.078 376.57 20.043 cv
376.336 20 376.125 19.953 375.938 19.895 cv
375.75 19.836 375.594 19.773 375.469 19.711 cv
375.344 19.648 375.25 19.59 375.195 19.535 cv
375.137 19.48 375.094 19.398 375.066 19.281 cv
375.031 19.168 375.016 18.992 375.02 18.762 cv
375.016 18.613 375.023 18.492 375.035 18.398 cv
375.043 18.309 375.059 18.238 375.082 18.18 cv
375.102 18.129 375.125 18.09 375.16 18.07 cv
375.188 18.055 375.227 18.047 375.273 18.043 cv
375.328 18.047 375.414 18.078 375.527 18.141 cv
375.637 18.207 375.773 18.281 375.945 18.355 cv
376.109 18.437 376.305 18.508 376.523 18.574 cv
376.742 18.645 376.992 18.68 377.277 18.676 cv
377.453 18.68 377.609 18.66 377.75 18.621 cv
377.883 18.586 378.004 18.535 378.109 18.465 cv
378.207 18.398 378.281 18.312 378.336 18.207 cv
378.383 18.105 378.41 17.984 378.414 17.848 cv
378.41 17.691 378.363 17.559 378.27 17.449 cv
378.176 17.34 378.047 17.242 377.891 17.156 cv
377.727 17.074 377.547 16.996 377.352 16.922 cv
377.148 16.852 376.945 16.773 376.734 16.68 cv
376.523 16.594 376.316 16.492 376.121 16.375 cv
375.918 16.266 375.738 16.125 375.582 15.957 cv
375.418 15.793 375.293 15.594 375.199 15.355 cv
375.105 15.125 375.059 14.844 375.059 14.512 cv
375.059 14.184 375.121 13.879 375.25 13.598 cv
375.379 13.324 375.566 13.086 375.813 12.887 cv
376.055 12.691 376.352 12.539 376.703 12.426 cv
377.051 12.32 377.445 12.266 377.887 12.262 cv
378.102 12.266 378.313 12.281 378.52 12.309 cv
378.723 12.344 378.91 12.383 379.078 12.426 cv
379.242 12.477 379.383 12.527 379.5 12.578 cv
379.613 12.637 379.695 12.684 379.746 12.719 cv
379.793 12.762 379.828 12.801 379.852 12.836 cv
379.871 12.879 379.883 12.926 379.895 12.977 cv
379.902 13.031 379.914 13.098 379.922 13.176 cv
379.93 13.262 379.934 13.359 379.934 13.477 cv
379.934 13.617 379.93 13.734 379.922 13.82 cv
379.914 13.914 379.898 13.984 379.883 14.031 cv
379.863 14.086 379.84 14.121 379.813 14.137 cv
379.777 14.16 379.742 14.168 379.703 14.164 cv
379.652 14.168 379.578 14.141 379.484 14.082 cv
379.383 14.031 379.262 13.973 379.113 13.906 cv
378.965 13.848 378.793 13.789 378.598 13.73 cv
378.402 13.68 378.18 13.652 377.934 13.648 cv
377.754 13.652 377.602 13.672 377.473 13.703 cv
377.34 13.742 377.23 13.793 377.152 13.859 cv
377.066 13.93 377.004 14.008 376.965 14.098 cv
376.918 14.191 376.898 14.289 376.902 14.391 cv
376.898 14.551 376.949 14.687 377.051 14.793 cv
377.148 14.906 377.277 15 377.441 15.082 cv
377.602 15.168 377.785 15.246 377.992 15.316 cv
378.195 15.391 378.402 15.473 378.613 15.555 cv
378.82 15.645 379.027 15.742 379.238 15.855 cv
379.441 15.969 379.625 16.109 379.785 16.273 cv
379.945 16.441 380.074 16.641 380.176 16.871 cv
380.27 17.105 380.32 17.379 380.324 17.691 cv
cp
f
388.391 19.656 mo
388.387 19.711 388.375 19.754 388.352 19.793 cv
388.324 19.832 388.277 19.867 388.215 19.891 cv
388.148 19.918 388.063 19.934 387.957 19.949 cv
387.852 19.961 387.719 19.969 387.559 19.969 cv
387.383 19.969 387.242 19.961 387.141 19.949 cv
387.031 19.934 386.949 19.918 386.887 19.891 cv
386.824 19.867 386.777 19.832 386.754 19.793 cv
386.723 19.754 386.711 19.711 386.715 19.656 cv
386.715 18.855 li
386.328 19.27 385.938 19.582 385.543 19.789 cv
385.141 19.996 384.73 20.098 384.309 20.102 cv
383.828 20.098 383.426 20.023 383.102 19.867 cv
382.777 19.715 382.516 19.5 382.316 19.23 cv
382.113 18.961 381.969 18.648 381.887 18.289 cv
381.797 17.934 381.754 17.492 381.758 16.961 cv
381.758 12.707 li
381.754 12.66 381.77 12.613 381.801 12.57 cv
381.828 12.535 381.879 12.504 381.957 12.473 cv
382.031 12.449 382.133 12.43 382.262 12.414 cv
382.387 12.406 382.543 12.398 382.734 12.395 cv
382.922 12.398 383.082 12.406 383.207 12.414 cv
383.332 12.43 383.43 12.449 383.508 12.473 cv
383.578 12.504 383.633 12.535 383.668 12.57 cv
383.695 12.613 383.711 12.66 383.715 12.707 cv
383.715 16.633 li
383.711 17 383.734 17.277 383.785 17.469 cv
383.828 17.66 383.898 17.824 384 17.961 cv
384.094 18.102 384.219 18.207 384.367 18.281 cv
384.516 18.359 384.688 18.398 384.883 18.395 cv
385.133 18.398 385.383 18.309 385.637 18.121 cv
385.887 17.941 386.156 17.676 386.441 17.328 cv
386.441 12.707 li
386.441 12.66 386.453 12.613 386.484 12.57 cv
386.508 12.535 386.563 12.504 386.641 12.473 cv
386.715 12.449 386.813 12.43 386.941 12.414 cv
387.063 12.406 387.223 12.398 387.418 12.395 cv
387.609 12.398 387.766 12.406 387.891 12.414 cv
388.012 12.43 388.113 12.449 388.188 12.473 cv
388.258 12.504 388.309 12.535 388.344 12.57 cv
388.371 12.613 388.387 12.66 388.391 12.707 cv
cp
f
401.332 19.656 mo
401.328 19.711 401.313 19.754 401.285 19.793 cv
401.25 19.832 401.199 19.867 401.129 19.891 cv
401.055 19.918 400.953 19.934 400.832 19.949 cv
400.707 19.961 400.551 19.969 400.359 19.969 cv
400.16 19.969 400 19.961 399.875 19.949 cv
399.75 19.934 399.648 19.918 399.574 19.891 cv
399.496 19.867 399.445 19.832 399.418 19.793 cv
399.391 19.754 399.375 19.711 399.379 19.656 cv
399.379 15.535 li
399.375 15.305 399.355 15.09 399.313 14.895 cv
399.266 14.703 399.195 14.539 399.109 14.402 cv
399.016 14.266 398.902 14.16 398.766 14.082 cv
398.625 14.008 398.461 13.969 398.27 13.969 cv
398.035 13.969 397.797 14.062 397.559 14.242 cv
397.32 14.426 397.063 14.687 396.781 15.035 cv
396.781 19.656 li
396.781 19.711 396.766 19.754 396.734 19.793 cv
396.703 19.832 396.648 19.867 396.574 19.891 cv
396.496 19.918 396.395 19.934 396.273 19.949 cv
396.148 19.961 395.996 19.969 395.809 19.969 cv
395.613 19.969 395.453 19.961 395.332 19.949 cv
395.203 19.934 395.102 19.918 395.031 19.891 cv
394.953 19.867 394.902 19.832 394.871 19.793 cv
394.84 19.754 394.824 19.711 394.824 19.656 cv
394.824 15.535 li
394.824 15.305 394.801 15.09 394.758 14.895 cv
394.715 14.703 394.648 14.539 394.563 14.402 cv
394.469 14.266 394.355 14.16 394.219 14.082 cv
394.074 14.008 393.91 13.969 393.727 13.969 cv
393.484 13.969 393.246 14.062 393.008 14.242 cv
392.77 14.426 392.512 14.687 392.238 15.035 cv
392.238 19.656 li
392.234 19.711 392.219 19.754 392.191 19.793 cv
392.156 19.832 392.102 19.867 392.031 19.891 cv
391.953 19.918 391.855 19.934 391.73 19.949 cv
391.605 19.961 391.445 19.969 391.258 19.969 cv
391.063 19.969 390.906 19.961 390.781 19.949 cv
390.656 19.934 390.555 19.918 390.48 19.891 cv
390.402 19.867 390.348 19.832 390.32 19.793 cv
390.285 19.754 390.27 19.711 390.273 19.656 cv
390.273 12.707 li
390.27 12.66 390.285 12.613 390.313 12.57 cv
390.336 12.535 390.383 12.504 390.453 12.473 cv
390.52 12.449 390.605 12.43 390.715 12.414 cv
390.82 12.406 390.953 12.398 391.117 12.395 cv
391.281 12.398 391.418 12.406 391.527 12.414 cv
391.633 12.43 391.719 12.449 391.781 12.473 cv
391.84 12.504 391.883 12.535 391.91 12.57 cv
391.934 12.613 391.945 12.66 391.949 12.707 cv
391.949 13.508 li
392.332 13.098 392.715 12.785 393.098 12.574 cv
393.477 12.367 393.879 12.266 394.297 12.262 cv
394.582 12.266 394.836 12.293 395.066 12.352 cv
395.293 12.414 395.5 12.5 395.68 12.609 cv
395.859 12.723 396.012 12.859 396.141 13.012 cv
396.27 13.168 396.379 13.34 396.469 13.531 cv
396.676 13.309 396.879 13.117 397.082 12.957 cv
397.277 12.797 397.477 12.664 397.672 12.562 cv
397.867 12.461 398.063 12.387 398.258 12.336 cv
398.453 12.289 398.652 12.266 398.855 12.262 cv
399.316 12.266 399.703 12.344 400.023 12.496 cv
400.336 12.656 400.594 12.867 400.789 13.133 cv
400.984 13.402 401.121 13.715 401.207 14.07 cv
401.285 14.43 401.328 14.809 401.332 15.207 cv
cp
f
410.25 16.078 mo
410.25 16.699 410.184 17.258 410.051 17.754 cv
409.918 18.25 409.723 18.672 409.469 19.02 cv
409.215 19.367 408.898 19.637 408.52 19.82 cv
408.137 20.008 407.703 20.098 407.219 20.102 cv
407.012 20.098 406.824 20.078 406.66 20.043 cv
406.488 20 406.324 19.941 406.168 19.863 cv
406.008 19.785 405.852 19.687 405.699 19.562 cv
405.539 19.445 405.379 19.305 405.215 19.141 cv
405.215 22.414 li
405.211 22.461 405.195 22.508 405.168 22.555 cv
405.133 22.594 405.078 22.629 405.008 22.66 cv
404.93 22.684 404.832 22.707 404.707 22.727 cv
404.582 22.738 404.422 22.746 404.234 22.75 cv
404.039 22.746 403.883 22.738 403.758 22.727 cv
403.633 22.707 403.531 22.684 403.457 22.66 cv
403.379 22.629 403.324 22.594 403.297 22.555 cv
403.262 22.508 403.246 22.461 403.25 22.414 cv
403.25 12.707 li
403.246 12.66 403.262 12.613 403.289 12.57 cv
403.313 12.535 403.355 12.504 403.426 12.473 cv
403.488 12.449 403.574 12.43 403.684 12.414 cv
403.785 12.406 403.922 12.398 404.086 12.395 cv
404.242 12.398 404.371 12.406 404.477 12.414 cv
404.582 12.43 404.668 12.449 404.734 12.473 cv
404.797 12.504 404.844 12.535 404.871 12.57 cv
404.895 12.613 404.906 12.66 404.91 12.707 cv
404.91 13.523 li
405.109 13.316 405.309 13.137 405.508 12.977 cv
405.699 12.82 405.898 12.687 406.102 12.578 cv
406.305 12.477 406.512 12.395 406.73 12.34 cv
406.941 12.289 407.172 12.266 407.422 12.262 cv
407.926 12.266 408.359 12.363 408.723 12.562 cv
409.078 12.766 409.371 13.043 409.598 13.387 cv
409.82 13.738 409.984 14.141 410.094 14.602 cv
410.195 15.062 410.25 15.555 410.25 16.078 cv
cp
408.207 16.219 mo
408.203 15.926 408.184 15.645 408.141 15.367 cv
408.094 15.098 408.016 14.855 407.914 14.641 cv
407.805 14.43 407.664 14.258 407.492 14.129 cv
407.316 14.004 407.102 13.941 406.844 13.937 cv
406.711 13.941 406.582 13.961 406.457 13.996 cv
406.328 14.039 406.199 14.102 406.066 14.187 cv
405.934 14.277 405.797 14.391 405.66 14.531 cv
405.516 14.672 405.367 14.848 405.215 15.051 cv
405.215 17.344 li
405.488 17.691 405.75 17.961 406 18.148 cv
406.246 18.34 406.508 18.434 406.781 18.434 cv
407.035 18.434 407.25 18.371 407.434 18.238 cv
407.609 18.113 407.758 17.941 407.871 17.73 cv
407.984 17.52 408.066 17.281 408.125 17.016 cv
408.176 16.75 408.203 16.484 408.207 16.219 cv
cp
f
415.746 18.973 mo
415.746 19.199 415.73 19.375 415.703 19.496 cv
415.672 19.621 415.633 19.707 415.59 19.754 cv
415.539 19.805 415.473 19.848 415.383 19.887 cv
415.289 19.926 415.18 19.957 415.063 19.988 cv
414.938 20.012 414.805 20.035 414.664 20.055 cv
414.52 20.066 414.379 20.074 414.234 20.078 cv
413.844 20.074 413.504 20.023 413.219 19.93 cv
412.934 19.828 412.699 19.68 412.512 19.473 cv
412.324 19.27 412.184 19.012 412.098 18.699 cv
412.004 18.391 411.961 18.02 411.965 17.59 cv
411.965 14.031 li
411.133 14.031 li
411.031 14.035 410.957 13.973 410.906 13.848 cv
410.852 13.727 410.824 13.523 410.828 13.234 cv
410.824 13.086 410.832 12.957 410.848 12.855 cv
410.859 12.754 410.879 12.672 410.906 12.609 cv
410.93 12.551 410.961 12.508 411.004 12.48 cv
411.039 12.457 411.086 12.445 411.141 12.441 cv
411.965 12.441 li
411.965 10.891 li
411.961 10.844 411.977 10.797 412.008 10.75 cv
412.035 10.711 412.086 10.676 412.164 10.645 cv
412.238 10.621 412.34 10.598 412.469 10.582 cv
412.594 10.57 412.75 10.566 412.941 10.562 cv
413.129 10.566 413.289 10.57 413.418 10.582 cv
413.543 10.598 413.645 10.621 413.719 10.645 cv
413.789 10.676 413.84 10.711 413.875 10.75 cv
413.902 10.797 413.918 10.844 413.922 10.891 cv
413.922 12.441 li
415.434 12.441 li
415.484 12.445 415.531 12.457 415.57 12.48 cv
415.609 12.508 415.641 12.551 415.668 12.609 cv
415.691 12.672 415.711 12.754 415.727 12.855 cv
415.738 12.957 415.746 13.086 415.746 13.234 cv
415.746 13.523 415.719 13.727 415.668 13.848 cv
415.613 13.973 415.539 14.035 415.441 14.031 cv
413.922 14.031 li
413.922 17.297 li
413.918 17.676 413.977 17.961 414.102 18.148 cv
414.219 18.34 414.434 18.434 414.738 18.434 cv
414.84 18.434 414.934 18.426 415.02 18.406 cv
415.102 18.391 415.176 18.371 415.242 18.344 cv
415.305 18.324 415.359 18.301 415.406 18.281 cv
415.449 18.266 415.488 18.258 415.527 18.254 cv
415.555 18.258 415.586 18.266 415.617 18.281 cv
415.645 18.301 415.664 18.34 415.684 18.391 cv
415.695 18.449 415.711 18.523 415.727 18.613 cv
415.738 18.711 415.746 18.828 415.746 18.973 cv
cp
f
419.129 19.656 mo
419.125 19.711 419.109 19.754 419.082 19.793 cv
419.047 19.832 418.992 19.867 418.922 19.891 cv
418.844 19.918 418.746 19.934 418.621 19.949 cv
418.496 19.961 418.336 19.969 418.148 19.969 cv
417.953 19.969 417.797 19.961 417.672 19.949 cv
417.547 19.934 417.445 19.918 417.371 19.891 cv
417.293 19.867 417.238 19.832 417.211 19.793 cv
417.176 19.754 417.16 19.711 417.164 19.656 cv
417.164 12.723 li
417.16 12.672 417.176 12.625 417.211 12.586 cv
417.238 12.547 417.293 12.516 417.371 12.484 cv
417.445 12.461 417.547 12.437 417.672 12.418 cv
417.797 12.406 417.953 12.398 418.148 12.395 cv
418.336 12.398 418.496 12.406 418.621 12.418 cv
418.746 12.437 418.844 12.461 418.922 12.484 cv
418.992 12.516 419.047 12.547 419.082 12.586 cv
419.109 12.625 419.125 12.672 419.129 12.723 cv
cp
419.277 10.352 mo
419.277 10.75 419.195 11.023 419.035 11.172 cv
418.871 11.324 418.574 11.398 418.141 11.395 cv
417.695 11.398 417.395 11.324 417.246 11.18 cv
417.09 11.035 417.016 10.773 417.016 10.391 cv
417.016 9.99597 417.094 9.72302 417.254 9.57001 cv
417.41 9.41803 417.711 9.34003 418.156 9.34003 cv
418.59 9.34003 418.887 9.414 419.043 9.56201 cv
419.199 9.711 419.277 9.97699 419.277 10.352 cv
cp
f
428.121 16.109 mo
428.117 16.707 428.039 17.25 427.887 17.734 cv
427.727 18.227 427.492 18.645 427.176 18.996 cv
426.859 19.348 426.461 19.621 425.984 19.812 cv
425.504 20.004 424.945 20.098 424.309 20.102 cv
423.688 20.098 423.148 20.016 422.695 19.844 cv
422.234 19.676 421.855 19.426 421.559 19.098 cv
421.254 18.773 421.031 18.371 420.887 17.891 cv
420.742 17.414 420.672 16.867 420.672 16.25 cv
420.672 15.66 420.75 15.121 420.906 14.629 cv
421.063 14.141 421.301 13.719 421.621 13.367 cv
421.938 13.02 422.332 12.746 422.809 12.551 cv
423.281 12.359 423.84 12.266 424.48 12.262 cv
425.105 12.266 425.645 12.348 426.102 12.516 cv
426.559 12.687 426.938 12.937 427.234 13.262 cv
427.531 13.59 427.754 13.992 427.902 14.469 cv
428.047 14.949 428.117 15.496 428.121 16.109 cv
cp
426.102 16.187 mo
426.098 15.852 426.07 15.535 426.02 15.242 cv
425.961 14.957 425.867 14.707 425.742 14.492 cv
425.609 14.281 425.438 14.113 425.227 13.992 cv
425.008 13.875 424.738 13.816 424.41 13.812 cv
424.121 13.816 423.867 13.871 423.648 13.973 cv
423.43 14.082 423.25 14.238 423.109 14.441 cv
422.969 14.648 422.863 14.895 422.793 15.18 cv
422.723 15.473 422.688 15.801 422.688 16.164 cv
422.688 16.512 422.715 16.828 422.773 17.113 cv
422.828 17.406 422.922 17.656 423.051 17.867 cv
423.176 18.082 423.348 18.246 423.57 18.359 cv
423.785 18.48 424.055 18.539 424.379 18.535 cv
424.672 18.539 424.93 18.484 425.152 18.375 cv
425.367 18.27 425.547 18.117 425.688 17.91 cv
425.828 17.711 425.93 17.465 426 17.176 cv
426.063 16.891 426.098 16.562 426.102 16.187 cv
cp
f
436.367 19.656 mo
436.363 19.711 436.348 19.754 436.32 19.793 cv
436.285 19.832 436.234 19.867 436.164 19.891 cv
436.09 19.918 435.988 19.934 435.863 19.949 cv
435.734 19.961 435.578 19.969 435.395 19.969 cv
435.199 19.969 435.039 19.961 434.914 19.949 cv
434.785 19.934 434.684 19.918 434.613 19.891 cv
434.535 19.867 434.484 19.832 434.457 19.793 cv
434.422 19.754 434.406 19.711 434.41 19.656 cv
434.41 15.691 li
434.406 15.355 434.383 15.09 434.336 14.895 cv
434.285 14.703 434.211 14.539 434.121 14.402 cv
434.027 14.266 433.91 14.16 433.762 14.082 cv
433.613 14.008 433.438 13.969 433.242 13.969 cv
432.988 13.969 432.738 14.062 432.484 14.242 cv
432.23 14.426 431.965 14.687 431.691 15.035 cv
431.691 19.656 li
431.688 19.711 431.672 19.754 431.645 19.793 cv
431.609 19.832 431.555 19.867 431.484 19.891 cv
431.406 19.918 431.309 19.934 431.184 19.949 cv
431.059 19.961 430.898 19.969 430.711 19.969 cv
430.516 19.969 430.359 19.961 430.234 19.949 cv
430.109 19.934 430.008 19.918 429.934 19.891 cv
429.855 19.867 429.801 19.832 429.773 19.793 cv
429.738 19.754 429.723 19.711 429.727 19.656 cv
429.727 12.707 li
429.723 12.66 429.738 12.613 429.766 12.57 cv
429.789 12.535 429.836 12.504 429.906 12.473 cv
429.973 12.449 430.059 12.43 430.168 12.414 cv
430.273 12.406 430.406 12.398 430.57 12.395 cv
430.734 12.398 430.871 12.406 430.98 12.414 cv
431.086 12.43 431.172 12.449 431.234 12.473 cv
431.293 12.504 431.336 12.535 431.363 12.57 cv
431.387 12.613 431.398 12.66 431.402 12.707 cv
431.402 13.508 li
431.785 13.098 432.176 12.785 432.574 12.574 cv
432.969 12.367 433.387 12.266 433.82 12.262 cv
434.289 12.266 434.688 12.344 435.016 12.496 cv
435.34 12.656 435.602 12.867 435.801 13.133 cv
436 13.402 436.145 13.715 436.234 14.07 cv
436.32 14.43 436.363 14.859 436.367 15.363 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
