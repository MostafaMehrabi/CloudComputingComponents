%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: PreparationTimesOfImages-LocalMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:43:05 p.m.
%%BoundingBox: 0 0 619 532
%%HiResBoundingBox: 0 0 618.9601 531.8400
%%CropBox: 0 0 618.9601 531.8400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -531.84 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 531.84 li
618.96 531.84 li
618.96 0 li
cp
clp
gsave
0 531.84 mo
619 531.84 li
619 -.160034 li
0 -.160034 li
cp
clp
0 -6.10352e-5 mo
618.961 -6.10352e-5 li
618.961 531.84 li
0 531.84 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
51.602 465.359 mo
603.84 465.359 li
51.602 423.602 mo
603.84 423.602 li
51.602 381.84 mo
603.84 381.84 li
51.602 340.078 mo
603.84 340.078 li
51.602 298.32 mo
603.84 298.32 li
51.602 256.441 mo
603.84 256.441 li
51.602 214.68 mo
603.84 214.68 li
51.602 172.922 mo
603.84 172.922 li
51.602 131.16 mo
603.84 131.16 li
51.602 89.398 mo
603.84 89.398 li
51.602 47.641 mo
603.84 47.641 li
.135805 .104005 .108583 0 cmyk
@
51.602 444.481 mo
603.84 444.481 li
51.602 402.719 mo
603.84 402.719 li
51.602 360.961 mo
603.84 360.961 li
51.602 319.199 mo
603.84 319.199 li
51.602 277.32 mo
603.84 277.32 li
51.602 235.559 mo
603.84 235.559 li
51.602 193.801 mo
603.84 193.801 li
51.602 152.039 mo
603.84 152.039 li
51.602 110.281 mo
603.84 110.281 li
51.602 68.52 mo
603.84 68.52 li
51.602 26.641 mo
603.84 26.641 li
.326574 .281529 .277562 0 cmyk
@
86.039 26.641 mo
86.039 486.238 li
155.16 26.641 mo
155.16 486.238 li
224.16 26.641 mo
224.16 486.238 li
293.16 26.641 mo
293.16 486.238 li
362.16 26.641 mo
362.16 486.238 li
431.281 26.641 mo
431.281 486.238 li
500.281 26.641 mo
500.281 486.238 li
569.281 26.641 mo
569.281 486.238 li
.175235 .144778 .143648 0 cmyk
@
51.602 26.641 mo
51.602 486.238 li
120.602 26.641 mo
120.602 486.238 li
189.602 26.641 mo
189.602 486.238 li
258.719 26.641 mo
258.719 486.238 li
327.719 26.641 mo
327.719 486.238 li
396.719 26.641 mo
396.719 486.238 li
465.719 26.641 mo
465.719 486.238 li
534.719 26.641 mo
534.719 486.238 li
603.84 26.641 mo
603.84 486.238 li
.326574 .281529 .277562 0 cmyk
@
31.559 477 mo
38.641 477 li
38.641 494.039 li
31.559 494.039 li
cp
0 0 0 0 cmyk
ef
31.559 435.121 mo
38.641 435.121 li
38.641 452.281 li
31.559 452.281 li
cp
ef
31.559 393.359 mo
38.641 393.359 li
38.641 410.519 li
31.559 410.519 li
cp
ef
31.559 351.602 mo
38.641 351.602 li
38.641 368.762 li
31.559 368.762 li
cp
ef
31.559 309.84 mo
38.641 309.84 li
38.641 326.879 li
31.559 326.879 li
cp
ef
24.359 268.078 mo
38.64 268.078 li
38.64 285.121 li
24.359 285.121 li
cp
ef
24.359 226.32 mo
38.64 226.32 li
38.64 243.359 li
24.359 243.359 li
cp
ef
24.359 184.441 mo
38.64 184.441 li
38.64 201.601 li
24.359 201.601 li
cp
ef
24.359 142.68 mo
38.64 142.68 li
38.64 159.84 li
24.359 159.84 li
cp
ef
24.359 100.922 mo
38.64 100.922 li
38.64 118.078 li
24.359 118.078 li
cp
ef
24.359 59.16 mo
38.64 59.16 li
38.64 76.199 li
24.359 76.199 li
cp
ef
24.359 17.3979 mo
38.64 17.3979 li
38.64 34.4409 li
24.359 34.4409 li
cp
ef
.96 lw
51.602 486.238 mo
603.84 486.238 li
.369879 .299321 .304356 .000976577 cmyk
@
51.602 486.238 mo
51.602 490.68 li
120.602 486.238 mo
120.602 490.68 li
189.602 486.238 mo
189.602 490.68 li
258.719 486.238 mo
258.719 490.68 li
327.719 486.238 mo
327.719 490.68 li
396.719 486.238 mo
396.719 490.68 li
465.719 486.238 mo
465.719 490.68 li
534.719 486.238 mo
534.719 490.68 li
603.84 486.238 mo
603.84 490.68 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
1 lc
51.602 45 mo
120.602 135.359 li
189.602 129.238 li
258.719 125.762 li
327.719 110.641 li
396.719 110.879 li
465.719 109.801 li
534.719 110.398 li
603.84 109.199 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
56.531 49.988 mo
46.449 39.91 li
46.449 49.988 mo
56.531 39.91 li
.62829 .284672 0 0 cmyk
@
125.648 140.352 mo
115.57 130.27 li
115.57 140.352 mo
125.648 130.27 li
@
194.648 134.231 mo
184.57 124.148 li
184.57 134.231 mo
194.648 124.148 li
@
263.648 130.629 mo
253.57 120.551 li
253.57 130.629 mo
263.648 120.551 li
@
332.648 115.512 mo
322.57 105.43 li
322.57 115.512 mo
332.648 105.43 li
@
401.77 115.75 mo
391.691 105.672 li
391.691 115.75 mo
401.77 105.672 li
@
470.77 114.672 mo
460.691 104.59 li
460.691 114.672 mo
470.77 104.59 li
@
539.77 115.391 mo
529.691 105.309 li
529.691 115.391 mo
539.77 105.309 li
@
608.77 114.191 mo
598.691 104.109 li
598.691 114.191 mo
608.77 104.109 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
51.602 261.961 mo
120.602 334.559 li
189.602 307.078 li
258.719 296.641 li
327.719 296.398 li
396.719 296.16 li
465.719 296.398 li
534.719 296.16 li
603.84 295.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
56.531 266.828 mo
46.449 256.75 li
46.449 266.828 mo
56.531 256.75 li
.0321965 .622736 .922606 .000579843 cmyk
@
125.648 339.551 mo
115.57 329.469 li
115.57 339.551 mo
125.648 329.469 li
@
194.648 311.949 mo
184.57 301.871 li
184.57 311.949 mo
194.648 301.871 li
@
263.648 301.512 mo
253.57 291.43 li
253.57 301.512 mo
263.648 291.43 li
@
332.648 301.27 mo
322.57 291.191 li
322.57 301.27 mo
332.648 291.191 li
@
401.77 301.148 mo
391.691 291.07 li
391.691 301.148 mo
401.77 291.07 li
@
470.77 301.27 mo
460.691 291.191 li
460.691 301.27 mo
470.77 291.191 li
@
539.77 301.148 mo
529.691 291.07 li
529.691 301.148 mo
539.77 291.07 li
@
608.77 300.672 mo
598.691 290.59 li
598.691 300.672 mo
608.77 290.59 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
51.602 334.922 mo
120.602 363.48 li
189.602 342 li
258.719 340.441 li
327.719 335.16 li
396.719 334.922 li
534.719 334.68 li
603.84 334.68 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
56.531 339.91 mo
46.449 329.828 li
46.449 339.91 mo
56.531 329.828 li
.621118 .109194 .980743 .0040589 cmyk
@
125.648 368.469 mo
115.57 358.391 li
115.57 368.469 mo
125.648 358.391 li
@
194.648 346.988 mo
184.57 336.91 li
184.57 346.988 mo
194.648 336.91 li
@
263.648 345.43 mo
253.57 335.352 li
253.57 345.43 mo
263.648 335.352 li
@
332.648 340.148 mo
322.57 330.07 li
322.57 340.148 mo
332.648 330.07 li
@
401.77 339.91 mo
391.691 329.828 li
391.691 339.91 mo
401.77 329.828 li
@
470.77 339.789 mo
460.691 329.711 li
460.691 339.789 mo
470.77 329.711 li
@
539.77 339.551 mo
529.691 329.469 li
529.691 339.551 mo
539.77 329.469 li
@
608.77 339.672 mo
598.691 329.59 li
598.691 339.672 mo
608.77 329.59 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
51.602 395.762 mo
120.602 452.039 li
189.602 469.32 li
258.719 447 li
327.719 469.801 li
396.719 447.121 li
465.719 466.32 li
534.719 452.641 li
603.84 466.199 li
0 .993988 1 0 cmyk
@
grestore
56.531 400.75 mo
46.449 390.672 li
46.449 400.75 mo
56.531 390.672 li
0 .993988 1 0 cmyk
@
125.648 457.031 mo
115.57 446.949 li
115.57 457.031 mo
125.648 446.949 li
@
194.648 474.191 mo
184.57 464.109 li
184.57 474.191 mo
194.648 464.109 li
@
263.648 451.871 mo
253.57 441.789 li
253.57 451.871 mo
263.648 441.789 li
@
332.648 474.789 mo
322.57 464.711 li
322.57 474.789 mo
332.648 464.711 li
@
401.77 452.109 mo
391.691 442.031 li
391.691 452.109 mo
401.77 442.031 li
@
470.77 471.191 mo
460.691 461.109 li
460.691 471.191 mo
470.77 461.109 li
@
539.77 457.512 mo
529.691 447.43 li
529.691 457.512 mo
539.77 447.43 li
@
608.77 471.07 mo
598.691 460.988 li
598.691 471.07 mo
608.77 460.988 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
51.602 397.199 mo
120.602 453 li
189.602 469.32 li
258.719 449.52 li
327.719 438.602 li
396.719 462.48 li
465.719 451.801 li
534.719 465.84 li
603.84 459.602 li
.62829 .284672 0 0 cmyk
@
grestore
56.531 402.191 mo
46.449 392.109 li
46.449 402.191 mo
56.531 392.109 li
.62829 .284672 0 0 cmyk
@
125.648 457.871 mo
115.57 447.789 li
115.57 457.871 mo
125.648 447.789 li
@
194.648 474.309 mo
184.57 464.231 li
184.57 474.309 mo
194.648 464.231 li
@
263.648 454.512 mo
253.57 444.43 li
253.57 454.512 mo
263.648 444.43 li
@
332.648 443.469 mo
322.57 433.391 li
322.57 443.469 mo
332.648 433.391 li
@
401.77 467.469 mo
391.691 457.391 li
391.691 467.469 mo
401.77 457.391 li
@
470.77 456.789 mo
460.691 446.711 li
460.691 456.789 mo
470.77 446.711 li
@
539.77 470.828 mo
529.691 460.75 li
529.691 470.828 mo
539.77 460.75 li
@
608.77 464.469 mo
598.691 454.391 li
598.691 464.469 mo
608.77 454.391 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
51.602 395.762 mo
120.602 452.641 li
189.602 469.32 li
258.719 466.922 li
327.719 453.961 li
396.719 465.84 li
465.719 462.238 li
534.719 455.039 li
603.84 465.719 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
56.531 400.629 mo
46.449 390.551 li
46.449 400.629 mo
56.531 390.551 li
.0321965 .622736 .922606 .000579843 cmyk
@
125.648 457.512 mo
115.57 447.43 li
115.57 457.512 mo
125.648 447.43 li
@
194.648 474.191 mo
184.57 464.109 li
184.57 474.191 mo
194.648 464.109 li
@
263.648 471.789 mo
253.57 461.711 li
253.57 471.789 mo
263.648 461.711 li
@
332.648 458.828 mo
322.57 448.75 li
322.57 458.828 mo
332.648 448.75 li
@
401.77 470.711 mo
391.691 460.629 li
391.691 470.711 mo
401.77 460.629 li
@
470.77 467.231 mo
460.691 457.148 li
460.691 467.231 mo
470.77 457.148 li
@
539.77 459.91 mo
529.691 449.828 li
529.691 459.91 mo
539.77 449.828 li
@
608.77 470.711 mo
598.691 460.629 li
598.691 470.711 mo
608.77 460.629 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
51.602 395.641 mo
120.602 453.121 li
189.602 469.32 li
258.719 462.84 li
327.719 455.762 li
396.719 450.121 li
465.719 465.121 li
534.719 462.238 li
603.84 455.762 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
56.531 400.512 mo
46.449 390.43 li
46.449 400.512 mo
56.531 390.43 li
.621118 .109194 .980743 .0040589 cmyk
@
125.648 457.988 mo
115.57 447.91 li
115.57 457.988 mo
125.648 447.91 li
@
194.648 474.309 mo
184.57 464.231 li
184.57 474.309 mo
194.648 464.231 li
@
263.648 467.711 mo
253.57 457.629 li
253.57 467.711 mo
263.648 457.629 li
@
332.648 460.75 mo
322.57 450.672 li
322.57 460.75 mo
332.648 450.672 li
@
401.77 454.988 mo
391.691 444.91 li
391.691 454.988 mo
401.77 444.91 li
@
470.77 469.988 mo
460.691 459.91 li
460.691 469.988 mo
470.77 459.91 li
@
539.77 467.231 mo
529.691 457.148 li
529.691 467.231 mo
539.77 457.148 li
@
608.77 460.75 mo
598.691 450.672 li
598.691 460.75 mo
608.77 450.672 li
@
gsave
51.48 26.641 mo
604.441 26.641 li
604.441 486.961 li
51.48 486.961 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
51.602 408.719 mo
120.602 446.16 li
189.602 469.32 li
258.719 468.719 li
327.719 465 li
396.719 458.398 li
465.719 465.84 li
534.719 464.52 li
603.84 462.84 li
0 .993988 1 0 cmyk
@
grestore
56.531 413.711 mo
46.449 403.629 li
46.449 413.711 mo
56.531 403.629 li
0 .993988 1 0 cmyk
@
125.648 451.148 mo
115.57 441.07 li
115.57 451.148 mo
125.648 441.07 li
@
194.648 474.309 mo
184.57 464.231 li
184.57 474.309 mo
194.648 464.231 li
@
263.648 473.59 mo
253.57 463.512 li
253.57 473.59 mo
263.648 463.512 li
@
332.648 469.871 mo
322.57 459.789 li
322.57 469.871 mo
332.648 459.789 li
@
401.77 463.27 mo
391.691 453.191 li
391.691 463.27 mo
401.77 453.191 li
@
470.77 470.828 mo
460.691 460.75 li
460.691 470.828 mo
470.77 460.75 li
@
539.77 469.512 mo
529.691 459.43 li
529.691 469.512 mo
539.77 459.43 li
@
608.77 467.828 mo
598.691 457.75 li
598.691 467.828 mo
608.77 457.75 li
@
31.512 476.91 mo
38.606 476.91 li
38.606 494 li
31.512 494 li
cp
0 0 0 0 cmyk
ef
38.168 485.863 mo
38.164 486.547 38.113 487.168 38.008 487.73 cv
37.898 488.293 37.719 488.777 37.473 489.18 cv
37.219 489.586 36.891 489.898 36.492 490.117 cv
36.086 490.34 35.594 490.449 35.008 490.449 cv
34.449 490.449 33.977 490.352 33.598 490.152 cv
33.215 489.957 32.91 489.664 32.676 489.277 cv
32.441 488.891 32.273 488.418 32.18 487.852 cv
32.078 487.289 32.031 486.641 32.031 485.906 cv
32.031 485.234 32.086 484.613 32.195 484.047 cv
32.305 483.484 32.48 483 32.73 482.594 cv
32.973 482.191 33.297 481.879 33.703 481.652 cv
34.102 481.434 34.598 481.32 35.188 481.32 cv
35.746 481.32 36.219 481.422 36.602 481.617 cv
36.984 481.82 37.289 482.113 37.523 482.496 cv
37.754 482.887 37.922 483.359 38.02 483.922 cv
38.117 484.484 38.164 485.133 38.168 485.863 cv
cp
36.961 485.945 mo
36.957 485.504 36.941 485.105 36.914 484.754 cv
36.879 484.402 36.832 484.094 36.773 483.824 cv
36.707 483.555 36.629 483.324 36.531 483.129 cv
36.434 482.937 36.316 482.777 36.18 482.648 cv
36.039 482.523 35.879 482.43 35.707 482.371 cv
35.527 482.316 35.332 482.289 35.117 482.285 cv
34.727 482.289 34.41 482.379 34.172 482.562 cv
33.926 482.746 33.734 483 33.598 483.316 cv
33.457 483.637 33.363 484.008 33.313 484.437 cv
33.262 484.867 33.238 485.332 33.238 485.824 cv
33.238 486.488 33.27 487.051 33.34 487.512 cv
33.406 487.98 33.516 488.359 33.668 488.648 cv
33.813 488.945 34.004 489.156 34.234 489.285 cv
34.465 489.422 34.746 489.488 35.078 489.484 cv
35.332 489.488 35.555 489.449 35.75 489.363 cv
35.941 489.285 36.109 489.164 36.25 489.008 cv
36.391 488.855 36.504 488.672 36.598 488.457 cv
36.684 488.242 36.758 488.004 36.816 487.742 cv
36.867 487.484 36.906 487.203 36.93 486.898 cv
36.949 486.594 36.957 486.277 36.961 485.945 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
31.512 435.129 mo
38.606 435.129 li
38.606 452.219 li
31.512 452.219 li
cp
0 0 0 0 cmyk
ef
37.875 448.031 mo
37.871 448.117 37.867 448.191 37.855 448.254 cv
37.844 448.32 37.828 448.375 37.809 448.414 cv
37.785 448.461 37.758 448.492 37.727 448.508 cv
37.691 448.531 37.652 448.539 37.613 448.539 cv
32.711 448.539 li
32.648 448.539 32.59 448.531 32.543 448.516 cv
32.492 448.5 32.453 448.477 32.418 448.437 cv
32.383 448.406 32.355 448.352 32.344 448.281 cv
32.324 448.211 32.316 448.125 32.32 448.023 cv
32.316 447.934 32.32 447.855 32.328 447.785 cv
32.332 447.719 32.348 447.66 32.375 447.605 cv
32.398 447.555 32.43 447.5 32.465 447.445 cv
32.5 447.395 32.543 447.34 32.602 447.277 cv
34.375 445.453 li
34.785 445.035 35.113 444.66 35.363 444.324 cv
35.609 443.996 35.801 443.691 35.934 443.414 cv
36.066 443.141 36.152 442.891 36.199 442.664 cv
36.238 442.441 36.262 442.23 36.262 442.035 cv
36.262 441.84 36.227 441.656 36.16 441.477 cv
36.094 441.305 36 441.148 35.875 441.012 cv
35.75 440.883 35.594 440.777 35.406 440.695 cv
35.219 440.621 35 440.582 34.754 440.578 cv
34.465 440.582 34.207 440.621 33.98 440.695 cv
33.75 440.777 33.551 440.863 33.379 440.949 cv
33.207 441.043 33.063 441.125 32.945 441.203 cv
32.828 441.281 32.742 441.32 32.691 441.32 cv
32.656 441.32 32.625 441.312 32.602 441.293 cv
32.57 441.277 32.551 441.246 32.535 441.203 cv
32.52 441.164 32.504 441.109 32.496 441.039 cv
32.484 440.973 32.48 440.891 32.484 440.793 cv
32.48 440.727 32.484 440.668 32.492 440.617 cv
32.496 440.566 32.504 440.523 32.516 440.484 cv
32.523 440.449 32.539 440.414 32.559 440.383 cv
32.578 440.352 32.613 440.312 32.672 440.262 cv
32.723 440.215 32.816 440.148 32.953 440.066 cv
33.086 439.984 33.258 439.906 33.461 439.824 cv
33.664 439.746 33.887 439.676 34.133 439.621 cv
34.375 439.566 34.633 439.539 34.906 439.539 cv
35.332 439.539 35.707 439.602 36.031 439.723 cv
36.352 439.844 36.617 440.008 36.832 440.219 cv
37.043 440.43 37.203 440.676 37.309 440.949 cv
37.414 441.23 37.469 441.527 37.469 441.84 cv
37.469 442.129 37.441 442.41 37.391 442.687 cv
37.34 442.973 37.234 443.277 37.074 443.602 cv
36.91 443.93 36.676 444.293 36.371 444.691 cv
36.063 445.094 35.656 445.555 35.152 446.07 cv
33.746 447.539 li
37.605 447.539 li
37.637 447.543 37.672 447.555 37.711 447.57 cv
37.742 447.594 37.773 447.625 37.801 447.664 cv
37.824 447.707 37.844 447.758 37.855 447.816 cv
37.867 447.883 37.871 447.953 37.875 448.031 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
31.512 393.352 mo
38.606 393.352 li
38.606 410.442 li
31.512 410.442 li
cp
0 0 0 0 cmyk
ef
38.25 404.227 mo
38.246 404.379 38.223 404.5 38.18 404.586 cv
38.133 404.676 38.07 404.719 37.988 404.715 cv
36.988 404.715 li
36.988 406.578 li
36.988 406.617 36.977 406.648 36.961 406.672 cv
36.938 406.699 36.906 406.719 36.863 406.738 cv
36.813 406.754 36.75 406.766 36.68 406.777 cv
36.602 406.785 36.508 406.789 36.391 406.793 cv
36.273 406.789 36.176 406.785 36.105 406.777 cv
36.027 406.766 35.969 406.754 35.926 406.738 cv
35.879 406.719 35.848 406.699 35.832 406.672 cv
35.813 406.648 35.805 406.617 35.809 406.578 cv
35.809 404.715 li
32.18 404.715 li
32.121 404.719 32.078 404.711 32.043 404.695 cv
32.008 404.684 31.973 404.656 31.945 404.617 cv
31.914 404.582 31.895 404.531 31.883 404.461 cv
31.871 404.395 31.867 404.305 31.867 404.191 cv
31.867 404.109 31.867 404.031 31.875 403.961 cv
31.875 403.891 31.887 403.828 31.902 403.773 cv
31.914 403.719 31.93 403.664 31.957 403.609 cv
31.977 403.555 32.004 403.5 32.039 403.437 cv
35.199 398.051 li
35.219 398.016 35.254 397.984 35.301 397.957 cv
35.344 397.93 35.398 397.906 35.473 397.887 cv
35.539 397.871 35.625 397.859 35.73 397.848 cv
35.832 397.844 35.953 397.84 36.094 397.836 cv
36.242 397.84 36.379 397.844 36.496 397.855 cv
36.609 397.867 36.699 397.883 36.773 397.898 cv
36.84 397.918 36.895 397.941 36.934 397.973 cv
36.969 398.004 36.988 398.039 36.988 398.078 cv
36.988 403.742 li
37.988 403.742 li
38.063 403.746 38.125 403.785 38.176 403.863 cv
38.223 403.945 38.246 404.066 38.25 404.227 cv
cp
35.809 398.875 mo
35.797 398.875 li
32.945 403.742 li
35.809 403.742 li
cp
.629236 .549432 .540154 .282963 cmyk
f
31.512 351.57 mo
38.606 351.57 li
38.606 368.66 li
31.512 368.66 li
cp
0 0 0 0 cmyk
ef
38.102 362.098 mo
38.102 362.488 38.039 362.867 37.922 363.227 cv
37.797 363.594 37.613 363.91 37.371 364.184 cv
37.121 364.461 36.809 364.684 36.434 364.848 cv
36.051 365.016 35.605 365.098 35.09 365.098 cv
34.719 365.098 34.391 365.055 34.109 364.961 cv
33.824 364.875 33.578 364.742 33.367 364.57 cv
33.156 364.402 32.98 364.195 32.844 363.949 cv
32.703 363.703 32.59 363.422 32.508 363.105 cv
32.422 362.793 32.363 362.449 32.328 362.07 cv
32.289 361.699 32.27 361.297 32.273 360.863 cv
32.27 360.484 32.289 360.102 32.332 359.711 cv
32.371 359.328 32.445 358.953 32.551 358.586 cv
32.656 358.227 32.801 357.887 32.98 357.57 cv
33.16 357.254 33.387 356.977 33.66 356.742 cv
33.934 356.508 34.258 356.32 34.637 356.18 cv
35.016 356.043 35.457 355.977 35.961 355.973 cv
36.129 355.977 36.301 355.984 36.473 356.004 cv
36.645 356.027 36.805 356.059 36.953 356.09 cv
37.102 356.129 37.223 356.164 37.324 356.203 cv
37.422 356.242 37.488 356.277 37.523 356.301 cv
37.551 356.328 37.574 356.355 37.594 356.383 cv
37.609 356.414 37.625 356.445 37.633 356.48 cv
37.641 356.516 37.645 356.555 37.652 356.598 cv
37.652 356.641 37.656 356.695 37.66 356.758 cv
37.656 356.844 37.656 356.914 37.656 356.969 cv
37.652 357.031 37.641 357.078 37.629 357.113 cv
37.609 357.152 37.59 357.18 37.566 357.195 cv
37.539 357.215 37.508 357.223 37.469 357.223 cv
37.418 357.223 37.348 357.207 37.262 357.176 cv
37.172 357.145 37.066 357.109 36.945 357.066 cv
36.82 357.031 36.672 356.996 36.496 356.961 cv
36.32 356.934 36.117 356.918 35.887 356.914 cv
35.457 356.918 35.09 357.004 34.785 357.176 cv
34.48 357.348 34.23 357.582 34.035 357.875 cv
33.84 358.168 33.695 358.508 33.605 358.891 cv
33.508 359.281 33.453 359.684 33.445 360.102 cv
33.563 360.035 33.699 359.969 33.848 359.898 cv
33.996 359.832 34.156 359.77 34.332 359.711 cv
34.508 359.66 34.695 359.613 34.891 359.578 cv
35.086 359.547 35.297 359.531 35.523 359.527 cv
36 359.531 36.402 359.598 36.734 359.723 cv
37.063 359.855 37.328 360.035 37.535 360.266 cv
37.734 360.496 37.879 360.766 37.969 361.078 cv
38.055 361.391 38.102 361.73 38.102 362.098 cv
cp
36.906 362.207 mo
36.906 361.945 36.879 361.703 36.828 361.484 cv
36.773 361.27 36.684 361.086 36.563 360.93 cv
36.438 360.781 36.273 360.664 36.07 360.582 cv
35.859 360.5 35.605 360.457 35.309 360.457 cv
35.137 360.457 34.969 360.473 34.801 360.504 cv
34.629 360.535 34.465 360.578 34.309 360.625 cv
34.148 360.68 34 360.742 33.859 360.812 cv
33.715 360.887 33.582 360.961 33.465 361.039 cv
33.461 361.633 33.5 362.129 33.578 362.523 cv
33.652 362.922 33.762 363.238 33.906 363.477 cv
34.051 363.719 34.23 363.891 34.445 363.992 cv
34.66 364.098 34.91 364.148 35.199 364.145 cv
35.488 364.148 35.742 364.094 35.957 363.98 cv
36.172 363.875 36.348 363.727 36.492 363.539 cv
36.633 363.355 36.738 363.148 36.805 362.918 cv
36.871 362.687 36.906 362.453 36.906 362.207 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
31.512 309.789 mo
38.606 309.789 li
38.606 326.879 li
31.512 326.879 li
cp
0 0 0 0 cmyk
ef
38.09 320.898 mo
38.09 321.289 38.02 321.629 37.883 321.926 cv
37.746 322.227 37.547 322.48 37.289 322.687 cv
37.027 322.895 36.711 323.051 36.332 323.152 cv
35.949 323.258 35.512 323.309 35.027 323.309 cv
34.566 323.309 34.156 323.262 33.797 323.168 cv
33.434 323.074 33.129 322.934 32.879 322.742 cv
32.625 322.555 32.434 322.324 32.301 322.047 cv
32.168 321.773 32.102 321.457 32.102 321.105 cv
32.102 320.828 32.145 320.574 32.238 320.34 cv
32.324 320.109 32.457 319.895 32.633 319.691 cv
32.801 319.496 33.012 319.309 33.27 319.137 cv
33.52 318.965 33.805 318.805 34.121 318.648 cv
33.844 318.508 33.602 318.355 33.395 318.199 cv
33.18 318.043 33 317.871 32.855 317.684 cv
32.707 317.5 32.598 317.305 32.523 317.09 cv
32.445 316.883 32.406 316.652 32.41 316.402 cv
32.406 316.094 32.461 315.801 32.578 315.527 cv
32.688 315.254 32.859 315.02 33.086 314.816 cv
33.313 314.617 33.598 314.457 33.949 314.34 cv
34.297 314.227 34.707 314.168 35.18 314.164 cv
35.625 314.168 36.012 314.223 36.34 314.324 cv
36.664 314.434 36.938 314.578 37.152 314.766 cv
37.363 314.953 37.52 315.172 37.621 315.422 cv
37.723 315.672 37.773 315.941 37.773 316.23 cv
37.773 316.465 37.734 316.691 37.66 316.906 cv
37.582 317.121 37.473 317.324 37.328 317.516 cv
37.18 317.707 37 317.887 36.789 318.055 cv
36.574 318.223 36.328 318.379 36.059 318.523 cv
36.379 318.687 36.668 318.852 36.926 319.02 cv
37.176 319.191 37.391 319.375 37.566 319.566 cv
37.734 319.762 37.863 319.969 37.957 320.184 cv
38.043 320.402 38.09 320.641 38.09 320.898 cv
cp
36.605 316.34 mo
36.602 316.152 36.566 315.977 36.504 315.82 cv
36.434 315.664 36.34 315.531 36.215 315.422 cv
36.086 315.312 35.926 315.23 35.738 315.168 cv
35.547 315.113 35.332 315.082 35.09 315.082 cv
34.594 315.082 34.219 315.195 33.965 315.422 cv
33.711 315.648 33.582 315.957 33.586 316.34 cv
33.582 316.523 33.613 316.687 33.676 316.84 cv
33.734 316.992 33.832 317.137 33.965 317.273 cv
34.098 317.414 34.262 317.551 34.461 317.676 cv
34.66 317.809 34.898 317.945 35.172 318.086 cv
35.633 317.852 35.984 317.586 36.234 317.297 cv
36.477 317.008 36.602 316.691 36.605 316.34 cv
cp
36.895 321.023 mo
36.895 320.812 36.855 320.621 36.777 320.449 cv
36.699 320.277 36.578 320.117 36.422 319.969 cv
36.262 319.82 36.066 319.68 35.832 319.539 cv
35.594 319.402 35.32 319.254 35.016 319.102 cv
34.723 319.242 34.469 319.387 34.254 319.527 cv
34.035 319.672 33.859 319.816 33.719 319.965 cv
33.578 320.117 33.473 320.277 33.402 320.445 cv
33.332 320.613 33.297 320.797 33.297 320.996 cv
33.297 321.441 33.449 321.785 33.754 322.027 cv
34.059 322.273 34.512 322.395 35.117 322.391 cv
35.699 322.395 36.141 322.273 36.445 322.023 cv
36.742 321.781 36.895 321.445 36.895 321.023 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
24.422 268.012 mo
38.61 268.012 li
38.61 285.102 li
24.422 285.102 li
cp
0 0 0 0 cmyk
ef
30.785 280.914 mo
30.781 281.004 30.773 281.074 30.762 281.133 cv
30.746 281.195 30.727 281.246 30.707 281.277 cv
30.684 281.316 30.66 281.34 30.629 281.355 cv
30.598 281.371 30.566 281.379 30.539 281.379 cv
25.902 281.379 li
25.867 281.379 25.84 281.371 25.813 281.355 cv
25.785 281.34 25.758 281.316 25.734 281.277 cv
25.707 281.246 25.688 281.195 25.676 281.133 cv
25.66 281.074 25.652 281.004 25.656 280.914 cv
25.652 280.836 25.66 280.762 25.676 280.699 cv
25.688 280.641 25.703 280.594 25.727 280.555 cv
25.742 280.52 25.77 280.488 25.801 280.465 cv
25.832 280.445 25.863 280.437 25.902 280.434 cv
27.754 280.434 li
27.754 273.687 li
26.039 274.707 li
25.949 274.758 25.879 274.785 25.832 274.793 cv
25.777 274.801 25.734 274.793 25.703 274.762 cv
25.668 274.734 25.648 274.684 25.637 274.613 cv
25.625 274.547 25.617 274.461 25.621 274.352 cv
25.617 274.277 25.621 274.211 25.633 274.152 cv
25.637 274.102 25.648 274.055 25.664 274.016 cv
25.676 273.98 25.695 273.949 25.719 273.922 cv
25.742 273.895 25.773 273.867 25.82 273.84 cv
27.863 272.527 li
27.879 272.516 27.898 272.504 27.93 272.496 cv
27.953 272.488 27.988 272.48 28.035 272.469 cv
28.074 272.461 28.125 272.453 28.18 272.449 cv
28.234 272.449 28.301 272.449 28.387 272.445 cv
28.492 272.449 28.586 272.453 28.66 272.461 cv
28.73 272.469 28.785 272.484 28.832 272.5 cv
28.871 272.52 28.898 272.539 28.914 272.562 cv
28.922 272.59 28.93 272.613 28.934 272.637 cv
28.934 280.434 li
30.539 280.434 li
30.574 280.437 30.609 280.445 30.641 280.465 cv
30.672 280.488 30.695 280.52 30.719 280.555 cv
30.734 280.594 30.75 280.641 30.766 280.699 cv
30.773 280.762 30.781 280.836 30.785 280.914 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.141 276.922 mo
38.137 277.605 38.086 278.227 37.98 278.789 cv
37.871 279.352 37.691 279.836 37.445 280.238 cv
37.191 280.645 36.863 280.957 36.465 281.176 cv
36.059 281.398 35.566 281.508 34.98 281.508 cv
34.422 281.508 33.949 281.41 33.57 281.211 cv
33.188 281.016 32.883 280.723 32.648 280.336 cv
32.414 279.949 32.246 279.477 32.152 278.91 cv
32.051 278.348 32.004 277.699 32.004 276.965 cv
32.004 276.293 32.059 275.672 32.168 275.105 cv
32.277 274.543 32.453 274.059 32.703 273.652 cv
32.945 273.25 33.27 272.937 33.676 272.711 cv
34.074 272.492 34.57 272.379 35.16 272.379 cv
35.719 272.379 36.191 272.48 36.574 272.676 cv
36.957 272.879 37.262 273.172 37.496 273.555 cv
37.727 273.945 37.895 274.418 37.992 274.98 cv
38.09 275.543 38.137 276.191 38.141 276.922 cv
cp
36.934 277.004 mo
36.93 276.562 36.914 276.164 36.887 275.812 cv
36.852 275.461 36.805 275.152 36.746 274.883 cv
36.68 274.613 36.602 274.383 36.504 274.187 cv
36.406 273.996 36.289 273.836 36.152 273.707 cv
36.012 273.582 35.852 273.488 35.68 273.43 cv
35.5 273.375 35.305 273.348 35.09 273.344 cv
34.699 273.348 34.383 273.437 34.145 273.621 cv
33.898 273.805 33.707 274.059 33.57 274.375 cv
33.43 274.695 33.336 275.066 33.285 275.496 cv
33.234 275.926 33.211 276.391 33.211 276.883 cv
33.211 277.547 33.242 278.109 33.313 278.57 cv
33.379 279.039 33.488 279.418 33.641 279.707 cv
33.785 280.004 33.977 280.215 34.207 280.344 cv
34.438 280.48 34.719 280.547 35.051 280.543 cv
35.305 280.547 35.527 280.508 35.723 280.422 cv
35.914 280.344 36.082 280.223 36.223 280.066 cv
36.363 279.914 36.477 279.73 36.57 279.516 cv
36.656 279.301 36.73 279.062 36.789 278.801 cv
36.84 278.543 36.879 278.262 36.902 277.957 cv
36.922 277.652 36.93 277.336 36.934 277.004 cv
cp
f
24.422 226.231 mo
38.61 226.231 li
38.61 243.321 li
24.422 243.321 li
cp
0 0 0 0 cmyk
ef
30.785 239.125 mo
30.781 239.215 30.773 239.285 30.762 239.344 cv
30.746 239.406 30.727 239.457 30.707 239.488 cv
30.684 239.527 30.66 239.551 30.629 239.566 cv
30.598 239.582 30.566 239.59 30.539 239.59 cv
25.902 239.59 li
25.867 239.59 25.84 239.582 25.813 239.566 cv
25.785 239.551 25.758 239.527 25.734 239.488 cv
25.707 239.457 25.688 239.406 25.676 239.344 cv
25.66 239.285 25.652 239.215 25.656 239.125 cv
25.652 239.047 25.66 238.973 25.676 238.91 cv
25.688 238.852 25.703 238.805 25.727 238.766 cv
25.742 238.73 25.77 238.699 25.801 238.676 cv
25.832 238.656 25.863 238.648 25.902 238.645 cv
27.754 238.645 li
27.754 231.898 li
26.039 232.918 li
25.949 232.969 25.879 232.996 25.832 233.004 cv
25.777 233.012 25.734 233.004 25.703 232.973 cv
25.668 232.945 25.648 232.895 25.637 232.824 cv
25.625 232.758 25.617 232.672 25.621 232.562 cv
25.617 232.488 25.621 232.422 25.633 232.363 cv
25.637 232.312 25.648 232.266 25.664 232.227 cv
25.676 232.191 25.695 232.16 25.719 232.133 cv
25.742 232.105 25.773 232.078 25.82 232.051 cv
27.863 230.738 li
27.879 230.727 27.898 230.715 27.93 230.707 cv
27.953 230.699 27.988 230.691 28.035 230.68 cv
28.074 230.672 28.125 230.664 28.18 230.66 cv
28.234 230.66 28.301 230.66 28.387 230.656 cv
28.492 230.66 28.586 230.664 28.66 230.672 cv
28.73 230.68 28.785 230.695 28.832 230.711 cv
28.871 230.73 28.898 230.75 28.914 230.773 cv
28.922 230.801 28.93 230.824 28.934 230.848 cv
28.934 238.645 li
30.539 238.645 li
30.574 238.648 30.609 238.656 30.641 238.676 cv
30.672 238.699 30.695 238.73 30.719 238.766 cv
30.734 238.805 30.75 238.852 30.766 238.91 cv
30.773 238.973 30.781 239.047 30.785 239.125 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
37.848 239.082 mo
37.844 239.168 37.84 239.242 37.828 239.305 cv
37.816 239.371 37.801 239.426 37.781 239.465 cv
37.758 239.512 37.73 239.543 37.699 239.559 cv
37.664 239.582 37.625 239.59 37.586 239.59 cv
32.684 239.59 li
32.621 239.59 32.563 239.582 32.516 239.566 cv
32.465 239.551 32.426 239.527 32.391 239.488 cv
32.355 239.457 32.328 239.402 32.316 239.332 cv
32.297 239.262 32.289 239.176 32.293 239.074 cv
32.289 238.984 32.293 238.906 32.301 238.836 cv
32.305 238.77 32.32 238.711 32.348 238.656 cv
32.371 238.605 32.402 238.551 32.438 238.496 cv
32.473 238.445 32.516 238.391 32.574 238.328 cv
34.348 236.504 li
34.758 236.086 35.086 235.711 35.336 235.375 cv
35.582 235.047 35.773 234.742 35.906 234.465 cv
36.039 234.191 36.125 233.941 36.172 233.715 cv
36.211 233.492 36.234 233.281 36.234 233.086 cv
36.234 232.891 36.199 232.707 36.133 232.527 cv
36.066 232.355 35.973 232.199 35.848 232.062 cv
35.723 231.934 35.566 231.828 35.379 231.746 cv
35.191 231.672 34.973 231.633 34.727 231.629 cv
34.438 231.633 34.18 231.672 33.953 231.746 cv
33.723 231.828 33.523 231.914 33.352 232 cv
33.18 232.094 33.035 232.176 32.918 232.254 cv
32.801 232.332 32.715 232.371 32.664 232.371 cv
32.629 232.371 32.598 232.363 32.574 232.344 cv
32.543 232.328 32.523 232.297 32.508 232.254 cv
32.492 232.215 32.477 232.16 32.469 232.09 cv
32.457 232.023 32.453 231.941 32.457 231.844 cv
32.453 231.777 32.457 231.719 32.465 231.668 cv
32.469 231.617 32.477 231.574 32.488 231.535 cv
32.496 231.5 32.512 231.465 32.531 231.434 cv
32.551 231.402 32.586 231.363 32.645 231.312 cv
32.695 231.266 32.789 231.199 32.926 231.117 cv
33.059 231.035 33.23 230.957 33.434 230.875 cv
33.637 230.797 33.859 230.727 34.105 230.672 cv
34.348 230.617 34.605 230.59 34.879 230.59 cv
35.305 230.59 35.68 230.652 36.004 230.773 cv
36.324 230.895 36.59 231.059 36.805 231.27 cv
37.016 231.48 37.176 231.727 37.281 232 cv
37.387 232.281 37.441 232.578 37.441 232.891 cv
37.441 233.18 37.414 233.461 37.363 233.738 cv
37.313 234.023 37.207 234.328 37.047 234.652 cv
36.883 234.98 36.648 235.344 36.344 235.742 cv
36.035 236.145 35.629 236.605 35.125 237.121 cv
33.719 238.59 li
37.578 238.59 li
37.609 238.594 37.645 238.605 37.684 238.621 cv
37.715 238.645 37.746 238.676 37.773 238.715 cv
37.797 238.758 37.816 238.809 37.828 238.867 cv
37.84 238.934 37.844 239.004 37.848 239.082 cv
cp
f
24.422 184.449 mo
38.61 184.449 li
38.61 201.539 li
24.422 201.539 li
cp
0 0 0 0 cmyk
ef
30.785 197.344 mo
30.781 197.434 30.773 197.504 30.762 197.562 cv
30.746 197.625 30.727 197.676 30.707 197.707 cv
30.684 197.746 30.66 197.77 30.629 197.785 cv
30.598 197.801 30.566 197.809 30.539 197.809 cv
25.902 197.809 li
25.867 197.809 25.84 197.801 25.813 197.785 cv
25.785 197.77 25.758 197.746 25.734 197.707 cv
25.707 197.676 25.688 197.625 25.676 197.562 cv
25.66 197.504 25.652 197.434 25.656 197.344 cv
25.652 197.266 25.66 197.191 25.676 197.129 cv
25.688 197.07 25.703 197.023 25.727 196.984 cv
25.742 196.949 25.77 196.918 25.801 196.895 cv
25.832 196.875 25.863 196.867 25.902 196.863 cv
27.754 196.863 li
27.754 190.117 li
26.039 191.137 li
25.949 191.187 25.879 191.215 25.832 191.223 cv
25.777 191.23 25.734 191.223 25.703 191.191 cv
25.668 191.164 25.648 191.113 25.637 191.043 cv
25.625 190.977 25.617 190.891 25.621 190.781 cv
25.617 190.707 25.621 190.641 25.633 190.582 cv
25.637 190.531 25.648 190.484 25.664 190.445 cv
25.676 190.41 25.695 190.379 25.719 190.352 cv
25.742 190.324 25.773 190.297 25.82 190.27 cv
27.863 188.957 li
27.879 188.945 27.898 188.934 27.93 188.926 cv
27.953 188.918 27.988 188.91 28.035 188.898 cv
28.074 188.891 28.125 188.883 28.18 188.879 cv
28.234 188.879 28.301 188.879 28.387 188.875 cv
28.492 188.879 28.586 188.883 28.66 188.891 cv
28.73 188.898 28.785 188.914 28.832 188.93 cv
28.871 188.949 28.898 188.969 28.914 188.992 cv
28.922 189.02 28.93 189.043 28.934 189.066 cv
28.934 196.863 li
30.539 196.863 li
30.574 196.867 30.609 196.875 30.641 196.895 cv
30.672 196.918 30.695 196.949 30.719 196.984 cv
30.734 197.023 30.75 197.07 30.766 197.129 cv
30.773 197.191 30.781 197.266 30.785 197.344 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.223 195.285 mo
38.219 195.437 38.195 195.559 38.152 195.645 cv
38.105 195.734 38.043 195.777 37.961 195.773 cv
36.961 195.773 li
36.961 197.637 li
36.961 197.676 36.949 197.707 36.934 197.73 cv
36.91 197.758 36.879 197.777 36.836 197.797 cv
36.785 197.812 36.723 197.824 36.652 197.836 cv
36.574 197.844 36.48 197.848 36.363 197.852 cv
36.246 197.848 36.148 197.844 36.078 197.836 cv
36 197.824 35.941 197.812 35.898 197.797 cv
35.852 197.777 35.82 197.758 35.805 197.73 cv
35.785 197.707 35.777 197.676 35.781 197.637 cv
35.781 195.773 li
32.152 195.773 li
32.094 195.777 32.051 195.77 32.016 195.754 cv
31.98 195.742 31.945 195.715 31.918 195.676 cv
31.887 195.641 31.867 195.59 31.855 195.52 cv
31.844 195.453 31.84 195.363 31.84 195.25 cv
31.84 195.168 31.84 195.09 31.848 195.02 cv
31.848 194.949 31.859 194.887 31.875 194.832 cv
31.887 194.777 31.902 194.723 31.93 194.668 cv
31.949 194.613 31.977 194.559 32.012 194.496 cv
35.172 189.109 li
35.191 189.074 35.227 189.043 35.273 189.016 cv
35.316 188.988 35.371 188.965 35.445 188.945 cv
35.512 188.93 35.598 188.918 35.703 188.906 cv
35.805 188.902 35.926 188.898 36.066 188.895 cv
36.215 188.898 36.352 188.902 36.469 188.914 cv
36.582 188.926 36.672 188.941 36.746 188.957 cv
36.813 188.977 36.867 189 36.906 189.031 cv
36.941 189.062 36.961 189.098 36.961 189.137 cv
36.961 194.801 li
37.961 194.801 li
38.035 194.805 38.098 194.844 38.148 194.922 cv
38.195 195.004 38.219 195.125 38.223 195.285 cv
cp
35.781 189.934 mo
35.77 189.934 li
32.918 194.801 li
35.781 194.801 li
cp
f
24.422 142.672 mo
38.61 142.672 li
38.61 159.762 li
24.422 159.762 li
cp
0 0 0 0 cmyk
ef
30.785 155.555 mo
30.781 155.645 30.773 155.715 30.762 155.773 cv
30.746 155.836 30.727 155.887 30.707 155.918 cv
30.684 155.957 30.66 155.98 30.629 155.996 cv
30.598 156.012 30.566 156.02 30.539 156.02 cv
25.902 156.02 li
25.867 156.02 25.84 156.012 25.813 155.996 cv
25.785 155.98 25.758 155.957 25.734 155.918 cv
25.707 155.887 25.688 155.836 25.676 155.773 cv
25.66 155.715 25.652 155.645 25.656 155.555 cv
25.652 155.477 25.66 155.402 25.676 155.34 cv
25.688 155.281 25.703 155.234 25.727 155.195 cv
25.742 155.16 25.77 155.129 25.801 155.105 cv
25.832 155.086 25.863 155.078 25.902 155.074 cv
27.754 155.074 li
27.754 148.328 li
26.039 149.348 li
25.949 149.398 25.879 149.426 25.832 149.434 cv
25.777 149.441 25.734 149.434 25.703 149.402 cv
25.668 149.375 25.648 149.324 25.637 149.254 cv
25.625 149.187 25.617 149.102 25.621 148.992 cv
25.617 148.918 25.621 148.852 25.633 148.793 cv
25.637 148.742 25.648 148.695 25.664 148.656 cv
25.676 148.621 25.695 148.59 25.719 148.562 cv
25.742 148.535 25.773 148.508 25.82 148.48 cv
27.863 147.168 li
27.879 147.156 27.898 147.145 27.93 147.137 cv
27.953 147.129 27.988 147.121 28.035 147.109 cv
28.074 147.102 28.125 147.094 28.18 147.09 cv
28.234 147.09 28.301 147.09 28.387 147.086 cv
28.492 147.09 28.586 147.094 28.66 147.102 cv
28.73 147.109 28.785 147.125 28.832 147.141 cv
28.871 147.16 28.898 147.18 28.914 147.203 cv
28.922 147.23 28.93 147.254 28.934 147.277 cv
28.934 155.074 li
30.539 155.074 li
30.574 155.078 30.609 155.086 30.641 155.105 cv
30.672 155.129 30.695 155.16 30.719 155.195 cv
30.734 155.234 30.75 155.281 30.766 155.34 cv
30.773 155.402 30.781 155.477 30.785 155.555 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.074 153.148 mo
38.074 153.539 38.012 153.918 37.895 154.277 cv
37.77 154.645 37.586 154.961 37.344 155.234 cv
37.094 155.512 36.781 155.734 36.406 155.898 cv
36.023 156.066 35.578 156.148 35.063 156.148 cv
34.691 156.148 34.363 156.105 34.082 156.012 cv
33.797 155.926 33.551 155.793 33.34 155.621 cv
33.129 155.453 32.953 155.246 32.816 155 cv
32.676 154.754 32.563 154.473 32.48 154.156 cv
32.395 153.844 32.336 153.5 32.301 153.121 cv
32.262 152.75 32.242 152.348 32.246 151.914 cv
32.242 151.535 32.262 151.152 32.305 150.762 cv
32.344 150.379 32.418 150.004 32.523 149.637 cv
32.629 149.277 32.773 148.937 32.953 148.621 cv
33.133 148.305 33.359 148.027 33.633 147.793 cv
33.906 147.559 34.23 147.371 34.609 147.23 cv
34.988 147.094 35.43 147.027 35.934 147.023 cv
36.102 147.027 36.273 147.035 36.445 147.055 cv
36.617 147.078 36.777 147.109 36.926 147.141 cv
37.074 147.18 37.195 147.215 37.297 147.254 cv
37.395 147.293 37.461 147.328 37.496 147.352 cv
37.523 147.379 37.547 147.406 37.566 147.434 cv
37.582 147.465 37.598 147.496 37.605 147.531 cv
37.613 147.566 37.617 147.605 37.625 147.648 cv
37.625 147.691 37.629 147.746 37.633 147.809 cv
37.629 147.895 37.629 147.965 37.629 148.02 cv
37.625 148.082 37.613 148.129 37.602 148.164 cv
37.582 148.203 37.563 148.23 37.539 148.246 cv
37.512 148.266 37.48 148.273 37.441 148.273 cv
37.391 148.273 37.32 148.258 37.234 148.227 cv
37.145 148.195 37.039 148.16 36.918 148.117 cv
36.793 148.082 36.645 148.047 36.469 148.012 cv
36.293 147.984 36.09 147.969 35.859 147.965 cv
35.43 147.969 35.063 148.055 34.758 148.227 cv
34.453 148.398 34.203 148.633 34.008 148.926 cv
33.813 149.219 33.668 149.559 33.578 149.941 cv
33.48 150.332 33.426 150.734 33.418 151.152 cv
33.535 151.086 33.672 151.02 33.82 150.949 cv
33.969 150.883 34.129 150.82 34.305 150.762 cv
34.48 150.711 34.668 150.664 34.863 150.629 cv
35.059 150.598 35.27 150.582 35.496 150.578 cv
35.973 150.582 36.375 150.648 36.707 150.773 cv
37.035 150.906 37.301 151.086 37.508 151.316 cv
37.707 151.547 37.852 151.816 37.941 152.129 cv
38.027 152.441 38.074 152.781 38.074 153.148 cv
cp
36.879 153.258 mo
36.879 152.996 36.852 152.754 36.801 152.535 cv
36.746 152.32 36.656 152.137 36.535 151.98 cv
36.41 151.832 36.246 151.715 36.043 151.633 cv
35.832 151.551 35.578 151.508 35.281 151.508 cv
35.109 151.508 34.941 151.523 34.773 151.555 cv
34.602 151.586 34.438 151.629 34.281 151.676 cv
34.121 151.73 33.973 151.793 33.832 151.863 cv
33.688 151.937 33.555 152.012 33.438 152.09 cv
33.434 152.684 33.473 153.18 33.551 153.574 cv
33.625 153.973 33.734 154.289 33.879 154.527 cv
34.023 154.77 34.203 154.941 34.418 155.043 cv
34.633 155.148 34.883 155.199 35.172 155.195 cv
35.461 155.199 35.715 155.145 35.93 155.031 cv
36.145 154.926 36.32 154.777 36.465 154.59 cv
36.605 154.406 36.711 154.199 36.777 153.969 cv
36.844 153.738 36.879 153.504 36.879 153.258 cv
cp
f
24.422 100.891 mo
38.61 100.891 li
38.61 117.981 li
24.422 117.981 li
cp
0 0 0 0 cmyk
ef
30.785 113.773 mo
30.781 113.863 30.773 113.934 30.762 113.992 cv
30.746 114.055 30.727 114.105 30.707 114.137 cv
30.684 114.176 30.66 114.199 30.629 114.215 cv
30.598 114.23 30.566 114.238 30.539 114.238 cv
25.902 114.238 li
25.867 114.238 25.84 114.23 25.813 114.215 cv
25.785 114.199 25.758 114.176 25.734 114.137 cv
25.707 114.105 25.688 114.055 25.676 113.992 cv
25.66 113.934 25.652 113.863 25.656 113.773 cv
25.652 113.695 25.66 113.621 25.676 113.559 cv
25.688 113.5 25.703 113.453 25.727 113.414 cv
25.742 113.379 25.77 113.348 25.801 113.324 cv
25.832 113.305 25.863 113.297 25.902 113.293 cv
27.754 113.293 li
27.754 106.547 li
26.039 107.566 li
25.949 107.617 25.879 107.645 25.832 107.652 cv
25.777 107.66 25.734 107.652 25.703 107.621 cv
25.668 107.594 25.648 107.543 25.637 107.473 cv
25.625 107.406 25.617 107.32 25.621 107.211 cv
25.617 107.137 25.621 107.07 25.633 107.012 cv
25.637 106.961 25.648 106.914 25.664 106.875 cv
25.676 106.84 25.695 106.809 25.719 106.781 cv
25.742 106.754 25.773 106.727 25.82 106.699 cv
27.863 105.387 li
27.879 105.375 27.898 105.363 27.93 105.355 cv
27.953 105.348 27.988 105.34 28.035 105.328 cv
28.074 105.32 28.125 105.312 28.18 105.309 cv
28.234 105.309 28.301 105.309 28.387 105.305 cv
28.492 105.309 28.586 105.312 28.66 105.32 cv
28.73 105.328 28.785 105.344 28.832 105.359 cv
28.871 105.379 28.898 105.398 28.914 105.422 cv
28.922 105.449 28.93 105.473 28.934 105.496 cv
28.934 113.293 li
30.539 113.293 li
30.574 113.297 30.609 113.305 30.641 113.324 cv
30.672 113.348 30.695 113.379 30.719 113.414 cv
30.734 113.453 30.75 113.5 30.766 113.559 cv
30.773 113.621 30.781 113.695 30.785 113.773 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.051 111.961 mo
38.051 112.348 37.98 112.691 37.844 112.988 cv
37.707 113.293 37.512 113.543 37.254 113.746 cv
36.996 113.953 36.676 114.109 36.297 114.211 cv
35.914 114.316 35.48 114.367 34.996 114.367 cv
34.535 114.367 34.125 114.32 33.766 114.227 cv
33.402 114.133 33.098 113.992 32.848 113.801 cv
32.598 113.617 32.406 113.387 32.273 113.109 cv
32.141 112.836 32.074 112.523 32.074 112.168 cv
32.074 111.895 32.117 111.637 32.211 111.402 cv
32.297 111.168 32.43 110.953 32.605 110.758 cv
32.773 110.562 32.984 110.379 33.238 110.203 cv
33.488 110.035 33.773 109.871 34.09 109.715 cv
33.816 109.574 33.574 109.426 33.363 109.266 cv
33.152 109.109 32.973 108.937 32.828 108.75 cv
32.68 108.566 32.57 108.371 32.496 108.16 cv
32.418 107.953 32.379 107.723 32.383 107.473 cv
32.379 107.164 32.434 106.871 32.551 106.598 cv
32.66 106.328 32.832 106.094 33.059 105.891 cv
33.285 105.691 33.57 105.531 33.922 105.414 cv
34.266 105.297 34.676 105.238 35.145 105.238 cv
35.59 105.238 35.977 105.293 36.305 105.398 cv
36.633 105.508 36.902 105.652 37.113 105.836 cv
37.324 106.023 37.48 106.242 37.586 106.492 cv
37.684 106.742 37.734 107.012 37.738 107.301 cv
37.734 107.535 37.695 107.762 37.625 107.973 cv
37.547 108.191 37.438 108.395 37.289 108.582 cv
37.141 108.777 36.961 108.957 36.75 109.121 cv
36.539 109.293 36.297 109.449 36.023 109.59 cv
36.344 109.754 36.629 109.918 36.887 110.086 cv
37.137 110.254 37.352 110.434 37.527 110.629 cv
37.695 110.824 37.824 111.031 37.918 111.246 cv
38.004 111.465 38.051 111.703 38.051 111.961 cv
cp
36.57 107.41 mo
36.566 107.223 36.535 107.047 36.469 106.891 cv
36.402 106.734 36.305 106.602 36.18 106.492 cv
36.051 106.383 35.891 106.301 35.703 106.242 cv
35.508 106.187 35.293 106.16 35.055 106.156 cv
34.559 106.16 34.184 106.27 33.934 106.492 cv
33.676 106.719 33.551 107.027 33.555 107.41 cv
33.551 107.59 33.582 107.754 33.645 107.906 cv
33.707 108.062 33.801 108.207 33.934 108.344 cv
34.059 108.48 34.223 108.613 34.426 108.742 cv
34.621 108.875 34.859 109.012 35.137 109.152 cv
35.598 108.918 35.953 108.656 36.199 108.363 cv
36.445 108.078 36.566 107.762 36.57 107.41 cv
cp
36.859 112.086 mo
36.855 111.879 36.816 111.687 36.742 111.516 cv
36.66 111.348 36.543 111.187 36.387 111.035 cv
36.23 110.887 36.031 110.742 35.797 110.602 cv
35.559 110.465 35.289 110.32 34.98 110.168 cv
34.691 110.312 34.438 110.453 34.223 110.594 cv
34.004 110.734 33.824 110.883 33.688 111.031 cv
33.547 111.187 33.441 111.344 33.371 111.508 cv
33.297 111.676 33.262 111.859 33.266 112.059 cv
33.262 112.504 33.414 112.848 33.723 113.086 cv
34.023 113.332 34.477 113.453 35.082 113.449 cv
35.664 113.453 36.109 113.332 36.41 113.082 cv
36.707 112.84 36.855 112.508 36.859 112.086 cv
cp
f
24.422 59.109 mo
38.61 59.109 li
38.61 76.199 li
24.422 76.199 li
cp
0 0 0 0 cmyk
ef
30.766 71.953 mo
30.762 72.039 30.758 72.113 30.746 72.176 cv
30.734 72.242 30.719 72.297 30.699 72.336 cv
30.676 72.383 30.648 72.414 30.617 72.43 cv
30.582 72.453 30.543 72.461 30.504 72.461 cv
25.602 72.461 li
25.539 72.461 25.48 72.453 25.434 72.437 cv
25.383 72.422 25.344 72.398 25.309 72.359 cv
25.273 72.328 25.246 72.273 25.234 72.203 cv
25.215 72.133 25.207 72.047 25.211 71.945 cv
25.207 71.855 25.211 71.777 25.219 71.707 cv
25.223 71.641 25.238 71.582 25.266 71.527 cv
25.289 71.477 25.32 71.422 25.355 71.367 cv
25.391 71.316 25.434 71.262 25.492 71.199 cv
27.266 69.375 li
27.676 68.957 28.004 68.582 28.254 68.246 cv
28.5 67.918 28.691 67.613 28.824 67.336 cv
28.957 67.062 29.043 66.812 29.09 66.586 cv
29.129 66.363 29.152 66.152 29.152 65.957 cv
29.152 65.762 29.117 65.578 29.051 65.398 cv
28.984 65.227 28.891 65.07 28.766 64.934 cv
28.641 64.805 28.484 64.699 28.297 64.617 cv
28.109 64.543 27.891 64.504 27.645 64.5 cv
27.355 64.504 27.098 64.543 26.871 64.617 cv
26.641 64.699 26.441 64.785 26.27 64.871 cv
26.098 64.965 25.953 65.047 25.836 65.125 cv
25.719 65.203 25.633 65.242 25.582 65.242 cv
25.547 65.242 25.516 65.234 25.492 65.215 cv
25.461 65.199 25.441 65.168 25.426 65.125 cv
25.41 65.086 25.395 65.031 25.387 64.961 cv
25.375 64.895 25.371 64.812 25.375 64.715 cv
25.371 64.648 25.375 64.59 25.383 64.539 cv
25.387 64.488 25.395 64.445 25.406 64.406 cv
25.414 64.371 25.43 64.336 25.449 64.305 cv
25.469 64.273 25.504 64.234 25.563 64.184 cv
25.613 64.137 25.707 64.07 25.844 63.988 cv
25.977 63.906 26.148 63.828 26.352 63.746 cv
26.555 63.668 26.777 63.598 27.023 63.543 cv
27.266 63.488 27.523 63.461 27.797 63.461 cv
28.223 63.461 28.598 63.523 28.922 63.645 cv
29.242 63.766 29.508 63.93 29.723 64.141 cv
29.934 64.352 30.094 64.598 30.199 64.871 cv
30.305 65.152 30.359 65.449 30.359 65.762 cv
30.359 66.051 30.332 66.332 30.281 66.609 cv
30.23 66.895 30.125 67.199 29.965 67.523 cv
29.801 67.852 29.566 68.215 29.262 68.613 cv
28.953 69.016 28.547 69.477 28.043 69.992 cv
26.637 71.461 li
30.496 71.461 li
30.527 71.465 30.563 71.477 30.602 71.492 cv
30.633 71.516 30.664 71.547 30.691 71.586 cv
30.715 71.629 30.734 71.68 30.746 71.738 cv
30.758 71.805 30.762 71.875 30.766 71.953 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
38.141 68.004 mo
38.137 68.687 38.086 69.309 37.98 69.871 cv
37.871 70.434 37.691 70.918 37.445 71.32 cv
37.191 71.727 36.863 72.039 36.465 72.258 cv
36.059 72.48 35.566 72.59 34.98 72.59 cv
34.422 72.59 33.949 72.492 33.57 72.293 cv
33.188 72.098 32.883 71.805 32.648 71.418 cv
32.414 71.031 32.246 70.559 32.152 69.992 cv
32.051 69.43 32.004 68.781 32.004 68.047 cv
32.004 67.375 32.059 66.754 32.168 66.187 cv
32.277 65.625 32.453 65.141 32.703 64.734 cv
32.945 64.332 33.27 64.02 33.676 63.793 cv
34.074 63.574 34.57 63.461 35.16 63.461 cv
35.719 63.461 36.191 63.562 36.574 63.758 cv
36.957 63.961 37.262 64.254 37.496 64.637 cv
37.727 65.027 37.895 65.5 37.992 66.062 cv
38.09 66.625 38.137 67.273 38.141 68.004 cv
cp
36.934 68.086 mo
36.93 67.645 36.914 67.246 36.887 66.895 cv
36.852 66.543 36.805 66.234 36.746 65.965 cv
36.68 65.695 36.602 65.465 36.504 65.27 cv
36.406 65.078 36.289 64.918 36.152 64.789 cv
36.012 64.664 35.852 64.57 35.68 64.512 cv
35.5 64.457 35.305 64.43 35.09 64.426 cv
34.699 64.43 34.383 64.52 34.145 64.703 cv
33.898 64.887 33.707 65.141 33.57 65.457 cv
33.43 65.777 33.336 66.148 33.285 66.578 cv
33.234 67.008 33.211 67.473 33.211 67.965 cv
33.211 68.629 33.242 69.191 33.313 69.652 cv
33.379 70.121 33.488 70.5 33.641 70.789 cv
33.785 71.086 33.977 71.297 34.207 71.426 cv
34.438 71.562 34.719 71.629 35.051 71.625 cv
35.305 71.629 35.527 71.59 35.723 71.504 cv
35.914 71.426 36.082 71.305 36.223 71.148 cv
36.363 70.996 36.477 70.812 36.57 70.598 cv
36.656 70.383 36.73 70.145 36.789 69.883 cv
36.84 69.625 36.879 69.344 36.902 69.039 cv
36.922 68.734 36.93 68.418 36.934 68.086 cv
cp
f
24.422 17.3279 mo
38.61 17.3279 li
38.61 34.4219 li
24.422 34.4219 li
cp
0 0 0 0 cmyk
ef
30.766 30.141 mo
30.762 30.227 30.758 30.301 30.746 30.363 cv
30.734 30.43 30.719 30.484 30.699 30.523 cv
30.676 30.57 30.648 30.602 30.617 30.617 cv
30.582 30.641 30.543 30.648 30.504 30.648 cv
25.602 30.648 li
25.539 30.648 25.48 30.641 25.434 30.625 cv
25.383 30.609 25.344 30.586 25.309 30.547 cv
25.273 30.516 25.246 30.461 25.234 30.391 cv
25.215 30.32 25.207 30.234 25.211 30.133 cv
25.207 30.043 25.211 29.965 25.219 29.895 cv
25.223 29.828 25.238 29.77 25.266 29.715 cv
25.289 29.664 25.32 29.609 25.355 29.555 cv
25.391 29.504 25.434 29.449 25.492 29.387 cv
27.266 27.562 li
27.676 27.145 28.004 26.77 28.254 26.434 cv
28.5 26.105 28.691 25.801 28.824 25.523 cv
28.957 25.25 29.043 25 29.09 24.773 cv
29.129 24.551 29.152 24.34 29.152 24.145 cv
29.152 23.949 29.117 23.766 29.051 23.586 cv
28.984 23.414 28.891 23.258 28.766 23.121 cv
28.641 22.992 28.484 22.887 28.297 22.805 cv
28.109 22.73 27.891 22.691 27.645 22.687 cv
27.355 22.691 27.098 22.73 26.871 22.805 cv
26.641 22.887 26.441 22.973 26.27 23.059 cv
26.098 23.152 25.953 23.234 25.836 23.312 cv
25.719 23.391 25.633 23.43 25.582 23.43 cv
25.547 23.43 25.516 23.422 25.492 23.402 cv
25.461 23.387 25.441 23.355 25.426 23.312 cv
25.41 23.273 25.395 23.219 25.387 23.148 cv
25.375 23.082 25.371 23 25.375 22.902 cv
25.371 22.836 25.375 22.777 25.383 22.727 cv
25.387 22.676 25.395 22.633 25.406 22.594 cv
25.414 22.559 25.43 22.523 25.449 22.492 cv
25.469 22.461 25.504 22.422 25.563 22.371 cv
25.613 22.324 25.707 22.258 25.844 22.176 cv
25.977 22.094 26.148 22.016 26.352 21.934 cv
26.555 21.855 26.777 21.785 27.023 21.73 cv
27.266 21.676 27.523 21.648 27.797 21.648 cv
28.223 21.648 28.598 21.711 28.922 21.832 cv
29.242 21.953 29.508 22.117 29.723 22.328 cv
29.934 22.539 30.094 22.785 30.199 23.059 cv
30.305 23.34 30.359 23.637 30.359 23.949 cv
30.359 24.238 30.332 24.52 30.281 24.797 cv
30.23 25.082 30.125 25.387 29.965 25.711 cv
29.801 26.039 29.566 26.402 29.262 26.801 cv
28.953 27.203 28.547 27.664 28.043 28.18 cv
26.637 29.648 li
30.496 29.648 li
30.527 29.652 30.563 29.664 30.602 29.68 cv
30.633 29.703 30.664 29.734 30.691 29.773 cv
30.715 29.816 30.734 29.867 30.746 29.926 cv
30.758 29.992 30.762 30.062 30.766 30.141 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
37.848 30.141 mo
37.844 30.227 37.84 30.301 37.828 30.363 cv
37.816 30.43 37.801 30.484 37.781 30.523 cv
37.758 30.57 37.73 30.602 37.699 30.617 cv
37.664 30.641 37.625 30.648 37.586 30.648 cv
32.684 30.648 li
32.621 30.648 32.563 30.641 32.516 30.625 cv
32.465 30.609 32.426 30.586 32.391 30.547 cv
32.355 30.516 32.328 30.461 32.316 30.391 cv
32.297 30.32 32.289 30.234 32.293 30.133 cv
32.289 30.043 32.293 29.965 32.301 29.895 cv
32.305 29.828 32.32 29.77 32.348 29.715 cv
32.371 29.664 32.402 29.609 32.438 29.555 cv
32.473 29.504 32.516 29.449 32.574 29.387 cv
34.348 27.562 li
34.758 27.145 35.086 26.77 35.336 26.434 cv
35.582 26.105 35.773 25.801 35.906 25.523 cv
36.039 25.25 36.125 25 36.172 24.773 cv
36.211 24.551 36.234 24.34 36.234 24.145 cv
36.234 23.949 36.199 23.766 36.133 23.586 cv
36.066 23.414 35.973 23.258 35.848 23.121 cv
35.723 22.992 35.566 22.887 35.379 22.805 cv
35.191 22.73 34.973 22.691 34.727 22.687 cv
34.438 22.691 34.18 22.73 33.953 22.805 cv
33.723 22.887 33.523 22.973 33.352 23.059 cv
33.18 23.152 33.035 23.234 32.918 23.312 cv
32.801 23.391 32.715 23.43 32.664 23.43 cv
32.629 23.43 32.598 23.422 32.574 23.402 cv
32.543 23.387 32.523 23.355 32.508 23.312 cv
32.492 23.273 32.477 23.219 32.469 23.148 cv
32.457 23.082 32.453 23 32.457 22.902 cv
32.453 22.836 32.457 22.777 32.465 22.727 cv
32.469 22.676 32.477 22.633 32.488 22.594 cv
32.496 22.559 32.512 22.523 32.531 22.492 cv
32.551 22.461 32.586 22.422 32.645 22.371 cv
32.695 22.324 32.789 22.258 32.926 22.176 cv
33.059 22.094 33.23 22.016 33.434 21.934 cv
33.637 21.855 33.859 21.785 34.105 21.73 cv
34.348 21.676 34.605 21.648 34.879 21.648 cv
35.305 21.648 35.68 21.711 36.004 21.832 cv
36.324 21.953 36.59 22.117 36.805 22.328 cv
37.016 22.539 37.176 22.785 37.281 23.059 cv
37.387 23.34 37.441 23.637 37.441 23.949 cv
37.441 24.238 37.414 24.52 37.363 24.797 cv
37.313 25.082 37.207 25.387 37.047 25.711 cv
36.883 26.039 36.648 26.402 36.344 26.801 cv
36.035 27.203 35.629 27.664 35.125 28.18 cv
33.719 29.648 li
37.578 29.648 li
37.609 29.652 37.645 29.664 37.684 29.68 cv
37.715 29.703 37.746 29.734 37.773 29.773 cv
37.797 29.816 37.816 29.867 37.828 29.926 cv
37.84 29.992 37.844 30.062 37.848 30.141 cv
cp
f
54.426 508.07 mo
54.422 508.16 54.414 508.23 54.402 508.289 cv
54.387 508.352 54.367 508.402 54.348 508.434 cv
54.324 508.473 54.301 508.496 54.27 508.512 cv
54.238 508.527 54.207 508.535 54.18 508.535 cv
49.543 508.535 li
49.508 508.535 49.48 508.527 49.453 508.512 cv
49.426 508.496 49.398 508.473 49.375 508.434 cv
49.348 508.402 49.328 508.352 49.316 508.289 cv
49.301 508.23 49.293 508.16 49.297 508.07 cv
49.293 507.992 49.301 507.918 49.316 507.855 cv
49.328 507.797 49.344 507.75 49.367 507.711 cv
49.383 507.676 49.41 507.645 49.441 507.621 cv
49.473 507.602 49.504 507.594 49.543 507.59 cv
51.395 507.59 li
51.395 500.844 li
49.68 501.863 li
49.59 501.914 49.52 501.941 49.473 501.949 cv
49.418 501.957 49.375 501.949 49.344 501.918 cv
49.309 501.891 49.289 501.84 49.277 501.77 cv
49.266 501.703 49.258 501.617 49.262 501.508 cv
49.258 501.434 49.262 501.367 49.273 501.309 cv
49.277 501.258 49.289 501.211 49.305 501.172 cv
49.316 501.137 49.336 501.105 49.359 501.078 cv
49.383 501.051 49.414 501.023 49.461 500.996 cv
51.504 499.684 li
51.52 499.672 51.539 499.66 51.57 499.652 cv
51.594 499.645 51.629 499.637 51.676 499.625 cv
51.715 499.617 51.766 499.609 51.82 499.605 cv
51.875 499.605 51.941 499.605 52.027 499.602 cv
52.133 499.605 52.227 499.609 52.301 499.617 cv
52.371 499.625 52.426 499.641 52.473 499.656 cv
52.512 499.676 52.539 499.695 52.555 499.719 cv
52.563 499.746 52.57 499.77 52.574 499.793 cv
52.574 507.59 li
54.18 507.59 li
54.215 507.594 54.25 507.602 54.281 507.621 cv
54.313 507.645 54.336 507.676 54.359 507.711 cv
54.375 507.75 54.391 507.797 54.406 507.855 cv
54.414 507.918 54.422 507.992 54.426 508.07 cv
cp
f
123.438 508.027 mo
123.434 508.113 123.43 508.187 123.418 508.25 cv
123.406 508.316 123.391 508.371 123.371 508.41 cv
123.348 508.457 123.32 508.488 123.289 508.504 cv
123.254 508.527 123.215 508.535 123.176 508.535 cv
118.273 508.535 li
118.211 508.535 118.152 508.527 118.105 508.512 cv
118.055 508.496 118.016 508.473 117.98 508.434 cv
117.945 508.402 117.918 508.348 117.906 508.277 cv
117.887 508.207 117.879 508.121 117.883 508.02 cv
117.879 507.93 117.883 507.852 117.891 507.781 cv
117.895 507.715 117.91 507.656 117.938 507.602 cv
117.961 507.551 117.992 507.496 118.027 507.441 cv
118.063 507.391 118.105 507.336 118.164 507.273 cv
119.938 505.449 li
120.348 505.031 120.676 504.656 120.926 504.32 cv
121.172 503.992 121.363 503.687 121.496 503.41 cv
121.629 503.137 121.715 502.887 121.762 502.66 cv
121.801 502.437 121.824 502.227 121.824 502.031 cv
121.824 501.836 121.789 501.652 121.723 501.473 cv
121.656 501.301 121.563 501.145 121.438 501.008 cv
121.313 500.879 121.156 500.773 120.969 500.691 cv
120.781 500.617 120.563 500.578 120.316 500.574 cv
120.027 500.578 119.77 500.617 119.543 500.691 cv
119.313 500.773 119.113 500.859 118.941 500.945 cv
118.77 501.039 118.625 501.121 118.508 501.199 cv
118.391 501.277 118.305 501.316 118.254 501.316 cv
118.219 501.316 118.188 501.309 118.164 501.289 cv
118.133 501.273 118.113 501.242 118.098 501.199 cv
118.082 501.16 118.066 501.105 118.059 501.035 cv
118.047 500.969 118.043 500.887 118.047 500.789 cv
118.043 500.723 118.047 500.664 118.055 500.613 cv
118.059 500.562 118.066 500.52 118.078 500.48 cv
118.086 500.445 118.102 500.41 118.121 500.379 cv
118.141 500.348 118.176 500.309 118.234 500.258 cv
118.285 500.211 118.379 500.145 118.516 500.062 cv
118.648 499.98 118.82 499.902 119.023 499.82 cv
119.227 499.742 119.449 499.672 119.695 499.617 cv
119.938 499.562 120.195 499.535 120.469 499.535 cv
120.895 499.535 121.27 499.598 121.594 499.719 cv
121.914 499.84 122.18 500.004 122.395 500.215 cv
122.605 500.426 122.766 500.672 122.871 500.945 cv
122.977 501.227 123.031 501.523 123.031 501.836 cv
123.031 502.125 123.004 502.406 122.953 502.684 cv
122.902 502.969 122.797 503.273 122.637 503.598 cv
122.473 503.926 122.238 504.289 121.934 504.687 cv
121.625 505.09 121.219 505.551 120.715 506.066 cv
119.309 507.535 li
123.168 507.535 li
123.199 507.539 123.234 507.551 123.273 507.566 cv
123.305 507.59 123.336 507.621 123.363 507.66 cv
123.387 507.703 123.406 507.754 123.418 507.812 cv
123.43 507.879 123.434 507.949 123.438 508.027 cv
cp
f
192.852 506.012 mo
192.848 506.164 192.824 506.285 192.781 506.371 cv
192.734 506.461 192.672 506.504 192.59 506.5 cv
191.59 506.5 li
191.59 508.363 li
191.59 508.402 191.578 508.434 191.563 508.457 cv
191.539 508.484 191.508 508.504 191.465 508.523 cv
191.414 508.539 191.352 508.551 191.281 508.562 cv
191.203 508.57 191.109 508.574 190.992 508.578 cv
190.875 508.574 190.777 508.57 190.707 508.562 cv
190.629 508.551 190.57 508.539 190.527 508.523 cv
190.48 508.504 190.449 508.484 190.434 508.457 cv
190.414 508.434 190.406 508.402 190.41 508.363 cv
190.41 506.5 li
186.781 506.5 li
186.723 506.504 186.68 506.496 186.645 506.48 cv
186.609 506.469 186.574 506.441 186.547 506.402 cv
186.516 506.367 186.496 506.316 186.484 506.246 cv
186.473 506.18 186.469 506.09 186.469 505.977 cv
186.469 505.895 186.469 505.816 186.477 505.746 cv
186.477 505.676 186.488 505.613 186.504 505.559 cv
186.516 505.504 186.531 505.449 186.559 505.395 cv
186.578 505.34 186.605 505.285 186.641 505.223 cv
189.801 499.836 li
189.82 499.801 189.855 499.77 189.902 499.742 cv
189.945 499.715 190 499.691 190.074 499.672 cv
190.141 499.656 190.227 499.645 190.332 499.633 cv
190.434 499.629 190.555 499.625 190.695 499.621 cv
190.844 499.625 190.98 499.629 191.098 499.641 cv
191.211 499.652 191.301 499.668 191.375 499.684 cv
191.441 499.703 191.496 499.727 191.535 499.758 cv
191.57 499.789 191.59 499.824 191.59 499.863 cv
191.59 505.527 li
192.59 505.527 li
192.664 505.531 192.727 505.57 192.777 505.648 cv
192.824 505.73 192.848 505.852 192.852 506.012 cv
cp
190.41 500.66 mo
190.398 500.66 li
187.547 505.527 li
190.41 505.527 li
cp
f
261.734 505.664 mo
261.734 506.055 261.672 506.434 261.555 506.793 cv
261.43 507.16 261.246 507.477 261.004 507.75 cv
260.754 508.027 260.441 508.25 260.066 508.414 cv
259.684 508.582 259.238 508.664 258.723 508.664 cv
258.352 508.664 258.023 508.621 257.742 508.527 cv
257.457 508.441 257.211 508.309 257 508.137 cv
256.789 507.969 256.613 507.762 256.477 507.516 cv
256.336 507.27 256.223 506.988 256.141 506.672 cv
256.055 506.359 255.996 506.016 255.961 505.637 cv
255.922 505.266 255.902 504.863 255.906 504.43 cv
255.902 504.051 255.922 503.668 255.965 503.277 cv
256.004 502.895 256.078 502.52 256.184 502.152 cv
256.289 501.793 256.434 501.453 256.613 501.137 cv
256.793 500.82 257.02 500.543 257.293 500.309 cv
257.566 500.074 257.891 499.887 258.27 499.746 cv
258.648 499.609 259.09 499.543 259.594 499.539 cv
259.762 499.543 259.934 499.551 260.105 499.57 cv
260.277 499.594 260.438 499.625 260.586 499.656 cv
260.734 499.695 260.855 499.73 260.957 499.77 cv
261.055 499.809 261.121 499.844 261.156 499.867 cv
261.184 499.895 261.207 499.922 261.227 499.949 cv
261.242 499.98 261.258 500.012 261.266 500.047 cv
261.273 500.082 261.277 500.121 261.285 500.164 cv
261.285 500.207 261.289 500.262 261.293 500.324 cv
261.289 500.41 261.289 500.48 261.289 500.535 cv
261.285 500.598 261.273 500.645 261.262 500.68 cv
261.242 500.719 261.223 500.746 261.199 500.762 cv
261.172 500.781 261.141 500.789 261.102 500.789 cv
261.051 500.789 260.98 500.773 260.895 500.742 cv
260.805 500.711 260.699 500.676 260.578 500.633 cv
260.453 500.598 260.305 500.562 260.129 500.527 cv
259.953 500.5 259.75 500.484 259.52 500.48 cv
259.09 500.484 258.723 500.57 258.418 500.742 cv
258.113 500.914 257.863 501.148 257.668 501.441 cv
257.473 501.734 257.328 502.074 257.238 502.457 cv
257.141 502.848 257.086 503.25 257.078 503.668 cv
257.195 503.602 257.332 503.535 257.48 503.465 cv
257.629 503.398 257.789 503.336 257.965 503.277 cv
258.141 503.227 258.328 503.18 258.523 503.145 cv
258.719 503.113 258.93 503.098 259.156 503.094 cv
259.633 503.098 260.035 503.164 260.367 503.289 cv
260.695 503.422 260.961 503.602 261.168 503.832 cv
261.367 504.062 261.512 504.332 261.602 504.645 cv
261.688 504.957 261.734 505.297 261.734 505.664 cv
cp
260.539 505.773 mo
260.539 505.512 260.512 505.27 260.461 505.051 cv
260.406 504.836 260.316 504.652 260.195 504.496 cv
260.07 504.348 259.906 504.23 259.703 504.148 cv
259.492 504.066 259.238 504.023 258.941 504.023 cv
258.77 504.023 258.602 504.039 258.434 504.07 cv
258.262 504.102 258.098 504.145 257.941 504.191 cv
257.781 504.246 257.633 504.309 257.492 504.379 cv
257.348 504.453 257.215 504.527 257.098 504.605 cv
257.094 505.199 257.133 505.695 257.211 506.09 cv
257.285 506.488 257.395 506.805 257.539 507.043 cv
257.684 507.285 257.863 507.457 258.078 507.559 cv
258.293 507.664 258.543 507.715 258.832 507.711 cv
259.121 507.715 259.375 507.66 259.59 507.547 cv
259.805 507.441 259.98 507.293 260.125 507.105 cv
260.266 506.922 260.371 506.715 260.438 506.484 cv
260.504 506.254 260.539 506.02 260.539 505.773 cv
cp
f
330.758 506.258 mo
330.758 506.645 330.688 506.988 330.551 507.285 cv
330.414 507.59 330.219 507.84 329.961 508.043 cv
329.703 508.25 329.383 508.406 329.004 508.508 cv
328.621 508.613 328.188 508.664 327.703 508.664 cv
327.242 508.664 326.832 508.617 326.473 508.523 cv
326.109 508.43 325.805 508.289 325.555 508.098 cv
325.305 507.914 325.113 507.684 324.98 507.406 cv
324.848 507.133 324.781 506.82 324.781 506.465 cv
324.781 506.191 324.824 505.934 324.918 505.699 cv
325.004 505.465 325.137 505.25 325.313 505.055 cv
325.48 504.859 325.691 504.676 325.945 504.5 cv
326.195 504.332 326.48 504.168 326.797 504.012 cv
326.523 503.871 326.281 503.723 326.07 503.562 cv
325.859 503.406 325.68 503.234 325.535 503.047 cv
325.387 502.863 325.277 502.668 325.203 502.457 cv
325.125 502.25 325.086 502.02 325.09 501.77 cv
325.086 501.461 325.141 501.168 325.258 500.895 cv
325.367 500.625 325.539 500.391 325.766 500.187 cv
325.992 499.988 326.277 499.828 326.629 499.711 cv
326.973 499.594 327.383 499.535 327.852 499.535 cv
328.297 499.535 328.684 499.59 329.012 499.695 cv
329.34 499.805 329.609 499.949 329.82 500.133 cv
330.031 500.32 330.188 500.539 330.293 500.789 cv
330.391 501.039 330.441 501.309 330.445 501.598 cv
330.441 501.832 330.402 502.059 330.332 502.27 cv
330.254 502.488 330.145 502.691 329.996 502.879 cv
329.848 503.074 329.668 503.254 329.457 503.418 cv
329.246 503.59 329.004 503.746 328.73 503.887 cv
329.051 504.051 329.336 504.215 329.594 504.383 cv
329.844 504.551 330.059 504.73 330.234 504.926 cv
330.402 505.121 330.531 505.328 330.625 505.543 cv
330.711 505.762 330.758 506 330.758 506.258 cv
cp
329.277 501.707 mo
329.273 501.52 329.242 501.344 329.176 501.187 cv
329.109 501.031 329.012 500.898 328.887 500.789 cv
328.758 500.68 328.598 500.598 328.41 500.539 cv
328.215 500.484 328 500.457 327.762 500.453 cv
327.266 500.457 326.891 500.566 326.641 500.789 cv
326.383 501.016 326.258 501.324 326.262 501.707 cv
326.258 501.887 326.289 502.051 326.352 502.203 cv
326.414 502.359 326.508 502.504 326.641 502.641 cv
326.766 502.777 326.93 502.91 327.133 503.039 cv
327.328 503.172 327.566 503.309 327.844 503.449 cv
328.305 503.215 328.66 502.953 328.906 502.66 cv
329.152 502.375 329.273 502.059 329.277 501.707 cv
cp
329.566 506.383 mo
329.563 506.176 329.523 505.984 329.449 505.812 cv
329.367 505.645 329.25 505.484 329.094 505.332 cv
328.938 505.184 328.738 505.039 328.504 504.898 cv
328.266 504.762 327.996 504.617 327.688 504.465 cv
327.398 504.609 327.145 504.75 326.93 504.891 cv
326.711 505.031 326.531 505.18 326.395 505.328 cv
326.254 505.484 326.148 505.641 326.078 505.805 cv
326.004 505.973 325.969 506.156 325.973 506.355 cv
325.969 506.801 326.121 507.145 326.43 507.383 cv
326.73 507.629 327.184 507.75 327.789 507.746 cv
328.371 507.75 328.816 507.629 329.117 507.379 cv
329.414 507.137 329.563 506.805 329.566 506.383 cv
cp
f
396.047 508.07 mo
396.043 508.16 396.035 508.23 396.023 508.289 cv
396.008 508.352 395.988 508.402 395.969 508.434 cv
395.945 508.473 395.922 508.496 395.891 508.512 cv
395.859 508.527 395.828 508.535 395.801 508.535 cv
391.164 508.535 li
391.129 508.535 391.102 508.527 391.074 508.512 cv
391.047 508.496 391.02 508.473 390.996 508.434 cv
390.969 508.402 390.949 508.352 390.938 508.289 cv
390.922 508.23 390.914 508.16 390.918 508.07 cv
390.914 507.992 390.922 507.918 390.938 507.855 cv
390.949 507.797 390.965 507.75 390.988 507.711 cv
391.004 507.676 391.031 507.645 391.063 507.621 cv
391.094 507.602 391.125 507.594 391.164 507.59 cv
393.016 507.59 li
393.016 500.844 li
391.301 501.863 li
391.211 501.914 391.141 501.941 391.094 501.949 cv
391.039 501.957 390.996 501.949 390.965 501.918 cv
390.93 501.891 390.91 501.84 390.898 501.77 cv
390.887 501.703 390.879 501.617 390.883 501.508 cv
390.879 501.434 390.883 501.367 390.895 501.309 cv
390.898 501.258 390.91 501.211 390.926 501.172 cv
390.938 501.137 390.957 501.105 390.98 501.078 cv
391.004 501.051 391.035 501.023 391.082 500.996 cv
393.125 499.684 li
393.141 499.672 393.16 499.66 393.191 499.652 cv
393.215 499.645 393.25 499.637 393.297 499.625 cv
393.336 499.617 393.387 499.609 393.441 499.605 cv
393.496 499.605 393.563 499.605 393.648 499.602 cv
393.754 499.605 393.848 499.609 393.922 499.617 cv
393.992 499.625 394.047 499.641 394.094 499.656 cv
394.133 499.676 394.16 499.695 394.176 499.719 cv
394.184 499.746 394.191 499.77 394.195 499.793 cv
394.195 507.59 li
395.801 507.59 li
395.836 507.594 395.871 507.602 395.902 507.621 cv
395.934 507.645 395.957 507.676 395.98 507.711 cv
395.996 507.75 396.012 507.797 396.027 507.855 cv
396.035 507.918 396.043 507.992 396.047 508.07 cv
cp
f
403.398 504.078 mo
403.395 504.762 403.344 505.383 403.238 505.945 cv
403.129 506.508 402.949 506.992 402.703 507.395 cv
402.449 507.801 402.121 508.113 401.723 508.332 cv
401.316 508.555 400.824 508.664 400.238 508.664 cv
399.68 508.664 399.207 508.566 398.828 508.367 cv
398.445 508.172 398.141 507.879 397.906 507.492 cv
397.672 507.105 397.504 506.633 397.41 506.066 cv
397.309 505.504 397.262 504.855 397.262 504.121 cv
397.262 503.449 397.316 502.828 397.426 502.262 cv
397.535 501.699 397.711 501.215 397.961 500.809 cv
398.203 500.406 398.527 500.094 398.934 499.867 cv
399.332 499.648 399.828 499.535 400.418 499.535 cv
400.977 499.535 401.449 499.637 401.832 499.832 cv
402.215 500.035 402.52 500.328 402.754 500.711 cv
402.984 501.102 403.152 501.574 403.25 502.137 cv
403.348 502.699 403.395 503.348 403.398 504.078 cv
cp
402.191 504.16 mo
402.188 503.719 402.172 503.32 402.145 502.969 cv
402.109 502.617 402.063 502.309 402.004 502.039 cv
401.938 501.77 401.859 501.539 401.762 501.344 cv
401.664 501.152 401.547 500.992 401.41 500.863 cv
401.27 500.738 401.109 500.645 400.938 500.586 cv
400.758 500.531 400.563 500.504 400.348 500.5 cv
399.957 500.504 399.641 500.594 399.402 500.777 cv
399.156 500.961 398.965 501.215 398.828 501.531 cv
398.688 501.852 398.594 502.223 398.543 502.652 cv
398.492 503.082 398.469 503.547 398.469 504.039 cv
398.469 504.703 398.5 505.266 398.57 505.727 cv
398.637 506.195 398.746 506.574 398.898 506.863 cv
399.043 507.16 399.234 507.371 399.465 507.5 cv
399.695 507.637 399.977 507.703 400.309 507.699 cv
400.563 507.703 400.785 507.664 400.98 507.578 cv
401.172 507.5 401.34 507.379 401.48 507.223 cv
401.621 507.07 401.734 506.887 401.828 506.672 cv
401.914 506.457 401.988 506.219 402.047 505.957 cv
402.098 505.699 402.137 505.418 402.16 505.113 cv
402.18 504.809 402.188 504.492 402.191 504.16 cv
cp
f
465.094 508.07 mo
465.09 508.16 465.082 508.23 465.07 508.289 cv
465.055 508.352 465.035 508.402 465.016 508.434 cv
464.992 508.473 464.969 508.496 464.938 508.512 cv
464.906 508.527 464.875 508.535 464.848 508.535 cv
460.211 508.535 li
460.176 508.535 460.148 508.527 460.121 508.512 cv
460.094 508.496 460.066 508.473 460.043 508.434 cv
460.016 508.402 459.996 508.352 459.984 508.289 cv
459.969 508.23 459.961 508.16 459.965 508.07 cv
459.961 507.992 459.969 507.918 459.984 507.855 cv
459.996 507.797 460.012 507.75 460.035 507.711 cv
460.051 507.676 460.078 507.645 460.109 507.621 cv
460.141 507.602 460.172 507.594 460.211 507.59 cv
462.063 507.59 li
462.063 500.844 li
460.348 501.863 li
460.258 501.914 460.188 501.941 460.141 501.949 cv
460.086 501.957 460.043 501.949 460.012 501.918 cv
459.977 501.891 459.957 501.84 459.945 501.77 cv
459.934 501.703 459.926 501.617 459.93 501.508 cv
459.926 501.434 459.93 501.367 459.941 501.309 cv
459.945 501.258 459.957 501.211 459.973 501.172 cv
459.984 501.137 460.004 501.105 460.027 501.078 cv
460.051 501.051 460.082 501.023 460.129 500.996 cv
462.172 499.684 li
462.188 499.672 462.207 499.66 462.238 499.652 cv
462.262 499.645 462.297 499.637 462.344 499.625 cv
462.383 499.617 462.434 499.609 462.488 499.605 cv
462.543 499.605 462.609 499.605 462.695 499.602 cv
462.801 499.605 462.895 499.609 462.969 499.617 cv
463.039 499.625 463.094 499.641 463.141 499.656 cv
463.18 499.676 463.207 499.695 463.223 499.719 cv
463.23 499.746 463.238 499.77 463.242 499.793 cv
463.242 507.59 li
464.848 507.59 li
464.883 507.594 464.918 507.602 464.949 507.621 cv
464.98 507.645 465.004 507.676 465.027 507.711 cv
465.043 507.75 465.059 507.797 465.074 507.855 cv
465.082 507.918 465.09 507.992 465.094 508.07 cv
cp
f
472.156 508.027 mo
472.152 508.113 472.148 508.187 472.137 508.25 cv
472.125 508.316 472.109 508.371 472.09 508.41 cv
472.066 508.457 472.039 508.488 472.008 508.504 cv
471.973 508.527 471.934 508.535 471.895 508.535 cv
466.992 508.535 li
466.93 508.535 466.871 508.527 466.824 508.512 cv
466.773 508.496 466.734 508.473 466.699 508.434 cv
466.664 508.402 466.637 508.348 466.625 508.277 cv
466.605 508.207 466.598 508.121 466.602 508.02 cv
466.598 507.93 466.602 507.852 466.609 507.781 cv
466.613 507.715 466.629 507.656 466.656 507.602 cv
466.68 507.551 466.711 507.496 466.746 507.441 cv
466.781 507.391 466.824 507.336 466.883 507.273 cv
468.656 505.449 li
469.066 505.031 469.395 504.656 469.645 504.32 cv
469.891 503.992 470.082 503.687 470.215 503.41 cv
470.348 503.137 470.434 502.887 470.48 502.66 cv
470.52 502.437 470.543 502.227 470.543 502.031 cv
470.543 501.836 470.508 501.652 470.441 501.473 cv
470.375 501.301 470.281 501.145 470.156 501.008 cv
470.031 500.879 469.875 500.773 469.688 500.691 cv
469.5 500.617 469.281 500.578 469.035 500.574 cv
468.746 500.578 468.488 500.617 468.262 500.691 cv
468.031 500.773 467.832 500.859 467.66 500.945 cv
467.488 501.039 467.344 501.121 467.227 501.199 cv
467.109 501.277 467.023 501.316 466.973 501.316 cv
466.938 501.316 466.906 501.309 466.883 501.289 cv
466.852 501.273 466.832 501.242 466.816 501.199 cv
466.801 501.16 466.785 501.105 466.777 501.035 cv
466.766 500.969 466.762 500.887 466.766 500.789 cv
466.762 500.723 466.766 500.664 466.773 500.613 cv
466.777 500.562 466.785 500.52 466.797 500.48 cv
466.805 500.445 466.82 500.41 466.84 500.379 cv
466.859 500.348 466.895 500.309 466.953 500.258 cv
467.004 500.211 467.098 500.145 467.234 500.062 cv
467.367 499.98 467.539 499.902 467.742 499.82 cv
467.945 499.742 468.168 499.672 468.414 499.617 cv
468.656 499.562 468.914 499.535 469.188 499.535 cv
469.613 499.535 469.988 499.598 470.313 499.719 cv
470.633 499.84 470.898 500.004 471.113 500.215 cv
471.324 500.426 471.484 500.672 471.59 500.945 cv
471.695 501.227 471.75 501.523 471.75 501.836 cv
471.75 502.125 471.723 502.406 471.672 502.684 cv
471.621 502.969 471.516 503.273 471.355 503.598 cv
471.191 503.926 470.957 504.289 470.652 504.687 cv
470.344 505.09 469.938 505.551 469.434 506.066 cv
468.027 507.535 li
471.887 507.535 li
471.918 507.539 471.953 507.551 471.992 507.566 cv
472.023 507.59 472.055 507.621 472.082 507.66 cv
472.105 507.703 472.125 507.754 472.137 507.812 cv
472.148 507.879 472.152 507.949 472.156 508.027 cv
cp
f
534.117 508.07 mo
534.113 508.16 534.105 508.23 534.094 508.289 cv
534.078 508.352 534.059 508.402 534.039 508.434 cv
534.016 508.473 533.992 508.496 533.961 508.512 cv
533.93 508.527 533.898 508.535 533.871 508.535 cv
529.234 508.535 li
529.199 508.535 529.172 508.527 529.145 508.512 cv
529.117 508.496 529.09 508.473 529.066 508.434 cv
529.039 508.402 529.02 508.352 529.008 508.289 cv
528.992 508.23 528.984 508.16 528.988 508.07 cv
528.984 507.992 528.992 507.918 529.008 507.855 cv
529.02 507.797 529.035 507.75 529.059 507.711 cv
529.074 507.676 529.102 507.645 529.133 507.621 cv
529.164 507.602 529.195 507.594 529.234 507.59 cv
531.086 507.59 li
531.086 500.844 li
529.371 501.863 li
529.281 501.914 529.211 501.941 529.164 501.949 cv
529.109 501.957 529.066 501.949 529.035 501.918 cv
529 501.891 528.98 501.84 528.969 501.77 cv
528.957 501.703 528.949 501.617 528.953 501.508 cv
528.949 501.434 528.953 501.367 528.965 501.309 cv
528.969 501.258 528.98 501.211 528.996 501.172 cv
529.008 501.137 529.027 501.105 529.051 501.078 cv
529.074 501.051 529.105 501.023 529.152 500.996 cv
531.195 499.684 li
531.211 499.672 531.23 499.66 531.262 499.652 cv
531.285 499.645 531.32 499.637 531.367 499.625 cv
531.406 499.617 531.457 499.609 531.512 499.605 cv
531.566 499.605 531.633 499.605 531.719 499.602 cv
531.824 499.605 531.918 499.609 531.992 499.617 cv
532.063 499.625 532.117 499.641 532.164 499.656 cv
532.203 499.676 532.23 499.695 532.246 499.719 cv
532.254 499.746 532.262 499.77 532.266 499.793 cv
532.266 507.59 li
533.871 507.59 li
533.906 507.594 533.941 507.602 533.973 507.621 cv
534.004 507.645 534.027 507.676 534.051 507.711 cv
534.066 507.75 534.082 507.797 534.098 507.855 cv
534.105 507.918 534.113 507.992 534.117 508.07 cv
cp
f
541.551 506.012 mo
541.547 506.164 541.523 506.285 541.48 506.371 cv
541.434 506.461 541.371 506.504 541.289 506.5 cv
540.289 506.5 li
540.289 508.363 li
540.289 508.402 540.277 508.434 540.262 508.457 cv
540.238 508.484 540.207 508.504 540.164 508.523 cv
540.113 508.539 540.051 508.551 539.98 508.562 cv
539.902 508.57 539.809 508.574 539.691 508.578 cv
539.574 508.574 539.477 508.57 539.406 508.562 cv
539.328 508.551 539.27 508.539 539.227 508.523 cv
539.18 508.504 539.148 508.484 539.133 508.457 cv
539.113 508.434 539.105 508.402 539.109 508.363 cv
539.109 506.5 li
535.48 506.5 li
535.422 506.504 535.379 506.496 535.344 506.48 cv
535.309 506.469 535.273 506.441 535.246 506.402 cv
535.215 506.367 535.195 506.316 535.184 506.246 cv
535.172 506.18 535.168 506.09 535.168 505.977 cv
535.168 505.895 535.168 505.816 535.176 505.746 cv
535.176 505.676 535.188 505.613 535.203 505.559 cv
535.215 505.504 535.23 505.449 535.258 505.395 cv
535.277 505.34 535.305 505.285 535.34 505.223 cv
538.5 499.836 li
538.52 499.801 538.555 499.77 538.602 499.742 cv
538.645 499.715 538.699 499.691 538.773 499.672 cv
538.84 499.656 538.926 499.645 539.031 499.633 cv
539.133 499.629 539.254 499.625 539.395 499.621 cv
539.543 499.625 539.68 499.629 539.797 499.641 cv
539.91 499.652 540 499.668 540.074 499.684 cv
540.141 499.703 540.195 499.727 540.234 499.758 cv
540.27 499.789 540.289 499.824 540.289 499.863 cv
540.289 505.527 li
541.289 505.527 li
541.363 505.531 541.426 505.57 541.477 505.648 cv
541.523 505.73 541.547 505.852 541.551 506.012 cv
cp
539.109 500.66 mo
539.098 500.66 li
536.246 505.527 li
539.109 505.527 li
cp
f
603.164 508.07 mo
603.16 508.16 603.152 508.23 603.141 508.289 cv
603.125 508.352 603.105 508.402 603.086 508.434 cv
603.063 508.473 603.039 508.496 603.008 508.512 cv
602.977 508.527 602.945 508.535 602.918 508.535 cv
598.281 508.535 li
598.246 508.535 598.219 508.527 598.191 508.512 cv
598.164 508.496 598.137 508.473 598.113 508.434 cv
598.086 508.402 598.066 508.352 598.055 508.289 cv
598.039 508.23 598.031 508.16 598.035 508.07 cv
598.031 507.992 598.039 507.918 598.055 507.855 cv
598.066 507.797 598.082 507.75 598.105 507.711 cv
598.121 507.676 598.148 507.645 598.18 507.621 cv
598.211 507.602 598.242 507.594 598.281 507.59 cv
600.133 507.59 li
600.133 500.844 li
598.418 501.863 li
598.328 501.914 598.258 501.941 598.211 501.949 cv
598.156 501.957 598.113 501.949 598.082 501.918 cv
598.047 501.891 598.027 501.84 598.016 501.77 cv
598.004 501.703 597.996 501.617 598 501.508 cv
597.996 501.434 598 501.367 598.012 501.309 cv
598.016 501.258 598.027 501.211 598.043 501.172 cv
598.055 501.137 598.074 501.105 598.098 501.078 cv
598.121 501.051 598.152 501.023 598.199 500.996 cv
600.242 499.684 li
600.258 499.672 600.277 499.66 600.309 499.652 cv
600.332 499.645 600.367 499.637 600.414 499.625 cv
600.453 499.617 600.504 499.609 600.559 499.605 cv
600.613 499.605 600.68 499.605 600.766 499.602 cv
600.871 499.605 600.965 499.609 601.039 499.617 cv
601.109 499.625 601.164 499.641 601.211 499.656 cv
601.25 499.676 601.277 499.695 601.293 499.719 cv
601.301 499.746 601.309 499.77 601.313 499.793 cv
601.313 507.59 li
602.918 507.59 li
602.953 507.594 602.988 507.602 603.02 507.621 cv
603.051 507.645 603.074 507.676 603.098 507.711 cv
603.113 507.75 603.129 507.797 603.145 507.855 cv
603.152 507.918 603.16 507.992 603.164 508.07 cv
cp
f
610.453 505.664 mo
610.453 506.055 610.391 506.434 610.273 506.793 cv
610.148 507.16 609.965 507.477 609.723 507.75 cv
609.473 508.027 609.16 508.25 608.785 508.414 cv
608.402 508.582 607.957 508.664 607.441 508.664 cv
607.07 508.664 606.742 508.621 606.461 508.527 cv
606.176 508.441 605.93 508.309 605.719 508.137 cv
605.508 507.969 605.332 507.762 605.195 507.516 cv
605.055 507.27 604.941 506.988 604.859 506.672 cv
604.773 506.359 604.715 506.016 604.68 505.637 cv
604.641 505.266 604.621 504.863 604.625 504.43 cv
604.621 504.051 604.641 503.668 604.684 503.277 cv
604.723 502.895 604.797 502.52 604.902 502.152 cv
605.008 501.793 605.152 501.453 605.332 501.137 cv
605.512 500.82 605.738 500.543 606.012 500.309 cv
606.285 500.074 606.609 499.887 606.988 499.746 cv
607.367 499.609 607.809 499.543 608.313 499.539 cv
608.48 499.543 608.652 499.551 608.824 499.57 cv
608.996 499.594 609.156 499.625 609.305 499.656 cv
609.453 499.695 609.574 499.73 609.676 499.77 cv
609.773 499.809 609.84 499.844 609.875 499.867 cv
609.902 499.895 609.926 499.922 609.945 499.949 cv
609.961 499.98 609.977 500.012 609.984 500.047 cv
609.992 500.082 609.996 500.121 610.004 500.164 cv
610.004 500.207 610.008 500.262 610.012 500.324 cv
610.008 500.41 610.008 500.48 610.008 500.535 cv
610.004 500.598 609.992 500.645 609.98 500.68 cv
609.961 500.719 609.941 500.746 609.918 500.762 cv
609.891 500.781 609.859 500.789 609.82 500.789 cv
609.77 500.789 609.699 500.773 609.613 500.742 cv
609.523 500.711 609.418 500.676 609.297 500.633 cv
609.172 500.598 609.023 500.562 608.848 500.527 cv
608.672 500.5 608.469 500.484 608.238 500.48 cv
607.809 500.484 607.441 500.57 607.137 500.742 cv
606.832 500.914 606.582 501.148 606.387 501.441 cv
606.191 501.734 606.047 502.074 605.957 502.457 cv
605.859 502.848 605.805 503.25 605.797 503.668 cv
605.914 503.602 606.051 503.535 606.199 503.465 cv
606.348 503.398 606.508 503.336 606.684 503.277 cv
606.859 503.227 607.047 503.18 607.242 503.145 cv
607.438 503.113 607.648 503.098 607.875 503.094 cv
608.352 503.098 608.754 503.164 609.086 503.289 cv
609.414 503.422 609.68 503.602 609.887 503.832 cv
610.086 504.062 610.23 504.332 610.32 504.645 cv
610.406 504.957 610.453 505.297 610.453 505.664 cv
cp
609.258 505.773 mo
609.258 505.512 609.23 505.27 609.18 505.051 cv
609.125 504.836 609.035 504.652 608.914 504.496 cv
608.789 504.348 608.625 504.23 608.422 504.148 cv
608.211 504.066 607.957 504.023 607.66 504.023 cv
607.488 504.023 607.32 504.039 607.152 504.07 cv
606.98 504.102 606.816 504.145 606.66 504.191 cv
606.5 504.246 606.352 504.309 606.211 504.379 cv
606.066 504.453 605.934 504.527 605.816 504.605 cv
605.813 505.199 605.852 505.695 605.93 506.09 cv
606.004 506.488 606.113 506.805 606.258 507.043 cv
606.402 507.285 606.582 507.457 606.797 507.559 cv
607.012 507.664 607.262 507.715 607.551 507.711 cv
607.84 507.715 608.094 507.66 608.309 507.547 cv
608.523 507.441 608.699 507.293 608.844 507.105 cv
608.984 506.922 609.09 506.715 609.156 506.484 cv
609.223 506.254 609.258 506.02 609.258 505.773 cv
cp
f
7.652 297.762 mo
7.754 297.766 7.84 297.77 7.91 297.777 cv
7.984 297.789 8.043 297.805 8.086 297.828 cv
8.133 297.852 8.164 297.883 8.184 297.914 cv
8.207 297.953 8.219 297.988 8.215 298.027 cv
8.215 300.863 li
16.957 300.863 li
17 300.863 17.035 300.875 17.066 300.895 cv
17.098 300.918 17.125 300.953 17.141 301.004 cv
17.16 301.059 17.172 301.129 17.188 301.211 cv
17.199 301.301 17.207 301.406 17.207 301.531 cv
17.207 301.656 17.199 301.766 17.188 301.852 cv
17.172 301.945 17.16 302.016 17.141 302.062 cv
17.125 302.117 17.098 302.152 17.066 302.172 cv
17.035 302.195 17 302.207 16.957 302.203 cv
8.215 302.203 li
8.215 305.039 li
8.219 305.086 8.207 305.121 8.184 305.152 cv
8.164 305.187 8.133 305.215 8.086 305.234 cv
8.043 305.258 7.984 305.277 7.91 305.285 cv
7.84 305.301 7.754 305.305 7.652 305.305 cv
7.555 305.305 7.469 305.301 7.391 305.285 cv
7.32 305.277 7.258 305.258 7.207 305.234 cv
7.164 305.215 7.129 305.187 7.105 305.152 cv
7.086 305.121 7.078 305.086 7.074 305.039 cv
7.074 298.027 li
7.078 297.988 7.086 297.953 7.105 297.914 cv
7.129 297.883 7.164 297.852 7.207 297.828 cv
7.258 297.805 7.32 297.789 7.391 297.777 cv
7.469 297.77 7.555 297.766 7.652 297.762 cv
cp
f
16.965 295.172 mo
17.012 295.176 17.047 295.187 17.07 295.203 cv
17.102 295.227 17.125 295.258 17.145 295.305 cv
17.164 295.352 17.176 295.418 17.191 295.496 cv
17.199 295.582 17.207 295.687 17.207 295.816 cv
17.207 295.945 17.199 296.051 17.191 296.129 cv
17.176 296.215 17.164 296.281 17.145 296.328 cv
17.125 296.383 17.102 296.414 17.07 296.43 cv
17.047 296.449 17.012 296.461 16.965 296.457 cv
9.953 296.457 li
9.918 296.461 9.887 296.449 9.852 296.43 cv
9.824 296.414 9.797 296.383 9.773 296.328 cv
9.754 296.281 9.738 296.215 9.727 296.129 cv
9.719 296.051 9.715 295.945 9.711 295.816 cv
9.715 295.687 9.719 295.582 9.727 295.496 cv
9.738 295.418 9.754 295.352 9.773 295.305 cv
9.797 295.258 9.824 295.227 9.852 295.203 cv
9.887 295.187 9.918 295.176 9.953 295.172 cv
cp
7.582 295.023 mo
7.887 295.023 8.094 295.082 8.199 295.195 cv
8.313 295.309 8.367 295.52 8.363 295.824 cv
8.367 296.129 8.313 296.336 8.203 296.445 cv
8.098 296.562 7.895 296.617 7.598 296.613 cv
7.297 296.617 7.094 296.559 6.984 296.441 cv
6.879 296.328 6.824 296.117 6.82 295.809 cv
6.824 295.508 6.879 295.305 6.98 295.191 cv
7.09 295.082 7.289 295.023 7.582 295.023 cv
cp
f
16.965 282.316 mo
17.012 282.32 17.047 282.328 17.07 282.348 cv
17.102 282.371 17.125 282.406 17.145 282.449 cv
17.164 282.5 17.176 282.566 17.191 282.645 cv
17.199 282.73 17.207 282.832 17.207 282.957 cv
17.207 283.09 17.199 283.199 17.191 283.277 cv
17.176 283.363 17.164 283.43 17.145 283.477 cv
17.125 283.531 17.102 283.566 17.07 283.582 cv
17.047 283.605 17.012 283.613 16.965 283.613 cv
12.703 283.613 li
12.41 283.613 12.141 283.641 11.895 283.691 cv
11.652 283.746 11.441 283.828 11.262 283.941 cv
11.086 284.055 10.949 284.199 10.855 284.375 cv
10.762 284.555 10.715 284.766 10.715 285 cv
10.715 285.297 10.832 285.594 11.059 285.891 cv
11.293 286.195 11.625 286.523 12.063 286.879 cv
16.965 286.879 li
17.012 286.883 17.047 286.895 17.07 286.91 cv
17.102 286.934 17.125 286.965 17.145 287.012 cv
17.164 287.062 17.176 287.129 17.191 287.211 cv
17.199 287.297 17.207 287.402 17.207 287.523 cv
17.207 287.645 17.199 287.746 17.191 287.832 cv
17.176 287.918 17.164 287.988 17.145 288.035 cv
17.125 288.09 17.102 288.121 17.07 288.137 cv
17.047 288.156 17.012 288.168 16.965 288.164 cv
12.703 288.164 li
12.41 288.168 12.141 288.195 11.895 288.25 cv
11.652 288.309 11.441 288.395 11.262 288.508 cv
11.086 288.621 10.949 288.766 10.855 288.937 cv
10.762 289.117 10.715 289.324 10.715 289.559 cv
10.715 289.859 10.832 290.156 11.059 290.457 cv
11.293 290.758 11.625 291.086 12.063 291.437 cv
16.965 291.437 li
17.012 291.441 17.047 291.453 17.07 291.469 cv
17.102 291.492 17.125 291.523 17.145 291.57 cv
17.164 291.617 17.176 291.684 17.191 291.762 cv
17.199 291.848 17.207 291.953 17.207 292.082 cv
17.207 292.211 17.199 292.316 17.191 292.395 cv
17.176 292.48 17.164 292.547 17.145 292.594 cv
17.125 292.648 17.102 292.68 17.07 292.695 cv
17.047 292.715 17.012 292.727 16.965 292.723 cv
9.953 292.723 li
9.914 292.727 9.879 292.719 9.848 292.699 cv
9.82 292.687 9.797 292.656 9.77 292.605 cv
9.75 292.562 9.734 292.5 9.723 292.426 cv
9.719 292.355 9.715 292.262 9.711 292.137 cv
9.715 292.027 9.719 291.93 9.723 291.852 cv
9.734 291.777 9.75 291.719 9.77 291.676 cv
9.797 291.637 9.82 291.609 9.848 291.59 cv
9.879 291.574 9.914 291.566 9.953 291.562 cv
10.879 291.562 li
10.438 291.172 10.117 290.789 9.91 290.414 cv
9.707 290.047 9.602 289.668 9.602 289.285 cv
9.602 288.996 9.637 288.738 9.703 288.504 cv
9.773 288.277 9.867 288.07 9.988 287.891 cv
10.109 287.715 10.254 287.566 10.422 287.437 cv
10.594 287.316 10.785 287.211 10.988 287.125 cv
10.738 286.895 10.523 286.672 10.344 286.461 cv
10.172 286.25 10.027 286.047 9.914 285.852 cv
9.809 285.656 9.73 285.469 9.676 285.285 cv
9.629 285.102 9.602 284.914 9.602 284.727 cv
9.602 284.273 9.684 283.895 9.84 283.59 cv
10.004 283.285 10.215 283.039 10.477 282.844 cv
10.742 282.656 11.051 282.52 11.406 282.437 cv
11.762 282.359 12.137 282.32 12.531 282.316 cv
cp
f
13.156 273.984 mo
13.359 273.988 13.5 274.039 13.586 274.137 cv
13.672 274.242 13.715 274.359 13.715 274.484 cv
13.715 279.102 li
14.105 279.105 14.457 279.066 14.77 278.984 cv
15.082 278.91 15.352 278.777 15.57 278.594 cv
15.797 278.414 15.969 278.18 16.086 277.883 cv
16.211 277.594 16.27 277.234 16.266 276.809 cv
16.27 276.477 16.242 276.18 16.184 275.918 cv
16.133 275.656 16.07 275.43 16 275.238 cv
15.934 275.051 15.875 274.895 15.816 274.77 cv
15.766 274.648 15.738 274.555 15.734 274.492 cv
15.738 274.457 15.746 274.426 15.762 274.395 cv
15.781 274.367 15.809 274.344 15.844 274.324 cv
15.883 274.312 15.934 274.301 15.996 274.289 cv
16.063 274.285 16.141 274.281 16.234 274.277 cv
16.305 274.281 16.363 274.285 16.41 274.285 cv
16.457 274.293 16.5 274.297 16.539 274.305 cv
16.578 274.312 16.613 274.328 16.645 274.344 cv
16.676 274.367 16.707 274.391 16.734 274.414 cv
16.766 274.445 16.813 274.527 16.875 274.668 cv
16.941 274.809 17.004 274.992 17.066 275.215 cv
17.129 275.441 17.184 275.699 17.234 275.992 cv
17.281 276.285 17.305 276.598 17.309 276.93 cv
17.305 277.508 17.227 278.016 17.066 278.445 cv
16.906 278.883 16.668 279.246 16.352 279.539 cv
16.035 279.84 15.641 280.062 15.16 280.211 cv
14.684 280.359 14.125 280.434 13.488 280.434 cv
12.891 280.434 12.352 280.359 11.867 280.203 cv
11.391 280.051 10.98 279.824 10.645 279.527 cv
10.309 279.234 10.051 278.879 9.871 278.465 cv
9.691 278.051 9.602 277.586 9.602 277.07 cv
9.602 276.52 9.691 276.051 9.867 275.664 cv
10.047 275.277 10.285 274.961 10.582 274.707 cv
10.883 274.461 11.234 274.277 11.633 274.16 cv
12.039 274.047 12.469 273.988 12.922 273.984 cv
cp
12.773 275.277 mo
12.098 275.262 11.566 275.414 11.184 275.73 cv
10.801 276.047 10.609 276.516 10.605 277.133 cv
10.609 277.457 10.668 277.738 10.785 277.977 cv
10.906 278.219 11.066 278.418 11.262 278.578 cv
11.461 278.742 11.691 278.867 11.953 278.953 cv
12.215 279.043 12.488 279.094 12.773 279.102 cv
cp
f
6.422 265.809 mo
7.469 266.305 8.539 266.672 9.637 266.914 cv
10.738 267.156 11.844 267.277 12.953 267.277 cv
14.07 267.277 15.18 267.156 16.273 266.906 cv
17.371 266.664 18.441 266.301 19.496 265.824 cv
19.555 265.801 19.609 265.789 19.656 265.781 cv
19.699 265.781 19.734 265.797 19.766 265.832 cv
19.793 265.871 19.813 265.926 19.828 266 cv
19.836 266.078 19.844 266.184 19.848 266.309 cv
19.844 266.406 19.84 266.484 19.84 266.551 cv
19.832 266.621 19.824 266.68 19.809 266.727 cv
19.793 266.777 19.773 266.82 19.754 266.848 cv
19.73 266.883 19.707 266.906 19.684 266.918 cv
19.152 267.199 18.617 267.445 18.074 267.656 cv
17.531 267.875 16.98 268.055 16.422 268.195 cv
15.859 268.344 15.293 268.453 14.719 268.523 cv
14.145 268.602 13.563 268.637 12.977 268.633 cv
12.391 268.637 11.813 268.598 11.238 268.512 cv
10.668 268.434 10.102 268.316 9.535 268.168 cv
8.973 268.02 8.418 267.84 7.871 267.629 cv
7.328 267.418 6.785 267.18 6.25 266.91 cv
6.23 266.906 6.215 266.891 6.195 266.867 cv
6.184 266.844 6.168 266.812 6.148 266.77 cv
6.137 266.73 6.125 266.672 6.113 266.598 cv
6.109 266.527 6.105 266.434 6.102 266.316 cv
6.105 266.199 6.113 266.105 6.125 266.027 cv
6.145 265.957 6.164 265.898 6.188 265.855 cv
6.215 265.816 6.25 265.793 6.289 265.785 cv
6.336 265.781 6.379 265.789 6.422 265.809 cv
cp
f
16.957 252.527 mo
17 252.527 17.035 252.539 17.066 252.559 cv
17.098 252.582 17.125 252.621 17.141 252.672 cv
17.16 252.727 17.172 252.793 17.188 252.875 cv
17.199 252.961 17.207 253.07 17.207 253.199 cv
17.207 253.328 17.199 253.434 17.188 253.52 cv
17.172 253.609 17.16 253.68 17.141 253.73 cv
17.125 253.781 17.098 253.816 17.066 253.836 cv
17.035 253.859 17 253.871 16.957 253.867 cv
8.176 253.867 li
8.176 253.883 li
16.996 257.437 li
17.035 257.453 17.066 257.477 17.09 257.504 cv
17.117 257.535 17.141 257.578 17.156 257.629 cv
17.176 257.687 17.188 257.75 17.195 257.824 cv
17.203 257.898 17.207 257.988 17.207 258.09 cv
17.207 258.203 17.199 258.297 17.191 258.371 cv
17.176 258.453 17.164 258.52 17.148 258.566 cv
17.133 258.621 17.113 258.66 17.082 258.687 cv
17.059 258.719 17.027 258.738 16.996 258.746 cv
8.176 262.145 li
8.176 262.152 li
16.957 262.152 li
17 262.156 17.035 262.164 17.066 262.184 cv
17.098 262.207 17.125 262.246 17.141 262.297 cv
17.16 262.352 17.172 262.422 17.188 262.504 cv
17.199 262.594 17.207 262.703 17.207 262.832 cv
17.207 262.965 17.199 263.07 17.188 263.156 cv
17.172 263.242 17.16 263.312 17.141 263.359 cv
17.125 263.414 17.098 263.449 17.066 263.465 cv
17.035 263.488 17 263.496 16.957 263.492 cv
7.684 263.492 li
7.469 263.496 7.313 263.437 7.215 263.32 cv
7.125 263.203 7.078 263.074 7.074 262.93 cv
7.074 262.105 li
7.078 261.941 7.094 261.793 7.121 261.664 cv
7.156 261.539 7.203 261.43 7.27 261.332 cv
7.34 261.238 7.426 261.156 7.527 261.094 cv
7.633 261.031 7.758 260.977 7.895 260.93 cv
15.195 258.043 li
15.195 258.004 li
7.918 255.004 li
7.766 254.949 7.633 254.887 7.52 254.816 cv
7.414 254.75 7.324 254.672 7.258 254.59 cv
7.195 254.508 7.148 254.418 7.117 254.316 cv
7.09 254.219 7.078 254.102 7.074 253.969 cv
7.074 253.105 li
7.078 253.027 7.09 252.949 7.109 252.879 cv
7.137 252.809 7.172 252.75 7.219 252.699 cv
7.27 252.648 7.332 252.605 7.406 252.574 cv
7.484 252.543 7.578 252.527 7.684 252.527 cv
cp
f
16.965 248.711 mo
17.012 248.715 17.047 248.727 17.07 248.742 cv
17.102 248.766 17.125 248.797 17.145 248.844 cv
17.164 248.891 17.176 248.957 17.191 249.035 cv
17.199 249.121 17.207 249.227 17.207 249.355 cv
17.207 249.484 17.199 249.59 17.191 249.668 cv
17.176 249.754 17.164 249.82 17.145 249.867 cv
17.125 249.922 17.102 249.953 17.07 249.969 cv
17.047 249.988 17.012 250 16.965 249.996 cv
9.953 249.996 li
9.918 250 9.887 249.988 9.852 249.969 cv
9.824 249.953 9.797 249.922 9.773 249.867 cv
9.754 249.82 9.738 249.754 9.727 249.668 cv
9.719 249.59 9.715 249.484 9.711 249.355 cv
9.715 249.227 9.719 249.121 9.727 249.035 cv
9.738 248.957 9.754 248.891 9.773 248.844 cv
9.797 248.797 9.824 248.766 9.852 248.742 cv
9.887 248.727 9.918 248.715 9.953 248.711 cv
cp
7.582 248.562 mo
7.887 248.562 8.094 248.621 8.199 248.734 cv
8.313 248.848 8.367 249.059 8.363 249.363 cv
8.367 249.668 8.313 249.875 8.203 249.984 cv
8.098 250.102 7.895 250.156 7.598 250.152 cv
7.297 250.156 7.094 250.098 6.984 249.98 cv
6.879 249.867 6.824 249.656 6.82 249.348 cv
6.824 249.047 6.879 248.844 6.98 248.73 cv
7.09 248.621 7.289 248.562 7.582 248.562 cv
cp
f
16.965 240.285 mo
17.012 240.285 17.047 240.297 17.07 240.316 cv
17.102 240.34 17.125 240.375 17.145 240.418 cv
17.164 240.469 17.176 240.531 17.191 240.613 cv
17.199 240.695 17.207 240.801 17.207 240.922 cv
17.207 241.055 17.199 241.16 17.191 241.242 cv
17.176 241.328 17.164 241.395 17.145 241.437 cv
17.125 241.488 17.102 241.52 17.07 241.539 cv
17.047 241.562 17.012 241.574 16.965 241.57 cv
12.859 241.57 li
12.461 241.574 12.141 241.605 11.895 241.664 cv
11.652 241.73 11.441 241.82 11.262 241.937 cv
11.086 242.055 10.949 242.211 10.855 242.398 cv
10.762 242.594 10.715 242.812 10.715 243.059 cv
10.715 243.383 10.832 243.707 11.059 244.027 cv
11.293 244.352 11.625 244.687 12.063 245.039 cv
16.965 245.039 li
17.012 245.043 17.047 245.055 17.07 245.07 cv
17.102 245.094 17.125 245.125 17.145 245.172 cv
17.164 245.219 17.176 245.285 17.191 245.363 cv
17.199 245.449 17.207 245.555 17.207 245.684 cv
17.207 245.812 17.199 245.918 17.191 245.996 cv
17.176 246.082 17.164 246.148 17.145 246.195 cv
17.125 246.25 17.102 246.281 17.07 246.297 cv
17.047 246.316 17.012 246.328 16.965 246.324 cv
9.953 246.324 li
9.914 246.328 9.879 246.32 9.848 246.301 cv
9.82 246.289 9.797 246.258 9.77 246.207 cv
9.75 246.164 9.734 246.102 9.723 246.027 cv
9.719 245.957 9.715 245.863 9.711 245.738 cv
9.715 245.629 9.719 245.531 9.723 245.453 cv
9.734 245.379 9.75 245.32 9.77 245.277 cv
9.797 245.238 9.82 245.211 9.848 245.191 cv
9.879 245.176 9.914 245.168 9.953 245.164 cv
10.879 245.164 li
10.438 244.773 10.117 244.379 9.91 243.984 cv
9.707 243.594 9.602 243.195 9.602 242.793 cv
9.602 242.324 9.684 241.934 9.84 241.613 cv
10.004 241.297 10.215 241.035 10.477 240.836 cv
10.742 240.641 11.051 240.5 11.406 240.414 cv
11.762 240.328 12.191 240.285 12.688 240.285 cv
cp
f
16.965 231.891 mo
17.012 231.895 17.047 231.902 17.07 231.918 cv
17.102 231.937 17.125 231.973 17.145 232.016 cv
17.164 232.062 17.176 232.121 17.191 232.195 cv
17.199 232.273 17.207 232.367 17.207 232.473 cv
17.207 232.598 17.199 232.695 17.191 232.766 cv
17.176 232.844 17.164 232.902 17.145 232.945 cv
17.125 232.992 17.102 233.023 17.07 233.035 cv
17.047 233.055 17.012 233.062 16.965 233.059 cv
16.039 233.059 li
16.484 233.461 16.805 233.855 17.004 234.242 cv
17.207 234.637 17.305 235.031 17.309 235.426 cv
17.305 235.898 17.23 236.293 17.074 236.609 cv
16.922 236.93 16.711 237.187 16.441 237.383 cv
16.176 237.586 15.863 237.727 15.504 237.809 cv
15.148 237.898 14.715 237.941 14.207 237.937 cv
9.953 237.937 li
9.914 237.941 9.879 237.934 9.848 237.91 cv
9.82 237.895 9.797 237.859 9.77 237.805 cv
9.75 237.758 9.734 237.687 9.723 237.602 cv
9.719 237.52 9.715 237.418 9.711 237.289 cv
9.715 237.168 9.719 237.062 9.723 236.977 cv
9.734 236.895 9.75 236.828 9.77 236.781 cv
9.797 236.734 9.82 236.699 9.848 236.676 cv
9.879 236.656 9.914 236.648 9.953 236.645 cv
14.035 236.645 li
14.449 236.648 14.777 236.617 15.023 236.555 cv
15.27 236.496 15.48 236.406 15.652 236.281 cv
15.832 236.164 15.965 236.008 16.059 235.816 cv
16.156 235.633 16.207 235.414 16.203 235.164 cv
16.207 234.844 16.09 234.523 15.859 234.199 cv
15.633 233.883 15.297 233.543 14.852 233.184 cv
9.953 233.184 li
9.914 233.184 9.879 233.176 9.848 233.156 cv
9.82 233.141 9.797 233.105 9.77 233.051 cv
9.75 233 9.734 232.934 9.723 232.852 cv
9.719 232.773 9.715 232.668 9.711 232.535 cv
9.715 232.414 9.719 232.309 9.723 232.223 cv
9.734 232.141 9.75 232.078 9.77 232.031 cv
9.797 231.988 9.82 231.953 9.848 231.926 cv
9.879 231.906 9.914 231.895 9.953 231.891 cv
cp
f
16.449 225.871 mo
16.605 225.871 16.723 225.883 16.809 225.902 cv
16.898 225.926 16.965 225.957 17.004 225.996 cv
17.047 226.039 17.086 226.102 17.121 226.184 cv
17.156 226.27 17.184 226.363 17.211 226.469 cv
17.23 226.578 17.25 226.691 17.27 226.809 cv
17.281 226.926 17.289 227.047 17.293 227.164 cv
17.289 227.531 17.242 227.844 17.148 228.102 cv
17.055 228.363 16.91 228.574 16.711 228.738 cv
16.52 228.906 16.273 229.027 15.973 229.102 cv
15.676 229.18 15.324 229.219 14.914 229.215 cv
10.816 229.215 li
10.816 230.195 li
10.82 230.273 10.777 230.336 10.691 230.383 cv
10.609 230.43 10.477 230.453 10.285 230.453 cv
10.191 230.453 10.109 230.449 10.039 230.434 cv
9.977 230.426 9.918 230.406 9.871 230.383 cv
9.828 230.363 9.797 230.336 9.777 230.301 cv
9.762 230.27 9.754 230.234 9.75 230.187 cv
9.75 229.215 li
8.082 229.215 li
8.051 229.219 8.016 229.207 7.98 229.187 cv
7.953 229.172 7.926 229.141 7.898 229.086 cv
7.879 229.039 7.863 228.973 7.848 228.887 cv
7.84 228.809 7.832 228.703 7.832 228.574 cv
7.832 228.445 7.84 228.34 7.848 228.258 cv
7.863 228.176 7.879 228.109 7.898 228.062 cv
7.926 228.016 7.953 227.984 7.98 227.961 cv
8.016 227.945 8.051 227.934 8.082 227.93 cv
9.75 227.93 li
9.75 226.129 li
9.754 226.09 9.762 226.055 9.777 226.02 cv
9.797 225.992 9.828 225.965 9.871 225.937 cv
9.918 225.918 9.977 225.902 10.039 225.887 cv
10.109 225.879 10.191 225.871 10.285 225.871 cv
10.477 225.871 10.609 225.895 10.691 225.941 cv
10.777 225.988 10.82 226.051 10.816 226.129 cv
10.816 227.93 li
14.73 227.93 li
15.215 227.934 15.578 227.863 15.824 227.715 cv
16.074 227.574 16.199 227.316 16.195 226.945 cv
16.199 226.832 16.188 226.727 16.16 226.629 cv
16.141 226.539 16.117 226.457 16.086 226.379 cv
16.063 226.309 16.035 226.246 16.012 226.191 cv
15.988 226.145 15.977 226.098 15.977 226.051 cv
15.977 226.027 15.984 226 15.996 225.977 cv
16.012 225.953 16.035 225.937 16.07 225.922 cv
16.109 225.914 16.16 225.902 16.219 225.887 cv
16.285 225.879 16.363 225.871 16.449 225.871 cv
cp
f
13.156 218.187 mo
13.359 218.191 13.5 218.242 13.586 218.34 cv
13.672 218.445 13.715 218.562 13.715 218.687 cv
13.715 223.305 li
14.105 223.309 14.457 223.27 14.77 223.187 cv
15.082 223.113 15.352 222.98 15.57 222.797 cv
15.797 222.617 15.969 222.383 16.086 222.086 cv
16.211 221.797 16.27 221.437 16.266 221.012 cv
16.27 220.68 16.242 220.383 16.184 220.121 cv
16.133 219.859 16.07 219.633 16 219.441 cv
15.934 219.254 15.875 219.098 15.816 218.973 cv
15.766 218.852 15.738 218.758 15.734 218.695 cv
15.738 218.66 15.746 218.629 15.762 218.598 cv
15.781 218.57 15.809 218.547 15.844 218.527 cv
15.883 218.516 15.934 218.504 15.996 218.492 cv
16.063 218.488 16.141 218.484 16.234 218.48 cv
16.305 218.484 16.363 218.488 16.41 218.488 cv
16.457 218.496 16.5 218.5 16.539 218.508 cv
16.578 218.516 16.613 218.531 16.645 218.547 cv
16.676 218.57 16.707 218.594 16.734 218.617 cv
16.766 218.648 16.813 218.73 16.875 218.871 cv
16.941 219.012 17.004 219.195 17.066 219.418 cv
17.129 219.645 17.184 219.902 17.234 220.195 cv
17.281 220.488 17.305 220.801 17.309 221.133 cv
17.305 221.711 17.227 222.219 17.066 222.648 cv
16.906 223.086 16.668 223.449 16.352 223.742 cv
16.035 224.043 15.641 224.266 15.16 224.414 cv
14.684 224.562 14.125 224.637 13.488 224.637 cv
12.891 224.637 12.352 224.562 11.867 224.406 cv
11.391 224.254 10.98 224.027 10.645 223.73 cv
10.309 223.437 10.051 223.082 9.871 222.668 cv
9.691 222.254 9.602 221.789 9.602 221.273 cv
9.602 220.723 9.691 220.254 9.867 219.867 cv
10.047 219.48 10.285 219.164 10.582 218.91 cv
10.883 218.664 11.234 218.48 11.633 218.363 cv
12.039 218.25 12.469 218.191 12.922 218.187 cv
cp
12.773 219.48 mo
12.098 219.465 11.566 219.617 11.184 219.934 cv
10.801 220.25 10.609 220.719 10.605 221.336 cv
10.609 221.66 10.668 221.941 10.785 222.18 cv
10.906 222.422 11.066 222.621 11.262 222.781 cv
11.461 222.945 11.691 223.07 11.953 223.156 cv
12.215 223.246 12.488 223.297 12.773 223.305 cv
cp
f
15.055 211.902 mo
15.418 211.906 15.738 211.973 16.016 212.102 cv
16.297 212.234 16.531 212.422 16.723 212.664 cv
16.918 212.91 17.063 213.203 17.16 213.539 cv
17.258 213.879 17.305 214.25 17.309 214.652 cv
17.305 214.906 17.285 215.145 17.25 215.367 cv
17.207 215.594 17.16 215.793 17.102 215.973 cv
17.043 216.152 16.98 216.305 16.914 216.43 cv
16.852 216.555 16.793 216.648 16.738 216.703 cv
16.688 216.762 16.617 216.801 16.52 216.824 cv
16.43 216.852 16.301 216.863 16.141 216.863 cv
16.043 216.863 15.961 216.859 15.891 216.848 cv
15.824 216.84 15.77 216.828 15.727 216.809 cv
15.688 216.797 15.656 216.773 15.637 216.746 cv
15.621 216.719 15.613 216.687 15.609 216.648 cv
15.613 216.594 15.648 216.508 15.715 216.395 cv
15.789 216.285 15.867 216.148 15.945 215.98 cv
16.031 215.82 16.105 215.629 16.176 215.402 cv
16.246 215.184 16.281 214.926 16.281 214.629 cv
16.281 214.414 16.258 214.215 16.211 214.035 cv
16.164 213.859 16.098 213.707 16.004 213.578 cv
15.918 213.449 15.801 213.348 15.656 213.277 cv
15.52 213.207 15.352 213.172 15.156 213.172 cv
14.961 213.172 14.797 213.223 14.66 213.324 cv
14.527 213.426 14.406 213.562 14.301 213.727 cv
14.199 213.895 14.109 214.078 14.023 214.285 cv
13.945 214.496 13.859 214.711 13.77 214.93 cv
13.684 215.148 13.582 215.363 13.469 215.574 cv
13.359 215.785 13.227 215.977 13.063 216.141 cv
12.906 216.312 12.711 216.445 12.484 216.543 cv
12.262 216.648 11.996 216.699 11.684 216.695 cv
11.41 216.699 11.145 216.645 10.891 216.535 cv
10.641 216.43 10.422 216.27 10.23 216.055 cv
10.043 215.844 9.891 215.578 9.773 215.258 cv
9.66 214.937 9.602 214.566 9.602 214.137 cv
9.602 213.953 9.617 213.766 9.648 213.578 cv
9.68 213.395 9.719 213.227 9.766 213.07 cv
9.813 212.922 9.863 212.793 9.918 212.684 cv
9.973 212.582 10.023 212.5 10.063 212.441 cv
10.109 212.391 10.145 212.355 10.172 212.332 cv
10.203 212.316 10.238 212.301 10.273 212.293 cv
10.316 212.285 10.363 212.277 10.418 212.27 cv
10.477 212.262 10.547 212.258 10.629 212.258 cv
10.719 212.258 10.797 212.262 10.859 212.27 cv
10.93 212.277 10.98 212.293 11.02 212.309 cv
11.063 212.332 11.094 212.352 11.109 212.375 cv
11.129 212.402 11.137 212.434 11.137 212.461 cv
11.137 212.512 11.109 212.578 11.051 212.664 cv
10.996 212.754 10.934 212.867 10.867 213.008 cv
10.805 213.148 10.746 213.316 10.684 213.504 cv
10.629 213.695 10.598 213.91 10.598 214.152 cv
10.598 214.375 10.625 214.566 10.672 214.73 cv
10.727 214.898 10.797 215.035 10.883 215.141 cv
10.977 215.246 11.082 215.328 11.207 215.379 cv
11.332 215.437 11.469 215.465 11.613 215.461 cv
11.816 215.465 11.984 215.414 12.121 215.309 cv
12.262 215.207 12.383 215.07 12.484 214.902 cv
12.59 214.738 12.684 214.547 12.766 214.332 cv
12.852 214.121 12.938 213.906 13.023 213.684 cv
13.113 213.465 13.215 213.246 13.32 213.027 cv
13.43 212.812 13.559 212.621 13.715 212.453 cv
13.871 212.289 14.059 212.156 14.277 212.055 cv
14.496 211.957 14.758 211.906 15.055 211.902 cv
cp
f
12.977 207.461 mo
13.563 207.461 14.145 207.5 14.719 207.57 cv
15.293 207.648 15.859 207.758 16.422 207.898 cv
16.98 208.047 17.531 208.223 18.074 208.434 cv
18.617 208.645 19.152 208.891 19.684 209.168 cv
19.707 209.187 19.73 209.211 19.754 209.238 cv
19.773 209.273 19.793 209.312 19.809 209.359 cv
19.824 209.41 19.832 209.469 19.84 209.535 cv
19.84 209.605 19.844 209.687 19.848 209.777 cv
19.844 209.914 19.836 210.02 19.828 210.094 cv
19.813 210.172 19.793 210.227 19.766 210.258 cv
19.734 210.293 19.699 210.309 19.656 210.305 cv
19.609 210.305 19.555 210.289 19.496 210.262 cv
18.445 209.785 17.375 209.426 16.277 209.18 cv
15.18 208.937 14.07 208.816 12.953 208.812 cv
11.844 208.816 10.738 208.937 9.637 209.18 cv
8.539 209.426 7.469 209.793 6.422 210.277 cv
6.379 210.301 6.336 210.309 6.289 210.301 cv
6.25 210.301 6.215 210.277 6.188 210.23 cv
6.164 210.191 6.145 210.133 6.125 210.059 cv
6.113 209.988 6.105 209.891 6.102 209.77 cv
6.105 209.66 6.109 209.57 6.113 209.496 cv
6.125 209.426 6.137 209.367 6.148 209.32 cv
6.168 209.277 6.184 209.246 6.195 209.223 cv
6.215 209.207 6.23 209.191 6.25 209.176 cv
7.316 208.645 8.414 208.223 9.535 207.918 cv
10.664 207.613 11.809 207.461 12.977 207.461 cv
cp
f
262.5 525.598 mo
262.496 525.703 262.48 525.793 262.445 525.863 cv
262.41 525.941 262.363 526 262.309 526.043 cv
262.25 526.094 262.188 526.129 262.121 526.145 cv
262.047 526.168 261.977 526.176 261.914 526.176 cv
261.469 526.176 li
261.328 526.176 261.207 526.164 261.102 526.133 cv
260.996 526.109 260.898 526.055 260.805 525.977 cv
260.711 525.902 260.617 525.801 260.523 525.668 cv
260.43 525.539 260.328 525.375 260.223 525.172 cv
257.148 519.434 li
256.984 519.141 256.82 518.832 256.66 518.504 cv
256.492 518.184 256.34 517.867 256.203 517.559 cv
256.188 517.559 li
256.195 517.934 256.203 518.316 256.211 518.703 cv
256.215 519.094 256.215 519.48 256.219 519.863 cv
256.219 525.949 li
256.215 525.988 256.203 526.023 256.184 526.055 cv
256.16 526.09 256.125 526.117 256.074 526.133 cv
256.02 526.152 255.949 526.164 255.867 526.18 cv
255.781 526.191 255.676 526.199 255.547 526.199 cv
255.41 526.199 255.301 526.191 255.219 526.18 cv
255.133 526.164 255.066 526.152 255.02 526.133 cv
254.969 526.117 254.934 526.09 254.91 526.055 cv
254.887 526.023 254.875 525.988 254.879 525.949 cv
254.879 516.645 li
254.875 516.437 254.934 516.289 255.055 516.199 cv
255.172 516.113 255.301 516.07 255.441 516.066 cv
256.102 516.066 li
256.254 516.07 256.387 516.082 256.492 516.105 cv
256.594 516.133 256.688 516.176 256.773 516.234 cv
256.855 516.297 256.934 516.379 257.016 516.484 cv
257.09 516.594 257.172 516.73 257.258 516.887 cv
259.625 521.312 li
259.77 521.586 259.91 521.852 260.047 522.105 cv
260.18 522.363 260.309 522.617 260.438 522.863 cv
260.559 523.117 260.684 523.363 260.809 523.602 cv
260.93 523.844 261.051 524.086 261.176 524.328 cv
261.184 524.328 li
261.172 523.922 261.164 523.492 261.164 523.047 cv
261.156 522.602 261.156 522.176 261.16 521.766 cv
261.16 516.293 li
261.156 516.258 261.168 516.223 261.191 516.191 cv
261.215 516.16 261.25 516.133 261.305 516.109 cv
261.352 516.086 261.422 516.07 261.508 516.059 cv
261.594 516.051 261.703 516.047 261.844 516.043 cv
261.961 516.047 262.066 516.051 262.156 516.059 cv
262.242 516.07 262.309 516.086 262.359 516.109 cv
262.406 516.133 262.441 516.16 262.465 516.191 cv
262.484 516.223 262.496 516.258 262.5 516.293 cv
cp
f
271.051 525.957 mo
271.047 526.004 271.039 526.039 271.023 526.062 cv
271.004 526.094 270.969 526.117 270.926 526.137 cv
270.879 526.156 270.82 526.168 270.746 526.184 cv
270.668 526.191 270.574 526.199 270.469 526.199 cv
270.344 526.199 270.246 526.191 270.176 526.184 cv
270.098 526.168 270.039 526.156 269.996 526.137 cv
269.949 526.117 269.918 526.094 269.906 526.062 cv
269.887 526.039 269.879 526.004 269.883 525.957 cv
269.883 525.031 li
269.48 525.477 269.086 525.797 268.699 525.996 cv
268.305 526.199 267.91 526.297 267.516 526.301 cv
267.043 526.297 266.648 526.223 266.332 526.066 cv
266.012 525.914 265.754 525.703 265.559 525.434 cv
265.355 525.168 265.215 524.855 265.133 524.496 cv
265.043 524.141 265 523.707 265.004 523.199 cv
265.004 518.945 li
265 518.906 265.008 518.871 265.031 518.84 cv
265.047 518.812 265.082 518.789 265.137 518.762 cv
265.184 518.742 265.254 518.727 265.34 518.715 cv
265.422 518.711 265.523 518.707 265.652 518.703 cv
265.773 518.707 265.879 518.711 265.965 518.715 cv
266.047 518.727 266.113 518.742 266.16 518.762 cv
266.207 518.789 266.242 518.812 266.266 518.84 cv
266.285 518.871 266.293 518.906 266.297 518.945 cv
266.297 523.027 li
266.293 523.441 266.324 523.77 266.387 524.016 cv
266.445 524.262 266.535 524.473 266.66 524.645 cv
266.777 524.824 266.934 524.957 267.125 525.051 cv
267.309 525.148 267.527 525.199 267.777 525.195 cv
268.098 525.199 268.418 525.082 268.742 524.852 cv
269.059 524.625 269.398 524.289 269.758 523.844 cv
269.758 518.945 li
269.758 518.906 269.766 518.871 269.785 518.84 cv
269.801 518.812 269.836 518.789 269.891 518.762 cv
269.941 518.742 270.008 518.727 270.09 518.715 cv
270.168 518.711 270.273 518.707 270.406 518.703 cv
270.527 518.707 270.633 518.711 270.719 518.715 cv
270.801 518.727 270.863 518.742 270.91 518.762 cv
270.953 518.789 270.988 518.812 271.016 518.84 cv
271.035 518.871 271.047 518.906 271.051 518.945 cv
cp
f
283.828 525.957 mo
283.824 526.004 283.816 526.039 283.797 526.062 cv
283.773 526.094 283.738 526.117 283.695 526.137 cv
283.645 526.156 283.578 526.168 283.5 526.184 cv
283.414 526.191 283.313 526.199 283.188 526.199 cv
283.055 526.199 282.945 526.191 282.867 526.184 cv
282.781 526.168 282.715 526.156 282.668 526.137 cv
282.613 526.117 282.578 526.094 282.563 526.062 cv
282.539 526.039 282.531 526.004 282.531 525.957 cv
282.531 521.695 li
282.531 521.402 282.504 521.133 282.453 520.887 cv
282.398 520.645 282.316 520.434 282.203 520.254 cv
282.09 520.078 281.945 519.941 281.77 519.848 cv
281.59 519.754 281.379 519.707 281.145 519.707 cv
280.848 519.707 280.551 519.824 280.254 520.051 cv
279.949 520.285 279.621 520.617 279.266 521.055 cv
279.266 525.957 li
279.262 526.004 279.25 526.039 279.234 526.062 cv
279.211 526.094 279.18 526.117 279.133 526.137 cv
279.082 526.156 279.016 526.168 278.934 526.184 cv
278.848 526.191 278.742 526.199 278.621 526.199 cv
278.5 526.199 278.398 526.191 278.313 526.184 cv
278.227 526.168 278.156 526.156 278.109 526.137 cv
278.055 526.117 278.023 526.094 278.008 526.062 cv
277.988 526.039 277.977 526.004 277.98 525.957 cv
277.98 521.695 li
277.977 521.402 277.949 521.133 277.895 520.887 cv
277.836 520.645 277.75 520.434 277.637 520.254 cv
277.523 520.078 277.379 519.941 277.207 519.848 cv
277.027 519.754 276.82 519.707 276.586 519.707 cv
276.285 519.707 275.988 519.824 275.688 520.051 cv
275.387 520.285 275.059 520.617 274.707 521.055 cv
274.707 525.957 li
274.703 526.004 274.691 526.039 274.676 526.062 cv
274.652 526.094 274.621 526.117 274.574 526.137 cv
274.527 526.156 274.461 526.168 274.383 526.184 cv
274.297 526.191 274.191 526.199 274.063 526.199 cv
273.934 526.199 273.828 526.191 273.75 526.184 cv
273.664 526.168 273.598 526.156 273.551 526.137 cv
273.496 526.117 273.465 526.094 273.449 526.062 cv
273.43 526.039 273.418 526.004 273.422 525.957 cv
273.422 518.945 li
273.418 518.906 273.426 518.871 273.445 518.84 cv
273.457 518.812 273.488 518.789 273.539 518.762 cv
273.582 518.742 273.645 518.727 273.719 518.715 cv
273.789 518.711 273.883 518.707 274.008 518.703 cv
274.117 518.707 274.215 518.711 274.293 518.715 cv
274.367 518.727 274.426 518.742 274.469 518.762 cv
274.508 518.789 274.535 518.812 274.555 518.84 cv
274.57 518.871 274.578 518.906 274.582 518.945 cv
274.582 519.871 li
274.973 519.43 275.355 519.109 275.73 518.902 cv
276.098 518.699 276.477 518.594 276.859 518.594 cv
277.148 518.594 277.406 518.629 277.641 518.695 cv
277.867 518.766 278.074 518.859 278.254 518.98 cv
278.43 519.102 278.578 519.246 278.707 519.414 cv
278.828 519.586 278.934 519.777 279.02 519.98 cv
279.25 519.73 279.473 519.516 279.684 519.336 cv
279.895 519.164 280.098 519.02 280.293 518.906 cv
280.488 518.801 280.676 518.723 280.859 518.668 cv
281.043 518.621 281.23 518.594 281.418 518.594 cv
281.871 518.594 282.25 518.676 282.555 518.832 cv
282.859 518.996 283.105 519.207 283.301 519.469 cv
283.488 519.734 283.625 520.043 283.707 520.398 cv
283.785 520.754 283.824 521.129 283.828 521.523 cv
cp
f
292.625 522.355 mo
292.621 522.965 292.555 523.516 292.426 524 cv
292.289 524.488 292.094 524.902 291.84 525.242 cv
291.582 525.586 291.266 525.848 290.895 526.027 cv
290.52 526.211 290.094 526.297 289.609 526.301 cv
289.383 526.297 289.176 526.277 288.988 526.234 cv
288.801 526.187 288.613 526.117 288.434 526.02 cv
288.246 525.922 288.066 525.797 287.887 525.645 cv
287.703 525.496 287.512 525.316 287.313 525.102 cv
287.313 525.957 li
287.313 526.004 287.301 526.039 287.281 526.066 cv
287.258 526.102 287.223 526.125 287.18 526.141 cv
287.129 526.156 287.07 526.168 287.004 526.184 cv
286.93 526.191 286.84 526.199 286.734 526.199 cv
286.625 526.199 286.539 526.191 286.469 526.184 cv
286.395 526.168 286.332 526.156 286.289 526.141 cv
286.238 526.125 286.207 526.102 286.195 526.066 cv
286.176 526.039 286.168 526.004 286.172 525.957 cv
286.172 515.547 li
286.168 515.508 286.18 515.473 286.199 515.437 cv
286.215 515.41 286.246 515.383 286.301 515.359 cv
286.348 515.34 286.414 515.324 286.5 515.312 cv
286.578 515.305 286.684 515.301 286.813 515.297 cv
286.941 515.301 287.047 515.305 287.133 515.312 cv
287.211 515.324 287.277 515.34 287.324 515.359 cv
287.371 515.383 287.402 515.41 287.426 515.437 cv
287.441 515.473 287.453 515.508 287.457 515.547 cv
287.457 519.746 li
287.664 519.535 287.867 519.355 288.063 519.211 cv
288.258 519.066 288.445 518.949 288.633 518.855 cv
288.816 518.77 289.004 518.703 289.195 518.656 cv
289.379 518.617 289.578 518.594 289.789 518.594 cv
290.293 518.594 290.727 518.695 291.094 518.898 cv
291.453 519.102 291.746 519.375 291.973 519.711 cv
292.195 520.055 292.363 520.453 292.469 520.91 cv
292.57 521.367 292.621 521.848 292.625 522.355 cv
cp
291.293 522.504 mo
291.289 522.148 291.262 521.801 291.211 521.461 cv
291.152 521.125 291.059 520.828 290.922 520.566 cv
290.785 520.309 290.605 520.098 290.383 519.937 cv
290.156 519.781 289.875 519.703 289.543 519.699 cv
289.375 519.703 289.211 519.727 289.051 519.77 cv
288.887 519.82 288.723 519.898 288.555 520.004 cv
288.387 520.117 288.211 520.258 288.035 520.426 cv
287.852 520.602 287.66 520.816 287.457 521.07 cv
287.457 523.867 li
287.813 524.301 288.152 524.633 288.477 524.855 cv
288.801 525.086 289.137 525.199 289.488 525.195 cv
289.809 525.199 290.086 525.121 290.32 524.961 cv
290.547 524.809 290.734 524.602 290.879 524.34 cv
291.023 524.086 291.129 523.797 291.195 523.477 cv
291.258 523.16 291.289 522.836 291.293 522.504 cv
cp
f
300.535 522.148 mo
300.531 522.352 300.48 522.492 300.383 522.578 cv
300.277 522.664 300.16 522.707 300.035 522.707 cv
295.418 522.707 li
295.414 523.098 295.453 523.449 295.535 523.762 cv
295.609 524.074 295.742 524.344 295.926 524.562 cv
296.105 524.789 296.34 524.961 296.637 525.078 cv
296.926 525.203 297.285 525.262 297.711 525.258 cv
298.043 525.262 298.34 525.234 298.602 525.176 cv
298.863 525.125 299.09 525.062 299.281 524.992 cv
299.469 524.926 299.625 524.867 299.75 524.809 cv
299.871 524.758 299.965 524.73 300.027 524.727 cv
300.063 524.73 300.094 524.738 300.125 524.754 cv
300.152 524.773 300.176 524.801 300.195 524.836 cv
300.207 524.875 300.219 524.926 300.23 524.988 cv
300.234 525.055 300.238 525.133 300.242 525.227 cv
300.238 525.297 300.234 525.355 300.234 525.402 cv
300.227 525.449 300.223 525.492 300.215 525.531 cv
300.207 525.57 300.191 525.605 300.176 525.637 cv
300.152 525.668 300.129 525.699 300.105 525.727 cv
300.074 525.758 299.992 525.805 299.852 525.867 cv
299.711 525.934 299.527 525.996 299.305 526.059 cv
299.078 526.121 298.82 526.176 298.527 526.227 cv
298.234 526.273 297.922 526.297 297.59 526.301 cv
297.012 526.297 296.504 526.219 296.074 526.059 cv
295.637 525.898 295.273 525.66 294.98 525.344 cv
294.68 525.027 294.457 524.633 294.309 524.152 cv
294.16 523.676 294.086 523.117 294.086 522.48 cv
294.086 521.883 294.16 521.344 294.316 520.859 cv
294.469 520.383 294.695 519.973 294.992 519.637 cv
295.285 519.301 295.641 519.043 296.055 518.863 cv
296.469 518.684 296.934 518.594 297.449 518.594 cv
298 518.594 298.469 518.684 298.855 518.859 cv
299.242 519.039 299.559 519.277 299.813 519.574 cv
300.059 519.875 300.242 520.227 300.359 520.625 cv
300.473 521.031 300.531 521.461 300.535 521.914 cv
cp
299.242 521.766 mo
299.258 521.09 299.105 520.559 298.789 520.176 cv
298.473 519.793 298.004 519.602 297.387 519.598 cv
297.063 519.602 296.781 519.66 296.543 519.777 cv
296.301 519.898 296.102 520.059 295.941 520.254 cv
295.777 520.453 295.652 520.684 295.566 520.945 cv
295.477 521.207 295.426 521.48 295.418 521.766 cv
cp
f
306.602 519.402 mo
306.598 519.52 306.598 519.617 306.594 519.691 cv
306.586 519.773 306.574 519.836 306.563 519.875 cv
306.543 519.922 306.523 519.953 306.504 519.977 cv
306.477 520 306.445 520.012 306.406 520.012 cv
306.363 520.012 306.313 520 306.254 519.977 cv
306.191 519.953 306.121 519.93 306.051 519.906 cv
305.973 519.883 305.891 519.863 305.797 519.84 cv
305.703 519.824 305.602 519.812 305.492 519.809 cv
305.359 519.812 305.23 519.84 305.109 519.887 cv
304.984 519.941 304.855 520.027 304.719 520.145 cv
304.578 520.27 304.434 520.426 304.285 520.621 cv
304.133 520.816 303.965 521.059 303.785 521.344 cv
303.785 525.957 li
303.781 526.004 303.77 526.039 303.754 526.062 cv
303.73 526.094 303.699 526.117 303.652 526.137 cv
303.605 526.156 303.539 526.168 303.461 526.184 cv
303.375 526.191 303.27 526.199 303.141 526.199 cv
303.012 526.199 302.906 526.191 302.828 526.184 cv
302.742 526.168 302.676 526.156 302.629 526.137 cv
302.574 526.117 302.543 526.094 302.527 526.062 cv
302.508 526.039 302.496 526.004 302.5 525.957 cv
302.5 518.945 li
302.496 518.906 302.504 518.871 302.523 518.84 cv
302.535 518.812 302.566 518.789 302.617 518.762 cv
302.66 518.742 302.723 518.727 302.797 518.715 cv
302.867 518.711 302.961 518.707 303.086 518.703 cv
303.195 518.707 303.293 518.711 303.371 518.715 cv
303.445 518.727 303.504 518.742 303.547 518.762 cv
303.586 518.789 303.613 518.812 303.633 518.84 cv
303.648 518.871 303.656 518.906 303.66 518.945 cv
303.66 519.965 li
303.848 519.684 304.031 519.457 304.203 519.281 cv
304.371 519.105 304.531 518.965 304.684 518.863 cv
304.832 518.762 304.98 518.691 305.129 518.652 cv
305.277 518.613 305.426 518.594 305.578 518.594 cv
305.645 518.594 305.723 518.598 305.809 518.605 cv
305.895 518.613 305.984 518.629 306.078 518.648 cv
306.172 518.672 306.254 518.695 306.332 518.719 cv
306.402 518.746 306.457 518.773 306.492 518.797 cv
306.52 518.828 306.539 518.852 306.555 518.871 cv
306.563 518.898 306.574 518.93 306.582 518.961 cv
306.59 519 306.594 519.051 306.598 519.121 cv
306.598 519.191 306.598 519.285 306.602 519.402 cv
cp
f
318.359 522.371 mo
318.355 522.949 318.281 523.477 318.133 523.953 cv
317.98 524.437 317.754 524.852 317.457 525.195 cv
317.156 525.547 316.781 525.816 316.336 526.008 cv
315.883 526.203 315.363 526.297 314.773 526.301 cv
314.195 526.297 313.691 526.215 313.266 526.043 cv
312.836 525.875 312.48 525.625 312.195 525.297 cv
311.906 524.969 311.691 524.574 311.555 524.105 cv
311.414 523.641 311.348 523.109 311.348 522.512 cv
311.348 521.945 311.418 521.418 311.566 520.937 cv
311.711 520.457 311.938 520.043 312.238 519.691 cv
312.535 519.344 312.906 519.074 313.355 518.883 cv
313.801 518.691 314.324 518.594 314.922 518.594 cv
315.5 518.594 316 518.68 316.43 518.852 cv
316.855 519.023 317.215 519.273 317.5 519.602 cv
317.785 519.93 318 520.328 318.145 520.793 cv
318.285 521.262 318.355 521.789 318.359 522.371 cv
cp
317.027 522.457 mo
317.023 522.082 316.988 521.723 316.922 521.383 cv
316.848 521.047 316.73 520.754 316.57 520.496 cv
316.406 520.246 316.188 520.043 315.91 519.891 cv
315.629 519.746 315.281 519.672 314.871 519.668 cv
314.484 519.672 314.156 519.738 313.883 519.871 cv
313.605 520.008 313.379 520.199 313.203 520.445 cv
313.023 520.691 312.891 520.984 312.809 521.32 cv
312.719 521.66 312.676 522.027 312.68 522.426 cv
312.676 522.812 312.711 523.176 312.785 523.512 cv
312.852 523.852 312.969 524.145 313.137 524.395 cv
313.301 524.648 313.523 524.852 313.801 524.996 cv
314.078 525.148 314.426 525.223 314.84 525.219 cv
315.215 525.223 315.543 525.152 315.824 525.016 cv
316.102 524.883 316.328 524.695 316.508 524.445 cv
316.684 524.203 316.813 523.91 316.898 523.574 cv
316.98 523.238 317.023 522.867 317.027 522.457 cv
cp
f
324.09 516.059 mo
324.086 516.16 324.082 516.238 324.074 516.297 cv
324.063 516.359 324.051 516.41 324.039 516.441 cv
324.023 516.48 324.008 516.504 323.988 516.516 cv
323.965 516.531 323.938 516.539 323.91 516.535 cv
323.871 516.539 323.824 516.527 323.773 516.5 cv
323.715 516.48 323.648 516.453 323.574 516.422 cv
323.492 516.395 323.402 516.367 323.297 516.344 cv
323.188 516.32 323.063 516.309 322.93 516.309 cv
322.734 516.309 322.57 516.34 322.438 516.402 cv
322.297 516.465 322.188 516.562 322.109 516.695 cv
322.023 516.828 321.965 517 321.93 517.211 cv
321.891 517.422 321.871 517.68 321.875 517.977 cv
321.875 518.742 li
323.441 518.742 li
323.48 518.746 323.516 518.754 323.547 518.77 cv
323.574 518.789 323.602 518.82 323.625 518.863 cv
323.648 518.91 323.664 518.969 323.68 519.031 cv
323.688 519.102 323.695 519.184 323.699 519.277 cv
323.695 519.469 323.672 519.602 323.629 519.684 cv
323.578 519.77 323.516 519.812 323.441 519.809 cv
321.875 519.809 li
321.875 525.957 li
321.871 526.004 321.863 526.039 321.844 526.062 cv
321.82 526.094 321.785 526.117 321.738 526.137 cv
321.688 526.156 321.621 526.168 321.539 526.184 cv
321.453 526.191 321.348 526.199 321.23 526.199 cv
321.102 526.199 321 526.191 320.918 526.184 cv
320.832 526.168 320.766 526.156 320.719 526.137 cv
320.668 526.117 320.633 526.094 320.613 526.062 cv
320.59 526.039 320.578 526.004 320.582 525.957 cv
320.582 519.809 li
319.594 519.809 li
319.508 519.812 319.445 519.77 319.406 519.684 cv
319.363 519.602 319.34 519.469 319.344 519.277 cv
319.34 519.184 319.348 519.102 319.359 519.031 cv
319.367 518.969 319.383 518.91 319.406 518.863 cv
319.426 518.82 319.449 518.789 319.484 518.77 cv
319.512 518.754 319.551 518.746 319.594 518.742 cv
320.582 518.742 li
320.582 518.016 li
320.578 517.531 320.625 517.113 320.719 516.758 cv
320.809 516.41 320.945 516.121 321.133 515.898 cv
321.316 515.676 321.551 515.512 321.84 515.402 cv
322.121 515.297 322.457 515.242 322.844 515.242 cv
323.02 515.242 323.195 515.262 323.371 515.293 cv
323.539 515.332 323.672 515.367 323.77 515.402 cv
323.859 515.445 323.922 515.48 323.957 515.508 cv
323.984 515.543 324.012 515.582 324.035 515.629 cv
324.055 515.68 324.066 515.742 324.078 515.809 cv
324.082 515.883 324.086 515.965 324.09 516.059 cv
cp
f
334.289 523.324 mo
334.285 523.797 334.199 524.219 334.027 524.586 cv
333.852 524.961 333.609 525.273 333.301 525.527 cv
332.992 525.785 332.629 525.977 332.211 526.105 cv
331.789 526.234 331.34 526.297 330.859 526.301 cv
330.52 526.297 330.203 526.27 329.918 526.215 cv
329.629 526.156 329.375 526.09 329.148 526.004 cv
328.922 525.926 328.73 525.84 328.578 525.746 cv
328.422 525.66 328.316 525.582 328.258 525.52 cv
328.199 525.457 328.156 525.379 328.129 525.285 cv
328.098 525.191 328.082 525.062 328.086 524.898 cv
328.082 524.785 328.086 524.691 328.102 524.613 cv
328.109 524.539 328.125 524.477 328.148 524.43 cv
328.164 524.383 328.191 524.352 328.227 524.332 cv
328.254 524.316 328.289 524.309 328.332 524.305 cv
328.402 524.309 328.504 524.352 328.641 524.437 cv
328.77 524.527 328.941 524.625 329.152 524.727 cv
329.359 524.836 329.609 524.934 329.902 525.02 cv
330.195 525.113 330.535 525.156 330.922 525.156 cv
331.211 525.156 331.477 525.117 331.719 525.039 cv
331.957 524.961 332.164 524.852 332.344 524.707 cv
332.516 524.566 332.652 524.391 332.746 524.18 cv
332.84 523.973 332.887 523.738 332.887 523.473 cv
332.887 523.191 332.82 522.945 332.691 522.738 cv
332.559 522.539 332.387 522.363 332.176 522.207 cv
331.961 522.059 331.719 521.918 331.445 521.785 cv
331.172 521.66 330.891 521.527 330.609 521.395 cv
330.32 521.262 330.043 521.117 329.773 520.953 cv
329.504 520.797 329.262 520.605 329.051 520.387 cv
328.832 520.168 328.66 519.914 328.531 519.617 cv
328.395 519.328 328.328 518.977 328.332 518.562 cv
328.328 518.145 328.406 517.77 328.563 517.437 cv
328.715 517.109 328.926 516.832 329.203 516.605 cv
329.473 516.387 329.797 516.215 330.176 516.098 cv
330.551 515.98 330.961 515.922 331.398 515.922 cv
331.617 515.922 331.84 515.941 332.07 515.98 cv
332.293 516.02 332.504 516.07 332.707 516.133 cv
332.902 516.199 333.082 516.273 333.242 516.352 cv
333.395 516.434 333.496 516.5 333.551 516.547 cv
333.598 516.602 333.633 516.641 333.648 516.664 cv
333.664 516.695 333.676 516.73 333.688 516.773 cv
333.695 516.82 333.703 516.875 333.711 516.934 cv
333.715 517 333.719 517.078 333.719 517.176 cv
333.719 517.27 333.715 517.355 333.707 517.426 cv
333.699 517.504 333.688 517.562 333.672 517.609 cv
333.656 517.656 333.633 517.691 333.605 517.715 cv
333.574 517.738 333.543 517.75 333.508 517.75 cv
333.449 517.75 333.359 517.715 333.238 517.645 cv
333.113 517.574 332.961 517.492 332.789 517.398 cv
332.609 517.309 332.402 517.227 332.164 517.148 cv
331.918 517.074 331.648 517.035 331.352 517.035 cv
331.07 517.035 330.824 517.074 330.617 517.148 cv
330.406 517.227 330.234 517.328 330.102 517.449 cv
329.965 517.574 329.863 517.719 329.797 517.891 cv
329.73 518.062 329.699 518.246 329.699 518.437 cv
329.699 518.723 329.762 518.965 329.891 519.164 cv
330.02 519.367 330.191 519.547 330.41 519.699 cv
330.621 519.859 330.867 520 331.145 520.129 cv
331.418 520.262 331.699 520.395 331.988 520.523 cv
332.273 520.656 332.555 520.801 332.828 520.957 cv
333.102 521.117 333.348 521.305 333.566 521.52 cv
333.781 521.738 333.953 521.992 334.09 522.285 cv
334.219 522.578 334.285 522.926 334.289 523.324 cv
cp
f
342.055 525.957 mo
342.051 526.004 342.043 526.039 342.027 526.062 cv
342.008 526.094 341.973 526.117 341.93 526.137 cv
341.883 526.156 341.824 526.168 341.75 526.184 cv
341.672 526.191 341.578 526.199 341.473 526.199 cv
341.348 526.199 341.25 526.191 341.18 526.184 cv
341.102 526.168 341.043 526.156 341 526.137 cv
340.953 526.117 340.922 526.094 340.91 526.062 cv
340.891 526.039 340.883 526.004 340.887 525.957 cv
340.887 525.031 li
340.484 525.477 340.09 525.797 339.703 525.996 cv
339.309 526.199 338.914 526.297 338.52 526.301 cv
338.047 526.297 337.652 526.223 337.336 526.066 cv
337.016 525.914 336.758 525.703 336.563 525.434 cv
336.359 525.168 336.219 524.855 336.137 524.496 cv
336.047 524.141 336.004 523.707 336.008 523.199 cv
336.008 518.945 li
336.004 518.906 336.012 518.871 336.035 518.84 cv
336.051 518.812 336.086 518.789 336.141 518.762 cv
336.188 518.742 336.258 518.727 336.344 518.715 cv
336.426 518.711 336.527 518.707 336.656 518.703 cv
336.777 518.707 336.883 518.711 336.969 518.715 cv
337.051 518.727 337.117 518.742 337.164 518.762 cv
337.211 518.789 337.246 518.812 337.27 518.84 cv
337.289 518.871 337.297 518.906 337.301 518.945 cv
337.301 523.027 li
337.297 523.441 337.328 523.77 337.391 524.016 cv
337.449 524.262 337.539 524.473 337.664 524.645 cv
337.781 524.824 337.938 524.957 338.129 525.051 cv
338.313 525.148 338.531 525.199 338.781 525.195 cv
339.102 525.199 339.422 525.082 339.746 524.852 cv
340.063 524.625 340.402 524.289 340.762 523.844 cv
340.762 518.945 li
340.762 518.906 340.77 518.871 340.789 518.84 cv
340.805 518.812 340.84 518.789 340.895 518.762 cv
340.945 518.742 341.012 518.727 341.094 518.715 cv
341.172 518.711 341.277 518.707 341.41 518.703 cv
341.531 518.707 341.637 518.711 341.723 518.715 cv
341.805 518.727 341.867 518.742 341.914 518.762 cv
341.957 518.789 341.992 518.812 342.02 518.84 cv
342.039 518.871 342.051 518.906 342.055 518.945 cv
cp
f
350.91 522.355 mo
350.906 522.965 350.84 523.516 350.711 524 cv
350.574 524.488 350.379 524.902 350.125 525.242 cv
349.867 525.586 349.551 525.848 349.18 526.027 cv
348.805 526.211 348.379 526.297 347.895 526.301 cv
347.668 526.297 347.461 526.277 347.273 526.234 cv
347.086 526.187 346.898 526.117 346.719 526.02 cv
346.531 525.922 346.352 525.797 346.172 525.645 cv
345.988 525.496 345.797 525.316 345.598 525.102 cv
345.598 525.957 li
345.598 526.004 345.586 526.039 345.566 526.066 cv
345.543 526.102 345.508 526.125 345.465 526.141 cv
345.414 526.156 345.355 526.168 345.289 526.184 cv
345.215 526.191 345.125 526.199 345.02 526.199 cv
344.91 526.199 344.824 526.191 344.754 526.184 cv
344.68 526.168 344.617 526.156 344.574 526.141 cv
344.523 526.125 344.492 526.102 344.48 526.066 cv
344.461 526.039 344.453 526.004 344.457 525.957 cv
344.457 515.547 li
344.453 515.508 344.465 515.473 344.484 515.437 cv
344.5 515.41 344.531 515.383 344.586 515.359 cv
344.633 515.34 344.699 515.324 344.785 515.312 cv
344.863 515.305 344.969 515.301 345.098 515.297 cv
345.227 515.301 345.332 515.305 345.418 515.312 cv
345.496 515.324 345.563 515.34 345.609 515.359 cv
345.656 515.383 345.688 515.41 345.711 515.437 cv
345.727 515.473 345.738 515.508 345.742 515.547 cv
345.742 519.746 li
345.949 519.535 346.152 519.355 346.348 519.211 cv
346.543 519.066 346.73 518.949 346.918 518.855 cv
347.102 518.77 347.289 518.703 347.48 518.656 cv
347.664 518.617 347.863 518.594 348.074 518.594 cv
348.578 518.594 349.012 518.695 349.379 518.898 cv
349.738 519.102 350.031 519.375 350.258 519.711 cv
350.48 520.055 350.648 520.453 350.754 520.91 cv
350.855 521.367 350.906 521.848 350.91 522.355 cv
cp
349.578 522.504 mo
349.574 522.148 349.547 521.801 349.496 521.461 cv
349.438 521.125 349.344 520.828 349.207 520.566 cv
349.07 520.309 348.891 520.098 348.668 519.937 cv
348.441 519.781 348.16 519.703 347.828 519.699 cv
347.66 519.703 347.496 519.727 347.336 519.77 cv
347.172 519.82 347.008 519.898 346.84 520.004 cv
346.672 520.117 346.496 520.258 346.32 520.426 cv
346.137 520.602 345.945 520.816 345.742 521.07 cv
345.742 523.867 li
346.098 524.301 346.438 524.633 346.762 524.855 cv
347.086 525.086 347.422 525.199 347.773 525.195 cv
348.094 525.199 348.371 525.121 348.605 524.961 cv
348.832 524.809 349.02 524.602 349.164 524.34 cv
349.309 524.086 349.414 523.797 349.48 523.477 cv
349.543 523.16 349.574 522.836 349.578 522.504 cv
cp
f
356.047 522.219 mo
356.047 522.422 356.023 522.559 355.977 522.637 cv
355.93 522.715 355.859 522.754 355.773 522.754 cv
352.516 522.754 li
352.422 522.754 352.355 522.715 352.309 522.633 cv
352.262 522.555 352.238 522.418 352.238 522.219 cv
352.238 522.023 352.262 521.883 352.309 521.805 cv
352.355 521.727 352.422 521.687 352.516 521.687 cv
355.773 521.687 li
355.813 521.687 355.852 521.695 355.887 521.711 cv
355.918 521.727 355.945 521.758 355.973 521.801 cv
355.992 521.848 356.012 521.902 356.027 521.969 cv
356.039 522.039 356.047 522.125 356.047 522.219 cv
cp
f
359.301 525.949 mo
359.297 525.992 359.289 526.027 359.27 526.059 cv
359.246 526.09 359.207 526.117 359.16 526.133 cv
359.105 526.152 359.039 526.164 358.953 526.18 cv
358.867 526.191 358.758 526.199 358.633 526.199 cv
358.504 526.199 358.398 526.191 358.313 526.18 cv
358.223 526.164 358.152 526.152 358.102 526.133 cv
358.047 526.117 358.012 526.09 357.992 526.059 cv
357.969 526.027 357.957 525.992 357.961 525.949 cv
357.961 516.27 li
357.957 516.23 357.969 516.195 357.996 516.16 cv
358.016 516.133 358.055 516.105 358.113 516.086 cv
358.164 516.07 358.234 516.055 358.324 516.039 cv
358.406 516.027 358.508 516.023 358.633 516.02 cv
358.758 516.023 358.867 516.027 358.953 516.039 cv
359.039 516.055 359.105 516.07 359.16 516.086 cv
359.207 516.105 359.246 516.133 359.27 516.16 cv
359.289 516.195 359.297 516.23 359.301 516.27 cv
cp
f
372.289 525.957 mo
372.285 526.004 372.277 526.039 372.258 526.062 cv
372.234 526.094 372.199 526.117 372.156 526.137 cv
372.105 526.156 372.039 526.168 371.961 526.184 cv
371.875 526.191 371.773 526.199 371.648 526.199 cv
371.516 526.199 371.406 526.191 371.328 526.184 cv
371.242 526.168 371.176 526.156 371.129 526.137 cv
371.074 526.117 371.039 526.094 371.023 526.062 cv
371 526.039 370.992 526.004 370.992 525.957 cv
370.992 521.695 li
370.992 521.402 370.965 521.133 370.914 520.887 cv
370.859 520.645 370.777 520.434 370.664 520.254 cv
370.551 520.078 370.406 519.941 370.23 519.848 cv
370.051 519.754 369.84 519.707 369.605 519.707 cv
369.309 519.707 369.012 519.824 368.715 520.051 cv
368.41 520.285 368.082 520.617 367.727 521.055 cv
367.727 525.957 li
367.723 526.004 367.711 526.039 367.695 526.062 cv
367.672 526.094 367.641 526.117 367.594 526.137 cv
367.543 526.156 367.477 526.168 367.395 526.184 cv
367.309 526.191 367.203 526.199 367.082 526.199 cv
366.961 526.199 366.859 526.191 366.773 526.184 cv
366.688 526.168 366.617 526.156 366.57 526.137 cv
366.516 526.117 366.484 526.094 366.469 526.062 cv
366.449 526.039 366.438 526.004 366.441 525.957 cv
366.441 521.695 li
366.438 521.402 366.41 521.133 366.355 520.887 cv
366.297 520.645 366.211 520.434 366.098 520.254 cv
365.984 520.078 365.84 519.941 365.668 519.848 cv
365.488 519.754 365.281 519.707 365.047 519.707 cv
364.746 519.707 364.449 519.824 364.148 520.051 cv
363.848 520.285 363.52 520.617 363.168 521.055 cv
363.168 525.957 li
363.164 526.004 363.152 526.039 363.137 526.062 cv
363.113 526.094 363.082 526.117 363.035 526.137 cv
362.988 526.156 362.922 526.168 362.844 526.184 cv
362.758 526.191 362.652 526.199 362.523 526.199 cv
362.395 526.199 362.289 526.191 362.211 526.184 cv
362.125 526.168 362.059 526.156 362.012 526.137 cv
361.957 526.117 361.926 526.094 361.91 526.062 cv
361.891 526.039 361.879 526.004 361.883 525.957 cv
361.883 518.945 li
361.879 518.906 361.887 518.871 361.906 518.84 cv
361.918 518.812 361.949 518.789 362 518.762 cv
362.043 518.742 362.105 518.727 362.18 518.715 cv
362.25 518.711 362.344 518.707 362.469 518.703 cv
362.578 518.707 362.676 518.711 362.754 518.715 cv
362.828 518.727 362.887 518.742 362.93 518.762 cv
362.969 518.789 362.996 518.812 363.016 518.84 cv
363.031 518.871 363.039 518.906 363.043 518.945 cv
363.043 519.871 li
363.434 519.43 363.816 519.109 364.191 518.902 cv
364.559 518.699 364.938 518.594 365.32 518.594 cv
365.609 518.594 365.867 518.629 366.102 518.695 cv
366.328 518.766 366.535 518.859 366.715 518.98 cv
366.891 519.102 367.039 519.246 367.168 519.414 cv
367.289 519.586 367.395 519.777 367.48 519.98 cv
367.711 519.73 367.934 519.516 368.145 519.336 cv
368.355 519.164 368.559 519.02 368.754 518.906 cv
368.949 518.801 369.137 518.723 369.32 518.668 cv
369.504 518.621 369.691 518.594 369.879 518.594 cv
370.332 518.594 370.711 518.676 371.016 518.832 cv
371.32 518.996 371.566 519.207 371.762 519.469 cv
371.949 519.734 372.086 520.043 372.168 520.398 cv
372.246 520.754 372.285 521.129 372.289 521.523 cv
cp
f
379.918 525.965 mo
379.914 526.027 379.895 526.074 379.855 526.105 cv
379.813 526.137 379.754 526.16 379.684 526.176 cv
379.605 526.191 379.5 526.199 379.363 526.199 cv
379.227 526.199 379.117 526.191 379.039 526.176 cv
378.953 526.16 378.895 526.137 378.863 526.105 cv
378.824 526.074 378.809 526.027 378.813 525.965 cv
378.813 525.266 li
378.504 525.594 378.16 525.848 377.785 526.027 cv
377.406 526.211 377.008 526.297 376.59 526.301 cv
376.215 526.297 375.883 526.25 375.586 526.156 cv
375.289 526.059 375.035 525.922 374.824 525.738 cv
374.613 525.559 374.449 525.336 374.332 525.07 cv
374.215 524.809 374.156 524.508 374.16 524.164 cv
374.156 523.773 374.234 523.43 374.398 523.137 cv
374.555 522.848 374.789 522.605 375.094 522.414 cv
375.395 522.223 375.762 522.078 376.199 521.98 cv
376.633 521.887 377.125 521.84 377.672 521.836 cv
378.641 521.836 li
378.641 521.289 li
378.637 521.02 378.609 520.781 378.555 520.574 cv
378.496 520.367 378.402 520.195 378.277 520.055 cv
378.145 519.918 377.98 519.812 377.781 519.742 cv
377.574 519.672 377.324 519.637 377.035 519.637 cv
376.715 519.637 376.43 519.676 376.18 519.75 cv
375.922 519.828 375.703 519.91 375.516 520 cv
375.328 520.094 375.168 520.18 375.043 520.25 cv
374.91 520.328 374.816 520.363 374.758 520.363 cv
374.715 520.363 374.68 520.355 374.648 520.332 cv
374.617 520.316 374.59 520.285 374.566 520.238 cv
374.543 520.199 374.523 520.145 374.516 520.078 cv
374.5 520.016 374.496 519.945 374.5 519.863 cv
374.496 519.738 374.504 519.633 374.527 519.555 cv
374.543 519.48 374.59 519.41 374.66 519.34 cv
374.73 519.273 374.852 519.195 375.023 519.105 cv
375.195 519.016 375.391 518.934 375.613 518.855 cv
375.836 518.785 376.082 518.723 376.348 518.668 cv
376.613 518.621 376.879 518.594 377.152 518.594 cv
377.652 518.594 378.082 518.652 378.434 518.766 cv
378.785 518.883 379.07 519.051 379.293 519.27 cv
379.508 519.492 379.668 519.766 379.77 520.09 cv
379.867 520.422 379.914 520.805 379.918 521.234 cv
cp
378.641 522.762 mo
377.539 522.762 li
377.184 522.766 376.879 522.797 376.621 522.852 cv
376.359 522.914 376.145 523 375.973 523.117 cv
375.801 523.234 375.676 523.375 375.598 523.539 cv
375.516 523.703 375.473 523.891 375.477 524.102 cv
375.473 524.469 375.59 524.762 375.82 524.973 cv
376.051 525.191 376.375 525.297 376.793 525.297 cv
377.129 525.297 377.441 525.211 377.73 525.039 cv
378.02 524.867 378.32 524.605 378.641 524.25 cv
cp
f
388.137 519.262 mo
388.133 519.445 388.109 519.578 388.063 519.656 cv
388.012 519.738 387.949 519.777 387.875 519.777 cv
386.867 519.777 li
387.047 519.965 387.176 520.172 387.25 520.398 cv
387.32 520.625 387.355 520.859 387.359 521.102 cv
387.355 521.508 387.289 521.867 387.164 522.18 cv
387.031 522.492 386.848 522.758 386.605 522.969 cv
386.363 523.187 386.074 523.352 385.746 523.465 cv
385.41 523.582 385.043 523.641 384.641 523.637 cv
384.352 523.641 384.078 523.602 383.824 523.523 cv
383.563 523.449 383.367 523.355 383.23 523.238 cv
383.137 523.336 383.059 523.441 383 523.559 cv
382.938 523.68 382.906 523.816 382.91 523.969 cv
382.906 524.152 382.992 524.305 383.164 524.422 cv
383.332 524.547 383.555 524.609 383.836 524.617 cv
385.668 524.695 li
386.016 524.707 386.332 524.754 386.625 524.84 cv
386.914 524.926 387.168 525.051 387.383 525.207 cv
387.594 525.367 387.762 525.559 387.883 525.789 cv
388 526.023 388.059 526.293 388.063 526.598 cv
388.059 526.918 387.992 527.223 387.859 527.516 cv
387.723 527.805 387.516 528.059 387.238 528.281 cv
386.957 528.5 386.602 528.676 386.172 528.805 cv
385.742 528.93 385.234 528.992 384.648 528.996 cv
384.078 528.992 383.594 528.945 383.199 528.852 cv
382.801 528.754 382.477 528.621 382.223 528.457 cv
381.969 528.289 381.785 528.094 381.672 527.863 cv
381.555 527.629 381.496 527.375 381.5 527.109 cv
381.496 526.937 381.516 526.773 381.563 526.613 cv
381.602 526.449 381.664 526.297 381.75 526.152 cv
381.832 526.008 381.941 525.871 382.07 525.734 cv
382.195 525.605 382.34 525.473 382.512 525.344 cv
382.254 525.215 382.066 525.051 381.945 524.852 cv
381.824 524.656 381.766 524.445 381.766 524.211 cv
381.766 523.898 381.828 523.613 381.957 523.363 cv
382.086 523.113 382.246 522.891 382.441 522.691 cv
382.277 522.5 382.152 522.285 382.059 522.043 cv
381.965 521.805 381.918 521.512 381.918 521.164 cv
381.918 520.77 381.984 520.41 382.121 520.09 cv
382.254 519.773 382.441 519.508 382.684 519.289 cv
382.922 519.074 383.207 518.906 383.543 518.785 cv
383.875 518.672 384.242 518.613 384.641 518.609 cv
384.852 518.613 385.051 518.625 385.234 518.645 cv
385.418 518.672 385.59 518.703 385.754 518.742 cv
387.875 518.742 li
387.961 518.746 388.027 518.789 388.07 518.871 cv
388.113 518.961 388.133 519.09 388.137 519.262 cv
cp
386.129 521.109 mo
386.125 520.637 385.992 520.266 385.734 519.992 cv
385.469 519.727 385.098 519.59 384.617 519.59 cv
384.363 519.59 384.145 519.633 383.965 519.715 cv
383.777 519.801 383.625 519.914 383.504 520.059 cv
383.383 520.207 383.293 520.375 383.234 520.562 cv
383.172 520.75 383.141 520.949 383.145 521.156 cv
383.141 521.621 383.273 521.984 383.535 522.25 cv
383.797 522.516 384.164 522.648 384.641 522.645 cv
384.891 522.648 385.109 522.609 385.301 522.523 cv
385.484 522.445 385.641 522.332 385.766 522.191 cv
385.887 522.051 385.977 521.887 386.039 521.695 cv
386.094 521.512 386.125 521.316 386.129 521.109 cv
cp
386.773 526.668 mo
386.77 526.363 386.645 526.133 386.402 525.969 cv
386.152 525.809 385.82 525.719 385.402 525.707 cv
383.586 525.645 li
383.418 525.777 383.281 525.902 383.18 526.016 cv
383.07 526.133 382.988 526.242 382.926 526.352 cv
382.863 526.457 382.82 526.562 382.797 526.668 cv
382.773 526.77 382.762 526.875 382.762 526.984 cv
382.762 527.32 382.93 527.574 383.273 527.754 cv
383.613 527.926 384.094 528.016 384.711 528.016 cv
385.098 528.016 385.422 527.977 385.688 527.902 cv
385.945 527.824 386.156 527.723 386.32 527.602 cv
386.477 527.473 386.594 527.332 386.668 527.172 cv
386.734 527.012 386.77 526.844 386.773 526.668 cv
cp
f
395.699 522.148 mo
395.695 522.352 395.645 522.492 395.547 522.578 cv
395.441 522.664 395.324 522.707 395.199 522.707 cv
390.582 522.707 li
390.578 523.098 390.617 523.449 390.699 523.762 cv
390.773 524.074 390.906 524.344 391.09 524.562 cv
391.27 524.789 391.504 524.961 391.801 525.078 cv
392.09 525.203 392.449 525.262 392.875 525.258 cv
393.207 525.262 393.504 525.234 393.766 525.176 cv
394.027 525.125 394.254 525.062 394.445 524.992 cv
394.633 524.926 394.789 524.867 394.914 524.809 cv
395.035 524.758 395.129 524.73 395.191 524.727 cv
395.227 524.73 395.258 524.738 395.289 524.754 cv
395.316 524.773 395.34 524.801 395.359 524.836 cv
395.371 524.875 395.383 524.926 395.395 524.988 cv
395.398 525.055 395.402 525.133 395.406 525.227 cv
395.402 525.297 395.398 525.355 395.398 525.402 cv
395.391 525.449 395.387 525.492 395.379 525.531 cv
395.371 525.57 395.355 525.605 395.34 525.637 cv
395.316 525.668 395.293 525.699 395.27 525.727 cv
395.238 525.758 395.156 525.805 395.016 525.867 cv
394.875 525.934 394.691 525.996 394.469 526.059 cv
394.242 526.121 393.984 526.176 393.691 526.227 cv
393.398 526.273 393.086 526.297 392.754 526.301 cv
392.176 526.297 391.668 526.219 391.238 526.059 cv
390.801 525.898 390.438 525.66 390.145 525.344 cv
389.844 525.027 389.621 524.633 389.473 524.152 cv
389.324 523.676 389.25 523.117 389.25 522.48 cv
389.25 521.883 389.324 521.344 389.48 520.859 cv
389.633 520.383 389.859 519.973 390.156 519.637 cv
390.449 519.301 390.805 519.043 391.219 518.863 cv
391.633 518.684 392.098 518.594 392.613 518.594 cv
393.164 518.594 393.633 518.684 394.02 518.859 cv
394.406 519.039 394.723 519.277 394.977 519.574 cv
395.223 519.875 395.406 520.227 395.523 520.625 cv
395.637 521.031 395.695 521.461 395.699 521.914 cv
cp
394.406 521.766 mo
394.422 521.09 394.27 520.559 393.953 520.176 cv
393.637 519.793 393.168 519.602 392.551 519.598 cv
392.227 519.602 391.945 519.66 391.707 519.777 cv
391.465 519.898 391.266 520.059 391.105 520.254 cv
390.941 520.453 390.816 520.684 390.73 520.945 cv
390.641 521.207 390.59 521.48 390.582 521.766 cv
cp
f
402.066 524.047 mo
402.063 524.41 401.996 524.73 401.867 525.008 cv
401.734 525.289 401.547 525.523 401.305 525.715 cv
401.059 525.91 400.766 526.055 400.43 526.152 cv
400.09 526.25 399.719 526.297 399.316 526.301 cv
399.063 526.297 398.824 526.277 398.602 526.242 cv
398.375 526.199 398.176 526.152 397.996 526.094 cv
397.816 526.035 397.664 525.973 397.539 525.906 cv
397.414 525.844 397.32 525.785 397.266 525.73 cv
397.207 525.68 397.168 525.609 397.145 525.512 cv
397.117 525.422 397.105 525.293 397.105 525.133 cv
397.105 525.035 397.109 524.953 397.121 524.883 cv
397.129 524.816 397.141 524.762 397.16 524.719 cv
397.172 524.68 397.195 524.648 397.223 524.629 cv
397.25 524.613 397.281 524.605 397.32 524.602 cv
397.375 524.605 397.461 524.641 397.574 524.707 cv
397.684 524.781 397.82 524.859 397.988 524.937 cv
398.148 525.023 398.34 525.098 398.566 525.168 cv
398.785 525.238 399.043 525.273 399.34 525.273 cv
399.555 525.273 399.754 525.25 399.934 525.203 cv
400.109 525.156 400.262 525.09 400.391 524.996 cv
400.52 524.91 400.621 524.793 400.691 524.648 cv
400.762 524.512 400.797 524.344 400.797 524.148 cv
400.797 523.953 400.746 523.789 400.645 523.652 cv
400.543 523.52 400.406 523.398 400.242 523.293 cv
400.074 523.191 399.891 523.102 399.684 523.016 cv
399.473 522.937 399.258 522.852 399.039 522.762 cv
398.82 522.676 398.605 522.574 398.395 522.461 cv
398.184 522.352 397.992 522.219 397.828 522.055 cv
397.656 521.898 397.523 521.703 397.426 521.477 cv
397.32 521.254 397.27 520.988 397.273 520.676 cv
397.27 520.402 397.324 520.137 397.434 519.883 cv
397.539 519.633 397.699 519.414 397.914 519.223 cv
398.125 519.035 398.391 518.883 398.711 518.766 cv
399.031 518.652 399.402 518.594 399.832 518.594 cv
400.016 518.594 400.203 518.609 400.391 518.641 cv
400.574 518.672 400.742 518.711 400.898 518.758 cv
401.047 518.805 401.176 518.855 401.285 518.91 cv
401.387 518.965 401.469 519.016 401.527 519.055 cv
401.578 519.102 401.613 519.137 401.637 519.164 cv
401.652 519.195 401.668 519.23 401.676 519.266 cv
401.684 519.309 401.691 519.355 401.699 519.41 cv
401.707 519.469 401.711 519.539 401.711 519.621 cv
401.711 519.711 401.707 519.789 401.699 519.852 cv
401.691 519.922 401.676 519.973 401.66 520.012 cv
401.637 520.055 401.617 520.086 401.594 520.102 cv
401.566 520.121 401.535 520.129 401.508 520.129 cv
401.457 520.129 401.391 520.102 401.305 520.043 cv
401.215 519.988 401.102 519.926 400.961 519.859 cv
400.82 519.797 400.652 519.738 400.465 519.676 cv
400.273 519.621 400.059 519.59 399.816 519.59 cv
399.594 519.59 399.402 519.617 399.238 519.664 cv
399.07 519.719 398.934 519.789 398.828 519.875 cv
398.723 519.969 398.641 520.074 398.59 520.199 cv
398.531 520.324 398.504 520.461 398.508 520.605 cv
398.504 520.809 398.555 520.977 398.66 521.113 cv
398.762 521.254 398.898 521.375 399.066 521.477 cv
399.23 521.582 399.422 521.676 399.637 521.758 cv
399.848 521.844 400.063 521.93 400.285 522.016 cv
400.504 522.105 400.723 522.207 400.941 522.312 cv
401.156 522.422 401.348 522.551 401.516 522.707 cv
401.68 522.863 401.813 523.051 401.914 523.27 cv
402.012 523.488 402.063 523.75 402.066 524.047 cv
cp
f
187.742 9.67999 mo
187.742 10.246 187.652 10.75 187.477 11.184 cv
187.297 11.621 187.039 11.988 186.703 12.285 cv
186.363 12.59 185.949 12.816 185.461 12.969 cv
184.969 13.125 184.391 13.203 183.727 13.199 cv
182.887 13.199 li
182.887 16.418 li
182.883 16.473 182.867 16.52 182.836 16.559 cv
182.801 16.602 182.746 16.637 182.668 16.66 cv
182.59 16.687 182.484 16.707 182.355 16.723 cv
182.223 16.738 182.059 16.746 181.859 16.746 cv
181.66 16.746 181.492 16.738 181.363 16.723 cv
181.227 16.707 181.121 16.687 181.047 16.66 cv
180.965 16.637 180.91 16.602 180.883 16.559 cv
180.848 16.52 180.832 16.473 180.836 16.418 cv
180.836 7.34802 li
180.832 7.10498 180.898 6.922 181.027 6.797 cv
181.152 6.67603 181.32 6.617 181.531 6.61298 cv
183.906 6.61298 li
184.141 6.617 184.371 6.625 184.59 6.64099 cv
184.805 6.65997 185.063 6.69897 185.363 6.758 cv
185.664 6.82001 185.969 6.92999 186.281 7.09003 cv
186.59 7.25403 186.852 7.461 187.07 7.703 cv
187.285 7.953 187.453 8.242 187.57 8.57001 cv
187.684 8.90198 187.742 9.27002 187.742 9.67999 cv
cp
185.598 9.82397 mo
185.598 9.47699 185.535 9.18402 185.41 8.953 cv
185.285 8.72699 185.129 8.55902 184.949 8.44501 cv
184.766 8.34003 184.578 8.27002 184.379 8.23798 cv
184.176 8.211 183.969 8.19897 183.758 8.19501 cv
182.887 8.19501 li
182.887 11.617 li
183.805 11.617 li
184.133 11.621 184.406 11.574 184.629 11.484 cv
184.848 11.398 185.027 11.277 185.168 11.117 cv
185.305 10.961 185.41 10.77 185.488 10.547 cv
185.559 10.328 185.598 10.09 185.598 9.82397 cv
cp
f
193.68 10.129 mo
193.68 10.32 193.672 10.473 193.664 10.59 cv
193.648 10.711 193.633 10.805 193.617 10.871 cv
193.594 10.941 193.566 10.988 193.535 11.012 cv
193.496 11.039 193.453 11.051 193.406 11.051 cv
193.359 11.051 193.313 11.043 193.266 11.023 cv
193.211 11.008 193.152 10.988 193.09 10.965 cv
193.02 10.945 192.949 10.926 192.875 10.906 cv
192.793 10.891 192.707 10.883 192.617 10.879 cv
192.504 10.883 192.395 10.902 192.289 10.945 cv
192.18 10.992 192.066 11.062 191.953 11.152 cv
191.832 11.246 191.711 11.371 191.586 11.523 cv
191.457 11.684 191.32 11.875 191.176 12.102 cv
191.176 16.434 li
191.172 16.488 191.156 16.531 191.129 16.57 cv
191.094 16.609 191.039 16.645 190.969 16.668 cv
190.891 16.695 190.793 16.711 190.668 16.727 cv
190.543 16.738 190.383 16.746 190.195 16.746 cv
190 16.746 189.844 16.738 189.719 16.727 cv
189.594 16.711 189.492 16.695 189.418 16.668 cv
189.34 16.645 189.285 16.609 189.258 16.57 cv
189.223 16.531 189.207 16.488 189.211 16.434 cv
189.211 9.48401 li
189.207 9.43701 189.223 9.39099 189.25 9.34802 cv
189.273 9.31201 189.32 9.28101 189.391 9.25 cv
189.457 9.22699 189.543 9.20697 189.652 9.19098 cv
189.758 9.18402 189.891 9.17603 190.055 9.172 cv
190.219 9.17603 190.355 9.18402 190.465 9.19098 cv
190.57 9.20697 190.656 9.22699 190.719 9.25 cv
190.777 9.28101 190.82 9.31201 190.848 9.34802 cv
190.871 9.39099 190.883 9.43701 190.887 9.48401 cv
190.887 10.348 li
191.066 10.09 191.238 9.87903 191.402 9.70697 cv
191.559 9.54303 191.715 9.40601 191.863 9.30499 cv
192.008 9.20697 192.152 9.14099 192.297 9.09802 cv
192.441 9.06201 192.586 9.04303 192.734 9.039 cv
192.801 9.04303 192.875 9.047 192.953 9.05103 cv
193.031 9.06201 193.109 9.07397 193.195 9.09003 cv
193.273 9.10901 193.348 9.12903 193.414 9.15198 cv
193.473 9.17603 193.52 9.203 193.551 9.22699 cv
193.578 9.258 193.598 9.28497 193.613 9.31201 cv
193.625 9.34802 193.637 9.39099 193.648 9.44098 cv
193.656 9.5 193.664 9.58197 193.672 9.68701 cv
193.676 9.797 193.68 9.94501 193.68 10.129 cv
cp
f
201.188 12.758 mo
201.184 12.996 201.133 13.172 201.027 13.285 cv
200.918 13.402 200.77 13.461 200.59 13.457 cv
196.355 13.457 li
196.352 13.758 196.387 14.027 196.461 14.266 cv
196.527 14.508 196.641 14.711 196.797 14.879 cv
196.949 15.051 197.145 15.18 197.387 15.266 cv
197.625 15.355 197.914 15.398 198.258 15.398 cv
198.598 15.398 198.898 15.375 199.16 15.324 cv
199.418 15.277 199.645 15.223 199.836 15.16 cv
200.023 15.102 200.18 15.047 200.309 14.996 cv
200.43 14.949 200.531 14.926 200.613 14.922 cv
200.656 14.926 200.695 14.934 200.73 14.949 cv
200.758 14.969 200.785 15 200.805 15.047 cv
200.824 15.094 200.836 15.16 200.848 15.246 cv
200.852 15.332 200.855 15.441 200.859 15.57 cv
200.855 15.687 200.855 15.785 200.852 15.863 cv
200.844 15.945 200.836 16.012 200.828 16.066 cv
200.816 16.125 200.801 16.176 200.781 16.211 cv
200.762 16.254 200.734 16.289 200.703 16.324 cv
200.668 16.363 200.574 16.414 200.426 16.473 cv
200.27 16.539 200.078 16.602 199.848 16.656 cv
199.609 16.719 199.34 16.766 199.043 16.812 cv
198.738 16.852 198.418 16.875 198.078 16.879 cv
197.457 16.875 196.914 16.801 196.453 16.645 cv
195.984 16.492 195.598 16.254 195.289 15.937 cv
194.973 15.621 194.738 15.223 194.59 14.738 cv
194.434 14.258 194.359 13.691 194.363 13.035 cv
194.359 12.422 194.438 11.863 194.602 11.367 cv
194.758 10.871 194.992 10.453 195.305 10.105 cv
195.609 9.76202 195.984 9.49597 196.422 9.31201 cv
196.859 9.133 197.352 9.04303 197.906 9.039 cv
198.484 9.04303 198.984 9.12903 199.398 9.297 cv
199.813 9.47302 200.148 9.711 200.414 10.012 cv
200.676 10.316 200.871 10.676 201 11.09 cv
201.121 11.508 201.184 11.957 201.188 12.445 cv
cp
199.285 12.195 mo
199.297 11.645 199.188 11.211 198.953 10.898 cv
198.719 10.586 198.352 10.43 197.859 10.426 cv
197.609 10.43 197.395 10.477 197.211 10.566 cv
197.023 10.664 196.871 10.789 196.75 10.945 cv
196.625 11.105 196.531 11.293 196.469 11.508 cv
196.402 11.723 196.363 11.953 196.355 12.195 cv
cp
f
209.793 12.855 mo
209.793 13.477 209.727 14.035 209.594 14.531 cv
209.461 15.027 209.266 15.449 209.012 15.797 cv
208.758 16.145 208.441 16.414 208.063 16.598 cv
207.68 16.785 207.246 16.875 206.762 16.879 cv
206.555 16.875 206.367 16.855 206.203 16.82 cv
206.031 16.777 205.867 16.719 205.711 16.641 cv
205.551 16.562 205.395 16.465 205.242 16.34 cv
205.082 16.223 204.922 16.082 204.758 15.918 cv
204.758 19.191 li
204.754 19.238 204.738 19.285 204.711 19.332 cv
204.676 19.371 204.621 19.406 204.551 19.437 cv
204.473 19.461 204.375 19.484 204.25 19.504 cv
204.125 19.516 203.965 19.523 203.777 19.527 cv
203.582 19.523 203.426 19.516 203.301 19.504 cv
203.176 19.484 203.074 19.461 203 19.437 cv
202.922 19.406 202.867 19.371 202.84 19.332 cv
202.805 19.285 202.789 19.238 202.793 19.191 cv
202.793 9.48401 li
202.789 9.43701 202.805 9.39099 202.832 9.34802 cv
202.855 9.31201 202.898 9.28101 202.969 9.25 cv
203.031 9.22699 203.117 9.20697 203.227 9.19098 cv
203.328 9.18402 203.465 9.17603 203.629 9.172 cv
203.785 9.17603 203.914 9.18402 204.02 9.19098 cv
204.125 9.20697 204.211 9.22699 204.277 9.25 cv
204.34 9.28101 204.387 9.31201 204.414 9.34802 cv
204.438 9.39099 204.449 9.43701 204.453 9.48401 cv
204.453 10.301 li
204.652 10.094 204.852 9.914 205.051 9.75403 cv
205.242 9.59802 205.441 9.46503 205.645 9.35498 cv
205.848 9.25403 206.055 9.172 206.273 9.117 cv
206.484 9.06598 206.715 9.04303 206.965 9.039 cv
207.469 9.04303 207.902 9.14099 208.266 9.34003 cv
208.621 9.54303 208.914 9.82001 209.141 10.164 cv
209.363 10.516 209.527 10.918 209.637 11.379 cv
209.738 11.84 209.793 12.332 209.793 12.855 cv
cp
207.75 12.996 mo
207.746 12.703 207.727 12.422 207.684 12.145 cv
207.637 11.875 207.559 11.633 207.457 11.418 cv
207.348 11.207 207.207 11.035 207.035 10.906 cv
206.859 10.781 206.645 10.719 206.387 10.715 cv
206.254 10.719 206.125 10.738 206 10.773 cv
205.871 10.816 205.742 10.879 205.609 10.965 cv
205.477 11.055 205.34 11.168 205.203 11.309 cv
205.059 11.449 204.91 11.625 204.758 11.828 cv
204.758 14.121 li
205.031 14.469 205.293 14.738 205.543 14.926 cv
205.789 15.117 206.051 15.211 206.324 15.211 cv
206.578 15.211 206.793 15.148 206.977 15.016 cv
207.152 14.891 207.301 14.719 207.414 14.508 cv
207.527 14.297 207.609 14.059 207.668 13.793 cv
207.719 13.527 207.746 13.262 207.75 12.996 cv
cp
f
217.289 16.457 mo
217.285 16.535 217.258 16.59 217.211 16.629 cv
217.156 16.672 217.074 16.699 216.965 16.719 cv
216.848 16.734 216.684 16.746 216.469 16.746 cv
216.23 16.746 216.059 16.734 215.957 16.719 cv
215.848 16.699 215.773 16.672 215.734 16.629 cv
215.688 16.59 215.668 16.535 215.668 16.457 cv
215.668 15.906 li
215.379 16.215 215.051 16.453 214.688 16.621 cv
214.32 16.793 213.914 16.875 213.469 16.879 cv
213.098 16.875 212.758 16.828 212.449 16.734 cv
212.141 16.641 211.875 16.5 211.648 16.305 cv
211.422 16.117 211.246 15.883 211.121 15.602 cv
210.996 15.324 210.934 14.996 210.938 14.617 cv
210.934 14.219 211.012 13.867 211.172 13.562 cv
211.328 13.266 211.566 13.02 211.883 12.824 cv
212.195 12.633 212.586 12.488 213.055 12.391 cv
213.523 12.301 214.066 12.254 214.684 12.25 cv
215.363 12.25 li
215.363 11.828 li
215.363 11.613 215.34 11.422 215.297 11.258 cv
215.25 11.098 215.176 10.961 215.078 10.848 cv
214.973 10.742 214.84 10.66 214.672 10.605 cv
214.5 10.555 214.289 10.531 214.047 10.527 cv
213.715 10.531 213.422 10.566 213.168 10.637 cv
212.906 10.711 212.68 10.793 212.484 10.879 cv
212.285 10.973 212.121 11.051 211.992 11.121 cv
211.855 11.195 211.746 11.234 211.668 11.23 cv
211.605 11.234 211.555 11.215 211.516 11.176 cv
211.469 11.141 211.434 11.09 211.406 11.02 cv
211.375 10.957 211.352 10.871 211.34 10.77 cv
211.32 10.672 211.313 10.562 211.316 10.441 cv
211.313 10.281 211.328 10.156 211.355 10.059 cv
211.379 9.96899 211.426 9.883 211.504 9.80499 cv
211.574 9.72998 211.703 9.64801 211.887 9.55902 cv
212.066 9.46899 212.277 9.383 212.523 9.30499 cv
212.766 9.22699 213.035 9.164 213.324 9.11298 cv
213.613 9.06598 213.91 9.04303 214.219 9.039 cv
214.762 9.04303 215.227 9.09399 215.613 9.19897 cv
216 9.30902 216.32 9.47302 216.57 9.69098 cv
216.82 9.90997 217 10.195 217.117 10.543 cv
217.227 10.895 217.285 11.309 217.289 11.781 cv
cp
215.363 13.48 mo
214.613 13.48 li
214.297 13.484 214.027 13.508 213.805 13.551 cv
213.578 13.602 213.395 13.672 213.258 13.762 cv
213.113 13.859 213.012 13.973 212.949 14.102 cv
212.883 14.238 212.848 14.387 212.852 14.555 cv
212.848 14.848 212.941 15.078 213.129 15.242 cv
213.313 15.41 213.57 15.492 213.898 15.492 cv
214.172 15.492 214.422 15.422 214.656 15.281 cv
214.883 15.141 215.121 14.937 215.363 14.664 cv
cp
f
223.715 10.129 mo
223.715 10.32 223.707 10.473 223.699 10.59 cv
223.684 10.711 223.668 10.805 223.652 10.871 cv
223.629 10.941 223.602 10.988 223.57 11.012 cv
223.531 11.039 223.488 11.051 223.441 11.051 cv
223.395 11.051 223.348 11.043 223.301 11.023 cv
223.246 11.008 223.188 10.988 223.125 10.965 cv
223.055 10.945 222.984 10.926 222.91 10.906 cv
222.828 10.891 222.742 10.883 222.652 10.879 cv
222.539 10.883 222.43 10.902 222.324 10.945 cv
222.215 10.992 222.102 11.062 221.988 11.152 cv
221.867 11.246 221.746 11.371 221.621 11.523 cv
221.492 11.684 221.355 11.875 221.211 12.102 cv
221.211 16.434 li
221.207 16.488 221.191 16.531 221.164 16.57 cv
221.129 16.609 221.074 16.645 221.004 16.668 cv
220.926 16.695 220.828 16.711 220.703 16.727 cv
220.578 16.738 220.418 16.746 220.23 16.746 cv
220.035 16.746 219.879 16.738 219.754 16.727 cv
219.629 16.711 219.527 16.695 219.453 16.668 cv
219.375 16.645 219.32 16.609 219.293 16.57 cv
219.258 16.531 219.242 16.488 219.246 16.434 cv
219.246 9.48401 li
219.242 9.43701 219.258 9.39099 219.285 9.34802 cv
219.309 9.31201 219.355 9.28101 219.426 9.25 cv
219.492 9.22699 219.578 9.20697 219.688 9.19098 cv
219.793 9.18402 219.926 9.17603 220.09 9.172 cv
220.254 9.17603 220.391 9.18402 220.5 9.19098 cv
220.605 9.20697 220.691 9.22699 220.754 9.25 cv
220.813 9.28101 220.855 9.31201 220.883 9.34802 cv
220.906 9.39099 220.918 9.43701 220.922 9.48401 cv
220.922 10.348 li
221.102 10.09 221.273 9.87903 221.438 9.70697 cv
221.594 9.54303 221.75 9.40601 221.898 9.30499 cv
222.043 9.20697 222.188 9.14099 222.332 9.09802 cv
222.477 9.06201 222.621 9.04303 222.77 9.039 cv
222.836 9.04303 222.91 9.047 222.988 9.05103 cv
223.066 9.06201 223.145 9.07397 223.23 9.09003 cv
223.309 9.10901 223.383 9.12903 223.449 9.15198 cv
223.508 9.17603 223.555 9.203 223.586 9.22699 cv
223.613 9.258 223.633 9.28497 223.648 9.31201 cv
223.66 9.34802 223.672 9.39099 223.684 9.44098 cv
223.691 9.5 223.699 9.58197 223.707 9.68701 cv
223.711 9.797 223.715 9.94501 223.715 10.129 cv
cp
f
230.457 16.457 mo
230.453 16.535 230.426 16.59 230.379 16.629 cv
230.324 16.672 230.242 16.699 230.133 16.719 cv
230.016 16.734 229.852 16.746 229.637 16.746 cv
229.398 16.746 229.227 16.734 229.125 16.719 cv
229.016 16.699 228.941 16.672 228.902 16.629 cv
228.855 16.59 228.836 16.535 228.836 16.457 cv
228.836 15.906 li
228.547 16.215 228.219 16.453 227.855 16.621 cv
227.488 16.793 227.082 16.875 226.637 16.879 cv
226.266 16.875 225.926 16.828 225.617 16.734 cv
225.309 16.641 225.043 16.5 224.816 16.305 cv
224.59 16.117 224.414 15.883 224.289 15.602 cv
224.164 15.324 224.102 14.996 224.105 14.617 cv
224.102 14.219 224.18 13.867 224.34 13.562 cv
224.496 13.266 224.734 13.02 225.051 12.824 cv
225.363 12.633 225.754 12.488 226.223 12.391 cv
226.691 12.301 227.234 12.254 227.852 12.25 cv
228.531 12.25 li
228.531 11.828 li
228.531 11.613 228.508 11.422 228.465 11.258 cv
228.418 11.098 228.344 10.961 228.246 10.848 cv
228.141 10.742 228.008 10.66 227.84 10.605 cv
227.668 10.555 227.457 10.531 227.215 10.527 cv
226.883 10.531 226.59 10.566 226.336 10.637 cv
226.074 10.711 225.848 10.793 225.652 10.879 cv
225.453 10.973 225.289 11.051 225.16 11.121 cv
225.023 11.195 224.914 11.234 224.836 11.23 cv
224.773 11.234 224.723 11.215 224.684 11.176 cv
224.637 11.141 224.602 11.09 224.574 11.02 cv
224.543 10.957 224.52 10.871 224.508 10.77 cv
224.488 10.672 224.48 10.562 224.484 10.441 cv
224.48 10.281 224.496 10.156 224.523 10.059 cv
224.547 9.96899 224.594 9.883 224.672 9.80499 cv
224.742 9.72998 224.871 9.64801 225.055 9.55902 cv
225.234 9.46899 225.445 9.383 225.691 9.30499 cv
225.934 9.22699 226.203 9.164 226.492 9.11298 cv
226.781 9.06598 227.078 9.04303 227.387 9.039 cv
227.93 9.04303 228.395 9.09399 228.781 9.19897 cv
229.168 9.30902 229.488 9.47302 229.738 9.69098 cv
229.988 9.90997 230.168 10.195 230.285 10.543 cv
230.395 10.895 230.453 11.309 230.457 11.781 cv
cp
228.531 13.48 mo
227.781 13.48 li
227.465 13.484 227.195 13.508 226.973 13.551 cv
226.746 13.602 226.563 13.672 226.426 13.762 cv
226.281 13.859 226.18 13.973 226.117 14.102 cv
226.051 14.238 226.016 14.387 226.02 14.555 cv
226.016 14.848 226.109 15.078 226.297 15.242 cv
226.48 15.41 226.738 15.492 227.066 15.492 cv
227.34 15.492 227.59 15.422 227.824 15.281 cv
228.051 15.141 228.289 14.937 228.531 14.664 cv
cp
f
236.453 15.75 mo
236.453 15.977 236.438 16.152 236.41 16.273 cv
236.379 16.398 236.34 16.484 236.297 16.531 cv
236.246 16.582 236.18 16.625 236.09 16.664 cv
235.996 16.703 235.887 16.734 235.77 16.766 cv
235.645 16.789 235.512 16.812 235.371 16.832 cv
235.227 16.844 235.086 16.852 234.941 16.855 cv
234.551 16.852 234.211 16.801 233.926 16.707 cv
233.641 16.605 233.406 16.457 233.219 16.25 cv
233.031 16.047 232.891 15.789 232.805 15.477 cv
232.711 15.168 232.668 14.797 232.672 14.367 cv
232.672 10.809 li
231.84 10.809 li
231.738 10.812 231.664 10.75 231.613 10.625 cv
231.559 10.504 231.531 10.301 231.535 10.012 cv
231.531 9.86298 231.539 9.73401 231.555 9.633 cv
231.566 9.53101 231.586 9.44897 231.613 9.38702 cv
231.637 9.328 231.668 9.28497 231.711 9.258 cv
231.746 9.23401 231.793 9.22302 231.848 9.21899 cv
232.672 9.21899 li
232.672 7.66803 li
232.668 7.62097 232.684 7.57397 232.715 7.52698 cv
232.742 7.48798 232.793 7.453 232.871 7.422 cv
232.945 7.39801 233.047 7.375 233.176 7.35901 cv
233.301 7.34802 233.457 7.34399 233.648 7.34003 cv
233.836 7.34399 233.996 7.34802 234.125 7.35901 cv
234.25 7.375 234.352 7.39801 234.426 7.422 cv
234.496 7.453 234.547 7.48798 234.582 7.52698 cv
234.609 7.57397 234.625 7.62097 234.629 7.66803 cv
234.629 9.21899 li
236.141 9.21899 li
236.191 9.22302 236.238 9.23401 236.277 9.258 cv
236.316 9.28497 236.348 9.328 236.375 9.38702 cv
236.398 9.44897 236.418 9.53101 236.434 9.633 cv
236.445 9.73401 236.453 9.86298 236.453 10.012 cv
236.453 10.301 236.426 10.504 236.375 10.625 cv
236.32 10.75 236.246 10.812 236.148 10.809 cv
234.629 10.809 li
234.629 14.074 li
234.625 14.453 234.684 14.738 234.809 14.926 cv
234.926 15.117 235.141 15.211 235.445 15.211 cv
235.547 15.211 235.641 15.203 235.727 15.184 cv
235.809 15.168 235.883 15.148 235.949 15.121 cv
236.012 15.102 236.066 15.078 236.113 15.059 cv
236.156 15.043 236.195 15.035 236.234 15.031 cv
236.262 15.035 236.293 15.043 236.324 15.059 cv
236.352 15.078 236.371 15.117 236.391 15.168 cv
236.402 15.227 236.418 15.301 236.434 15.391 cv
236.445 15.488 236.453 15.605 236.453 15.75 cv
cp
f
239.84 16.434 mo
239.836 16.488 239.82 16.531 239.793 16.57 cv
239.758 16.609 239.703 16.645 239.633 16.668 cv
239.555 16.695 239.457 16.711 239.332 16.727 cv
239.207 16.738 239.047 16.746 238.859 16.746 cv
238.664 16.746 238.508 16.738 238.383 16.727 cv
238.258 16.711 238.156 16.695 238.082 16.668 cv
238.004 16.645 237.949 16.609 237.922 16.57 cv
237.887 16.531 237.871 16.488 237.875 16.434 cv
237.875 9.5 li
237.871 9.44897 237.887 9.40198 237.922 9.36298 cv
237.949 9.32397 238.004 9.29303 238.082 9.26202 cv
238.156 9.23798 238.258 9.21503 238.383 9.19501 cv
238.508 9.18402 238.664 9.17603 238.859 9.172 cv
239.047 9.17603 239.207 9.18402 239.332 9.19501 cv
239.457 9.21503 239.555 9.23798 239.633 9.26202 cv
239.703 9.29303 239.758 9.32397 239.793 9.36298 cv
239.82 9.40198 239.836 9.44897 239.84 9.5 cv
cp
239.988 7.12903 mo
239.988 7.52698 239.906 7.80103 239.746 7.94897 cv
239.582 8.10199 239.285 8.17603 238.852 8.172 cv
238.406 8.17603 238.105 8.10199 237.957 7.95697 cv
237.801 7.81201 237.727 7.55103 237.727 7.16803 cv
237.727 6.77301 237.805 6.5 237.965 6.34802 cv
238.121 6.19501 238.422 6.117 238.867 6.117 cv
239.301 6.117 239.598 6.19098 239.754 6.34003 cv
239.91 6.48798 239.988 6.75403 239.988 7.12903 cv
cp
f
248.832 12.887 mo
248.828 13.484 248.75 14.027 248.598 14.512 cv
248.438 15.004 248.203 15.422 247.887 15.773 cv
247.57 16.125 247.172 16.398 246.695 16.59 cv
246.215 16.781 245.656 16.875 245.02 16.879 cv
244.398 16.875 243.859 16.793 243.406 16.621 cv
242.945 16.453 242.566 16.203 242.27 15.875 cv
241.965 15.551 241.742 15.148 241.598 14.668 cv
241.453 14.191 241.383 13.645 241.383 13.027 cv
241.383 12.437 241.461 11.898 241.617 11.406 cv
241.773 10.918 242.012 10.496 242.332 10.145 cv
242.648 9.797 243.043 9.52301 243.52 9.328 cv
243.992 9.13702 244.551 9.04303 245.191 9.039 cv
245.816 9.04303 246.355 9.125 246.813 9.29303 cv
247.27 9.46503 247.648 9.71503 247.945 10.039 cv
248.242 10.367 248.465 10.77 248.613 11.246 cv
248.758 11.727 248.828 12.273 248.832 12.887 cv
cp
246.813 12.965 mo
246.809 12.629 246.781 12.312 246.73 12.02 cv
246.672 11.734 246.578 11.484 246.453 11.27 cv
246.32 11.059 246.148 10.891 245.938 10.77 cv
245.719 10.652 245.449 10.594 245.121 10.59 cv
244.832 10.594 244.578 10.648 244.359 10.75 cv
244.141 10.859 243.961 11.016 243.82 11.219 cv
243.68 11.426 243.574 11.672 243.504 11.957 cv
243.434 12.25 243.398 12.578 243.398 12.941 cv
243.398 13.289 243.426 13.605 243.484 13.891 cv
243.539 14.184 243.633 14.434 243.762 14.645 cv
243.887 14.859 244.059 15.023 244.281 15.137 cv
244.496 15.258 244.766 15.316 245.09 15.312 cv
245.383 15.316 245.641 15.262 245.863 15.152 cv
246.078 15.047 246.258 14.895 246.398 14.687 cv
246.539 14.488 246.641 14.242 246.711 13.953 cv
246.773 13.668 246.809 13.34 246.813 12.965 cv
cp
f
257.074 16.434 mo
257.07 16.488 257.055 16.531 257.027 16.57 cv
256.992 16.609 256.941 16.645 256.871 16.668 cv
256.797 16.695 256.695 16.711 256.57 16.727 cv
256.441 16.738 256.285 16.746 256.102 16.746 cv
255.906 16.746 255.746 16.738 255.621 16.727 cv
255.492 16.711 255.391 16.695 255.32 16.668 cv
255.242 16.645 255.191 16.609 255.164 16.57 cv
255.129 16.531 255.113 16.488 255.117 16.434 cv
255.117 12.469 li
255.113 12.133 255.09 11.867 255.043 11.672 cv
254.992 11.48 254.918 11.316 254.828 11.18 cv
254.734 11.043 254.617 10.937 254.469 10.859 cv
254.32 10.785 254.145 10.746 253.949 10.746 cv
253.695 10.746 253.445 10.84 253.191 11.02 cv
252.938 11.203 252.672 11.465 252.398 11.812 cv
252.398 16.434 li
252.395 16.488 252.379 16.531 252.352 16.57 cv
252.316 16.609 252.262 16.645 252.191 16.668 cv
252.113 16.695 252.016 16.711 251.891 16.727 cv
251.766 16.738 251.605 16.746 251.418 16.746 cv
251.223 16.746 251.066 16.738 250.941 16.727 cv
250.816 16.711 250.715 16.695 250.641 16.668 cv
250.563 16.645 250.508 16.609 250.48 16.57 cv
250.445 16.531 250.43 16.488 250.434 16.434 cv
250.434 9.48401 li
250.43 9.43701 250.445 9.39099 250.473 9.34802 cv
250.496 9.31201 250.543 9.28101 250.613 9.25 cv
250.68 9.22699 250.766 9.20697 250.875 9.19098 cv
250.98 9.18402 251.113 9.17603 251.277 9.172 cv
251.441 9.17603 251.578 9.18402 251.688 9.19098 cv
251.793 9.20697 251.879 9.22699 251.941 9.25 cv
252 9.28101 252.043 9.31201 252.07 9.34802 cv
252.094 9.39099 252.105 9.43701 252.109 9.48401 cv
252.109 10.285 li
252.492 9.875 252.883 9.56201 253.281 9.35199 cv
253.676 9.14502 254.094 9.04303 254.527 9.039 cv
254.996 9.04303 255.395 9.12097 255.723 9.27301 cv
256.047 9.43402 256.309 9.64502 256.508 9.90997 cv
256.707 10.18 256.852 10.492 256.941 10.848 cv
257.027 11.207 257.07 11.637 257.074 12.141 cv
cp
f
269.488 7.45697 mo
269.484 7.61298 269.477 7.742 269.469 7.84399 cv
269.453 7.953 269.434 8.039 269.41 8.10199 cv
269.379 8.16803 269.348 8.21503 269.313 8.242 cv
269.27 8.27698 269.227 8.29303 269.184 8.289 cv
266.66 8.289 li
266.66 16.418 li
266.66 16.473 266.641 16.52 266.609 16.559 cv
266.57 16.602 266.516 16.637 266.441 16.66 cv
266.359 16.687 266.254 16.707 266.125 16.723 cv
265.988 16.738 265.824 16.746 265.629 16.746 cv
265.434 16.746 265.27 16.738 265.137 16.723 cv
265.004 16.707 264.898 16.687 264.82 16.66 cv
264.742 16.637 264.684 16.602 264.652 16.559 cv
264.613 16.52 264.598 16.473 264.602 16.418 cv
264.602 8.289 li
262.078 8.289 li
262.023 8.29303 261.977 8.27698 261.945 8.242 cv
261.906 8.21503 261.875 8.16803 261.852 8.10199 cv
261.82 8.039 261.801 7.953 261.793 7.84399 cv
261.777 7.742 261.773 7.61298 261.773 7.45697 cv
261.773 7.30499 261.777 7.172 261.793 7.05902 cv
261.801 6.953 261.82 6.86298 261.852 6.797 cv
261.875 6.73401 261.906 6.68701 261.945 6.65601 cv
261.977 6.62903 262.023 6.617 262.078 6.61298 cv
269.184 6.61298 li
269.227 6.617 269.27 6.62903 269.313 6.65601 cv
269.348 6.68701 269.379 6.73401 269.41 6.797 cv
269.434 6.86298 269.453 6.953 269.469 7.05902 cv
269.477 7.172 269.484 7.30499 269.488 7.45697 cv
cp
f
272.523 16.434 mo
272.52 16.488 272.504 16.531 272.477 16.57 cv
272.441 16.609 272.387 16.645 272.316 16.668 cv
272.238 16.695 272.141 16.711 272.016 16.727 cv
271.891 16.738 271.73 16.746 271.543 16.746 cv
271.348 16.746 271.191 16.738 271.066 16.727 cv
270.941 16.711 270.84 16.695 270.766 16.668 cv
270.688 16.645 270.633 16.609 270.605 16.57 cv
270.57 16.531 270.555 16.488 270.559 16.434 cv
270.559 9.5 li
270.555 9.44897 270.57 9.40198 270.605 9.36298 cv
270.633 9.32397 270.688 9.29303 270.766 9.26202 cv
270.84 9.23798 270.941 9.21503 271.066 9.19501 cv
271.191 9.18402 271.348 9.17603 271.543 9.172 cv
271.73 9.17603 271.891 9.18402 272.016 9.19501 cv
272.141 9.21503 272.238 9.23798 272.316 9.26202 cv
272.387 9.29303 272.441 9.32397 272.477 9.36298 cv
272.504 9.40198 272.52 9.44897 272.523 9.5 cv
cp
272.672 7.12903 mo
272.672 7.52698 272.59 7.80103 272.43 7.94897 cv
272.266 8.10199 271.969 8.17603 271.535 8.172 cv
271.09 8.17603 270.789 8.10199 270.641 7.95697 cv
270.484 7.81201 270.41 7.55103 270.41 7.16803 cv
270.41 6.77301 270.488 6.5 270.648 6.34802 cv
270.805 6.19501 271.105 6.117 271.551 6.117 cv
271.984 6.117 272.281 6.19098 272.438 6.34003 cv
272.594 6.48798 272.672 6.75403 272.672 7.12903 cv
cp
f
285.574 16.434 mo
285.57 16.488 285.555 16.531 285.527 16.57 cv
285.492 16.609 285.441 16.645 285.371 16.668 cv
285.297 16.695 285.195 16.711 285.074 16.727 cv
284.949 16.738 284.793 16.746 284.602 16.746 cv
284.402 16.746 284.242 16.738 284.117 16.727 cv
283.992 16.711 283.891 16.695 283.816 16.668 cv
283.738 16.645 283.688 16.609 283.66 16.57 cv
283.633 16.531 283.617 16.488 283.621 16.434 cv
283.621 12.312 li
283.617 12.082 283.598 11.867 283.555 11.672 cv
283.508 11.48 283.438 11.316 283.352 11.18 cv
283.258 11.043 283.145 10.937 283.008 10.859 cv
282.867 10.785 282.703 10.746 282.512 10.746 cv
282.277 10.746 282.039 10.84 281.801 11.02 cv
281.563 11.203 281.305 11.465 281.023 11.812 cv
281.023 16.434 li
281.023 16.488 281.008 16.531 280.977 16.57 cv
280.945 16.609 280.891 16.645 280.816 16.668 cv
280.738 16.695 280.637 16.711 280.516 16.727 cv
280.391 16.738 280.238 16.746 280.051 16.746 cv
279.855 16.746 279.695 16.738 279.574 16.727 cv
279.445 16.711 279.344 16.695 279.273 16.668 cv
279.195 16.645 279.145 16.609 279.113 16.57 cv
279.082 16.531 279.066 16.488 279.066 16.434 cv
279.066 12.312 li
279.066 12.082 279.043 11.867 279 11.672 cv
278.957 11.48 278.891 11.316 278.805 11.18 cv
278.711 11.043 278.598 10.937 278.461 10.859 cv
278.316 10.785 278.152 10.746 277.969 10.746 cv
277.727 10.746 277.488 10.84 277.25 11.02 cv
277.012 11.203 276.754 11.465 276.48 11.812 cv
276.48 16.434 li
276.477 16.488 276.461 16.531 276.434 16.57 cv
276.398 16.609 276.344 16.645 276.273 16.668 cv
276.195 16.695 276.098 16.711 275.973 16.727 cv
275.848 16.738 275.688 16.746 275.5 16.746 cv
275.305 16.746 275.148 16.738 275.023 16.727 cv
274.898 16.711 274.797 16.695 274.723 16.668 cv
274.645 16.645 274.59 16.609 274.563 16.57 cv
274.527 16.531 274.512 16.488 274.516 16.434 cv
274.516 9.48401 li
274.512 9.43701 274.527 9.39099 274.555 9.34802 cv
274.578 9.31201 274.625 9.28101 274.695 9.25 cv
274.762 9.22699 274.848 9.20697 274.957 9.19098 cv
275.063 9.18402 275.195 9.17603 275.359 9.172 cv
275.523 9.17603 275.66 9.18402 275.77 9.19098 cv
275.875 9.20697 275.961 9.22699 276.023 9.25 cv
276.082 9.28101 276.125 9.31201 276.152 9.34802 cv
276.176 9.39099 276.188 9.43701 276.191 9.48401 cv
276.191 10.285 li
276.574 9.875 276.957 9.56201 277.34 9.35199 cv
277.719 9.14502 278.121 9.04303 278.539 9.039 cv
278.824 9.04303 279.078 9.07001 279.309 9.12903 cv
279.535 9.19098 279.742 9.27698 279.922 9.38702 cv
280.102 9.5 280.254 9.63702 280.383 9.789 cv
280.512 9.94501 280.621 10.117 280.711 10.309 cv
280.918 10.086 281.121 9.89502 281.324 9.73401 cv
281.52 9.57397 281.719 9.44098 281.914 9.34003 cv
282.109 9.23798 282.305 9.164 282.5 9.11298 cv
282.695 9.06598 282.895 9.04303 283.098 9.039 cv
283.559 9.04303 283.945 9.12097 284.266 9.27301 cv
284.578 9.43402 284.836 9.64502 285.031 9.90997 cv
285.227 10.18 285.363 10.492 285.449 10.848 cv
285.527 11.207 285.57 11.586 285.574 11.984 cv
cp
f
293.914 12.758 mo
293.91 12.996 293.859 13.172 293.754 13.285 cv
293.645 13.402 293.496 13.461 293.316 13.457 cv
289.082 13.457 li
289.078 13.758 289.113 14.027 289.188 14.266 cv
289.254 14.508 289.367 14.711 289.523 14.879 cv
289.676 15.051 289.871 15.18 290.113 15.266 cv
290.352 15.355 290.641 15.398 290.984 15.398 cv
291.324 15.398 291.625 15.375 291.887 15.324 cv
292.145 15.277 292.371 15.223 292.563 15.16 cv
292.75 15.102 292.906 15.047 293.035 14.996 cv
293.156 14.949 293.258 14.926 293.34 14.922 cv
293.383 14.926 293.422 14.934 293.457 14.949 cv
293.484 14.969 293.512 15 293.531 15.047 cv
293.551 15.094 293.563 15.16 293.574 15.246 cv
293.578 15.332 293.582 15.441 293.586 15.57 cv
293.582 15.687 293.582 15.785 293.578 15.863 cv
293.57 15.945 293.563 16.012 293.555 16.066 cv
293.543 16.125 293.527 16.176 293.508 16.211 cv
293.488 16.254 293.461 16.289 293.43 16.324 cv
293.395 16.363 293.301 16.414 293.152 16.473 cv
292.996 16.539 292.805 16.602 292.574 16.656 cv
292.336 16.719 292.066 16.766 291.77 16.812 cv
291.465 16.852 291.145 16.875 290.805 16.879 cv
290.184 16.875 289.641 16.801 289.18 16.645 cv
288.711 16.492 288.324 16.254 288.016 15.937 cv
287.699 15.621 287.465 15.223 287.316 14.738 cv
287.16 14.258 287.086 13.691 287.09 13.035 cv
287.086 12.422 287.164 11.863 287.328 11.367 cv
287.484 10.871 287.719 10.453 288.031 10.105 cv
288.336 9.76202 288.711 9.49597 289.148 9.31201 cv
289.586 9.133 290.078 9.04303 290.633 9.039 cv
291.211 9.04303 291.711 9.12903 292.125 9.297 cv
292.539 9.47302 292.875 9.711 293.141 10.012 cv
293.402 10.316 293.598 10.676 293.727 11.09 cv
293.848 11.508 293.91 11.957 293.914 12.445 cv
cp
292.012 12.195 mo
292.023 11.645 291.914 11.211 291.68 10.898 cv
291.445 10.586 291.078 10.43 290.586 10.426 cv
290.336 10.43 290.121 10.477 289.938 10.566 cv
289.75 10.664 289.598 10.789 289.477 10.945 cv
289.352 11.105 289.258 11.293 289.195 11.508 cv
289.129 11.723 289.09 11.953 289.082 12.195 cv
cp
f
300.414 14.469 mo
300.41 14.867 300.336 15.215 300.191 15.516 cv
300.043 15.816 299.836 16.07 299.566 16.27 cv
299.293 16.477 298.973 16.625 298.605 16.727 cv
298.238 16.824 297.836 16.875 297.406 16.879 cv
297.141 16.875 296.895 16.855 296.66 16.82 cv
296.426 16.777 296.215 16.73 296.027 16.672 cv
295.84 16.613 295.684 16.551 295.559 16.488 cv
295.434 16.426 295.34 16.367 295.285 16.312 cv
295.227 16.258 295.184 16.176 295.156 16.059 cv
295.121 15.945 295.105 15.77 295.109 15.539 cv
295.105 15.391 295.113 15.27 295.125 15.176 cv
295.133 15.086 295.148 15.016 295.172 14.957 cv
295.191 14.906 295.215 14.867 295.25 14.848 cv
295.277 14.832 295.316 14.824 295.363 14.82 cv
295.418 14.824 295.504 14.855 295.617 14.918 cv
295.727 14.984 295.863 15.059 296.035 15.133 cv
296.199 15.215 296.395 15.285 296.613 15.352 cv
296.832 15.422 297.082 15.457 297.367 15.453 cv
297.543 15.457 297.699 15.437 297.84 15.398 cv
297.973 15.363 298.094 15.312 298.199 15.242 cv
298.297 15.176 298.371 15.09 298.426 14.984 cv
298.473 14.883 298.5 14.762 298.504 14.625 cv
298.5 14.469 298.453 14.336 298.359 14.227 cv
298.266 14.117 298.137 14.02 297.98 13.934 cv
297.816 13.852 297.637 13.773 297.441 13.699 cv
297.238 13.629 297.035 13.551 296.824 13.457 cv
296.613 13.371 296.406 13.27 296.211 13.152 cv
296.008 13.043 295.828 12.902 295.672 12.734 cv
295.508 12.57 295.383 12.371 295.289 12.133 cv
295.195 11.902 295.148 11.621 295.148 11.289 cv
295.148 10.961 295.211 10.656 295.34 10.375 cv
295.469 10.102 295.656 9.86298 295.902 9.664 cv
296.145 9.46899 296.441 9.31598 296.793 9.203 cv
297.141 9.09802 297.535 9.04303 297.977 9.039 cv
298.191 9.04303 298.402 9.05902 298.609 9.086 cv
298.813 9.12097 299 9.15997 299.168 9.203 cv
299.332 9.25403 299.473 9.30499 299.59 9.35498 cv
299.703 9.414 299.785 9.461 299.836 9.49597 cv
299.883 9.539 299.918 9.578 299.941 9.61298 cv
299.961 9.65601 299.973 9.703 299.984 9.75403 cv
299.992 9.80902 300.004 9.875 300.012 9.953 cv
300.02 10.039 300.023 10.137 300.023 10.254 cv
300.023 10.395 300.02 10.512 300.012 10.598 cv
300.004 10.691 299.988 10.762 299.973 10.809 cv
299.953 10.863 299.93 10.898 299.902 10.914 cv
299.867 10.937 299.832 10.945 299.793 10.941 cv
299.742 10.945 299.668 10.918 299.574 10.859 cv
299.473 10.809 299.352 10.75 299.203 10.684 cv
299.055 10.625 298.883 10.566 298.688 10.508 cv
298.492 10.457 298.27 10.43 298.023 10.426 cv
297.844 10.43 297.691 10.449 297.563 10.48 cv
297.43 10.52 297.32 10.57 297.242 10.637 cv
297.156 10.707 297.094 10.785 297.055 10.875 cv
297.008 10.969 296.988 11.066 296.992 11.168 cv
296.988 11.328 297.039 11.465 297.141 11.57 cv
297.238 11.684 297.367 11.777 297.531 11.859 cv
297.691 11.945 297.875 12.023 298.082 12.094 cv
298.285 12.168 298.492 12.25 298.703 12.332 cv
298.91 12.422 299.117 12.52 299.328 12.633 cv
299.531 12.746 299.715 12.887 299.875 13.051 cv
300.035 13.219 300.164 13.418 300.266 13.648 cv
300.359 13.883 300.41 14.156 300.414 14.469 cv
cp
f
312.527 12.887 mo
312.523 13.484 312.445 14.027 312.293 14.512 cv
312.133 15.004 311.898 15.422 311.582 15.773 cv
311.266 16.125 310.867 16.398 310.391 16.59 cv
309.91 16.781 309.352 16.875 308.715 16.879 cv
308.094 16.875 307.555 16.793 307.102 16.621 cv
306.641 16.453 306.262 16.203 305.965 15.875 cv
305.66 15.551 305.438 15.148 305.293 14.668 cv
305.148 14.191 305.078 13.645 305.078 13.027 cv
305.078 12.437 305.156 11.898 305.313 11.406 cv
305.469 10.918 305.707 10.496 306.027 10.145 cv
306.344 9.797 306.738 9.52301 307.215 9.328 cv
307.688 9.13702 308.246 9.04303 308.887 9.039 cv
309.512 9.04303 310.051 9.125 310.508 9.29303 cv
310.965 9.46503 311.344 9.71503 311.641 10.039 cv
311.938 10.367 312.16 10.77 312.309 11.246 cv
312.453 11.727 312.523 12.273 312.527 12.887 cv
cp
310.508 12.965 mo
310.504 12.629 310.477 12.312 310.426 12.02 cv
310.367 11.734 310.273 11.484 310.148 11.27 cv
310.016 11.059 309.844 10.891 309.633 10.77 cv
309.414 10.652 309.145 10.594 308.816 10.59 cv
308.527 10.594 308.273 10.648 308.055 10.75 cv
307.836 10.859 307.656 11.016 307.516 11.219 cv
307.375 11.426 307.27 11.672 307.199 11.957 cv
307.129 12.25 307.094 12.578 307.094 12.941 cv
307.094 13.289 307.121 13.605 307.18 13.891 cv
307.234 14.184 307.328 14.434 307.457 14.645 cv
307.582 14.859 307.754 15.023 307.977 15.137 cv
308.191 15.258 308.461 15.316 308.785 15.312 cv
309.078 15.316 309.336 15.262 309.559 15.152 cv
309.773 15.047 309.953 14.895 310.094 14.687 cv
310.234 14.488 310.336 14.242 310.406 13.953 cv
310.469 13.668 310.504 13.34 310.508 12.965 cv
cp
f
318.324 6.83197 mo
318.32 6.98401 318.316 7.10498 318.309 7.19501 cv
318.297 7.289 318.281 7.35901 318.262 7.40601 cv
318.238 7.45697 318.215 7.492 318.191 7.508 cv
318.164 7.52698 318.137 7.53497 318.105 7.53497 cv
318.066 7.53497 318.023 7.52698 317.984 7.508 cv
317.938 7.492 317.883 7.47302 317.82 7.44897 cv
317.75 7.42999 317.676 7.40997 317.59 7.39099 cv
317.5 7.375 317.395 7.367 317.277 7.36298 cv
317.133 7.367 317.012 7.38702 316.914 7.42999 cv
316.813 7.47699 316.73 7.547 316.664 7.64099 cv
316.594 7.73798 316.543 7.86298 316.516 8.01599 cv
316.48 8.16803 316.465 8.35498 316.469 8.578 cv
316.469 9.21899 li
317.738 9.21899 li
317.781 9.22302 317.824 9.23401 317.867 9.258 cv
317.902 9.28497 317.938 9.328 317.965 9.38702 cv
317.988 9.44897 318.008 9.53101 318.023 9.633 cv
318.035 9.73401 318.039 9.86298 318.043 10.012 cv
318.039 10.301 318.016 10.504 317.965 10.625 cv
317.91 10.75 317.832 10.812 317.738 10.809 cv
316.469 10.809 li
316.469 16.434 li
316.465 16.488 316.449 16.531 316.422 16.57 cv
316.387 16.609 316.336 16.645 316.266 16.668 cv
316.191 16.695 316.09 16.711 315.961 16.727 cv
315.828 16.738 315.668 16.746 315.484 16.746 cv
315.297 16.746 315.141 16.738 315.016 16.727 cv
314.887 16.711 314.785 16.695 314.711 16.668 cv
314.633 16.645 314.582 16.609 314.555 16.57 cv
314.523 16.531 314.508 16.488 314.512 16.434 cv
314.512 10.809 li
313.641 10.809 li
313.539 10.812 313.465 10.75 313.418 10.625 cv
313.367 10.504 313.34 10.301 313.344 10.012 cv
313.34 9.86298 313.348 9.73401 313.363 9.633 cv
313.375 9.53101 313.395 9.44897 313.418 9.38702 cv
313.441 9.328 313.473 9.28497 313.512 9.258 cv
313.551 9.23401 313.594 9.22302 313.648 9.21899 cv
314.512 9.21899 li
314.512 8.633 li
314.508 8.164 314.555 7.75 314.652 7.39099 cv
314.742 7.03497 314.891 6.73798 315.094 6.50403 cv
315.293 6.27002 315.547 6.09399 315.855 5.96899 cv
316.164 5.85199 316.527 5.789 316.953 5.789 cv
317.148 5.789 317.34 5.80902 317.527 5.84003 cv
317.707 5.87903 317.852 5.914 317.957 5.94897 cv
318.059 5.992 318.129 6.02698 318.168 6.05902 cv
318.203 6.09399 318.234 6.14502 318.258 6.20697 cv
318.281 6.27301 318.297 6.35498 318.309 6.45697 cv
318.316 6.55902 318.32 6.68402 318.324 6.83197 cv
cp
f
324.957 16.418 mo
324.953 16.473 324.938 16.52 324.906 16.559 cv
324.871 16.602 324.813 16.637 324.738 16.66 cv
324.656 16.687 324.555 16.707 324.426 16.723 cv
324.293 16.738 324.125 16.746 323.93 16.746 cv
323.727 16.746 323.563 16.738 323.434 16.723 cv
323.297 16.707 323.191 16.687 323.117 16.66 cv
323.035 16.637 322.98 16.602 322.949 16.559 cv
322.914 16.52 322.895 16.473 322.898 16.418 cv
322.898 6.89502 li
322.895 6.84802 322.914 6.80103 322.949 6.75403 cv
322.98 6.71503 323.035 6.67999 323.121 6.65198 cv
323.199 6.62903 323.305 6.60901 323.438 6.59003 cv
323.563 6.578 323.727 6.57001 323.93 6.56598 cv
324.125 6.57001 324.293 6.578 324.426 6.59003 cv
324.555 6.60901 324.656 6.62903 324.738 6.65198 cv
324.813 6.67999 324.871 6.71503 324.906 6.75403 cv
324.938 6.80103 324.953 6.84802 324.957 6.89502 cv
cp
f
338.035 16.434 mo
338.031 16.488 338.016 16.531 337.988 16.57 cv
337.953 16.609 337.902 16.645 337.832 16.668 cv
337.758 16.695 337.656 16.711 337.535 16.727 cv
337.41 16.738 337.254 16.746 337.063 16.746 cv
336.863 16.746 336.703 16.738 336.578 16.727 cv
336.453 16.711 336.352 16.695 336.277 16.668 cv
336.199 16.645 336.148 16.609 336.121 16.57 cv
336.094 16.531 336.078 16.488 336.082 16.434 cv
336.082 12.312 li
336.078 12.082 336.059 11.867 336.016 11.672 cv
335.969 11.48 335.898 11.316 335.813 11.18 cv
335.719 11.043 335.605 10.937 335.469 10.859 cv
335.328 10.785 335.164 10.746 334.973 10.746 cv
334.738 10.746 334.5 10.84 334.262 11.02 cv
334.023 11.203 333.766 11.465 333.484 11.812 cv
333.484 16.434 li
333.484 16.488 333.469 16.531 333.438 16.57 cv
333.406 16.609 333.352 16.645 333.277 16.668 cv
333.199 16.695 333.098 16.711 332.977 16.727 cv
332.852 16.738 332.699 16.746 332.512 16.746 cv
332.316 16.746 332.156 16.738 332.035 16.727 cv
331.906 16.711 331.805 16.695 331.734 16.668 cv
331.656 16.645 331.605 16.609 331.574 16.57 cv
331.543 16.531 331.527 16.488 331.527 16.434 cv
331.527 12.312 li
331.527 12.082 331.504 11.867 331.461 11.672 cv
331.418 11.48 331.352 11.316 331.266 11.18 cv
331.172 11.043 331.059 10.937 330.922 10.859 cv
330.777 10.785 330.613 10.746 330.43 10.746 cv
330.188 10.746 329.949 10.84 329.711 11.02 cv
329.473 11.203 329.215 11.465 328.941 11.812 cv
328.941 16.434 li
328.938 16.488 328.922 16.531 328.895 16.57 cv
328.859 16.609 328.805 16.645 328.734 16.668 cv
328.656 16.695 328.559 16.711 328.434 16.727 cv
328.309 16.738 328.148 16.746 327.961 16.746 cv
327.766 16.746 327.609 16.738 327.484 16.727 cv
327.359 16.711 327.258 16.695 327.184 16.668 cv
327.105 16.645 327.051 16.609 327.023 16.57 cv
326.988 16.531 326.973 16.488 326.977 16.434 cv
326.977 9.48401 li
326.973 9.43701 326.988 9.39099 327.016 9.34802 cv
327.039 9.31201 327.086 9.28101 327.156 9.25 cv
327.223 9.22699 327.309 9.20697 327.418 9.19098 cv
327.523 9.18402 327.656 9.17603 327.82 9.172 cv
327.984 9.17603 328.121 9.18402 328.23 9.19098 cv
328.336 9.20697 328.422 9.22699 328.484 9.25 cv
328.543 9.28101 328.586 9.31201 328.613 9.34802 cv
328.637 9.39099 328.648 9.43701 328.652 9.48401 cv
328.652 10.285 li
329.035 9.875 329.418 9.56201 329.801 9.35199 cv
330.18 9.14502 330.582 9.04303 331 9.039 cv
331.285 9.04303 331.539 9.07001 331.77 9.12903 cv
331.996 9.19098 332.203 9.27698 332.383 9.38702 cv
332.563 9.5 332.715 9.63702 332.844 9.789 cv
332.973 9.94501 333.082 10.117 333.172 10.309 cv
333.379 10.086 333.582 9.89502 333.785 9.73401 cv
333.98 9.57397 334.18 9.44098 334.375 9.34003 cv
334.57 9.23798 334.766 9.164 334.961 9.11298 cv
335.156 9.06598 335.355 9.04303 335.559 9.039 cv
336.02 9.04303 336.406 9.12097 336.727 9.27301 cv
337.039 9.43402 337.297 9.64502 337.492 9.90997 cv
337.688 10.18 337.824 10.492 337.91 10.848 cv
337.988 11.207 338.031 11.586 338.035 11.984 cv
cp
f
345.879 16.457 mo
345.875 16.535 345.848 16.59 345.801 16.629 cv
345.746 16.672 345.664 16.699 345.555 16.719 cv
345.438 16.734 345.273 16.746 345.059 16.746 cv
344.82 16.746 344.648 16.734 344.547 16.719 cv
344.438 16.699 344.363 16.672 344.324 16.629 cv
344.277 16.59 344.258 16.535 344.258 16.457 cv
344.258 15.906 li
343.969 16.215 343.641 16.453 343.277 16.621 cv
342.91 16.793 342.504 16.875 342.059 16.879 cv
341.688 16.875 341.348 16.828 341.039 16.734 cv
340.73 16.641 340.465 16.5 340.238 16.305 cv
340.012 16.117 339.836 15.883 339.711 15.602 cv
339.586 15.324 339.523 14.996 339.527 14.617 cv
339.523 14.219 339.602 13.867 339.762 13.562 cv
339.918 13.266 340.156 13.02 340.473 12.824 cv
340.785 12.633 341.176 12.488 341.645 12.391 cv
342.113 12.301 342.656 12.254 343.273 12.25 cv
343.953 12.25 li
343.953 11.828 li
343.953 11.613 343.93 11.422 343.887 11.258 cv
343.84 11.098 343.766 10.961 343.668 10.848 cv
343.563 10.742 343.43 10.66 343.262 10.605 cv
343.09 10.555 342.879 10.531 342.637 10.527 cv
342.305 10.531 342.012 10.566 341.758 10.637 cv
341.496 10.711 341.27 10.793 341.074 10.879 cv
340.875 10.973 340.711 11.051 340.582 11.121 cv
340.445 11.195 340.336 11.234 340.258 11.23 cv
340.195 11.234 340.145 11.215 340.105 11.176 cv
340.059 11.141 340.023 11.09 339.996 11.02 cv
339.965 10.957 339.941 10.871 339.93 10.77 cv
339.91 10.672 339.902 10.562 339.906 10.441 cv
339.902 10.281 339.918 10.156 339.945 10.059 cv
339.969 9.96899 340.016 9.883 340.094 9.80499 cv
340.164 9.72998 340.293 9.64801 340.477 9.55902 cv
340.656 9.46899 340.867 9.383 341.113 9.30499 cv
341.355 9.22699 341.625 9.164 341.914 9.11298 cv
342.203 9.06598 342.5 9.04303 342.809 9.039 cv
343.352 9.04303 343.816 9.09399 344.203 9.19897 cv
344.59 9.30902 344.91 9.47302 345.16 9.69098 cv
345.41 9.90997 345.59 10.195 345.707 10.543 cv
345.816 10.895 345.875 11.309 345.879 11.781 cv
cp
343.953 13.48 mo
343.203 13.48 li
342.887 13.484 342.617 13.508 342.395 13.551 cv
342.168 13.602 341.984 13.672 341.848 13.762 cv
341.703 13.859 341.602 13.973 341.539 14.102 cv
341.473 14.238 341.438 14.387 341.441 14.555 cv
341.438 14.848 341.531 15.078 341.719 15.242 cv
341.902 15.41 342.16 15.492 342.488 15.492 cv
342.762 15.492 343.012 15.422 343.246 15.281 cv
343.473 15.141 343.711 14.937 343.953 14.664 cv
cp
f
354.102 9.96503 mo
354.098 10.219 354.07 10.402 354.016 10.52 cv
353.957 10.641 353.887 10.699 353.809 10.699 cv
352.988 10.699 li
353.102 10.824 353.184 10.969 353.234 11.125 cv
353.281 11.285 353.305 11.449 353.309 11.617 cv
353.305 12.027 353.238 12.387 353.105 12.699 cv
352.969 13.016 352.773 13.281 352.523 13.492 cv
352.27 13.711 351.969 13.875 351.613 13.984 cv
351.254 14.102 350.855 14.156 350.426 14.152 cv
350.199 14.156 349.988 14.129 349.785 14.07 cv
349.582 14.02 349.426 13.957 349.316 13.879 cv
349.254 13.949 349.195 14.027 349.148 14.121 cv
349.098 14.215 349.074 14.32 349.078 14.43 cv
349.074 14.586 349.141 14.707 349.273 14.801 cv
349.402 14.898 349.59 14.953 349.832 14.961 cv
351.523 15.023 li
351.918 15.039 352.27 15.098 352.578 15.191 cv
352.887 15.293 353.148 15.426 353.359 15.598 cv
353.57 15.773 353.73 15.984 353.84 16.227 cv
353.949 16.473 354.004 16.746 354.008 17.059 cv
354.004 17.395 353.93 17.719 353.781 18.027 cv
353.633 18.328 353.406 18.59 353.105 18.816 cv
352.801 19.035 352.422 19.215 351.969 19.348 cv
351.512 19.477 350.98 19.539 350.379 19.543 cv
349.781 19.539 349.277 19.492 348.859 19.402 cv
348.441 19.305 348.098 19.176 347.832 19.012 cv
347.563 18.844 347.367 18.645 347.25 18.418 cv
347.125 18.184 347.066 17.93 347.066 17.656 cv
347.066 17.484 347.086 17.324 347.133 17.168 cv
347.172 17.012 347.238 16.859 347.328 16.719 cv
347.41 16.574 347.516 16.441 347.641 16.309 cv
347.766 16.18 347.906 16.055 348.07 15.934 cv
347.844 15.82 347.672 15.66 347.551 15.449 cv
347.43 15.246 347.371 15.02 347.371 14.773 cv
347.371 14.473 347.438 14.195 347.578 13.937 cv
347.715 13.687 347.898 13.457 348.125 13.254 cv
347.941 13.074 347.797 12.859 347.688 12.602 cv
347.578 12.352 347.523 12.031 347.527 11.648 cv
347.523 11.246 347.594 10.887 347.738 10.562 cv
347.879 10.246 348.078 9.97699 348.336 9.75403 cv
348.59 9.53497 348.895 9.36298 349.246 9.24597 cv
349.598 9.12903 349.988 9.07001 350.418 9.07001 cv
350.637 9.07001 350.844 9.086 351.043 9.10901 cv
351.242 9.14099 351.43 9.17603 351.602 9.21899 cv
353.809 9.21899 li
353.891 9.22302 353.961 9.28101 354.02 9.39099 cv
354.07 9.508 354.098 9.69897 354.102 9.96503 cv
cp
351.586 11.609 mo
351.582 11.238 351.48 10.949 351.273 10.738 cv
351.063 10.535 350.77 10.43 350.395 10.426 cv
350.199 10.43 350.027 10.461 349.887 10.523 cv
349.738 10.59 349.617 10.68 349.523 10.789 cv
349.422 10.902 349.352 11.031 349.309 11.18 cv
349.258 11.328 349.234 11.484 349.238 11.641 cv
349.234 12 349.34 12.277 349.551 12.48 cv
349.758 12.687 350.047 12.793 350.418 12.789 cv
350.613 12.793 350.781 12.762 350.93 12.695 cv
351.07 12.637 351.191 12.551 351.293 12.437 cv
351.387 12.332 351.461 12.203 351.512 12.059 cv
351.559 11.918 351.582 11.77 351.586 11.609 cv
cp
352.047 17.16 mo
352.047 16.922 351.953 16.746 351.766 16.621 cv
351.578 16.5 351.32 16.43 350.992 16.418 cv
349.598 16.379 li
349.461 16.48 349.352 16.574 349.273 16.664 cv
349.191 16.754 349.129 16.84 349.082 16.926 cv
349.031 17.008 348.996 17.09 348.984 17.168 cv
348.965 17.246 348.957 17.324 348.961 17.41 cv
348.957 17.664 349.09 17.863 349.352 18 cv
349.613 18.133 349.984 18.199 350.465 18.203 cv
350.758 18.199 351.004 18.168 351.211 18.113 cv
351.41 18.051 351.574 17.973 351.703 17.875 cv
351.824 17.773 351.914 17.664 351.969 17.543 cv
352.02 17.422 352.047 17.293 352.047 17.16 cv
cp
f
361.746 12.758 mo
361.742 12.996 361.691 13.172 361.586 13.285 cv
361.477 13.402 361.328 13.461 361.148 13.457 cv
356.914 13.457 li
356.91 13.758 356.945 14.027 357.02 14.266 cv
357.086 14.508 357.199 14.711 357.355 14.879 cv
357.508 15.051 357.703 15.18 357.945 15.266 cv
358.184 15.355 358.473 15.398 358.816 15.398 cv
359.156 15.398 359.457 15.375 359.719 15.324 cv
359.977 15.277 360.203 15.223 360.395 15.16 cv
360.582 15.102 360.738 15.047 360.867 14.996 cv
360.988 14.949 361.09 14.926 361.172 14.922 cv
361.215 14.926 361.254 14.934 361.289 14.949 cv
361.316 14.969 361.344 15 361.363 15.047 cv
361.383 15.094 361.395 15.16 361.406 15.246 cv
361.41 15.332 361.414 15.441 361.418 15.57 cv
361.414 15.687 361.414 15.785 361.41 15.863 cv
361.402 15.945 361.395 16.012 361.387 16.066 cv
361.375 16.125 361.359 16.176 361.34 16.211 cv
361.32 16.254 361.293 16.289 361.262 16.324 cv
361.227 16.363 361.133 16.414 360.984 16.473 cv
360.828 16.539 360.637 16.602 360.406 16.656 cv
360.168 16.719 359.898 16.766 359.602 16.812 cv
359.297 16.852 358.977 16.875 358.637 16.879 cv
358.016 16.875 357.473 16.801 357.012 16.645 cv
356.543 16.492 356.156 16.254 355.848 15.937 cv
355.531 15.621 355.297 15.223 355.148 14.738 cv
354.992 14.258 354.918 13.691 354.922 13.035 cv
354.918 12.422 354.996 11.863 355.16 11.367 cv
355.316 10.871 355.551 10.453 355.863 10.105 cv
356.168 9.76202 356.543 9.49597 356.98 9.31201 cv
357.418 9.133 357.91 9.04303 358.465 9.039 cv
359.043 9.04303 359.543 9.12903 359.957 9.297 cv
360.371 9.47302 360.707 9.711 360.973 10.012 cv
361.234 10.316 361.43 10.676 361.559 11.09 cv
361.68 11.508 361.742 11.957 361.746 12.445 cv
cp
359.844 12.195 mo
359.855 11.645 359.746 11.211 359.512 10.898 cv
359.277 10.586 358.91 10.43 358.418 10.426 cv
358.168 10.43 357.953 10.477 357.77 10.566 cv
357.582 10.664 357.43 10.789 357.309 10.945 cv
357.184 11.105 357.09 11.293 357.027 11.508 cv
356.961 11.723 356.922 11.953 356.914 12.195 cv
cp
f
368.246 14.469 mo
368.242 14.867 368.168 15.215 368.023 15.516 cv
367.875 15.816 367.668 16.07 367.398 16.27 cv
367.125 16.477 366.805 16.625 366.438 16.727 cv
366.07 16.824 365.668 16.875 365.238 16.879 cv
364.973 16.875 364.727 16.855 364.492 16.82 cv
364.258 16.777 364.047 16.73 363.859 16.672 cv
363.672 16.613 363.516 16.551 363.391 16.488 cv
363.266 16.426 363.172 16.367 363.117 16.312 cv
363.059 16.258 363.016 16.176 362.988 16.059 cv
362.953 15.945 362.938 15.77 362.941 15.539 cv
362.938 15.391 362.945 15.27 362.957 15.176 cv
362.965 15.086 362.98 15.016 363.004 14.957 cv
363.023 14.906 363.047 14.867 363.082 14.848 cv
363.109 14.832 363.148 14.824 363.195 14.82 cv
363.25 14.824 363.336 14.855 363.449 14.918 cv
363.559 14.984 363.695 15.059 363.867 15.133 cv
364.031 15.215 364.227 15.285 364.445 15.352 cv
364.664 15.422 364.914 15.457 365.199 15.453 cv
365.375 15.457 365.531 15.437 365.672 15.398 cv
365.805 15.363 365.926 15.312 366.031 15.242 cv
366.129 15.176 366.203 15.09 366.258 14.984 cv
366.305 14.883 366.332 14.762 366.336 14.625 cv
366.332 14.469 366.285 14.336 366.191 14.227 cv
366.098 14.117 365.969 14.02 365.813 13.934 cv
365.648 13.852 365.469 13.773 365.273 13.699 cv
365.07 13.629 364.867 13.551 364.656 13.457 cv
364.445 13.371 364.238 13.27 364.043 13.152 cv
363.84 13.043 363.66 12.902 363.504 12.734 cv
363.34 12.57 363.215 12.371 363.121 12.133 cv
363.027 11.902 362.98 11.621 362.98 11.289 cv
362.98 10.961 363.043 10.656 363.172 10.375 cv
363.301 10.102 363.488 9.86298 363.734 9.664 cv
363.977 9.46899 364.273 9.31598 364.625 9.203 cv
364.973 9.09802 365.367 9.04303 365.809 9.039 cv
366.023 9.04303 366.234 9.05902 366.441 9.086 cv
366.645 9.12097 366.832 9.15997 367 9.203 cv
367.164 9.25403 367.305 9.30499 367.422 9.35498 cv
367.535 9.414 367.617 9.461 367.668 9.49597 cv
367.715 9.539 367.75 9.578 367.773 9.61298 cv
367.793 9.65601 367.805 9.703 367.816 9.75403 cv
367.824 9.80902 367.836 9.875 367.844 9.953 cv
367.852 10.039 367.855 10.137 367.855 10.254 cv
367.855 10.395 367.852 10.512 367.844 10.598 cv
367.836 10.691 367.82 10.762 367.805 10.809 cv
367.785 10.863 367.762 10.898 367.734 10.914 cv
367.699 10.937 367.664 10.945 367.625 10.941 cv
367.574 10.945 367.5 10.918 367.406 10.859 cv
367.305 10.809 367.184 10.75 367.035 10.684 cv
366.887 10.625 366.715 10.566 366.52 10.508 cv
366.324 10.457 366.102 10.43 365.855 10.426 cv
365.676 10.43 365.523 10.449 365.395 10.48 cv
365.262 10.52 365.152 10.57 365.074 10.637 cv
364.988 10.707 364.926 10.785 364.887 10.875 cv
364.84 10.969 364.82 11.066 364.824 11.168 cv
364.82 11.328 364.871 11.465 364.973 11.57 cv
365.07 11.684 365.199 11.777 365.363 11.859 cv
365.523 11.945 365.707 12.023 365.914 12.094 cv
366.117 12.168 366.324 12.25 366.535 12.332 cv
366.742 12.422 366.949 12.52 367.16 12.633 cv
367.363 12.746 367.547 12.887 367.707 13.051 cv
367.867 13.219 367.996 13.418 368.098 13.648 cv
368.191 13.883 368.242 14.156 368.246 14.469 cv
cp
f
377.027 12.781 mo
377.023 13.082 376.996 13.293 376.941 13.41 cv
376.883 13.535 376.793 13.594 376.668 13.59 cv
373.426 13.59 li
373.297 13.594 373.203 13.531 373.148 13.406 cv
373.086 13.285 373.059 13.078 373.063 12.781 cv
373.059 12.492 373.086 12.285 373.148 12.164 cv
373.203 12.047 373.297 11.988 373.426 11.984 cv
376.668 11.984 li
376.73 11.988 376.781 12 376.828 12.023 cv
376.867 12.051 376.906 12.098 376.941 12.156 cv
376.969 12.223 376.992 12.305 377.008 12.406 cv
377.02 12.512 377.023 12.637 377.027 12.781 cv
cp
f
387.641 15.844 mo
387.637 16 387.633 16.133 387.621 16.234 cv
387.605 16.344 387.586 16.43 387.563 16.5 cv
387.535 16.57 387.5 16.621 387.465 16.652 cv
387.422 16.684 387.379 16.699 387.328 16.699 cv
382.707 16.699 li
382.531 16.699 382.387 16.648 382.273 16.547 cv
382.152 16.445 382.094 16.281 382.098 16.051 cv
382.098 6.89502 li
382.094 6.84802 382.113 6.80103 382.148 6.75403 cv
382.18 6.71503 382.234 6.67999 382.316 6.65198 cv
382.391 6.62903 382.496 6.60901 382.633 6.59003 cv
382.762 6.578 382.926 6.57001 383.129 6.56598 cv
383.324 6.57001 383.492 6.578 383.625 6.59003 cv
383.754 6.60901 383.855 6.62903 383.938 6.65198 cv
384.012 6.67999 384.07 6.71503 384.105 6.75403 cv
384.137 6.80103 384.152 6.84802 384.156 6.89502 cv
384.156 15.008 li
387.328 15.008 li
387.379 15.012 387.422 15.027 387.465 15.051 cv
387.5 15.082 387.535 15.129 387.563 15.191 cv
387.586 15.262 387.605 15.348 387.621 15.449 cv
387.633 15.559 387.637 15.687 387.641 15.844 cv
cp
f
395.762 12.887 mo
395.758 13.484 395.68 14.027 395.527 14.512 cv
395.367 15.004 395.133 15.422 394.816 15.773 cv
394.5 16.125 394.102 16.398 393.625 16.59 cv
393.145 16.781 392.586 16.875 391.949 16.879 cv
391.328 16.875 390.789 16.793 390.336 16.621 cv
389.875 16.453 389.496 16.203 389.199 15.875 cv
388.895 15.551 388.672 15.148 388.527 14.668 cv
388.383 14.191 388.313 13.645 388.313 13.027 cv
388.313 12.437 388.391 11.898 388.547 11.406 cv
388.703 10.918 388.941 10.496 389.262 10.145 cv
389.578 9.797 389.973 9.52301 390.449 9.328 cv
390.922 9.13702 391.48 9.04303 392.121 9.039 cv
392.746 9.04303 393.285 9.125 393.742 9.29303 cv
394.199 9.46503 394.578 9.71503 394.875 10.039 cv
395.172 10.367 395.395 10.77 395.543 11.246 cv
395.688 11.727 395.758 12.273 395.762 12.887 cv
cp
393.742 12.965 mo
393.738 12.629 393.711 12.312 393.66 12.02 cv
393.602 11.734 393.508 11.484 393.383 11.27 cv
393.25 11.059 393.078 10.891 392.867 10.77 cv
392.648 10.652 392.379 10.594 392.051 10.59 cv
391.762 10.594 391.508 10.648 391.289 10.75 cv
391.07 10.859 390.891 11.016 390.75 11.219 cv
390.609 11.426 390.504 11.672 390.434 11.957 cv
390.363 12.25 390.328 12.578 390.328 12.941 cv
390.328 13.289 390.355 13.605 390.414 13.891 cv
390.469 14.184 390.563 14.434 390.691 14.645 cv
390.816 14.859 390.988 15.023 391.211 15.137 cv
391.426 15.258 391.695 15.316 392.02 15.312 cv
392.313 15.316 392.57 15.262 392.793 15.152 cv
393.008 15.047 393.188 14.895 393.328 14.687 cv
393.469 14.488 393.57 14.242 393.641 13.953 cv
393.703 13.668 393.738 13.34 393.742 12.965 cv
cp
f
402.578 15.328 mo
402.574 15.465 402.57 15.578 402.566 15.668 cv
402.555 15.762 402.547 15.84 402.535 15.898 cv
402.52 15.961 402.504 16.012 402.488 16.047 cv
402.469 16.09 402.426 16.137 402.367 16.195 cv
402.301 16.258 402.195 16.332 402.047 16.414 cv
401.895 16.504 401.723 16.582 401.531 16.645 cv
401.34 16.715 401.133 16.766 400.906 16.809 cv
400.68 16.848 400.445 16.867 400.211 16.871 cv
399.672 16.867 399.199 16.789 398.785 16.621 cv
398.371 16.457 398.023 16.211 397.746 15.887 cv
397.461 15.562 397.25 15.168 397.109 14.699 cv
396.969 14.234 396.898 13.695 396.898 13.09 cv
396.898 12.395 396.984 11.797 397.156 11.289 cv
397.328 10.785 397.57 10.363 397.887 10.031 cv
398.195 9.69897 398.563 9.453 398.992 9.289 cv
399.414 9.12903 399.883 9.047 400.395 9.047 cv
400.602 9.047 400.805 9.06598 401.008 9.10199 cv
401.203 9.14099 401.391 9.19098 401.566 9.25 cv
401.738 9.31598 401.895 9.38702 402.035 9.461 cv
402.172 9.54303 402.27 9.60901 402.328 9.664 cv
402.383 9.72302 402.422 9.77002 402.449 9.80499 cv
402.469 9.84802 402.488 9.89801 402.504 9.95697 cv
402.516 10.023 402.527 10.102 402.535 10.187 cv
402.543 10.281 402.547 10.391 402.547 10.52 cv
402.547 10.824 402.52 11.035 402.469 11.156 cv
402.414 11.277 402.348 11.34 402.266 11.336 cv
402.176 11.34 402.082 11.305 401.984 11.23 cv
401.883 11.16 401.766 11.078 401.633 10.988 cv
401.5 10.902 401.34 10.82 401.152 10.746 cv
400.965 10.676 400.738 10.641 400.48 10.637 cv
399.969 10.641 399.582 10.836 399.313 11.227 cv
399.039 11.617 398.902 12.191 398.906 12.949 cv
398.902 13.324 398.938 13.656 399.008 13.941 cv
399.074 14.227 399.172 14.465 399.309 14.656 cv
399.438 14.852 399.605 14.996 399.809 15.09 cv
400.008 15.187 400.238 15.234 400.504 15.234 cv
400.77 15.234 401.004 15.195 401.203 15.113 cv
401.395 15.035 401.563 14.945 401.711 14.844 cv
401.852 14.746 401.977 14.656 402.078 14.574 cv
402.176 14.496 402.258 14.457 402.328 14.453 cv
402.371 14.457 402.41 14.469 402.445 14.492 cv
402.473 14.52 402.496 14.566 402.52 14.637 cv
402.535 14.707 402.551 14.797 402.563 14.906 cv
402.57 15.016 402.574 15.156 402.578 15.328 cv
cp
f
409.867 16.457 mo
409.863 16.535 409.836 16.59 409.789 16.629 cv
409.734 16.672 409.652 16.699 409.543 16.719 cv
409.426 16.734 409.262 16.746 409.047 16.746 cv
408.809 16.746 408.637 16.734 408.535 16.719 cv
408.426 16.699 408.352 16.672 408.313 16.629 cv
408.266 16.59 408.246 16.535 408.246 16.457 cv
408.246 15.906 li
407.957 16.215 407.629 16.453 407.266 16.621 cv
406.898 16.793 406.492 16.875 406.047 16.879 cv
405.676 16.875 405.336 16.828 405.027 16.734 cv
404.719 16.641 404.453 16.5 404.227 16.305 cv
404 16.117 403.824 15.883 403.699 15.602 cv
403.574 15.324 403.512 14.996 403.516 14.617 cv
403.512 14.219 403.59 13.867 403.75 13.562 cv
403.906 13.266 404.145 13.02 404.461 12.824 cv
404.773 12.633 405.164 12.488 405.633 12.391 cv
406.102 12.301 406.645 12.254 407.262 12.25 cv
407.941 12.25 li
407.941 11.828 li
407.941 11.613 407.918 11.422 407.875 11.258 cv
407.828 11.098 407.754 10.961 407.656 10.848 cv
407.551 10.742 407.418 10.66 407.25 10.605 cv
407.078 10.555 406.867 10.531 406.625 10.527 cv
406.293 10.531 406 10.566 405.746 10.637 cv
405.484 10.711 405.258 10.793 405.063 10.879 cv
404.863 10.973 404.699 11.051 404.57 11.121 cv
404.434 11.195 404.324 11.234 404.246 11.23 cv
404.184 11.234 404.133 11.215 404.094 11.176 cv
404.047 11.141 404.012 11.09 403.984 11.02 cv
403.953 10.957 403.93 10.871 403.918 10.77 cv
403.898 10.672 403.891 10.562 403.895 10.441 cv
403.891 10.281 403.906 10.156 403.934 10.059 cv
403.957 9.96899 404.004 9.883 404.082 9.80499 cv
404.152 9.72998 404.281 9.64801 404.465 9.55902 cv
404.645 9.46899 404.855 9.383 405.102 9.30499 cv
405.344 9.22699 405.613 9.164 405.902 9.11298 cv
406.191 9.06598 406.488 9.04303 406.797 9.039 cv
407.34 9.04303 407.805 9.09399 408.191 9.19897 cv
408.578 9.30902 408.898 9.47302 409.148 9.69098 cv
409.398 9.90997 409.578 10.195 409.695 10.543 cv
409.805 10.895 409.863 11.309 409.867 11.781 cv
cp
407.941 13.48 mo
407.191 13.48 li
406.875 13.484 406.605 13.508 406.383 13.551 cv
406.156 13.602 405.973 13.672 405.836 13.762 cv
405.691 13.859 405.59 13.973 405.527 14.102 cv
405.461 14.238 405.426 14.387 405.43 14.555 cv
405.426 14.848 405.52 15.078 405.707 15.242 cv
405.891 15.41 406.148 15.492 406.477 15.492 cv
406.75 15.492 407 15.422 407.234 15.281 cv
407.461 15.141 407.699 14.937 407.941 14.664 cv
cp
f
413.789 16.434 mo
413.785 16.488 413.77 16.531 413.742 16.57 cv
413.707 16.609 413.652 16.645 413.582 16.668 cv
413.504 16.695 413.406 16.711 413.281 16.727 cv
413.156 16.738 412.996 16.746 412.809 16.746 cv
412.613 16.746 412.457 16.738 412.332 16.727 cv
412.207 16.711 412.105 16.695 412.031 16.668 cv
411.953 16.645 411.898 16.609 411.871 16.57 cv
411.836 16.531 411.82 16.488 411.824 16.434 cv
411.824 6.18701 li
411.82 6.13702 411.836 6.09003 411.871 6.047 cv
411.898 6.008 411.953 5.97302 412.031 5.94098 cv
412.105 5.914 412.207 5.89502 412.332 5.875 cv
412.457 5.86298 412.613 5.85498 412.809 5.85199 cv
412.996 5.85498 413.156 5.86298 413.281 5.875 cv
413.406 5.89502 413.504 5.914 413.582 5.94098 cv
413.652 5.97302 413.707 6.008 413.742 6.047 cv
413.77 6.09003 413.785 6.13702 413.789 6.18701 cv
cp
f
431.277 16.418 mo
431.273 16.473 431.262 16.52 431.234 16.559 cv
431.203 16.602 431.148 16.637 431.078 16.66 cv
431 16.687 430.902 16.707 430.777 16.723 cv
430.652 16.738 430.492 16.746 430.301 16.746 cv
430.113 16.746 429.957 16.738 429.836 16.723 cv
429.707 16.707 429.609 16.687 429.539 16.66 cv
429.465 16.637 429.414 16.602 429.383 16.559 cv
429.352 16.52 429.336 16.473 429.336 16.418 cv
429.336 8.211 li
429.32 8.211 li
426.398 16.41 li
426.375 16.48 426.34 16.535 426.297 16.578 cv
426.246 16.625 426.184 16.66 426.105 16.684 cv
426.023 16.711 425.922 16.727 425.797 16.734 cv
425.672 16.742 425.52 16.746 425.348 16.746 cv
425.168 16.746 425.02 16.738 424.895 16.727 cv
424.77 16.711 424.664 16.691 424.586 16.664 cv
424.5 16.637 424.438 16.602 424.395 16.559 cv
424.344 16.52 424.313 16.473 424.301 16.41 cv
421.48 8.211 li
421.465 8.211 li
421.465 16.418 li
421.461 16.473 421.445 16.52 421.422 16.559 cv
421.391 16.602 421.34 16.637 421.262 16.66 cv
421.184 16.687 421.082 16.707 420.961 16.723 cv
420.836 16.738 420.68 16.746 420.492 16.746 cv
420.301 16.746 420.145 16.738 420.023 16.723 cv
419.895 16.707 419.793 16.687 419.723 16.66 cv
419.645 16.637 419.594 16.602 419.566 16.559 cv
419.535 16.52 419.52 16.473 419.523 16.418 cv
419.523 7.43402 li
419.52 7.172 419.59 6.96899 419.734 6.82397 cv
419.871 6.68701 420.059 6.617 420.297 6.61298 cv
421.637 6.61298 li
421.875 6.617 422.078 6.63702 422.25 6.672 cv
422.418 6.71503 422.566 6.77698 422.695 6.867 cv
422.816 6.961 422.922 7.08197 423.008 7.22699 cv
423.09 7.37903 423.16 7.56201 423.227 7.77698 cv
425.41 13.785 li
425.441 13.785 li
427.699 7.79303 li
427.766 7.57397 427.84 7.39099 427.922 7.23798 cv
428 7.09003 428.094 6.96899 428.203 6.87097 cv
428.309 6.78101 428.434 6.71503 428.578 6.672 cv
428.723 6.63702 428.891 6.617 429.086 6.61298 cv
430.465 6.61298 li
430.602 6.617 430.723 6.633 430.828 6.66803 cv
430.926 6.70697 431.008 6.76202 431.078 6.828 cv
431.141 6.90198 431.191 6.98798 431.227 7.086 cv
431.258 7.19098 431.273 7.30902 431.277 7.43402 cv
cp
f
440.387 12.887 mo
440.383 13.484 440.305 14.027 440.152 14.512 cv
439.992 15.004 439.758 15.422 439.441 15.773 cv
439.125 16.125 438.727 16.398 438.25 16.59 cv
437.77 16.781 437.211 16.875 436.574 16.879 cv
435.953 16.875 435.414 16.793 434.961 16.621 cv
434.5 16.453 434.121 16.203 433.824 15.875 cv
433.52 15.551 433.297 15.148 433.152 14.668 cv
433.008 14.191 432.938 13.645 432.938 13.027 cv
432.938 12.437 433.016 11.898 433.172 11.406 cv
433.328 10.918 433.566 10.496 433.887 10.145 cv
434.203 9.797 434.598 9.52301 435.074 9.328 cv
435.547 9.13702 436.105 9.04303 436.746 9.039 cv
437.371 9.04303 437.91 9.125 438.367 9.29303 cv
438.824 9.46503 439.203 9.71503 439.5 10.039 cv
439.797 10.367 440.02 10.77 440.168 11.246 cv
440.313 11.727 440.383 12.273 440.387 12.887 cv
cp
438.367 12.965 mo
438.363 12.629 438.336 12.312 438.285 12.02 cv
438.227 11.734 438.133 11.484 438.008 11.27 cv
437.875 11.059 437.703 10.891 437.492 10.77 cv
437.273 10.652 437.004 10.594 436.676 10.59 cv
436.387 10.594 436.133 10.648 435.914 10.75 cv
435.695 10.859 435.516 11.016 435.375 11.219 cv
435.234 11.426 435.129 11.672 435.059 11.957 cv
434.988 12.25 434.953 12.578 434.953 12.941 cv
434.953 13.289 434.98 13.605 435.039 13.891 cv
435.094 14.184 435.188 14.434 435.316 14.645 cv
435.441 14.859 435.613 15.023 435.836 15.137 cv
436.051 15.258 436.32 15.316 436.645 15.312 cv
436.938 15.316 437.195 15.262 437.418 15.152 cv
437.633 15.047 437.813 14.895 437.953 14.687 cv
438.094 14.488 438.195 14.242 438.266 13.953 cv
438.328 13.668 438.363 13.34 438.367 12.965 cv
cp
f
448.535 16.434 mo
448.531 16.496 448.52 16.543 448.496 16.578 cv
448.469 16.621 448.422 16.652 448.363 16.676 cv
448.297 16.699 448.215 16.715 448.109 16.73 cv
448.004 16.738 447.871 16.746 447.719 16.746 cv
447.547 16.746 447.414 16.738 447.313 16.73 cv
447.207 16.715 447.121 16.699 447.059 16.676 cv
446.992 16.652 446.945 16.621 446.918 16.578 cv
446.887 16.543 446.871 16.496 446.875 16.434 cv
446.875 15.664 li
446.516 16.051 446.141 16.348 445.75 16.559 cv
445.352 16.77 444.918 16.875 444.445 16.879 cv
443.91 16.875 443.461 16.773 443.098 16.57 cv
442.73 16.367 442.434 16.094 442.203 15.742 cv
441.969 15.398 441.801 14.992 441.699 14.523 cv
441.598 14.062 441.547 13.57 441.547 13.051 cv
441.547 12.437 441.609 11.883 441.742 11.387 cv
441.871 10.895 442.066 10.473 442.324 10.125 cv
442.578 9.77698 442.895 9.51202 443.273 9.32001 cv
443.652 9.13702 444.09 9.04303 444.586 9.039 cv
444.973 9.04303 445.324 9.12097 445.645 9.27698 cv
445.957 9.43701 446.273 9.66803 446.586 9.97302 cv
446.586 6.211 li
446.586 6.15997 446.598 6.11298 446.629 6.07001 cv
446.652 6.03101 446.707 5.99597 446.785 5.96503 cv
446.859 5.93701 446.957 5.91803 447.086 5.89801 cv
447.207 5.88702 447.367 5.87903 447.563 5.875 cv
447.754 5.87903 447.91 5.88702 448.035 5.89801 cv
448.156 5.91803 448.258 5.93701 448.332 5.96503 cv
448.402 5.99597 448.453 6.03101 448.488 6.07001 cv
448.516 6.11298 448.531 6.15997 448.535 6.211 cv
cp
446.586 11.789 mo
446.305 11.437 446.035 11.168 445.781 10.98 cv
445.52 10.793 445.25 10.699 444.973 10.699 cv
444.719 10.699 444.5 10.766 444.316 10.891 cv
444.129 11.023 443.98 11.191 443.871 11.402 cv
443.758 11.613 443.676 11.852 443.621 12.113 cv
443.566 12.379 443.539 12.648 443.539 12.918 cv
443.539 13.215 443.563 13.496 443.609 13.77 cv
443.656 14.047 443.73 14.293 443.84 14.508 cv
443.941 14.723 444.086 14.895 444.266 15.023 cv
444.441 15.156 444.664 15.223 444.934 15.219 cv
445.066 15.223 445.195 15.203 445.328 15.16 cv
445.453 15.125 445.586 15.062 445.719 14.969 cv
445.852 14.883 445.988 14.766 446.129 14.621 cv
446.27 14.48 446.422 14.305 446.586 14.098 cv
cp
f
456.934 12.758 mo
456.93 12.996 456.879 13.172 456.773 13.285 cv
456.664 13.402 456.516 13.461 456.336 13.457 cv
452.102 13.457 li
452.098 13.758 452.133 14.027 452.207 14.266 cv
452.273 14.508 452.387 14.711 452.543 14.879 cv
452.695 15.051 452.891 15.18 453.133 15.266 cv
453.371 15.355 453.66 15.398 454.004 15.398 cv
454.344 15.398 454.645 15.375 454.906 15.324 cv
455.164 15.277 455.391 15.223 455.582 15.16 cv
455.77 15.102 455.926 15.047 456.055 14.996 cv
456.176 14.949 456.277 14.926 456.359 14.922 cv
456.402 14.926 456.441 14.934 456.477 14.949 cv
456.504 14.969 456.531 15 456.551 15.047 cv
456.57 15.094 456.582 15.16 456.594 15.246 cv
456.598 15.332 456.602 15.441 456.605 15.57 cv
456.602 15.687 456.602 15.785 456.598 15.863 cv
456.59 15.945 456.582 16.012 456.574 16.066 cv
456.563 16.125 456.547 16.176 456.527 16.211 cv
456.508 16.254 456.48 16.289 456.449 16.324 cv
456.414 16.363 456.32 16.414 456.172 16.473 cv
456.016 16.539 455.824 16.602 455.594 16.656 cv
455.355 16.719 455.086 16.766 454.789 16.812 cv
454.484 16.852 454.164 16.875 453.824 16.879 cv
453.203 16.875 452.66 16.801 452.199 16.645 cv
451.73 16.492 451.344 16.254 451.035 15.937 cv
450.719 15.621 450.484 15.223 450.336 14.738 cv
450.18 14.258 450.105 13.691 450.109 13.035 cv
450.105 12.422 450.184 11.863 450.348 11.367 cv
450.504 10.871 450.738 10.453 451.051 10.105 cv
451.355 9.76202 451.73 9.49597 452.168 9.31201 cv
452.605 9.133 453.098 9.04303 453.652 9.039 cv
454.23 9.04303 454.73 9.12903 455.145 9.297 cv
455.559 9.47302 455.895 9.711 456.16 10.012 cv
456.422 10.316 456.617 10.676 456.746 11.09 cv
456.867 11.508 456.93 11.957 456.934 12.445 cv
cp
455.031 12.195 mo
455.043 11.645 454.934 11.211 454.699 10.898 cv
454.465 10.586 454.098 10.43 453.605 10.426 cv
453.355 10.43 453.141 10.477 452.957 10.566 cv
452.77 10.664 452.617 10.789 452.496 10.945 cv
452.371 11.105 452.277 11.293 452.215 11.508 cv
452.148 11.723 452.109 11.953 452.102 12.195 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
