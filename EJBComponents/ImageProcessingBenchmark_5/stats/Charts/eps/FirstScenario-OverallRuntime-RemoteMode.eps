%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FirstScenario-OverallRuntime-RemoteMode.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 9/12/2018, 3:59:38 p.m.
%%BoundingBox: 0 0 675 538
%%HiResBoundingBox: 0 0 674.3000 537.6501
%%CropBox: 0 0 674.3000 537.6501
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -537.65 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 537.65 li
674.3 537.65 li
674.3 0 li
cp
clp
0 0 mo
674.301 0 li
674.301 537.648 li
0 537.648 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
68.488 481.09 mo
661.199 481.09 li
68.488 470.711 mo
661.199 470.711 li
68.488 460.328 mo
661.199 460.328 li
68.488 449.949 mo
661.199 449.949 li
68.488 429.191 mo
661.199 429.191 li
68.488 418.871 mo
661.199 418.871 li
68.488 408.488 mo
661.199 408.488 li
68.488 398.109 mo
661.199 398.109 li
68.488 377.352 mo
661.199 377.352 li
68.488 366.969 mo
661.199 366.969 li
68.488 356.59 mo
661.199 356.59 li
68.488 346.211 mo
661.199 346.211 li
68.488 325.449 mo
661.199 325.449 li
68.488 315.07 mo
661.199 315.07 li
68.488 304.691 mo
661.199 304.691 li
68.488 294.309 mo
661.199 294.309 li
68.488 273.551 mo
661.199 273.551 li
68.488 263.172 mo
661.199 263.172 li
68.488 252.789 mo
661.199 252.789 li
68.488 242.41 mo
661.199 242.41 li
68.488 221.648 mo
661.199 221.648 li
68.488 211.27 mo
661.199 211.27 li
68.488 200.891 mo
661.199 200.891 li
68.488 190.512 mo
661.199 190.512 li
68.488 169.75 mo
661.199 169.75 li
68.488 159.371 mo
661.199 159.371 li
68.488 148.988 mo
661.199 148.988 li
68.488 138.672 mo
661.199 138.672 li
68.488 117.91 mo
661.199 117.91 li
68.488 107.531 mo
661.199 107.531 li
68.488 97.148 mo
661.199 97.148 li
68.488 86.77 mo
661.199 86.77 li
68.488 66.012 mo
661.199 66.012 li
68.488 55.629 mo
661.199 55.629 li
68.488 45.25 mo
661.199 45.25 li
68.488 34.871 mo
661.199 34.871 li
.135805 .104005 .108583 0 cmyk
@
68.488 439.57 mo
661.199 439.57 li
68.488 387.73 mo
661.199 387.73 li
68.488 335.828 mo
661.199 335.828 li
68.488 283.93 mo
661.199 283.93 li
68.488 232.031 mo
661.199 232.031 li
68.488 180.129 mo
661.199 180.129 li
68.488 128.289 mo
661.199 128.289 li
68.488 76.391 mo
661.199 76.391 li
68.488 24.488 mo
661.199 24.488 li
.326574 .281529 .277562 0 cmyk
@
105.551 24.488 mo
105.551 491.484 li
179.648 24.488 mo
179.648 491.484 li
253.691 24.488 mo
253.691 491.484 li
327.789 24.488 mo
327.789 491.484 li
401.891 24.488 mo
401.891 491.484 li
475.988 24.488 mo
475.988 491.484 li
550.09 24.488 mo
550.09 491.484 li
624.191 24.488 mo
624.191 491.484 li
.175235 .144778 .143648 0 cmyk
@
68.488 24.488 mo
68.488 491.484 li
142.57 24.488 mo
142.57 491.484 li
216.672 24.488 mo
216.672 491.484 li
290.77 24.488 mo
290.77 491.484 li
364.871 24.488 mo
364.871 491.484 li
438.91 24.488 mo
438.91 491.484 li
513.012 24.488 mo
513.012 491.484 li
587.109 24.488 mo
587.109 491.484 li
661.199 24.488 mo
661.199 491.484 li
.326574 .281529 .277562 0 cmyk
@
34.609 482.168 mo
55.5 482.168 li
55.5 499.258 li
34.609 499.258 li
cp
0 0 0 0 cmyk
ef
34.609 430.281 mo
55.5 430.281 li
55.5 447.371 li
34.609 447.371 li
cp
ef
34.609 378.391 mo
55.5 378.391 li
55.5 395.481 li
34.609 395.481 li
cp
ef
34.609 326.5 mo
55.5 326.5 li
55.5 343.59 li
34.609 343.59 li
cp
ef
27.516 274.609 mo
55.5 274.609 li
55.5 291.699 li
27.516 291.699 li
cp
ef
27.516 222.719 mo
55.5 222.719 li
55.5 239.809 li
27.516 239.809 li
cp
ef
27.516 170.84 mo
55.5 170.84 li
55.5 187.93 li
27.516 187.93 li
cp
ef
27.516 118.949 mo
55.5 118.949 li
55.5 136.039 li
27.516 136.039 li
cp
ef
27.516 67.059 mo
55.5 67.059 li
55.5 84.149 li
27.516 84.149 li
cp
ef
27.516 15.172 mo
55.5 15.172 li
55.5 32.262 li
27.516 32.262 li
cp
ef
1 lw
68.488 491.484 mo
661.199 491.484 li
.369879 .299321 .304356 .000976577 cmyk
@
68.488 491.484 mo
68.488 495.93 li
142.57 491.484 mo
142.57 495.93 li
216.672 491.484 mo
216.672 495.93 li
290.77 491.484 mo
290.77 495.93 li
364.871 491.484 mo
364.871 495.93 li
438.91 491.484 mo
438.91 495.93 li
513.012 491.484 mo
513.012 495.93 li
587.109 491.484 mo
587.109 495.93 li
661.199 491.484 mo
661.199 495.93 li
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lc
68.488 395.801 mo
142.57 399.551 li
216.672 400.988 li
290.77 412.609 li
364.871 403.27 li
438.91 402.672 li
513.012 410.949 li
587.109 410.352 li
661.199 406.809 li
.62829 .284672 0 0 cmyk
@
grestore
1.02 lw
63.512 390.809 mo
73.469 390.809 li
73.469 400.77 li
63.512 400.77 li
cp
.62829 .284672 0 0 cmyk
@
137.609 394.531 mo
147.57 394.531 li
147.57 404.488 li
137.609 404.488 li
cp
@
211.648 396.031 mo
221.609 396.031 li
221.609 405.988 li
211.648 405.988 li
cp
@
285.75 407.609 mo
295.711 407.609 li
295.711 417.57 li
285.75 417.57 li
cp
@
359.852 398.309 mo
369.809 398.309 li
369.809 408.27 li
359.852 408.27 li
cp
@
433.949 397.648 mo
443.91 397.648 li
443.91 407.609 li
433.949 407.609 li
cp
@
508.051 405.988 mo
518.012 405.988 li
518.012 415.949 li
508.051 415.949 li
cp
@
582.148 405.328 mo
592.109 405.328 li
592.109 415.289 li
582.148 415.289 li
cp
@
656.191 401.789 mo
666.148 401.789 li
666.148 411.75 li
656.191 411.75 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
68.488 389.781 mo
142.57 407.23 li
216.672 410.352 li
290.77 420.73 li
364.871 406.809 li
438.91 418.211 li
513.012 409.93 li
587.109 424.031 li
661.199 417.191 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
63.512 384.809 mo
73.469 384.809 li
73.469 394.77 li
63.512 394.77 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
137.609 402.211 mo
147.57 402.211 li
147.57 412.172 li
137.609 412.172 li
cp
@
211.648 405.328 mo
221.609 405.328 li
221.609 415.289 li
211.648 415.289 li
cp
@
285.75 415.711 mo
295.711 415.711 li
295.711 425.672 li
285.75 425.672 li
cp
@
359.852 401.789 mo
369.809 401.789 li
369.809 411.75 li
359.852 411.75 li
cp
@
433.949 413.25 mo
443.91 413.25 li
443.91 423.211 li
433.949 423.211 li
cp
@
508.051 404.91 mo
518.012 404.91 li
518.012 414.871 li
508.051 414.871 li
cp
@
582.148 419.07 mo
592.109 419.07 li
592.109 429.031 li
582.148 429.031 li
cp
@
656.191 412.172 mo
666.148 412.172 li
666.148 422.129 li
656.191 422.129 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
68.488 381.48 mo
142.57 411.551 li
216.672 414.07 li
290.77 425.48 li
364.871 424.031 li
438.91 413.648 li
513.012 415.09 li
587.109 422.352 li
661.199 415.75 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
63.512 376.469 mo
73.469 376.469 li
73.469 386.43 li
63.512 386.43 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
137.609 406.59 mo
147.57 406.59 li
147.57 416.551 li
137.609 416.551 li
cp
@
211.648 409.051 mo
221.609 409.051 li
221.609 419.012 li
211.648 419.012 li
cp
@
285.75 420.512 mo
295.711 420.512 li
295.711 430.469 li
285.75 430.469 li
cp
@
359.852 419.07 mo
369.809 419.07 li
369.809 429.031 li
359.852 429.031 li
cp
@
433.949 408.691 mo
443.91 408.691 li
443.91 418.648 li
433.949 418.648 li
cp
@
508.051 410.129 mo
518.012 410.129 li
518.012 420.09 li
508.051 420.09 li
cp
@
582.148 417.391 mo
592.109 417.391 li
592.109 427.352 li
582.148 427.352 li
cp
@
656.191 410.73 mo
666.148 410.73 li
666.148 420.691 li
656.191 420.691 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
68.488 386.461 mo
142.57 404.711 li
216.672 414.672 li
290.77 411.371 li
364.871 412.629 li
438.91 422.77 li
513.012 406.809 li
587.109 413.469 li
661.199 424.859 li
0 .993988 1 0 cmyk
@
grestore
63.512 381.449 mo
73.469 381.449 li
73.469 391.41 li
63.512 391.41 li
cp
0 .993988 1 0 cmyk
@
137.609 399.75 mo
147.57 399.75 li
147.57 409.711 li
137.609 409.711 li
cp
@
211.648 409.711 mo
221.609 409.711 li
221.609 419.672 li
211.648 419.672 li
cp
@
285.75 406.352 mo
295.711 406.352 li
295.711 416.309 li
285.75 416.309 li
cp
@
359.852 407.609 mo
369.809 407.609 li
369.809 417.57 li
359.852 417.57 li
cp
@
433.949 417.809 mo
443.91 417.809 li
443.91 427.77 li
433.949 427.77 li
cp
@
508.051 401.789 mo
518.012 401.789 li
518.012 411.75 li
508.051 411.75 li
cp
@
582.148 408.449 mo
592.109 408.449 li
592.109 418.41 li
582.148 418.41 li
cp
@
656.191 419.852 mo
666.148 419.852 li
666.148 429.809 li
656.191 429.809 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
68.488 393.93 mo
142.57 405.371 li
216.672 410.949 li
290.77 422.988 li
364.871 414.488 li
438.91 411.371 li
513.012 416.531 li
587.109 416.172 li
661.199 402.012 li
.62829 .284672 0 0 cmyk
@
grestore
63.512 388.949 mo
73.469 388.949 li
73.469 398.91 li
63.512 398.91 li
cp
.62829 .284672 0 0 cmyk
@
137.609 400.352 mo
147.57 400.352 li
147.57 410.309 li
137.609 410.309 li
cp
@
211.648 405.988 mo
221.609 405.988 li
221.609 415.949 li
211.648 415.949 li
cp
@
285.75 417.988 mo
295.711 417.988 li
295.711 427.949 li
285.75 427.949 li
cp
@
359.852 409.469 mo
369.809 409.469 li
369.809 419.43 li
359.852 419.43 li
cp
@
433.949 406.352 mo
443.91 406.352 li
443.91 416.309 li
433.949 416.309 li
cp
@
508.051 411.57 mo
518.012 411.57 li
518.012 421.531 li
508.051 421.531 li
cp
@
582.148 411.148 mo
592.109 411.148 li
592.109 421.109 li
582.148 421.109 li
cp
@
656.191 397.051 mo
666.148 397.051 li
666.148 407.012 li
656.191 407.012 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
68.488 394.969 mo
142.57 413.469 li
216.672 419.23 li
290.77 423.41 li
364.871 410.531 li
438.91 419.23 li
513.012 410.352 li
587.109 417.609 li
661.199 409.27 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
63.988 390.449 mo
72.929 390.449 li
72.929 399.39 li
63.988 399.39 li
cp
.0321965 .622736 .922606 .000579843 cmyk
@
138.09 408.93 mo
147.031 408.93 li
147.031 417.871 li
138.09 417.871 li
cp
@
212.129 414.75 mo
221.07 414.75 li
221.07 423.691 li
212.129 423.691 li
cp
@
286.23 418.891 mo
295.171 418.891 li
295.171 427.829 li
286.23 427.829 li
cp
@
360.328 406.051 mo
369.269 406.051 li
369.269 414.989 li
360.328 414.989 li
cp
@
434.43 414.75 mo
443.371 414.75 li
443.371 423.691 li
434.43 423.691 li
cp
@
508.531 405.809 mo
517.469 405.809 li
517.469 414.75 li
508.531 414.75 li
cp
@
582.629 413.07 mo
591.57 413.07 li
591.57 422.011 li
582.629 422.011 li
cp
@
656.672 404.789 mo
665.61 404.789 li
665.61 413.73 li
656.672 413.73 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
68.488 390.609 mo
142.57 406.391 li
216.672 407.828 li
290.77 426.109 li
364.871 414.07 li
438.91 411.969 li
513.012 406.809 li
587.109 403.691 li
661.199 420.73 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
63.512 385.648 mo
73.469 385.648 li
73.469 395.609 li
63.512 395.609 li
cp
.621118 .109194 .980743 .0040589 cmyk
@
137.609 401.371 mo
147.57 401.371 li
147.57 411.328 li
137.609 411.328 li
cp
@
211.648 402.871 mo
221.609 402.871 li
221.609 412.828 li
211.648 412.828 li
cp
@
285.75 421.109 mo
295.711 421.109 li
295.711 431.07 li
285.75 431.07 li
cp
@
359.852 409.051 mo
369.809 409.051 li
369.809 419.012 li
359.852 419.012 li
cp
@
433.949 407.012 mo
443.91 407.012 li
443.91 416.969 li
433.949 416.969 li
cp
@
508.051 401.789 mo
518.012 401.789 li
518.012 411.75 li
508.051 411.75 li
cp
@
582.148 398.672 mo
592.109 398.672 li
592.109 408.629 li
582.148 408.629 li
cp
@
656.191 415.711 mo
666.148 415.711 li
666.148 425.672 li
656.191 425.672 li
cp
@
gsave
68.469 24.4301 mo
661.93 24.4301 li
661.93 492.192 li
68.469 492.192 li
cp
clp
1 lw
1 lc
[3 4 ] 0 dsh
68.488 379.41 mo
142.57 410.352 li
216.672 408.488 li
290.77 415.09 li
364.871 420.309 li
438.91 420.711 li
513.012 405.129 li
587.109 417.191 li
661.199 412.391 li
0 .993988 1 0 cmyk
@
grestore
63.512 374.43 mo
73.469 374.43 li
73.469 384.391 li
63.512 384.391 li
cp
0 .993988 1 0 cmyk
@
137.609 405.328 mo
147.57 405.328 li
147.57 415.289 li
137.609 415.289 li
cp
@
211.648 403.469 mo
221.609 403.469 li
221.609 413.43 li
211.648 413.43 li
cp
@
285.75 410.129 mo
295.711 410.129 li
295.711 420.09 li
285.75 420.09 li
cp
@
359.852 415.289 mo
369.809 415.289 li
369.809 425.25 li
359.852 425.25 li
cp
@
433.949 415.711 mo
443.91 415.711 li
443.91 425.672 li
433.949 425.672 li
cp
@
508.051 400.172 mo
518.012 400.172 li
518.012 410.129 li
508.051 410.129 li
cp
@
582.148 412.172 mo
592.109 412.172 li
592.109 422.129 li
582.148 422.129 li
cp
@
656.191 407.43 mo
666.148 407.43 li
666.148 417.391 li
656.191 417.391 li
cp
@
34.609 482.168 mo
55.5 482.168 li
55.5 499.258 li
34.609 499.258 li
cp
0 0 0 0 cmyk
ef
41.211 491.113 mo
41.207 491.797 41.152 492.414 41.051 492.973 cv
40.941 493.531 40.766 494.012 40.516 494.414 cv
40.266 494.82 39.941 495.133 39.543 495.352 cv
39.145 495.57 38.648 495.68 38.063 495.68 cv
37.504 495.68 37.039 495.582 36.66 495.383 cv
36.277 495.187 35.969 494.898 35.742 494.512 cv
35.508 494.129 35.344 493.652 35.246 493.09 cv
35.148 492.527 35.102 491.883 35.102 491.156 cv
35.102 490.484 35.156 489.867 35.266 489.301 cv
35.375 488.742 35.551 488.262 35.797 487.855 cv
36.039 487.457 36.363 487.145 36.766 486.922 cv
37.164 486.703 37.656 486.594 38.242 486.59 cv
38.801 486.594 39.27 486.691 39.648 486.887 cv
40.027 487.086 40.332 487.379 40.566 487.762 cv
40.797 488.148 40.961 488.621 41.063 489.18 cv
41.156 489.746 41.207 490.391 41.211 491.113 cv
cp
40.008 491.195 mo
40.004 490.758 39.988 490.359 39.961 490.008 cv
39.926 489.656 39.879 489.348 39.82 489.078 cv
39.758 488.812 39.68 488.582 39.582 488.387 cv
39.48 488.195 39.363 488.035 39.23 487.91 cv
39.094 487.785 38.938 487.695 38.762 487.637 cv
38.586 487.582 38.391 487.555 38.172 487.551 cv
37.785 487.555 37.469 487.645 37.23 487.824 cv
36.984 488.008 36.797 488.258 36.66 488.574 cv
36.52 488.895 36.422 489.27 36.375 489.695 cv
36.32 490.125 36.297 490.582 36.301 491.074 cv
36.297 491.734 36.332 492.297 36.402 492.758 cv
36.473 493.223 36.578 493.598 36.727 493.887 cv
36.871 494.176 37.063 494.387 37.293 494.52 cv
37.523 494.652 37.801 494.719 38.133 494.719 cv
38.383 494.719 38.609 494.68 38.805 494.598 cv
38.996 494.516 39.16 494.398 39.301 494.246 cv
39.438 494.094 39.555 493.91 39.648 493.695 cv
39.738 493.484 39.809 493.246 39.867 492.984 cv
39.918 492.727 39.957 492.445 39.977 492.141 cv
39.996 491.84 40.004 491.527 40.008 491.195 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.199 494.809 mo
44.195 495.133 44.141 495.348 44.035 495.453 cv
43.926 495.559 43.73 495.609 43.453 495.613 cv
43.176 495.609 42.988 495.559 42.887 495.457 cv
42.781 495.352 42.73 495.145 42.73 494.828 cv
42.73 494.508 42.781 494.293 42.891 494.184 cv
42.992 494.082 43.188 494.027 43.473 494.023 cv
43.742 494.027 43.93 494.078 44.039 494.18 cv
44.141 494.285 44.195 494.496 44.199 494.809 cv
cp
f
51.824 491.113 mo
51.82 491.797 51.766 492.414 51.664 492.973 cv
51.555 493.531 51.379 494.012 51.129 494.414 cv
50.879 494.82 50.555 495.133 50.156 495.352 cv
49.758 495.57 49.262 495.68 48.676 495.68 cv
48.117 495.68 47.652 495.582 47.273 495.383 cv
46.891 495.187 46.582 494.898 46.355 494.512 cv
46.121 494.129 45.957 493.652 45.859 493.09 cv
45.762 492.527 45.715 491.883 45.715 491.156 cv
45.715 490.484 45.77 489.867 45.879 489.301 cv
45.988 488.742 46.164 488.262 46.41 487.855 cv
46.652 487.457 46.977 487.145 47.379 486.922 cv
47.777 486.703 48.27 486.594 48.855 486.59 cv
49.414 486.594 49.883 486.691 50.262 486.887 cv
50.641 487.086 50.945 487.379 51.18 487.762 cv
51.41 488.148 51.574 488.621 51.676 489.18 cv
51.77 489.746 51.82 490.391 51.824 491.113 cv
cp
50.621 491.195 mo
50.617 490.758 50.602 490.359 50.574 490.008 cv
50.539 489.656 50.492 489.348 50.434 489.078 cv
50.371 488.812 50.293 488.582 50.195 488.387 cv
50.094 488.195 49.977 488.035 49.844 487.91 cv
49.707 487.785 49.551 487.695 49.375 487.637 cv
49.199 487.582 49.004 487.555 48.785 487.551 cv
48.398 487.555 48.082 487.645 47.844 487.824 cv
47.598 488.008 47.41 488.258 47.273 488.574 cv
47.133 488.895 47.035 489.27 46.988 489.695 cv
46.934 490.125 46.91 490.582 46.914 491.074 cv
46.91 491.734 46.945 492.297 47.016 492.758 cv
47.086 493.223 47.191 493.598 47.34 493.887 cv
47.484 494.176 47.676 494.387 47.906 494.52 cv
48.137 494.652 48.414 494.719 48.746 494.719 cv
48.996 494.719 49.223 494.68 49.418 494.598 cv
49.609 494.516 49.773 494.398 49.914 494.246 cv
50.051 494.094 50.168 493.91 50.262 493.695 cv
50.352 493.484 50.422 493.246 50.48 492.984 cv
50.531 492.727 50.57 492.445 50.59 492.141 cv
50.609 491.84 50.617 491.527 50.621 491.195 cv
cp
f
34.609 430.281 mo
55.5 430.281 li
55.5 447.371 li
34.609 447.371 li
cp
0 0 0 0 cmyk
ef
40.918 443.145 mo
40.914 443.227 40.906 443.301 40.898 443.363 cv
40.883 443.43 40.867 443.484 40.852 443.523 cv
40.828 443.57 40.801 443.602 40.77 443.617 cv
40.73 443.641 40.695 443.648 40.656 443.648 cv
35.777 443.648 li
35.707 443.648 35.652 443.641 35.609 443.625 cv
35.559 443.609 35.516 443.586 35.484 443.547 cv
35.445 443.516 35.422 443.461 35.41 443.391 cv
35.391 443.32 35.383 443.238 35.387 443.137 cv
35.383 443.051 35.387 442.969 35.398 442.898 cv
35.402 442.832 35.418 442.773 35.445 442.719 cv
35.465 442.668 35.492 442.613 35.531 442.559 cv
35.563 442.508 35.609 442.453 35.668 442.391 cv
37.434 440.578 li
37.84 440.16 38.164 439.785 38.414 439.453 cv
38.656 439.121 38.848 438.82 38.984 438.543 cv
39.117 438.273 39.207 438.023 39.25 437.801 cv
39.289 437.578 39.309 437.371 39.313 437.172 cv
39.309 436.977 39.277 436.789 39.215 436.613 cv
39.148 436.441 39.051 436.289 38.93 436.156 cv
38.801 436.027 38.645 435.922 38.461 435.84 cv
38.27 435.766 38.055 435.727 37.813 435.723 cv
37.523 435.727 37.266 435.766 37.039 435.84 cv
36.809 435.922 36.609 436.008 36.441 436.094 cv
36.266 436.187 36.121 436.27 36.012 436.344 cv
35.895 436.426 35.809 436.465 35.754 436.461 cv
35.719 436.465 35.691 436.457 35.668 436.434 cv
35.641 436.418 35.617 436.387 35.602 436.344 cv
35.582 436.305 35.57 436.25 35.563 436.18 cv
35.551 436.113 35.547 436.031 35.551 435.934 cv
35.547 435.867 35.551 435.809 35.559 435.758 cv
35.563 435.711 35.57 435.668 35.582 435.629 cv
35.59 435.594 35.602 435.559 35.625 435.527 cv
35.641 435.496 35.68 435.457 35.734 435.406 cv
35.789 435.363 35.883 435.301 36.016 435.215 cv
36.148 435.137 36.316 435.055 36.523 434.969 cv
36.723 434.891 36.945 434.824 37.191 434.77 cv
37.434 434.719 37.691 434.691 37.961 434.687 cv
38.387 434.691 38.758 434.75 39.082 434.867 cv
39.402 434.988 39.672 435.152 39.883 435.363 cv
40.094 435.574 40.25 435.82 40.355 436.094 cv
40.461 436.375 40.516 436.668 40.516 436.98 cv
40.516 437.262 40.488 437.543 40.438 437.824 cv
40.387 438.105 40.281 438.41 40.121 438.73 cv
39.957 439.059 39.723 439.418 39.422 439.816 cv
39.113 440.215 38.711 440.676 38.207 441.191 cv
36.809 442.652 li
40.652 442.652 li
40.684 442.652 40.719 442.664 40.758 442.684 cv
40.789 442.707 40.82 442.738 40.844 442.777 cv
40.867 442.82 40.883 442.871 40.898 442.93 cv
40.906 442.992 40.914 443.062 40.918 443.145 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.199 442.906 mo
44.195 443.23 44.141 443.445 44.035 443.551 cv
43.926 443.656 43.73 443.707 43.453 443.711 cv
43.176 443.707 42.988 443.656 42.887 443.555 cv
42.781 443.449 42.73 443.242 42.73 442.926 cv
42.73 442.605 42.781 442.391 42.891 442.281 cv
42.992 442.18 43.188 442.125 43.473 442.121 cv
43.742 442.125 43.93 442.176 44.039 442.277 cv
44.141 442.383 44.195 442.594 44.199 442.906 cv
cp
f
51.488 440.809 mo
51.484 441.285 51.406 441.707 51.25 442.074 cv
51.09 442.445 50.863 442.754 50.574 443.004 cv
50.277 443.258 49.93 443.453 49.531 443.582 cv
49.125 443.715 48.68 443.777 48.191 443.777 cv
47.914 443.777 47.656 443.758 47.414 443.719 cv
47.168 443.68 46.949 443.633 46.758 443.578 cv
46.566 443.523 46.406 443.469 46.285 443.41 cv
46.16 443.359 46.082 443.316 46.051 443.281 cv
46.012 443.25 45.988 443.219 45.98 443.191 cv
45.965 443.164 45.953 443.133 45.941 443.094 cv
45.93 443.059 45.922 443.008 45.918 442.945 cv
45.91 442.887 45.906 442.816 45.91 442.734 cv
45.906 442.656 45.91 442.59 45.922 442.527 cv
45.926 442.469 45.941 442.418 45.961 442.375 cv
45.977 442.34 45.996 442.309 46.023 442.289 cv
46.047 442.273 46.074 442.266 46.109 442.262 cv
46.152 442.266 46.223 442.293 46.32 442.348 cv
46.414 442.406 46.543 442.469 46.707 442.535 cv
46.863 442.602 47.066 442.664 47.309 442.723 cv
47.547 442.781 47.828 442.812 48.156 442.809 cv
48.461 442.812 48.742 442.773 48.996 442.699 cv
49.25 442.629 49.469 442.516 49.656 442.359 cv
49.84 442.203 49.984 442.008 50.09 441.773 cv
50.191 441.539 50.242 441.254 50.246 440.918 cv
50.242 440.637 50.199 440.391 50.113 440.172 cv
50.023 439.961 49.887 439.781 49.703 439.633 cv
49.516 439.492 49.281 439.383 49.004 439.312 cv
48.719 439.242 48.383 439.207 47.992 439.203 cv
47.715 439.207 47.477 439.223 47.277 439.246 cv
47.074 439.277 46.887 439.289 46.719 439.285 cv
46.586 439.289 46.496 439.262 46.445 439.199 cv
46.387 439.145 46.359 439.027 46.363 438.855 cv
46.363 435.258 li
46.359 435.109 46.395 435 46.469 434.926 cv
46.535 434.855 46.637 434.82 46.773 434.816 cv
50.684 434.816 li
50.719 434.82 50.754 434.828 50.789 434.848 cv
50.82 434.867 50.848 434.898 50.875 434.937 cv
50.895 434.98 50.91 435.035 50.926 435.098 cv
50.934 435.164 50.941 435.238 50.941 435.32 cv
50.941 435.488 50.918 435.613 50.875 435.703 cv
50.832 435.797 50.773 435.844 50.695 435.84 cv
47.535 435.84 li
47.535 438.316 li
47.688 438.293 47.844 438.281 48.004 438.277 cv
48.164 438.273 48.352 438.27 48.563 438.27 cv
49.047 438.27 49.469 438.332 49.836 438.453 cv
50.195 438.574 50.5 438.746 50.746 438.965 cv
50.988 439.187 51.172 439.453 51.301 439.766 cv
51.422 440.082 51.484 440.43 51.488 440.809 cv
cp
f
34.609 378.391 mo
55.5 378.391 li
55.5 395.481 li
34.609 395.481 li
cp
0 0 0 0 cmyk
ef
40.875 388.93 mo
40.871 389.406 40.793 389.828 40.637 390.195 cv
40.477 390.566 40.25 390.875 39.961 391.125 cv
39.664 391.379 39.316 391.574 38.918 391.703 cv
38.512 391.836 38.066 391.898 37.578 391.898 cv
37.301 391.898 37.043 391.879 36.801 391.84 cv
36.555 391.801 36.336 391.754 36.145 391.699 cv
35.953 391.645 35.793 391.59 35.672 391.531 cv
35.547 391.48 35.469 391.437 35.438 391.402 cv
35.398 391.371 35.375 391.34 35.367 391.312 cv
35.352 391.285 35.34 391.254 35.328 391.215 cv
35.316 391.18 35.309 391.129 35.305 391.066 cv
35.297 391.008 35.293 390.937 35.297 390.855 cv
35.293 390.777 35.297 390.711 35.309 390.648 cv
35.313 390.59 35.328 390.539 35.348 390.496 cv
35.363 390.461 35.383 390.43 35.41 390.41 cv
35.434 390.395 35.461 390.387 35.496 390.383 cv
35.539 390.387 35.609 390.414 35.707 390.469 cv
35.801 390.527 35.93 390.59 36.094 390.656 cv
36.25 390.723 36.453 390.785 36.695 390.844 cv
36.934 390.902 37.215 390.934 37.543 390.93 cv
37.848 390.934 38.129 390.895 38.383 390.82 cv
38.637 390.75 38.855 390.637 39.043 390.48 cv
39.227 390.324 39.371 390.129 39.477 389.895 cv
39.578 389.66 39.629 389.375 39.633 389.039 cv
39.629 388.758 39.586 388.512 39.5 388.293 cv
39.41 388.082 39.273 387.902 39.09 387.754 cv
38.902 387.613 38.668 387.504 38.391 387.434 cv
38.105 387.363 37.77 387.328 37.379 387.324 cv
37.102 387.328 36.863 387.344 36.664 387.367 cv
36.461 387.398 36.273 387.41 36.105 387.406 cv
35.973 387.41 35.883 387.383 35.832 387.32 cv
35.773 387.266 35.746 387.148 35.75 386.977 cv
35.75 383.379 li
35.746 383.23 35.781 383.121 35.855 383.047 cv
35.922 382.977 36.023 382.941 36.16 382.937 cv
40.07 382.937 li
40.105 382.941 40.141 382.949 40.176 382.969 cv
40.207 382.988 40.234 383.02 40.262 383.059 cv
40.281 383.102 40.297 383.156 40.313 383.219 cv
40.32 383.285 40.328 383.359 40.328 383.441 cv
40.328 383.609 40.305 383.734 40.262 383.824 cv
40.219 383.918 40.16 383.965 40.082 383.961 cv
36.922 383.961 li
36.922 386.437 li
37.074 386.414 37.23 386.402 37.391 386.398 cv
37.551 386.395 37.738 386.391 37.949 386.391 cv
38.434 386.391 38.855 386.453 39.223 386.574 cv
39.582 386.695 39.887 386.867 40.133 387.086 cv
40.375 387.309 40.559 387.574 40.688 387.887 cv
40.809 388.203 40.871 388.551 40.875 388.93 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.199 391.027 mo
44.195 391.352 44.141 391.566 44.035 391.672 cv
43.926 391.777 43.73 391.828 43.453 391.832 cv
43.176 391.828 42.988 391.777 42.887 391.676 cv
42.781 391.57 42.73 391.363 42.73 391.047 cv
42.73 390.727 42.781 390.512 42.891 390.402 cv
42.992 390.301 43.188 390.246 43.473 390.242 cv
43.742 390.246 43.93 390.297 44.039 390.398 cv
44.141 390.504 44.195 390.715 44.199 391.027 cv
cp
f
51.824 387.332 mo
51.82 388.016 51.766 388.633 51.664 389.191 cv
51.555 389.75 51.379 390.23 51.129 390.633 cv
50.879 391.039 50.555 391.352 50.156 391.57 cv
49.758 391.789 49.262 391.898 48.676 391.898 cv
48.117 391.898 47.652 391.801 47.273 391.602 cv
46.891 391.406 46.582 391.117 46.355 390.73 cv
46.121 390.348 45.957 389.871 45.859 389.309 cv
45.762 388.746 45.715 388.102 45.715 387.375 cv
45.715 386.703 45.77 386.086 45.879 385.52 cv
45.988 384.961 46.164 384.48 46.41 384.074 cv
46.652 383.676 46.977 383.363 47.379 383.141 cv
47.777 382.922 48.27 382.812 48.855 382.809 cv
49.414 382.812 49.883 382.91 50.262 383.105 cv
50.641 383.305 50.945 383.598 51.18 383.98 cv
51.41 384.367 51.574 384.84 51.676 385.398 cv
51.77 385.965 51.82 386.609 51.824 387.332 cv
cp
50.621 387.414 mo
50.617 386.977 50.602 386.578 50.574 386.227 cv
50.539 385.875 50.492 385.566 50.434 385.297 cv
50.371 385.031 50.293 384.801 50.195 384.605 cv
50.094 384.414 49.977 384.254 49.844 384.129 cv
49.707 384.004 49.551 383.914 49.375 383.855 cv
49.199 383.801 49.004 383.773 48.785 383.77 cv
48.398 383.773 48.082 383.863 47.844 384.043 cv
47.598 384.227 47.41 384.477 47.273 384.793 cv
47.133 385.113 47.035 385.488 46.988 385.914 cv
46.934 386.344 46.91 386.801 46.914 387.293 cv
46.91 387.953 46.945 388.516 47.016 388.977 cv
47.086 389.441 47.191 389.816 47.34 390.105 cv
47.484 390.395 47.676 390.605 47.906 390.738 cv
48.137 390.871 48.414 390.937 48.746 390.937 cv
48.996 390.937 49.223 390.898 49.418 390.816 cv
49.609 390.734 49.773 390.617 49.914 390.465 cv
50.051 390.312 50.168 390.129 50.262 389.914 cv
50.352 389.703 50.422 389.465 50.48 389.203 cv
50.531 388.945 50.57 388.664 50.59 388.359 cv
50.609 388.059 50.617 387.746 50.621 387.414 cv
cp
f
34.609 326.5 mo
55.5 326.5 li
55.5 343.59 li
34.609 343.59 li
cp
0 0 0 0 cmyk
ef
41.047 331.543 mo
41.043 331.629 41.039 331.703 41.035 331.766 cv
41.027 331.836 41.02 331.898 41.008 331.957 cv
40.996 332.02 40.98 332.078 40.961 332.133 cv
40.938 332.191 40.914 332.254 40.891 332.316 cv
37.707 339.645 li
37.684 339.703 37.656 339.75 37.621 339.781 cv
37.586 339.82 37.543 339.848 37.492 339.863 cv
37.438 339.883 37.367 339.891 37.289 339.898 cv
37.203 339.902 37.105 339.906 36.992 339.91 cv
36.832 339.906 36.711 339.898 36.629 339.891 cv
36.539 339.875 36.477 339.859 36.441 339.828 cv
36.398 339.801 36.383 339.762 36.391 339.719 cv
36.395 339.676 36.41 339.625 36.438 339.562 cv
39.785 332.07 li
35.543 332.07 li
35.453 332.074 35.391 332.027 35.348 331.934 cv
35.305 331.844 35.281 331.715 35.285 331.551 cv
35.281 331.465 35.289 331.391 35.301 331.328 cv
35.313 331.266 35.328 331.211 35.352 331.164 cv
35.371 331.121 35.398 331.09 35.434 331.07 cv
35.465 331.051 35.5 331.043 35.543 331.039 cv
40.691 331.039 li
40.754 331.043 40.809 331.047 40.855 331.059 cv
40.902 331.074 40.938 331.102 40.965 331.141 cv
40.988 331.184 41.008 331.238 41.023 331.301 cv
41.035 331.367 41.043 331.449 41.047 331.543 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
44.199 339.129 mo
44.195 339.453 44.141 339.668 44.035 339.773 cv
43.926 339.879 43.73 339.93 43.453 339.934 cv
43.176 339.93 42.988 339.879 42.887 339.777 cv
42.781 339.672 42.73 339.465 42.73 339.148 cv
42.73 338.828 42.781 338.613 42.891 338.504 cv
42.992 338.402 43.188 338.348 43.473 338.344 cv
43.742 338.348 43.93 338.398 44.039 338.5 cv
44.141 338.605 44.195 338.816 44.199 339.129 cv
cp
f
51.488 337.031 mo
51.484 337.508 51.406 337.93 51.25 338.297 cv
51.09 338.668 50.863 338.977 50.574 339.227 cv
50.277 339.48 49.93 339.676 49.531 339.805 cv
49.125 339.937 48.68 340 48.191 340 cv
47.914 340 47.656 339.98 47.414 339.941 cv
47.168 339.902 46.949 339.855 46.758 339.801 cv
46.566 339.746 46.406 339.691 46.285 339.633 cv
46.16 339.582 46.082 339.539 46.051 339.504 cv
46.012 339.473 45.988 339.441 45.98 339.414 cv
45.965 339.387 45.953 339.355 45.941 339.316 cv
45.93 339.281 45.922 339.23 45.918 339.168 cv
45.91 339.109 45.906 339.039 45.91 338.957 cv
45.906 338.879 45.91 338.812 45.922 338.75 cv
45.926 338.691 45.941 338.641 45.961 338.598 cv
45.977 338.562 45.996 338.531 46.023 338.512 cv
46.047 338.496 46.074 338.488 46.109 338.484 cv
46.152 338.488 46.223 338.516 46.32 338.57 cv
46.414 338.629 46.543 338.691 46.707 338.758 cv
46.863 338.824 47.066 338.887 47.309 338.945 cv
47.547 339.004 47.828 339.035 48.156 339.031 cv
48.461 339.035 48.742 338.996 48.996 338.922 cv
49.25 338.852 49.469 338.738 49.656 338.582 cv
49.84 338.426 49.984 338.23 50.09 337.996 cv
50.191 337.762 50.242 337.477 50.246 337.141 cv
50.242 336.859 50.199 336.613 50.113 336.395 cv
50.023 336.184 49.887 336.004 49.703 335.855 cv
49.516 335.715 49.281 335.605 49.004 335.535 cv
48.719 335.465 48.383 335.43 47.992 335.426 cv
47.715 335.43 47.477 335.445 47.277 335.469 cv
47.074 335.5 46.887 335.512 46.719 335.508 cv
46.586 335.512 46.496 335.484 46.445 335.422 cv
46.387 335.367 46.359 335.25 46.363 335.078 cv
46.363 331.48 li
46.359 331.332 46.395 331.223 46.469 331.148 cv
46.535 331.078 46.637 331.043 46.773 331.039 cv
50.684 331.039 li
50.719 331.043 50.754 331.051 50.789 331.07 cv
50.82 331.09 50.848 331.121 50.875 331.16 cv
50.895 331.203 50.91 331.258 50.926 331.32 cv
50.934 331.387 50.941 331.461 50.941 331.543 cv
50.941 331.711 50.918 331.836 50.875 331.926 cv
50.832 332.02 50.773 332.066 50.695 332.062 cv
47.535 332.062 li
47.535 334.539 li
47.688 334.516 47.844 334.504 48.004 334.5 cv
48.164 334.496 48.352 334.492 48.563 334.492 cv
49.047 334.492 49.469 334.555 49.836 334.676 cv
50.195 334.797 50.5 334.969 50.746 335.187 cv
50.988 335.41 51.172 335.676 51.301 335.988 cv
51.422 336.305 51.484 336.652 51.488 337.031 cv
cp
f
27.516 274.609 mo
55.5 274.609 li
55.5 291.699 li
27.516 291.699 li
cp
0 0 0 0 cmyk
ef
33.84 287.504 mo
33.84 287.594 33.832 287.664 33.816 287.723 cv
33.801 287.785 33.781 287.836 33.762 287.867 cv
33.738 287.906 33.711 287.93 33.684 287.945 cv
33.652 287.961 33.625 287.969 33.594 287.969 cv
28.98 287.969 li
28.945 287.969 28.914 287.961 28.891 287.945 cv
28.859 287.93 28.836 287.906 28.813 287.867 cv
28.785 287.836 28.766 287.785 28.754 287.723 cv
28.738 287.664 28.73 287.594 28.734 287.504 cv
28.73 287.426 28.738 287.355 28.754 287.293 cv
28.766 287.238 28.781 287.187 28.805 287.148 cv
28.824 287.109 28.848 287.082 28.879 287.059 cv
28.906 287.043 28.941 287.031 28.98 287.027 cv
30.824 287.027 li
30.824 280.309 li
29.117 281.328 li
29.027 281.375 28.957 281.402 28.906 281.41 cv
28.852 281.422 28.809 281.41 28.781 281.379 cv
28.746 281.352 28.723 281.301 28.715 281.23 cv
28.699 281.164 28.695 281.078 28.699 280.973 cv
28.695 280.895 28.699 280.828 28.707 280.773 cv
28.715 280.719 28.723 280.676 28.738 280.637 cv
28.75 280.605 28.77 280.574 28.797 280.543 cv
28.82 280.52 28.855 280.492 28.898 280.461 cv
30.93 279.156 li
30.945 279.145 30.969 279.137 30.996 279.125 cv
31.023 279.117 31.059 279.105 31.102 279.098 cv
31.141 279.09 31.188 279.086 31.246 279.078 cv
31.297 279.078 31.367 279.074 31.449 279.074 cv
31.559 279.074 31.648 279.082 31.723 279.09 cv
31.793 279.102 31.852 279.113 31.895 279.125 cv
31.934 279.145 31.961 279.164 31.977 279.187 cv
31.988 279.215 31.992 279.242 31.996 279.266 cv
31.996 287.027 li
33.594 287.027 li
33.629 287.031 33.66 287.043 33.695 287.059 cv
33.723 287.082 33.75 287.109 33.773 287.148 cv
33.793 287.187 33.809 287.238 33.82 287.293 cv
33.832 287.355 33.84 287.426 33.84 287.504 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.199 283.531 mo
41.195 284.215 41.141 284.832 41.039 285.391 cv
40.93 285.949 40.754 286.43 40.504 286.832 cv
40.254 287.238 39.93 287.551 39.531 287.77 cv
39.133 287.988 38.637 288.098 38.051 288.098 cv
37.492 288.098 37.027 288 36.648 287.801 cv
36.266 287.605 35.957 287.316 35.73 286.93 cv
35.496 286.547 35.332 286.07 35.234 285.508 cv
35.137 284.945 35.09 284.301 35.09 283.574 cv
35.09 282.902 35.145 282.285 35.254 281.719 cv
35.363 281.16 35.539 280.68 35.785 280.273 cv
36.027 279.875 36.352 279.562 36.754 279.34 cv
37.152 279.121 37.645 279.012 38.23 279.008 cv
38.789 279.012 39.258 279.109 39.637 279.305 cv
40.016 279.504 40.32 279.797 40.555 280.18 cv
40.785 280.566 40.949 281.039 41.051 281.598 cv
41.145 282.164 41.195 282.809 41.199 283.531 cv
cp
39.996 283.613 mo
39.992 283.176 39.977 282.777 39.949 282.426 cv
39.914 282.074 39.867 281.766 39.809 281.496 cv
39.746 281.23 39.668 281 39.57 280.805 cv
39.469 280.613 39.352 280.453 39.219 280.328 cv
39.082 280.203 38.926 280.113 38.75 280.055 cv
38.574 280 38.379 279.973 38.16 279.969 cv
37.773 279.973 37.457 280.062 37.219 280.242 cv
36.973 280.426 36.785 280.676 36.648 280.992 cv
36.508 281.312 36.41 281.687 36.363 282.113 cv
36.309 282.543 36.285 283 36.289 283.492 cv
36.285 284.152 36.32 284.715 36.391 285.176 cv
36.461 285.641 36.566 286.016 36.715 286.305 cv
36.859 286.594 37.051 286.805 37.281 286.937 cv
37.512 287.07 37.789 287.137 38.121 287.137 cv
38.371 287.137 38.598 287.098 38.793 287.016 cv
38.984 286.934 39.148 286.816 39.289 286.664 cv
39.426 286.512 39.543 286.328 39.637 286.113 cv
39.727 285.902 39.797 285.664 39.855 285.402 cv
39.906 285.145 39.945 284.863 39.965 284.559 cv
39.984 284.258 39.992 283.945 39.996 283.613 cv
cp
f
44.215 287.227 mo
44.211 287.551 44.156 287.766 44.051 287.871 cv
43.941 287.977 43.746 288.027 43.469 288.031 cv
43.191 288.027 43.004 287.977 42.902 287.875 cv
42.797 287.77 42.746 287.562 42.746 287.246 cv
42.746 286.926 42.797 286.711 42.906 286.602 cv
43.008 286.5 43.203 286.445 43.488 286.441 cv
43.758 286.445 43.945 286.496 44.055 286.598 cv
44.156 286.703 44.211 286.914 44.215 287.227 cv
cp
f
51.797 283.531 mo
51.793 284.215 51.738 284.832 51.637 285.391 cv
51.527 285.949 51.352 286.43 51.102 286.832 cv
50.852 287.238 50.527 287.551 50.129 287.77 cv
49.73 287.988 49.234 288.098 48.648 288.098 cv
48.09 288.098 47.625 288 47.246 287.801 cv
46.863 287.605 46.555 287.316 46.328 286.93 cv
46.094 286.547 45.93 286.07 45.832 285.508 cv
45.734 284.945 45.688 284.301 45.688 283.574 cv
45.688 282.902 45.742 282.285 45.852 281.719 cv
45.961 281.16 46.137 280.68 46.383 280.273 cv
46.625 279.875 46.949 279.562 47.352 279.34 cv
47.75 279.121 48.242 279.012 48.828 279.008 cv
49.387 279.012 49.855 279.109 50.234 279.305 cv
50.613 279.504 50.918 279.797 51.152 280.18 cv
51.383 280.566 51.547 281.039 51.648 281.598 cv
51.742 282.164 51.793 282.809 51.797 283.531 cv
cp
50.594 283.613 mo
50.59 283.176 50.574 282.777 50.547 282.426 cv
50.512 282.074 50.465 281.766 50.406 281.496 cv
50.344 281.23 50.266 281 50.168 280.805 cv
50.066 280.613 49.949 280.453 49.816 280.328 cv
49.68 280.203 49.523 280.113 49.348 280.055 cv
49.172 280 48.977 279.973 48.758 279.969 cv
48.371 279.973 48.055 280.062 47.816 280.242 cv
47.57 280.426 47.383 280.676 47.246 280.992 cv
47.105 281.312 47.008 281.687 46.961 282.113 cv
46.906 282.543 46.883 283 46.887 283.492 cv
46.883 284.152 46.918 284.715 46.988 285.176 cv
47.059 285.641 47.164 286.016 47.313 286.305 cv
47.457 286.594 47.648 286.805 47.879 286.937 cv
48.109 287.07 48.387 287.137 48.719 287.137 cv
48.969 287.137 49.195 287.098 49.391 287.016 cv
49.582 286.934 49.746 286.816 49.887 286.664 cv
50.023 286.512 50.141 286.328 50.234 286.113 cv
50.324 285.902 50.395 285.664 50.453 285.402 cv
50.504 285.145 50.543 284.863 50.563 284.559 cv
50.582 284.258 50.59 283.945 50.594 283.613 cv
cp
f
27.516 222.719 mo
55.5 222.719 li
55.5 239.809 li
27.516 239.809 li
cp
0 0 0 0 cmyk
ef
33.84 235.605 mo
33.84 235.695 33.832 235.766 33.816 235.824 cv
33.801 235.887 33.781 235.937 33.762 235.969 cv
33.738 236.008 33.711 236.031 33.684 236.047 cv
33.652 236.062 33.625 236.07 33.594 236.07 cv
28.98 236.07 li
28.945 236.07 28.914 236.062 28.891 236.047 cv
28.859 236.031 28.836 236.008 28.813 235.969 cv
28.785 235.937 28.766 235.887 28.754 235.824 cv
28.738 235.766 28.73 235.695 28.734 235.605 cv
28.73 235.527 28.738 235.457 28.754 235.395 cv
28.766 235.34 28.781 235.289 28.805 235.25 cv
28.824 235.211 28.848 235.184 28.879 235.16 cv
28.906 235.145 28.941 235.133 28.98 235.129 cv
30.824 235.129 li
30.824 228.41 li
29.117 229.43 li
29.027 229.477 28.957 229.504 28.906 229.512 cv
28.852 229.523 28.809 229.512 28.781 229.48 cv
28.746 229.453 28.723 229.402 28.715 229.332 cv
28.699 229.266 28.695 229.18 28.699 229.074 cv
28.695 228.996 28.699 228.93 28.707 228.875 cv
28.715 228.82 28.723 228.777 28.738 228.738 cv
28.75 228.707 28.77 228.676 28.797 228.645 cv
28.82 228.621 28.855 228.594 28.898 228.562 cv
30.93 227.258 li
30.945 227.246 30.969 227.238 30.996 227.227 cv
31.023 227.219 31.059 227.207 31.102 227.199 cv
31.141 227.191 31.188 227.187 31.246 227.18 cv
31.297 227.18 31.367 227.176 31.449 227.176 cv
31.559 227.176 31.648 227.184 31.723 227.191 cv
31.793 227.203 31.852 227.215 31.895 227.227 cv
31.934 227.246 31.961 227.266 31.977 227.289 cv
31.988 227.316 31.992 227.344 31.996 227.367 cv
31.996 235.129 li
33.594 235.129 li
33.629 235.133 33.66 235.145 33.695 235.16 cv
33.723 235.184 33.75 235.211 33.773 235.25 cv
33.793 235.289 33.809 235.34 33.82 235.395 cv
33.832 235.457 33.84 235.527 33.84 235.605 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.906 235.566 mo
40.902 235.648 40.895 235.723 40.887 235.785 cv
40.871 235.852 40.855 235.906 40.84 235.945 cv
40.816 235.992 40.789 236.023 40.758 236.039 cv
40.719 236.062 40.684 236.07 40.645 236.07 cv
35.766 236.07 li
35.695 236.07 35.641 236.062 35.598 236.047 cv
35.547 236.031 35.504 236.008 35.473 235.969 cv
35.434 235.937 35.41 235.883 35.398 235.812 cv
35.379 235.742 35.371 235.66 35.375 235.559 cv
35.371 235.473 35.375 235.391 35.387 235.32 cv
35.391 235.254 35.406 235.195 35.434 235.141 cv
35.453 235.09 35.48 235.035 35.52 234.98 cv
35.551 234.93 35.598 234.875 35.656 234.812 cv
37.422 233 li
37.828 232.582 38.152 232.207 38.402 231.875 cv
38.645 231.543 38.836 231.242 38.973 230.965 cv
39.105 230.695 39.195 230.445 39.238 230.223 cv
39.277 230 39.297 229.793 39.301 229.594 cv
39.297 229.398 39.266 229.211 39.203 229.035 cv
39.137 228.863 39.039 228.711 38.918 228.578 cv
38.789 228.449 38.633 228.344 38.449 228.262 cv
38.258 228.187 38.043 228.148 37.801 228.145 cv
37.512 228.148 37.254 228.187 37.027 228.262 cv
36.797 228.344 36.598 228.43 36.43 228.516 cv
36.254 228.609 36.109 228.691 36 228.766 cv
35.883 228.848 35.797 228.887 35.742 228.883 cv
35.707 228.887 35.68 228.879 35.656 228.855 cv
35.629 228.84 35.605 228.809 35.59 228.766 cv
35.57 228.727 35.559 228.672 35.551 228.602 cv
35.539 228.535 35.535 228.453 35.539 228.355 cv
35.535 228.289 35.539 228.23 35.547 228.18 cv
35.551 228.133 35.559 228.09 35.57 228.051 cv
35.578 228.016 35.59 227.98 35.613 227.949 cv
35.629 227.918 35.668 227.879 35.723 227.828 cv
35.777 227.785 35.871 227.723 36.004 227.637 cv
36.137 227.559 36.305 227.477 36.512 227.391 cv
36.711 227.312 36.934 227.246 37.18 227.191 cv
37.422 227.141 37.68 227.113 37.949 227.109 cv
38.375 227.113 38.746 227.172 39.07 227.289 cv
39.391 227.41 39.66 227.574 39.871 227.785 cv
40.082 227.996 40.238 228.242 40.344 228.516 cv
40.449 228.797 40.504 229.09 40.504 229.402 cv
40.504 229.684 40.477 229.965 40.426 230.246 cv
40.375 230.527 40.27 230.832 40.109 231.152 cv
39.945 231.48 39.711 231.84 39.41 232.238 cv
39.102 232.637 38.699 233.098 38.195 233.613 cv
36.797 235.074 li
40.641 235.074 li
40.672 235.074 40.707 235.086 40.746 235.105 cv
40.777 235.129 40.809 235.16 40.832 235.199 cv
40.855 235.242 40.871 235.293 40.887 235.352 cv
40.895 235.414 40.902 235.484 40.906 235.566 cv
cp
f
44.215 235.328 mo
44.211 235.652 44.156 235.867 44.051 235.973 cv
43.941 236.078 43.746 236.129 43.469 236.133 cv
43.191 236.129 43.004 236.078 42.902 235.977 cv
42.797 235.871 42.746 235.664 42.746 235.348 cv
42.746 235.027 42.797 234.812 42.906 234.703 cv
43.008 234.602 43.203 234.547 43.488 234.543 cv
43.758 234.547 43.945 234.598 44.055 234.699 cv
44.156 234.805 44.211 235.016 44.215 235.328 cv
cp
f
51.461 233.23 mo
51.457 233.707 51.379 234.129 51.223 234.496 cv
51.063 234.867 50.836 235.176 50.547 235.426 cv
50.25 235.68 49.902 235.875 49.504 236.004 cv
49.098 236.137 48.652 236.199 48.164 236.199 cv
47.887 236.199 47.629 236.18 47.387 236.141 cv
47.141 236.102 46.922 236.055 46.73 236 cv
46.539 235.945 46.379 235.891 46.258 235.832 cv
46.133 235.781 46.055 235.738 46.023 235.703 cv
45.984 235.672 45.961 235.641 45.953 235.613 cv
45.938 235.586 45.926 235.555 45.914 235.516 cv
45.902 235.48 45.895 235.43 45.891 235.367 cv
45.883 235.309 45.879 235.238 45.883 235.156 cv
45.879 235.078 45.883 235.012 45.895 234.949 cv
45.898 234.891 45.914 234.84 45.934 234.797 cv
45.949 234.762 45.969 234.73 45.996 234.711 cv
46.02 234.695 46.047 234.687 46.082 234.684 cv
46.125 234.687 46.195 234.715 46.293 234.77 cv
46.387 234.828 46.516 234.891 46.68 234.957 cv
46.836 235.023 47.039 235.086 47.281 235.145 cv
47.52 235.203 47.801 235.234 48.129 235.23 cv
48.434 235.234 48.715 235.195 48.969 235.121 cv
49.223 235.051 49.441 234.937 49.629 234.781 cv
49.813 234.625 49.957 234.43 50.063 234.195 cv
50.164 233.961 50.215 233.676 50.219 233.34 cv
50.215 233.059 50.172 232.812 50.086 232.594 cv
49.996 232.383 49.859 232.203 49.676 232.055 cv
49.488 231.914 49.254 231.805 48.977 231.734 cv
48.691 231.664 48.355 231.629 47.965 231.625 cv
47.688 231.629 47.449 231.645 47.25 231.668 cv
47.047 231.699 46.859 231.711 46.691 231.707 cv
46.559 231.711 46.469 231.684 46.418 231.621 cv
46.359 231.566 46.332 231.449 46.336 231.277 cv
46.336 227.68 li
46.332 227.531 46.367 227.422 46.441 227.348 cv
46.508 227.277 46.609 227.242 46.746 227.238 cv
50.656 227.238 li
50.691 227.242 50.727 227.25 50.762 227.27 cv
50.793 227.289 50.82 227.32 50.848 227.359 cv
50.867 227.402 50.883 227.457 50.898 227.52 cv
50.906 227.586 50.914 227.66 50.914 227.742 cv
50.914 227.91 50.891 228.035 50.848 228.125 cv
50.805 228.219 50.746 228.266 50.668 228.262 cv
47.508 228.262 li
47.508 230.738 li
47.66 230.715 47.816 230.703 47.977 230.699 cv
48.137 230.695 48.324 230.691 48.535 230.691 cv
49.02 230.691 49.441 230.754 49.809 230.875 cv
50.168 230.996 50.473 231.168 50.719 231.387 cv
50.961 231.609 51.145 231.875 51.273 232.187 cv
51.395 232.504 51.457 232.852 51.461 233.23 cv
cp
f
27.516 170.84 mo
55.5 170.84 li
55.5 187.93 li
27.516 187.93 li
cp
0 0 0 0 cmyk
ef
33.84 183.727 mo
33.84 183.816 33.832 183.887 33.816 183.945 cv
33.801 184.008 33.781 184.059 33.762 184.09 cv
33.738 184.129 33.711 184.152 33.684 184.168 cv
33.652 184.184 33.625 184.191 33.594 184.191 cv
28.98 184.191 li
28.945 184.191 28.914 184.184 28.891 184.168 cv
28.859 184.152 28.836 184.129 28.813 184.09 cv
28.785 184.059 28.766 184.008 28.754 183.945 cv
28.738 183.887 28.73 183.816 28.734 183.727 cv
28.73 183.648 28.738 183.578 28.754 183.516 cv
28.766 183.461 28.781 183.41 28.805 183.371 cv
28.824 183.332 28.848 183.305 28.879 183.281 cv
28.906 183.266 28.941 183.254 28.98 183.25 cv
30.824 183.25 li
30.824 176.531 li
29.117 177.551 li
29.027 177.598 28.957 177.625 28.906 177.633 cv
28.852 177.645 28.809 177.633 28.781 177.602 cv
28.746 177.574 28.723 177.523 28.715 177.453 cv
28.699 177.387 28.695 177.301 28.699 177.195 cv
28.695 177.117 28.699 177.051 28.707 176.996 cv
28.715 176.941 28.723 176.898 28.738 176.859 cv
28.75 176.828 28.77 176.797 28.797 176.766 cv
28.82 176.742 28.855 176.715 28.898 176.684 cv
30.93 175.379 li
30.945 175.367 30.969 175.359 30.996 175.348 cv
31.023 175.34 31.059 175.328 31.102 175.32 cv
31.141 175.312 31.188 175.309 31.246 175.301 cv
31.297 175.301 31.367 175.297 31.449 175.297 cv
31.559 175.297 31.648 175.305 31.723 175.312 cv
31.793 175.324 31.852 175.336 31.895 175.348 cv
31.934 175.367 31.961 175.387 31.977 175.41 cv
31.988 175.437 31.992 175.465 31.996 175.488 cv
31.996 183.25 li
33.594 183.25 li
33.629 183.254 33.66 183.266 33.695 183.281 cv
33.723 183.305 33.75 183.332 33.773 183.371 cv
33.793 183.41 33.809 183.461 33.82 183.516 cv
33.832 183.578 33.84 183.648 33.84 183.727 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.863 181.352 mo
40.859 181.828 40.781 182.25 40.625 182.617 cv
40.465 182.988 40.238 183.297 39.949 183.547 cv
39.652 183.801 39.305 183.996 38.906 184.125 cv
38.5 184.258 38.055 184.32 37.566 184.32 cv
37.289 184.32 37.031 184.301 36.789 184.262 cv
36.543 184.223 36.324 184.176 36.133 184.121 cv
35.941 184.066 35.781 184.012 35.66 183.953 cv
35.535 183.902 35.457 183.859 35.426 183.824 cv
35.387 183.793 35.363 183.762 35.355 183.734 cv
35.34 183.707 35.328 183.676 35.316 183.637 cv
35.305 183.602 35.297 183.551 35.293 183.488 cv
35.285 183.43 35.281 183.359 35.285 183.277 cv
35.281 183.199 35.285 183.133 35.297 183.07 cv
35.301 183.012 35.316 182.961 35.336 182.918 cv
35.352 182.883 35.371 182.852 35.398 182.832 cv
35.422 182.816 35.449 182.809 35.484 182.805 cv
35.527 182.809 35.598 182.836 35.695 182.891 cv
35.789 182.949 35.918 183.012 36.082 183.078 cv
36.238 183.145 36.441 183.207 36.684 183.266 cv
36.922 183.324 37.203 183.355 37.531 183.352 cv
37.836 183.355 38.117 183.316 38.371 183.242 cv
38.625 183.172 38.844 183.059 39.031 182.902 cv
39.215 182.746 39.359 182.551 39.465 182.316 cv
39.566 182.082 39.617 181.797 39.621 181.461 cv
39.617 181.18 39.574 180.934 39.488 180.715 cv
39.398 180.504 39.262 180.324 39.078 180.176 cv
38.891 180.035 38.656 179.926 38.379 179.855 cv
38.094 179.785 37.758 179.75 37.367 179.746 cv
37.09 179.75 36.852 179.766 36.652 179.789 cv
36.449 179.82 36.262 179.832 36.094 179.828 cv
35.961 179.832 35.871 179.805 35.82 179.742 cv
35.762 179.687 35.734 179.57 35.738 179.398 cv
35.738 175.801 li
35.734 175.652 35.77 175.543 35.844 175.469 cv
35.91 175.398 36.012 175.363 36.148 175.359 cv
40.059 175.359 li
40.094 175.363 40.129 175.371 40.164 175.391 cv
40.195 175.41 40.223 175.441 40.25 175.48 cv
40.27 175.523 40.285 175.578 40.301 175.641 cv
40.309 175.707 40.316 175.781 40.316 175.863 cv
40.316 176.031 40.293 176.156 40.25 176.246 cv
40.207 176.34 40.148 176.387 40.07 176.383 cv
36.91 176.383 li
36.91 178.859 li
37.063 178.836 37.219 178.824 37.379 178.82 cv
37.539 178.816 37.727 178.812 37.938 178.812 cv
38.422 178.812 38.844 178.875 39.211 178.996 cv
39.57 179.117 39.875 179.289 40.121 179.508 cv
40.363 179.73 40.547 179.996 40.676 180.309 cv
40.797 180.625 40.859 180.973 40.863 181.352 cv
cp
f
44.215 183.449 mo
44.211 183.773 44.156 183.988 44.051 184.094 cv
43.941 184.199 43.746 184.25 43.469 184.254 cv
43.191 184.25 43.004 184.199 42.902 184.098 cv
42.797 183.992 42.746 183.785 42.746 183.469 cv
42.746 183.148 42.797 182.934 42.906 182.824 cv
43.008 182.723 43.203 182.668 43.488 182.664 cv
43.758 182.668 43.945 182.719 44.055 182.82 cv
44.156 182.926 44.211 183.137 44.215 183.449 cv
cp
f
51.797 179.754 mo
51.793 180.437 51.738 181.055 51.637 181.613 cv
51.527 182.172 51.352 182.652 51.102 183.055 cv
50.852 183.461 50.527 183.773 50.129 183.992 cv
49.73 184.211 49.234 184.32 48.648 184.32 cv
48.09 184.32 47.625 184.223 47.246 184.023 cv
46.863 183.828 46.555 183.539 46.328 183.152 cv
46.094 182.77 45.93 182.293 45.832 181.73 cv
45.734 181.168 45.688 180.523 45.688 179.797 cv
45.688 179.125 45.742 178.508 45.852 177.941 cv
45.961 177.383 46.137 176.902 46.383 176.496 cv
46.625 176.098 46.949 175.785 47.352 175.562 cv
47.75 175.344 48.242 175.234 48.828 175.23 cv
49.387 175.234 49.855 175.332 50.234 175.527 cv
50.613 175.727 50.918 176.02 51.152 176.402 cv
51.383 176.789 51.547 177.262 51.648 177.82 cv
51.742 178.387 51.793 179.031 51.797 179.754 cv
cp
50.594 179.836 mo
50.59 179.398 50.574 179 50.547 178.648 cv
50.512 178.297 50.465 177.988 50.406 177.719 cv
50.344 177.453 50.266 177.223 50.168 177.027 cv
50.066 176.836 49.949 176.676 49.816 176.551 cv
49.68 176.426 49.523 176.336 49.348 176.277 cv
49.172 176.223 48.977 176.195 48.758 176.191 cv
48.371 176.195 48.055 176.285 47.816 176.465 cv
47.57 176.648 47.383 176.898 47.246 177.215 cv
47.105 177.535 47.008 177.91 46.961 178.336 cv
46.906 178.766 46.883 179.223 46.887 179.715 cv
46.883 180.375 46.918 180.937 46.988 181.398 cv
47.059 181.863 47.164 182.238 47.313 182.527 cv
47.457 182.816 47.648 183.027 47.879 183.16 cv
48.109 183.293 48.387 183.359 48.719 183.359 cv
48.969 183.359 49.195 183.32 49.391 183.238 cv
49.582 183.156 49.746 183.039 49.887 182.887 cv
50.023 182.734 50.141 182.551 50.234 182.336 cv
50.324 182.125 50.395 181.887 50.453 181.625 cv
50.504 181.367 50.543 181.086 50.563 180.781 cv
50.582 180.48 50.59 180.168 50.594 179.836 cv
cp
f
27.516 118.949 mo
55.5 118.949 li
55.5 136.039 li
27.516 136.039 li
cp
0 0 0 0 cmyk
ef
33.84 131.824 mo
33.84 131.914 33.832 131.984 33.816 132.043 cv
33.801 132.105 33.781 132.156 33.762 132.187 cv
33.738 132.227 33.711 132.25 33.684 132.266 cv
33.652 132.281 33.625 132.289 33.594 132.289 cv
28.98 132.289 li
28.945 132.289 28.914 132.281 28.891 132.266 cv
28.859 132.25 28.836 132.227 28.813 132.187 cv
28.785 132.156 28.766 132.105 28.754 132.043 cv
28.738 131.984 28.73 131.914 28.734 131.824 cv
28.73 131.746 28.738 131.676 28.754 131.613 cv
28.766 131.559 28.781 131.508 28.805 131.469 cv
28.824 131.43 28.848 131.402 28.879 131.379 cv
28.906 131.363 28.941 131.352 28.98 131.348 cv
30.824 131.348 li
30.824 124.629 li
29.117 125.648 li
29.027 125.695 28.957 125.723 28.906 125.73 cv
28.852 125.742 28.809 125.73 28.781 125.699 cv
28.746 125.672 28.723 125.621 28.715 125.551 cv
28.699 125.484 28.695 125.398 28.699 125.293 cv
28.695 125.215 28.699 125.148 28.707 125.094 cv
28.715 125.039 28.723 124.996 28.738 124.957 cv
28.75 124.926 28.77 124.895 28.797 124.863 cv
28.82 124.84 28.855 124.812 28.898 124.781 cv
30.93 123.477 li
30.945 123.465 30.969 123.457 30.996 123.445 cv
31.023 123.437 31.059 123.426 31.102 123.418 cv
31.141 123.41 31.188 123.406 31.246 123.398 cv
31.297 123.398 31.367 123.395 31.449 123.395 cv
31.559 123.395 31.648 123.402 31.723 123.41 cv
31.793 123.422 31.852 123.434 31.895 123.445 cv
31.934 123.465 31.961 123.484 31.977 123.508 cv
31.988 123.535 31.992 123.562 31.996 123.586 cv
31.996 131.348 li
33.594 131.348 li
33.629 131.352 33.66 131.363 33.695 131.379 cv
33.723 131.402 33.75 131.43 33.773 131.469 cv
33.793 131.508 33.809 131.559 33.82 131.613 cv
33.832 131.676 33.84 131.746 33.84 131.824 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.035 123.961 mo
41.031 124.047 41.027 124.121 41.023 124.184 cv
41.016 124.254 41.008 124.316 40.996 124.375 cv
40.984 124.437 40.969 124.496 40.949 124.551 cv
40.926 124.609 40.902 124.672 40.879 124.734 cv
37.695 132.062 li
37.672 132.121 37.645 132.168 37.609 132.199 cv
37.574 132.238 37.531 132.266 37.48 132.281 cv
37.426 132.301 37.355 132.309 37.277 132.316 cv
37.191 132.32 37.094 132.324 36.98 132.328 cv
36.82 132.324 36.699 132.316 36.617 132.309 cv
36.527 132.293 36.465 132.277 36.43 132.246 cv
36.387 132.219 36.371 132.18 36.379 132.137 cv
36.383 132.094 36.398 132.043 36.426 131.98 cv
39.773 124.488 li
35.531 124.488 li
35.441 124.492 35.379 124.445 35.336 124.352 cv
35.293 124.262 35.27 124.133 35.273 123.969 cv
35.27 123.883 35.277 123.809 35.289 123.746 cv
35.301 123.684 35.316 123.629 35.34 123.582 cv
35.359 123.539 35.387 123.508 35.422 123.488 cv
35.453 123.469 35.488 123.461 35.531 123.457 cv
40.68 123.457 li
40.742 123.461 40.797 123.465 40.844 123.477 cv
40.891 123.492 40.926 123.52 40.953 123.559 cv
40.977 123.602 40.996 123.656 41.012 123.719 cv
41.023 123.785 41.031 123.867 41.035 123.961 cv
cp
f
44.215 131.547 mo
44.211 131.871 44.156 132.086 44.051 132.191 cv
43.941 132.297 43.746 132.348 43.469 132.352 cv
43.191 132.348 43.004 132.297 42.902 132.195 cv
42.797 132.09 42.746 131.883 42.746 131.566 cv
42.746 131.246 42.797 131.031 42.906 130.922 cv
43.008 130.82 43.203 130.766 43.488 130.762 cv
43.758 130.766 43.945 130.816 44.055 130.918 cv
44.156 131.023 44.211 131.234 44.215 131.547 cv
cp
f
51.461 129.449 mo
51.457 129.926 51.379 130.348 51.223 130.715 cv
51.063 131.086 50.836 131.395 50.547 131.645 cv
50.25 131.898 49.902 132.094 49.504 132.223 cv
49.098 132.355 48.652 132.418 48.164 132.418 cv
47.887 132.418 47.629 132.398 47.387 132.359 cv
47.141 132.32 46.922 132.273 46.73 132.219 cv
46.539 132.164 46.379 132.109 46.258 132.051 cv
46.133 132 46.055 131.957 46.023 131.922 cv
45.984 131.891 45.961 131.859 45.953 131.832 cv
45.938 131.805 45.926 131.773 45.914 131.734 cv
45.902 131.699 45.895 131.648 45.891 131.586 cv
45.883 131.527 45.879 131.457 45.883 131.375 cv
45.879 131.297 45.883 131.23 45.895 131.168 cv
45.898 131.109 45.914 131.059 45.934 131.016 cv
45.949 130.98 45.969 130.949 45.996 130.93 cv
46.02 130.914 46.047 130.906 46.082 130.902 cv
46.125 130.906 46.195 130.934 46.293 130.988 cv
46.387 131.047 46.516 131.109 46.68 131.176 cv
46.836 131.242 47.039 131.305 47.281 131.363 cv
47.52 131.422 47.801 131.453 48.129 131.449 cv
48.434 131.453 48.715 131.414 48.969 131.34 cv
49.223 131.27 49.441 131.156 49.629 131 cv
49.813 130.844 49.957 130.648 50.063 130.414 cv
50.164 130.18 50.215 129.895 50.219 129.559 cv
50.215 129.277 50.172 129.031 50.086 128.812 cv
49.996 128.602 49.859 128.422 49.676 128.273 cv
49.488 128.133 49.254 128.023 48.977 127.953 cv
48.691 127.883 48.355 127.848 47.965 127.844 cv
47.688 127.848 47.449 127.863 47.25 127.887 cv
47.047 127.918 46.859 127.93 46.691 127.926 cv
46.559 127.93 46.469 127.902 46.418 127.84 cv
46.359 127.785 46.332 127.668 46.336 127.496 cv
46.336 123.898 li
46.332 123.75 46.367 123.641 46.441 123.566 cv
46.508 123.496 46.609 123.461 46.746 123.457 cv
50.656 123.457 li
50.691 123.461 50.727 123.469 50.762 123.488 cv
50.793 123.508 50.82 123.539 50.848 123.578 cv
50.867 123.621 50.883 123.676 50.898 123.738 cv
50.906 123.805 50.914 123.879 50.914 123.961 cv
50.914 124.129 50.891 124.254 50.848 124.344 cv
50.805 124.437 50.746 124.484 50.668 124.48 cv
47.508 124.48 li
47.508 126.957 li
47.66 126.934 47.816 126.922 47.977 126.918 cv
48.137 126.914 48.324 126.91 48.535 126.91 cv
49.02 126.91 49.441 126.973 49.809 127.094 cv
50.168 127.215 50.473 127.387 50.719 127.605 cv
50.961 127.828 51.145 128.094 51.273 128.406 cv
51.395 128.723 51.457 129.07 51.461 129.449 cv
cp
f
27.516 67.059 mo
55.5 67.059 li
55.5 84.149 li
27.516 84.149 li
cp
0 0 0 0 cmyk
ef
33.82 79.887 mo
33.816 79.969 33.809 80.043 33.801 80.105 cv
33.785 80.172 33.77 80.227 33.754 80.266 cv
33.73 80.312 33.703 80.344 33.672 80.359 cv
33.633 80.383 33.598 80.391 33.559 80.391 cv
28.68 80.391 li
28.609 80.391 28.555 80.383 28.512 80.367 cv
28.461 80.352 28.418 80.328 28.387 80.289 cv
28.348 80.258 28.324 80.203 28.313 80.133 cv
28.293 80.062 28.285 79.98 28.289 79.879 cv
28.285 79.793 28.289 79.711 28.301 79.641 cv
28.305 79.574 28.32 79.516 28.348 79.461 cv
28.367 79.41 28.395 79.355 28.434 79.301 cv
28.465 79.25 28.512 79.195 28.57 79.133 cv
30.336 77.32 li
30.742 76.902 31.066 76.527 31.316 76.195 cv
31.559 75.863 31.75 75.562 31.887 75.285 cv
32.02 75.016 32.109 74.766 32.152 74.543 cv
32.191 74.32 32.211 74.113 32.215 73.914 cv
32.211 73.719 32.18 73.531 32.117 73.355 cv
32.051 73.184 31.953 73.031 31.832 72.898 cv
31.703 72.77 31.547 72.664 31.363 72.582 cv
31.172 72.508 30.957 72.469 30.715 72.465 cv
30.426 72.469 30.168 72.508 29.941 72.582 cv
29.711 72.664 29.512 72.75 29.344 72.836 cv
29.168 72.93 29.023 73.012 28.914 73.086 cv
28.797 73.168 28.711 73.207 28.656 73.203 cv
28.621 73.207 28.594 73.199 28.57 73.176 cv
28.543 73.16 28.52 73.129 28.504 73.086 cv
28.484 73.047 28.473 72.992 28.465 72.922 cv
28.453 72.855 28.449 72.773 28.453 72.676 cv
28.449 72.609 28.453 72.551 28.461 72.5 cv
28.465 72.453 28.473 72.41 28.484 72.371 cv
28.492 72.336 28.504 72.301 28.527 72.27 cv
28.543 72.238 28.582 72.199 28.637 72.148 cv
28.691 72.105 28.785 72.043 28.918 71.957 cv
29.051 71.879 29.219 71.797 29.426 71.711 cv
29.625 71.633 29.848 71.566 30.094 71.512 cv
30.336 71.461 30.594 71.434 30.863 71.43 cv
31.289 71.434 31.66 71.492 31.984 71.609 cv
32.305 71.73 32.574 71.895 32.785 72.105 cv
32.996 72.316 33.152 72.562 33.258 72.836 cv
33.363 73.117 33.418 73.41 33.418 73.723 cv
33.418 74.004 33.391 74.285 33.34 74.566 cv
33.289 74.848 33.184 75.152 33.023 75.473 cv
32.859 75.801 32.625 76.16 32.324 76.559 cv
32.016 76.957 31.613 77.418 31.109 77.934 cv
29.711 79.395 li
33.555 79.395 li
33.586 79.395 33.621 79.406 33.66 79.426 cv
33.691 79.449 33.723 79.48 33.746 79.52 cv
33.77 79.562 33.785 79.613 33.801 79.672 cv
33.809 79.734 33.816 79.805 33.82 79.887 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
41.199 75.953 mo
41.195 76.637 41.141 77.254 41.039 77.812 cv
40.93 78.371 40.754 78.852 40.504 79.254 cv
40.254 79.66 39.93 79.973 39.531 80.191 cv
39.133 80.41 38.637 80.52 38.051 80.52 cv
37.492 80.52 37.027 80.422 36.648 80.223 cv
36.266 80.027 35.957 79.738 35.73 79.352 cv
35.496 78.969 35.332 78.492 35.234 77.93 cv
35.137 77.367 35.09 76.723 35.09 75.996 cv
35.09 75.324 35.145 74.707 35.254 74.141 cv
35.363 73.582 35.539 73.102 35.785 72.695 cv
36.027 72.297 36.352 71.984 36.754 71.762 cv
37.152 71.543 37.645 71.434 38.23 71.43 cv
38.789 71.434 39.258 71.531 39.637 71.727 cv
40.016 71.926 40.32 72.219 40.555 72.602 cv
40.785 72.988 40.949 73.461 41.051 74.02 cv
41.145 74.586 41.195 75.23 41.199 75.953 cv
cp
39.996 76.035 mo
39.992 75.598 39.977 75.199 39.949 74.848 cv
39.914 74.496 39.867 74.187 39.809 73.918 cv
39.746 73.652 39.668 73.422 39.57 73.227 cv
39.469 73.035 39.352 72.875 39.219 72.75 cv
39.082 72.625 38.926 72.535 38.75 72.477 cv
38.574 72.422 38.379 72.395 38.16 72.391 cv
37.773 72.395 37.457 72.484 37.219 72.664 cv
36.973 72.848 36.785 73.098 36.648 73.414 cv
36.508 73.734 36.41 74.109 36.363 74.535 cv
36.309 74.965 36.285 75.422 36.289 75.914 cv
36.285 76.574 36.32 77.137 36.391 77.598 cv
36.461 78.062 36.566 78.437 36.715 78.727 cv
36.859 79.016 37.051 79.227 37.281 79.359 cv
37.512 79.492 37.789 79.559 38.121 79.559 cv
38.371 79.559 38.598 79.52 38.793 79.437 cv
38.984 79.355 39.148 79.238 39.289 79.086 cv
39.426 78.934 39.543 78.75 39.637 78.535 cv
39.727 78.324 39.797 78.086 39.855 77.824 cv
39.906 77.566 39.945 77.285 39.965 76.98 cv
39.984 76.68 39.992 76.367 39.996 76.035 cv
cp
f
44.215 79.648 mo
44.211 79.973 44.156 80.187 44.051 80.293 cv
43.941 80.398 43.746 80.449 43.469 80.453 cv
43.191 80.449 43.004 80.398 42.902 80.297 cv
42.797 80.191 42.746 79.984 42.746 79.668 cv
42.746 79.348 42.797 79.133 42.906 79.023 cv
43.008 78.922 43.203 78.867 43.488 78.863 cv
43.758 78.867 43.945 78.918 44.055 79.02 cv
44.156 79.125 44.211 79.336 44.215 79.648 cv
cp
f
51.797 75.953 mo
51.793 76.637 51.738 77.254 51.637 77.812 cv
51.527 78.371 51.352 78.852 51.102 79.254 cv
50.852 79.66 50.527 79.973 50.129 80.191 cv
49.73 80.41 49.234 80.52 48.648 80.52 cv
48.09 80.52 47.625 80.422 47.246 80.223 cv
46.863 80.027 46.555 79.738 46.328 79.352 cv
46.094 78.969 45.93 78.492 45.832 77.93 cv
45.734 77.367 45.688 76.723 45.688 75.996 cv
45.688 75.324 45.742 74.707 45.852 74.141 cv
45.961 73.582 46.137 73.102 46.383 72.695 cv
46.625 72.297 46.949 71.984 47.352 71.762 cv
47.75 71.543 48.242 71.434 48.828 71.43 cv
49.387 71.434 49.855 71.531 50.234 71.727 cv
50.613 71.926 50.918 72.219 51.152 72.602 cv
51.383 72.988 51.547 73.461 51.648 74.02 cv
51.742 74.586 51.793 75.23 51.797 75.953 cv
cp
50.594 76.035 mo
50.59 75.598 50.574 75.199 50.547 74.848 cv
50.512 74.496 50.465 74.187 50.406 73.918 cv
50.344 73.652 50.266 73.422 50.168 73.227 cv
50.066 73.035 49.949 72.875 49.816 72.75 cv
49.68 72.625 49.523 72.535 49.348 72.477 cv
49.172 72.422 48.977 72.395 48.758 72.391 cv
48.371 72.395 48.055 72.484 47.816 72.664 cv
47.57 72.848 47.383 73.098 47.246 73.414 cv
47.105 73.734 47.008 74.109 46.961 74.535 cv
46.906 74.965 46.883 75.422 46.887 75.914 cv
46.883 76.574 46.918 77.137 46.988 77.598 cv
47.059 78.062 47.164 78.437 47.313 78.727 cv
47.457 79.016 47.648 79.227 47.879 79.359 cv
48.109 79.492 48.387 79.559 48.719 79.559 cv
48.969 79.559 49.195 79.52 49.391 79.437 cv
49.582 79.355 49.746 79.238 49.887 79.086 cv
50.023 78.934 50.141 78.75 50.234 78.535 cv
50.324 78.324 50.395 78.086 50.453 77.824 cv
50.504 77.566 50.543 77.285 50.563 76.98 cv
50.582 76.68 50.59 76.367 50.594 76.035 cv
cp
f
27.516 15.172 mo
55.5 15.172 li
55.5 32.262 li
27.516 32.262 li
cp
0 0 0 0 cmyk
ef
33.82 27.984 mo
33.816 28.066 33.809 28.141 33.801 28.203 cv
33.785 28.27 33.77 28.324 33.754 28.363 cv
33.73 28.41 33.703 28.441 33.672 28.457 cv
33.633 28.48 33.598 28.488 33.559 28.488 cv
28.68 28.488 li
28.609 28.488 28.555 28.48 28.512 28.465 cv
28.461 28.449 28.418 28.426 28.387 28.387 cv
28.348 28.355 28.324 28.301 28.313 28.23 cv
28.293 28.16 28.285 28.078 28.289 27.977 cv
28.285 27.891 28.289 27.809 28.301 27.738 cv
28.305 27.672 28.32 27.613 28.348 27.559 cv
28.367 27.508 28.395 27.453 28.434 27.398 cv
28.465 27.348 28.512 27.293 28.57 27.23 cv
30.336 25.418 li
30.742 25 31.066 24.625 31.316 24.293 cv
31.559 23.961 31.75 23.66 31.887 23.383 cv
32.02 23.113 32.109 22.863 32.152 22.641 cv
32.191 22.418 32.211 22.211 32.215 22.012 cv
32.211 21.816 32.18 21.629 32.117 21.453 cv
32.051 21.281 31.953 21.129 31.832 20.996 cv
31.703 20.867 31.547 20.762 31.363 20.68 cv
31.172 20.605 30.957 20.566 30.715 20.562 cv
30.426 20.566 30.168 20.605 29.941 20.68 cv
29.711 20.762 29.512 20.848 29.344 20.934 cv
29.168 21.027 29.023 21.109 28.914 21.184 cv
28.797 21.266 28.711 21.305 28.656 21.301 cv
28.621 21.305 28.594 21.297 28.57 21.273 cv
28.543 21.258 28.52 21.227 28.504 21.184 cv
28.484 21.145 28.473 21.09 28.465 21.02 cv
28.453 20.953 28.449 20.871 28.453 20.773 cv
28.449 20.707 28.453 20.648 28.461 20.598 cv
28.465 20.551 28.473 20.508 28.484 20.469 cv
28.492 20.434 28.504 20.398 28.527 20.367 cv
28.543 20.336 28.582 20.297 28.637 20.246 cv
28.691 20.203 28.785 20.141 28.918 20.055 cv
29.051 19.977 29.219 19.895 29.426 19.809 cv
29.625 19.73 29.848 19.664 30.094 19.609 cv
30.336 19.559 30.594 19.531 30.863 19.527 cv
31.289 19.531 31.66 19.59 31.984 19.707 cv
32.305 19.828 32.574 19.992 32.785 20.203 cv
32.996 20.414 33.152 20.66 33.258 20.934 cv
33.363 21.215 33.418 21.508 33.418 21.82 cv
33.418 22.102 33.391 22.383 33.34 22.664 cv
33.289 22.945 33.184 23.25 33.023 23.57 cv
32.859 23.898 32.625 24.258 32.324 24.656 cv
32.016 25.055 31.613 25.516 31.109 26.031 cv
29.711 27.492 li
33.555 27.492 li
33.586 27.492 33.621 27.504 33.66 27.523 cv
33.691 27.547 33.723 27.578 33.746 27.617 cv
33.77 27.66 33.785 27.711 33.801 27.77 cv
33.809 27.832 33.816 27.902 33.82 27.984 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
40.906 27.984 mo
40.902 28.066 40.895 28.141 40.887 28.203 cv
40.871 28.27 40.855 28.324 40.84 28.363 cv
40.816 28.41 40.789 28.441 40.758 28.457 cv
40.719 28.48 40.684 28.488 40.645 28.488 cv
35.766 28.488 li
35.695 28.488 35.641 28.48 35.598 28.465 cv
35.547 28.449 35.504 28.426 35.473 28.387 cv
35.434 28.355 35.41 28.301 35.398 28.23 cv
35.379 28.16 35.371 28.078 35.375 27.977 cv
35.371 27.891 35.375 27.809 35.387 27.738 cv
35.391 27.672 35.406 27.613 35.434 27.559 cv
35.453 27.508 35.48 27.453 35.52 27.398 cv
35.551 27.348 35.598 27.293 35.656 27.23 cv
37.422 25.418 li
37.828 25 38.152 24.625 38.402 24.293 cv
38.645 23.961 38.836 23.66 38.973 23.383 cv
39.105 23.113 39.195 22.863 39.238 22.641 cv
39.277 22.418 39.297 22.211 39.301 22.012 cv
39.297 21.816 39.266 21.629 39.203 21.453 cv
39.137 21.281 39.039 21.129 38.918 20.996 cv
38.789 20.867 38.633 20.762 38.449 20.68 cv
38.258 20.605 38.043 20.566 37.801 20.562 cv
37.512 20.566 37.254 20.605 37.027 20.68 cv
36.797 20.762 36.598 20.848 36.43 20.934 cv
36.254 21.027 36.109 21.109 36 21.184 cv
35.883 21.266 35.797 21.305 35.742 21.301 cv
35.707 21.305 35.68 21.297 35.656 21.273 cv
35.629 21.258 35.605 21.227 35.59 21.184 cv
35.57 21.145 35.559 21.09 35.551 21.02 cv
35.539 20.953 35.535 20.871 35.539 20.773 cv
35.535 20.707 35.539 20.648 35.547 20.598 cv
35.551 20.551 35.559 20.508 35.57 20.469 cv
35.578 20.434 35.59 20.398 35.613 20.367 cv
35.629 20.336 35.668 20.297 35.723 20.246 cv
35.777 20.203 35.871 20.141 36.004 20.055 cv
36.137 19.977 36.305 19.895 36.512 19.809 cv
36.711 19.73 36.934 19.664 37.18 19.609 cv
37.422 19.559 37.68 19.531 37.949 19.527 cv
38.375 19.531 38.746 19.59 39.07 19.707 cv
39.391 19.828 39.66 19.992 39.871 20.203 cv
40.082 20.414 40.238 20.66 40.344 20.934 cv
40.449 21.215 40.504 21.508 40.504 21.82 cv
40.504 22.102 40.477 22.383 40.426 22.664 cv
40.375 22.945 40.27 23.25 40.109 23.57 cv
39.945 23.898 39.711 24.258 39.41 24.656 cv
39.102 25.055 38.699 25.516 38.195 26.031 cv
36.797 27.492 li
40.641 27.492 li
40.672 27.492 40.707 27.504 40.746 27.523 cv
40.777 27.547 40.809 27.578 40.832 27.617 cv
40.855 27.66 40.871 27.711 40.887 27.77 cv
40.895 27.832 40.902 27.902 40.906 27.984 cv
cp
f
44.215 27.746 mo
44.211 28.07 44.156 28.285 44.051 28.391 cv
43.941 28.496 43.746 28.547 43.469 28.551 cv
43.191 28.547 43.004 28.496 42.902 28.395 cv
42.797 28.289 42.746 28.082 42.746 27.766 cv
42.746 27.445 42.797 27.23 42.906 27.121 cv
43.008 27.02 43.203 26.965 43.488 26.961 cv
43.758 26.965 43.945 27.016 44.055 27.117 cv
44.156 27.223 44.211 27.434 44.215 27.746 cv
cp
f
51.461 25.648 mo
51.457 26.125 51.379 26.547 51.223 26.914 cv
51.063 27.285 50.836 27.594 50.547 27.844 cv
50.25 28.098 49.902 28.293 49.504 28.422 cv
49.098 28.555 48.652 28.617 48.164 28.617 cv
47.887 28.617 47.629 28.598 47.387 28.559 cv
47.141 28.52 46.922 28.473 46.73 28.418 cv
46.539 28.363 46.379 28.309 46.258 28.25 cv
46.133 28.199 46.055 28.156 46.023 28.121 cv
45.984 28.09 45.961 28.059 45.953 28.031 cv
45.938 28.004 45.926 27.973 45.914 27.934 cv
45.902 27.898 45.895 27.848 45.891 27.785 cv
45.883 27.727 45.879 27.656 45.883 27.574 cv
45.879 27.496 45.883 27.43 45.895 27.367 cv
45.898 27.309 45.914 27.258 45.934 27.215 cv
45.949 27.18 45.969 27.148 45.996 27.129 cv
46.02 27.113 46.047 27.105 46.082 27.102 cv
46.125 27.105 46.195 27.133 46.293 27.187 cv
46.387 27.246 46.516 27.309 46.68 27.375 cv
46.836 27.441 47.039 27.504 47.281 27.562 cv
47.52 27.621 47.801 27.652 48.129 27.648 cv
48.434 27.652 48.715 27.613 48.969 27.539 cv
49.223 27.469 49.441 27.355 49.629 27.199 cv
49.813 27.043 49.957 26.848 50.063 26.613 cv
50.164 26.379 50.215 26.094 50.219 25.758 cv
50.215 25.477 50.172 25.23 50.086 25.012 cv
49.996 24.801 49.859 24.621 49.676 24.473 cv
49.488 24.332 49.254 24.223 48.977 24.152 cv
48.691 24.082 48.355 24.047 47.965 24.043 cv
47.688 24.047 47.449 24.062 47.25 24.086 cv
47.047 24.117 46.859 24.129 46.691 24.125 cv
46.559 24.129 46.469 24.102 46.418 24.039 cv
46.359 23.984 46.332 23.867 46.336 23.695 cv
46.336 20.098 li
46.332 19.949 46.367 19.84 46.441 19.766 cv
46.508 19.695 46.609 19.66 46.746 19.656 cv
50.656 19.656 li
50.691 19.66 50.727 19.668 50.762 19.687 cv
50.793 19.707 50.82 19.738 50.848 19.777 cv
50.867 19.82 50.883 19.875 50.898 19.937 cv
50.906 20.004 50.914 20.078 50.914 20.16 cv
50.914 20.328 50.891 20.453 50.848 20.543 cv
50.805 20.637 50.746 20.684 50.668 20.68 cv
47.508 20.68 li
47.508 23.156 li
47.66 23.133 47.816 23.121 47.977 23.117 cv
48.137 23.113 48.324 23.109 48.535 23.109 cv
49.02 23.109 49.441 23.172 49.809 23.293 cv
50.168 23.414 50.473 23.586 50.719 23.805 cv
50.961 24.027 51.145 24.293 51.273 24.605 cv
51.395 24.922 51.457 25.27 51.461 25.648 cv
cp
f
71.277 513.285 mo
71.277 513.375 71.27 513.445 71.254 513.504 cv
71.238 513.566 71.219 513.617 71.199 513.648 cv
71.176 513.687 71.148 513.711 71.121 513.727 cv
71.09 513.742 71.063 513.75 71.031 513.75 cv
66.418 513.75 li
66.383 513.75 66.352 513.742 66.328 513.727 cv
66.297 513.711 66.273 513.687 66.25 513.648 cv
66.223 513.617 66.203 513.566 66.191 513.504 cv
66.176 513.445 66.168 513.375 66.172 513.285 cv
66.168 513.207 66.176 513.137 66.191 513.074 cv
66.203 513.02 66.219 512.969 66.242 512.93 cv
66.262 512.891 66.285 512.863 66.316 512.84 cv
66.344 512.824 66.379 512.812 66.418 512.809 cv
68.262 512.809 li
68.262 506.09 li
66.555 507.109 li
66.465 507.156 66.395 507.184 66.344 507.191 cv
66.289 507.203 66.246 507.191 66.219 507.16 cv
66.184 507.133 66.16 507.082 66.152 507.012 cv
66.137 506.945 66.133 506.859 66.137 506.754 cv
66.133 506.676 66.137 506.609 66.145 506.555 cv
66.152 506.5 66.16 506.457 66.176 506.418 cv
66.188 506.387 66.207 506.355 66.234 506.324 cv
66.258 506.301 66.293 506.273 66.336 506.242 cv
68.367 504.937 li
68.383 504.926 68.406 504.918 68.434 504.906 cv
68.461 504.898 68.496 504.887 68.539 504.879 cv
68.578 504.871 68.625 504.867 68.684 504.859 cv
68.734 504.859 68.805 504.855 68.887 504.855 cv
68.996 504.855 69.086 504.863 69.16 504.871 cv
69.23 504.883 69.289 504.895 69.332 504.906 cv
69.371 504.926 69.398 504.945 69.414 504.969 cv
69.426 504.996 69.43 505.023 69.434 505.047 cv
69.434 512.809 li
71.031 512.809 li
71.066 512.812 71.098 512.824 71.133 512.84 cv
71.16 512.863 71.188 512.891 71.211 512.93 cv
71.23 512.969 71.246 513.02 71.258 513.074 cv
71.27 513.137 71.277 513.207 71.277 513.285 cv
cp
f
145.359 513.246 mo
145.355 513.328 145.348 513.402 145.34 513.465 cv
145.324 513.531 145.309 513.586 145.293 513.625 cv
145.27 513.672 145.242 513.703 145.211 513.719 cv
145.172 513.742 145.137 513.75 145.098 513.75 cv
140.219 513.75 li
140.148 513.75 140.094 513.742 140.051 513.727 cv
140 513.711 139.957 513.687 139.926 513.648 cv
139.887 513.617 139.863 513.562 139.852 513.492 cv
139.832 513.422 139.824 513.34 139.828 513.238 cv
139.824 513.152 139.828 513.07 139.84 513 cv
139.844 512.934 139.859 512.875 139.887 512.82 cv
139.906 512.77 139.934 512.715 139.973 512.66 cv
140.004 512.609 140.051 512.555 140.109 512.492 cv
141.875 510.68 li
142.281 510.262 142.605 509.887 142.855 509.555 cv
143.098 509.223 143.289 508.922 143.426 508.645 cv
143.559 508.375 143.648 508.125 143.691 507.902 cv
143.73 507.68 143.75 507.473 143.754 507.273 cv
143.75 507.078 143.719 506.891 143.656 506.715 cv
143.59 506.543 143.492 506.391 143.371 506.258 cv
143.242 506.129 143.086 506.023 142.902 505.941 cv
142.711 505.867 142.496 505.828 142.254 505.824 cv
141.965 505.828 141.707 505.867 141.48 505.941 cv
141.25 506.023 141.051 506.109 140.883 506.195 cv
140.707 506.289 140.563 506.371 140.453 506.445 cv
140.336 506.527 140.25 506.566 140.195 506.562 cv
140.16 506.566 140.133 506.559 140.109 506.535 cv
140.082 506.52 140.059 506.488 140.043 506.445 cv
140.023 506.406 140.012 506.352 140.004 506.281 cv
139.992 506.215 139.988 506.133 139.992 506.035 cv
139.988 505.969 139.992 505.91 140 505.859 cv
140.004 505.812 140.012 505.77 140.023 505.73 cv
140.031 505.695 140.043 505.66 140.066 505.629 cv
140.082 505.598 140.121 505.559 140.176 505.508 cv
140.23 505.465 140.324 505.402 140.457 505.316 cv
140.59 505.238 140.758 505.156 140.965 505.07 cv
141.164 504.992 141.387 504.926 141.633 504.871 cv
141.875 504.82 142.133 504.793 142.402 504.789 cv
142.828 504.793 143.199 504.852 143.523 504.969 cv
143.844 505.09 144.113 505.254 144.324 505.465 cv
144.535 505.676 144.691 505.922 144.797 506.195 cv
144.902 506.477 144.957 506.77 144.957 507.082 cv
144.957 507.363 144.93 507.645 144.879 507.926 cv
144.828 508.207 144.723 508.512 144.563 508.832 cv
144.398 509.16 144.164 509.52 143.863 509.918 cv
143.555 510.316 143.152 510.777 142.648 511.293 cv
141.25 512.754 li
145.094 512.754 li
145.125 512.754 145.16 512.766 145.199 512.785 cv
145.23 512.809 145.262 512.84 145.285 512.879 cv
145.309 512.922 145.324 512.973 145.34 513.031 cv
145.348 513.094 145.355 513.164 145.359 513.246 cv
cp
f
219.813 511.238 mo
219.809 511.391 219.785 511.508 219.742 511.594 cv
219.695 511.68 219.633 511.723 219.551 511.723 cv
218.555 511.723 li
218.555 513.578 li
218.555 513.617 218.543 513.648 218.527 513.672 cv
218.504 513.703 218.473 513.723 218.43 513.738 cv
218.379 513.754 218.316 513.766 218.246 513.773 cv
218.168 513.781 218.074 513.785 217.957 513.789 cv
217.844 513.785 217.75 513.781 217.676 513.773 cv
217.598 513.766 217.535 513.754 217.496 513.738 cv
217.449 513.723 217.422 513.703 217.406 513.672 cv
217.391 513.648 217.383 513.617 217.383 513.578 cv
217.383 511.723 li
213.77 511.723 li
213.711 511.723 213.668 511.719 213.633 511.703 cv
213.594 511.695 213.559 511.668 213.535 511.629 cv
213.504 511.594 213.484 511.543 213.473 511.473 cv
213.461 511.406 213.457 511.316 213.457 511.203 cv
213.457 511.121 213.457 511.043 213.461 510.973 cv
213.465 510.906 213.473 510.844 213.488 510.785 cv
213.5 510.73 213.52 510.676 213.543 510.621 cv
213.563 510.57 213.59 510.516 213.625 510.453 cv
216.773 505.086 li
216.797 505.051 216.828 505.02 216.875 504.992 cv
216.914 504.965 216.973 504.941 217.043 504.922 cv
217.113 504.906 217.199 504.895 217.301 504.887 cv
217.402 504.883 217.523 504.879 217.664 504.875 cv
217.816 504.879 217.949 504.887 218.063 504.895 cv
218.176 504.91 218.266 504.922 218.34 504.937 cv
218.406 504.957 218.461 504.984 218.5 505.012 cv
218.535 505.043 218.555 505.074 218.555 505.113 cv
218.555 510.754 li
219.551 510.754 li
219.629 510.758 219.691 510.797 219.738 510.875 cv
219.785 510.957 219.809 511.078 219.813 511.238 cv
cp
217.383 505.906 mo
217.367 505.906 li
214.527 510.754 li
217.383 510.754 li
cp
f
293.762 510.891 mo
293.758 511.277 293.699 511.652 293.582 512.012 cv
293.465 512.375 293.281 512.695 293.039 512.969 cv
292.789 513.25 292.48 513.469 292.105 513.633 cv
291.727 513.797 291.277 513.879 290.766 513.879 cv
290.395 513.879 290.07 513.836 289.789 513.742 cv
289.504 513.656 289.258 513.527 289.051 513.355 cv
288.84 513.191 288.668 512.984 288.531 512.734 cv
288.391 512.492 288.277 512.211 288.195 511.895 cv
288.109 511.582 288.051 511.238 288.016 510.863 cv
287.977 510.492 287.957 510.09 287.961 509.66 cv
287.957 509.285 287.977 508.906 288.02 508.516 cv
288.059 508.133 288.133 507.758 288.238 507.395 cv
288.344 507.039 288.484 506.703 288.668 506.383 cv
288.844 506.07 289.07 505.793 289.344 505.555 cv
289.613 505.324 289.938 505.141 290.316 505 cv
290.691 504.867 291.129 504.797 291.633 504.793 cv
291.797 504.797 291.969 504.809 292.145 504.824 cv
292.316 504.848 292.477 504.875 292.621 504.906 cv
292.766 504.945 292.887 504.98 292.988 505.02 cv
293.086 505.062 293.152 505.098 293.188 505.121 cv
293.219 505.148 293.242 505.176 293.262 505.203 cv
293.273 505.234 293.285 505.266 293.297 505.297 cv
293.305 505.332 293.313 505.371 293.32 505.414 cv
293.32 505.457 293.324 505.508 293.328 505.57 cv
293.324 505.656 293.324 505.73 293.324 505.785 cv
293.32 505.848 293.309 505.895 293.297 505.926 cv
293.277 505.965 293.258 505.992 293.234 506.008 cv
293.207 506.031 293.176 506.039 293.137 506.035 cv
293.082 506.039 293.012 506.023 292.93 505.988 cv
292.84 505.961 292.734 505.926 292.617 505.883 cv
292.492 505.848 292.344 505.812 292.168 505.777 cv
291.992 505.75 291.789 505.734 291.559 505.73 cv
291.133 505.734 290.77 505.82 290.465 505.988 cv
290.16 506.164 289.91 506.395 289.719 506.684 cv
289.523 506.977 289.379 507.316 289.289 507.699 cv
289.191 508.086 289.141 508.488 289.129 508.902 cv
289.246 508.84 289.379 508.77 289.527 508.699 cv
289.676 508.633 289.836 508.574 290.012 508.516 cv
290.184 508.465 290.367 508.418 290.566 508.383 cv
290.762 508.348 290.973 508.332 291.195 508.328 cv
291.672 508.332 292.074 508.395 292.402 508.523 cv
292.727 508.656 292.992 508.84 293.199 509.066 cv
293.398 509.301 293.543 509.57 293.633 509.879 cv
293.715 510.191 293.758 510.527 293.762 510.891 cv
cp
292.574 511 mo
292.574 510.738 292.547 510.496 292.496 510.277 cv
292.441 510.062 292.355 509.879 292.234 509.73 cv
292.109 509.582 291.945 509.469 291.742 509.383 cv
291.535 509.305 291.281 509.262 290.984 509.258 cv
290.813 509.262 290.645 509.277 290.477 509.305 cv
290.309 509.336 290.145 509.375 289.992 509.426 cv
289.832 509.48 289.684 509.543 289.539 509.609 cv
289.395 509.684 289.262 509.762 289.148 509.84 cv
289.145 510.43 289.184 510.918 289.262 511.312 cv
289.336 511.711 289.445 512.031 289.59 512.266 cv
289.73 512.508 289.91 512.676 290.125 512.777 cv
290.336 512.879 290.586 512.93 290.875 512.93 cv
291.164 512.93 291.414 512.875 291.633 512.766 cv
291.844 512.656 292.023 512.512 292.164 512.328 cv
292.305 512.145 292.406 511.937 292.477 511.707 cv
292.539 511.477 292.574 511.242 292.574 511 cv
cp
f
367.84 511.484 mo
367.836 511.871 367.77 512.211 367.633 512.508 cv
367.496 512.805 367.297 513.059 367.043 513.262 cv
366.785 513.469 366.469 513.621 366.094 513.723 cv
365.711 513.828 365.281 513.879 364.797 513.879 cv
364.34 513.879 363.93 513.832 363.574 513.738 cv
363.211 513.645 362.906 513.504 362.66 513.316 cv
362.406 513.129 362.215 512.898 362.086 512.625 cv
361.949 512.352 361.883 512.039 361.887 511.687 cv
361.883 511.414 361.93 511.16 362.023 510.926 cv
362.113 510.691 362.242 510.477 362.414 510.281 cv
362.582 510.086 362.793 509.906 363.047 509.734 cv
363.293 509.566 363.578 509.402 363.895 509.246 cv
363.621 509.105 363.379 508.957 363.168 508.797 cv
362.957 508.645 362.777 508.473 362.637 508.285 cv
362.488 508.102 362.379 507.906 362.309 507.695 cv
362.23 507.492 362.195 507.262 362.195 507.012 cv
362.195 506.703 362.25 506.414 362.363 506.141 cv
362.473 505.871 362.641 505.637 362.867 505.437 cv
363.09 505.238 363.375 505.082 363.727 504.965 cv
364.07 504.852 364.477 504.793 364.945 504.789 cv
365.387 504.793 365.773 504.844 366.102 504.949 cv
366.426 505.059 366.695 505.207 366.906 505.387 cv
367.117 505.574 367.273 505.789 367.375 506.035 cv
367.477 506.289 367.527 506.559 367.527 506.844 cv
367.527 507.078 367.488 507.301 367.414 507.512 cv
367.336 507.727 367.227 507.93 367.082 508.121 cv
366.934 508.312 366.754 508.492 366.547 508.656 cv
366.332 508.824 366.09 508.977 365.82 509.121 cv
366.141 509.281 366.43 509.445 366.684 509.613 cv
366.934 509.785 367.145 509.969 367.316 510.156 cv
367.488 510.352 367.617 510.555 367.707 510.77 cv
367.793 510.988 367.836 511.227 367.84 511.484 cv
cp
366.367 506.949 mo
366.367 506.762 366.332 506.59 366.266 506.434 cv
366.199 506.281 366.102 506.148 365.977 506.035 cv
365.844 505.93 365.688 505.848 365.5 505.789 cv
365.313 505.734 365.098 505.707 364.855 505.703 cv
364.363 505.707 363.992 505.816 363.742 506.039 cv
363.488 506.262 363.359 506.566 363.363 506.949 cv
363.359 507.133 363.391 507.301 363.453 507.449 cv
363.512 507.605 363.609 507.75 363.742 507.883 cv
363.871 508.023 364.035 508.156 364.234 508.281 cv
364.43 508.414 364.664 508.547 364.938 508.684 cv
365.398 508.449 365.75 508.187 365.996 507.898 cv
366.242 507.613 366.367 507.297 366.367 506.949 cv
cp
366.652 511.605 mo
366.648 511.398 366.609 511.211 366.535 511.039 cv
366.457 510.871 366.34 510.711 366.184 510.559 cv
366.023 510.414 365.828 510.27 365.598 510.129 cv
365.359 509.992 365.086 509.848 364.781 509.695 cv
364.492 509.836 364.242 509.98 364.027 510.121 cv
363.809 510.266 363.633 510.41 363.496 510.559 cv
363.355 510.711 363.25 510.867 363.18 511.031 cv
363.109 511.195 363.074 511.379 363.074 511.578 cv
363.074 512.023 363.223 512.367 363.527 512.605 cv
363.828 512.848 364.281 512.965 364.883 512.965 cv
365.465 512.965 365.906 512.844 366.203 512.602 cv
366.5 512.359 366.648 512.027 366.652 511.605 cv
cp
f
438.199 513.285 mo
438.199 513.375 438.191 513.445 438.176 513.504 cv
438.16 513.566 438.141 513.617 438.121 513.648 cv
438.098 513.687 438.07 513.711 438.043 513.727 cv
438.012 513.742 437.984 513.75 437.953 513.75 cv
433.34 513.75 li
433.305 513.75 433.273 513.742 433.25 513.727 cv
433.219 513.711 433.195 513.687 433.172 513.648 cv
433.145 513.617 433.125 513.566 433.113 513.504 cv
433.098 513.445 433.09 513.375 433.094 513.285 cv
433.09 513.207 433.098 513.137 433.113 513.074 cv
433.125 513.02 433.141 512.969 433.164 512.93 cv
433.184 512.891 433.207 512.863 433.238 512.84 cv
433.266 512.824 433.301 512.812 433.34 512.809 cv
435.184 512.809 li
435.184 506.09 li
433.477 507.109 li
433.387 507.156 433.316 507.184 433.266 507.191 cv
433.211 507.203 433.168 507.191 433.141 507.16 cv
433.105 507.133 433.082 507.082 433.074 507.012 cv
433.059 506.945 433.055 506.859 433.059 506.754 cv
433.055 506.676 433.059 506.609 433.066 506.555 cv
433.074 506.5 433.082 506.457 433.098 506.418 cv
433.109 506.387 433.129 506.355 433.156 506.324 cv
433.18 506.301 433.215 506.273 433.258 506.242 cv
435.289 504.937 li
435.305 504.926 435.328 504.918 435.355 504.906 cv
435.383 504.898 435.418 504.887 435.461 504.879 cv
435.5 504.871 435.547 504.867 435.605 504.859 cv
435.656 504.859 435.727 504.855 435.809 504.855 cv
435.918 504.855 436.008 504.863 436.082 504.871 cv
436.152 504.883 436.211 504.895 436.254 504.906 cv
436.293 504.926 436.32 504.945 436.336 504.969 cv
436.348 504.996 436.352 505.023 436.355 505.047 cv
436.355 512.809 li
437.953 512.809 li
437.988 512.812 438.02 512.824 438.055 512.84 cv
438.082 512.863 438.109 512.891 438.133 512.93 cv
438.152 512.969 438.168 513.02 438.18 513.074 cv
438.191 513.137 438.199 513.207 438.199 513.285 cv
cp
f
445.551 509.312 mo
445.547 509.996 445.492 510.613 445.391 511.172 cv
445.281 511.73 445.105 512.211 444.855 512.613 cv
444.605 513.02 444.281 513.332 443.883 513.551 cv
443.484 513.77 442.988 513.879 442.402 513.879 cv
441.844 513.879 441.379 513.781 441 513.582 cv
440.617 513.387 440.309 513.098 440.082 512.711 cv
439.848 512.328 439.684 511.852 439.586 511.289 cv
439.488 510.727 439.441 510.082 439.441 509.355 cv
439.441 508.684 439.496 508.066 439.605 507.5 cv
439.715 506.941 439.891 506.461 440.137 506.055 cv
440.379 505.656 440.703 505.344 441.105 505.121 cv
441.504 504.902 441.996 504.793 442.582 504.789 cv
443.141 504.793 443.609 504.891 443.988 505.086 cv
444.367 505.285 444.672 505.578 444.906 505.961 cv
445.137 506.348 445.301 506.82 445.402 507.379 cv
445.496 507.945 445.547 508.59 445.551 509.312 cv
cp
444.348 509.395 mo
444.344 508.957 444.328 508.559 444.301 508.207 cv
444.266 507.855 444.219 507.547 444.16 507.277 cv
444.098 507.012 444.02 506.781 443.922 506.586 cv
443.82 506.395 443.703 506.234 443.57 506.109 cv
443.434 505.984 443.277 505.895 443.102 505.836 cv
442.926 505.781 442.73 505.754 442.512 505.75 cv
442.125 505.754 441.809 505.844 441.57 506.023 cv
441.324 506.207 441.137 506.457 441 506.773 cv
440.859 507.094 440.762 507.469 440.715 507.895 cv
440.66 508.324 440.637 508.781 440.641 509.273 cv
440.637 509.934 440.672 510.496 440.742 510.957 cv
440.813 511.422 440.918 511.797 441.066 512.086 cv
441.211 512.375 441.402 512.586 441.633 512.719 cv
441.863 512.852 442.141 512.918 442.473 512.918 cv
442.723 512.918 442.949 512.879 443.145 512.797 cv
443.336 512.715 443.5 512.598 443.641 512.445 cv
443.777 512.293 443.895 512.109 443.988 511.895 cv
444.078 511.684 444.148 511.445 444.207 511.184 cv
444.258 510.926 444.297 510.645 444.316 510.34 cv
444.336 510.039 444.344 509.727 444.348 509.395 cv
cp
f
512.297 513.285 mo
512.297 513.375 512.289 513.445 512.273 513.504 cv
512.258 513.566 512.238 513.617 512.219 513.648 cv
512.195 513.687 512.168 513.711 512.141 513.727 cv
512.109 513.742 512.082 513.75 512.051 513.75 cv
507.438 513.75 li
507.402 513.75 507.371 513.742 507.348 513.727 cv
507.316 513.711 507.293 513.687 507.27 513.648 cv
507.242 513.617 507.223 513.566 507.211 513.504 cv
507.195 513.445 507.188 513.375 507.191 513.285 cv
507.188 513.207 507.195 513.137 507.211 513.074 cv
507.223 513.02 507.238 512.969 507.262 512.93 cv
507.281 512.891 507.305 512.863 507.336 512.84 cv
507.363 512.824 507.398 512.812 507.438 512.809 cv
509.281 512.809 li
509.281 506.09 li
507.574 507.109 li
507.484 507.156 507.414 507.184 507.363 507.191 cv
507.309 507.203 507.266 507.191 507.238 507.16 cv
507.203 507.133 507.18 507.082 507.172 507.012 cv
507.156 506.945 507.152 506.859 507.156 506.754 cv
507.152 506.676 507.156 506.609 507.164 506.555 cv
507.172 506.5 507.18 506.457 507.195 506.418 cv
507.207 506.387 507.227 506.355 507.254 506.324 cv
507.277 506.301 507.313 506.273 507.355 506.242 cv
509.387 504.937 li
509.402 504.926 509.426 504.918 509.453 504.906 cv
509.48 504.898 509.516 504.887 509.559 504.879 cv
509.598 504.871 509.645 504.867 509.703 504.859 cv
509.754 504.859 509.824 504.855 509.906 504.855 cv
510.016 504.855 510.105 504.863 510.18 504.871 cv
510.25 504.883 510.309 504.895 510.352 504.906 cv
510.391 504.926 510.418 504.945 510.434 504.969 cv
510.445 504.996 510.449 505.023 510.453 505.047 cv
510.453 512.809 li
512.051 512.809 li
512.086 512.812 512.117 512.824 512.152 512.84 cv
512.18 512.863 512.207 512.891 512.23 512.93 cv
512.25 512.969 512.266 513.02 512.277 513.074 cv
512.289 513.137 512.297 513.207 512.297 513.285 cv
cp
f
519.359 513.246 mo
519.355 513.328 519.348 513.402 519.34 513.465 cv
519.324 513.531 519.309 513.586 519.293 513.625 cv
519.27 513.672 519.242 513.703 519.211 513.719 cv
519.172 513.742 519.137 513.75 519.098 513.75 cv
514.219 513.75 li
514.148 513.75 514.094 513.742 514.051 513.727 cv
514 513.711 513.957 513.687 513.926 513.648 cv
513.887 513.617 513.863 513.562 513.852 513.492 cv
513.832 513.422 513.824 513.34 513.828 513.238 cv
513.824 513.152 513.828 513.07 513.84 513 cv
513.844 512.934 513.859 512.875 513.887 512.82 cv
513.906 512.77 513.934 512.715 513.973 512.66 cv
514.004 512.609 514.051 512.555 514.109 512.492 cv
515.875 510.68 li
516.281 510.262 516.605 509.887 516.855 509.555 cv
517.098 509.223 517.289 508.922 517.426 508.645 cv
517.559 508.375 517.648 508.125 517.691 507.902 cv
517.73 507.68 517.75 507.473 517.754 507.273 cv
517.75 507.078 517.719 506.891 517.656 506.715 cv
517.59 506.543 517.492 506.391 517.371 506.258 cv
517.242 506.129 517.086 506.023 516.902 505.941 cv
516.711 505.867 516.496 505.828 516.254 505.824 cv
515.965 505.828 515.707 505.867 515.48 505.941 cv
515.25 506.023 515.051 506.109 514.883 506.195 cv
514.707 506.289 514.563 506.371 514.453 506.445 cv
514.336 506.527 514.25 506.566 514.195 506.562 cv
514.16 506.566 514.133 506.559 514.109 506.535 cv
514.082 506.52 514.059 506.488 514.043 506.445 cv
514.023 506.406 514.012 506.352 514.004 506.281 cv
513.992 506.215 513.988 506.133 513.992 506.035 cv
513.988 505.969 513.992 505.91 514 505.859 cv
514.004 505.812 514.012 505.77 514.023 505.73 cv
514.031 505.695 514.043 505.66 514.066 505.629 cv
514.082 505.598 514.121 505.559 514.176 505.508 cv
514.23 505.465 514.324 505.402 514.457 505.316 cv
514.59 505.238 514.758 505.156 514.965 505.07 cv
515.164 504.992 515.387 504.926 515.633 504.871 cv
515.875 504.82 516.133 504.793 516.402 504.789 cv
516.828 504.793 517.199 504.852 517.523 504.969 cv
517.844 505.09 518.113 505.254 518.324 505.465 cv
518.535 505.676 518.691 505.922 518.797 506.195 cv
518.902 506.477 518.957 506.77 518.957 507.082 cv
518.957 507.363 518.93 507.645 518.879 507.926 cv
518.828 508.207 518.723 508.512 518.563 508.832 cv
518.398 509.16 518.164 509.52 517.863 509.918 cv
517.555 510.316 517.152 510.777 516.648 511.293 cv
515.25 512.754 li
519.094 512.754 li
519.125 512.754 519.16 512.766 519.199 512.785 cv
519.23 512.809 519.262 512.84 519.285 512.879 cv
519.309 512.922 519.324 512.973 519.34 513.031 cv
519.348 513.094 519.355 513.164 519.359 513.246 cv
cp
f
586.398 513.285 mo
586.398 513.375 586.391 513.445 586.375 513.504 cv
586.359 513.566 586.34 513.617 586.32 513.648 cv
586.297 513.687 586.27 513.711 586.242 513.727 cv
586.211 513.742 586.184 513.75 586.152 513.75 cv
581.539 513.75 li
581.504 513.75 581.473 513.742 581.449 513.727 cv
581.418 513.711 581.395 513.687 581.371 513.648 cv
581.344 513.617 581.324 513.566 581.313 513.504 cv
581.297 513.445 581.289 513.375 581.293 513.285 cv
581.289 513.207 581.297 513.137 581.313 513.074 cv
581.324 513.02 581.34 512.969 581.363 512.93 cv
581.383 512.891 581.406 512.863 581.438 512.84 cv
581.465 512.824 581.5 512.812 581.539 512.809 cv
583.383 512.809 li
583.383 506.09 li
581.676 507.109 li
581.586 507.156 581.516 507.184 581.465 507.191 cv
581.41 507.203 581.367 507.191 581.34 507.16 cv
581.305 507.133 581.281 507.082 581.273 507.012 cv
581.258 506.945 581.254 506.859 581.258 506.754 cv
581.254 506.676 581.258 506.609 581.266 506.555 cv
581.273 506.5 581.281 506.457 581.297 506.418 cv
581.309 506.387 581.328 506.355 581.355 506.324 cv
581.379 506.301 581.414 506.273 581.457 506.242 cv
583.488 504.937 li
583.504 504.926 583.527 504.918 583.555 504.906 cv
583.582 504.898 583.617 504.887 583.66 504.879 cv
583.699 504.871 583.746 504.867 583.805 504.859 cv
583.855 504.859 583.926 504.855 584.008 504.855 cv
584.117 504.855 584.207 504.863 584.281 504.871 cv
584.352 504.883 584.41 504.895 584.453 504.906 cv
584.492 504.926 584.52 504.945 584.535 504.969 cv
584.547 504.996 584.551 505.023 584.555 505.047 cv
584.555 512.809 li
586.152 512.809 li
586.188 512.812 586.219 512.824 586.254 512.84 cv
586.281 512.863 586.309 512.891 586.332 512.93 cv
586.352 512.969 586.367 513.02 586.379 513.074 cv
586.391 513.137 586.398 513.207 586.398 513.285 cv
cp
f
593.832 511.238 mo
593.828 511.391 593.805 511.508 593.762 511.594 cv
593.715 511.68 593.652 511.723 593.57 511.723 cv
592.574 511.723 li
592.574 513.578 li
592.574 513.617 592.563 513.648 592.547 513.672 cv
592.523 513.703 592.492 513.723 592.449 513.738 cv
592.398 513.754 592.336 513.766 592.266 513.773 cv
592.188 513.781 592.094 513.785 591.977 513.789 cv
591.863 513.785 591.77 513.781 591.695 513.773 cv
591.617 513.766 591.555 513.754 591.516 513.738 cv
591.469 513.723 591.441 513.703 591.426 513.672 cv
591.41 513.648 591.402 513.617 591.402 513.578 cv
591.402 511.723 li
587.789 511.723 li
587.73 511.723 587.688 511.719 587.652 511.703 cv
587.613 511.695 587.578 511.668 587.555 511.629 cv
587.523 511.594 587.504 511.543 587.492 511.473 cv
587.48 511.406 587.477 511.316 587.477 511.203 cv
587.477 511.121 587.477 511.043 587.48 510.973 cv
587.484 510.906 587.492 510.844 587.508 510.785 cv
587.52 510.73 587.539 510.676 587.563 510.621 cv
587.582 510.57 587.609 510.516 587.645 510.453 cv
590.793 505.086 li
590.816 505.051 590.848 505.02 590.895 504.992 cv
590.934 504.965 590.992 504.941 591.063 504.922 cv
591.133 504.906 591.219 504.895 591.32 504.887 cv
591.422 504.883 591.543 504.879 591.684 504.875 cv
591.836 504.879 591.969 504.887 592.082 504.895 cv
592.195 504.91 592.285 504.922 592.359 504.937 cv
592.426 504.957 592.48 504.984 592.52 505.012 cv
592.555 505.043 592.574 505.074 592.574 505.113 cv
592.574 510.754 li
593.57 510.754 li
593.648 510.758 593.711 510.797 593.758 510.875 cv
593.805 510.957 593.828 511.078 593.832 511.238 cv
cp
591.402 505.906 mo
591.387 505.906 li
588.547 510.754 li
591.402 510.754 li
cp
f
660.5 513.285 mo
660.5 513.375 660.492 513.445 660.477 513.504 cv
660.461 513.566 660.441 513.617 660.422 513.648 cv
660.398 513.687 660.371 513.711 660.344 513.727 cv
660.313 513.742 660.285 513.75 660.254 513.75 cv
655.641 513.75 li
655.605 513.75 655.574 513.742 655.551 513.727 cv
655.52 513.711 655.496 513.687 655.473 513.648 cv
655.445 513.617 655.426 513.566 655.414 513.504 cv
655.398 513.445 655.391 513.375 655.395 513.285 cv
655.391 513.207 655.398 513.137 655.414 513.074 cv
655.426 513.02 655.441 512.969 655.465 512.93 cv
655.484 512.891 655.508 512.863 655.539 512.84 cv
655.566 512.824 655.602 512.812 655.641 512.809 cv
657.484 512.809 li
657.484 506.09 li
655.777 507.109 li
655.688 507.156 655.617 507.184 655.566 507.191 cv
655.512 507.203 655.469 507.191 655.441 507.16 cv
655.406 507.133 655.383 507.082 655.375 507.012 cv
655.359 506.945 655.355 506.859 655.359 506.754 cv
655.355 506.676 655.359 506.609 655.367 506.555 cv
655.375 506.5 655.383 506.457 655.398 506.418 cv
655.41 506.387 655.43 506.355 655.457 506.324 cv
655.48 506.301 655.516 506.273 655.559 506.242 cv
657.59 504.937 li
657.605 504.926 657.629 504.918 657.656 504.906 cv
657.684 504.898 657.719 504.887 657.762 504.879 cv
657.801 504.871 657.848 504.867 657.906 504.859 cv
657.957 504.859 658.027 504.855 658.109 504.855 cv
658.219 504.855 658.309 504.863 658.383 504.871 cv
658.453 504.883 658.512 504.895 658.555 504.906 cv
658.594 504.926 658.621 504.945 658.637 504.969 cv
658.648 504.996 658.652 505.023 658.656 505.047 cv
658.656 512.809 li
660.254 512.809 li
660.289 512.812 660.32 512.824 660.355 512.84 cv
660.383 512.863 660.41 512.891 660.434 512.93 cv
660.453 512.969 660.469 513.02 660.48 513.074 cv
660.492 513.137 660.5 513.207 660.5 513.285 cv
cp
f
667.781 510.891 mo
667.777 511.277 667.719 511.652 667.602 512.012 cv
667.484 512.375 667.301 512.695 667.059 512.969 cv
666.809 513.25 666.5 513.469 666.125 513.633 cv
665.746 513.797 665.297 513.879 664.785 513.879 cv
664.414 513.879 664.09 513.836 663.809 513.742 cv
663.523 513.656 663.277 513.527 663.07 513.355 cv
662.859 513.191 662.688 512.984 662.551 512.734 cv
662.41 512.492 662.297 512.211 662.215 511.895 cv
662.129 511.582 662.07 511.238 662.035 510.863 cv
661.996 510.492 661.977 510.09 661.98 509.66 cv
661.977 509.285 661.996 508.906 662.039 508.516 cv
662.078 508.133 662.152 507.758 662.258 507.395 cv
662.363 507.039 662.504 506.703 662.688 506.383 cv
662.863 506.07 663.09 505.793 663.363 505.555 cv
663.633 505.324 663.957 505.141 664.336 505 cv
664.711 504.867 665.148 504.797 665.652 504.793 cv
665.816 504.797 665.988 504.809 666.164 504.824 cv
666.336 504.848 666.496 504.875 666.641 504.906 cv
666.785 504.945 666.906 504.98 667.008 505.02 cv
667.105 505.062 667.172 505.098 667.207 505.121 cv
667.238 505.148 667.262 505.176 667.281 505.203 cv
667.293 505.234 667.305 505.266 667.316 505.297 cv
667.324 505.332 667.332 505.371 667.34 505.414 cv
667.34 505.457 667.344 505.508 667.348 505.57 cv
667.344 505.656 667.344 505.73 667.344 505.785 cv
667.34 505.848 667.328 505.895 667.316 505.926 cv
667.297 505.965 667.277 505.992 667.254 506.008 cv
667.227 506.031 667.195 506.039 667.156 506.035 cv
667.102 506.039 667.031 506.023 666.949 505.988 cv
666.859 505.961 666.754 505.926 666.637 505.883 cv
666.512 505.848 666.363 505.812 666.188 505.777 cv
666.012 505.75 665.809 505.734 665.578 505.73 cv
665.152 505.734 664.789 505.82 664.484 505.988 cv
664.18 506.164 663.93 506.395 663.738 506.684 cv
663.543 506.977 663.398 507.316 663.309 507.699 cv
663.211 508.086 663.16 508.488 663.148 508.902 cv
663.266 508.84 663.398 508.77 663.547 508.699 cv
663.695 508.633 663.855 508.574 664.031 508.516 cv
664.203 508.465 664.387 508.418 664.586 508.383 cv
664.781 508.348 664.992 508.332 665.215 508.328 cv
665.691 508.332 666.094 508.395 666.422 508.523 cv
666.746 508.656 667.012 508.84 667.219 509.066 cv
667.418 509.301 667.563 509.57 667.652 509.879 cv
667.734 510.191 667.777 510.527 667.781 510.891 cv
cp
666.594 511 mo
666.594 510.738 666.566 510.496 666.516 510.277 cv
666.461 510.062 666.375 509.879 666.254 509.73 cv
666.129 509.582 665.965 509.469 665.762 509.383 cv
665.555 509.305 665.301 509.262 665.004 509.258 cv
664.832 509.262 664.664 509.277 664.496 509.305 cv
664.328 509.336 664.164 509.375 664.012 509.426 cv
663.852 509.48 663.703 509.543 663.559 509.609 cv
663.414 509.684 663.281 509.762 663.168 509.84 cv
663.164 510.43 663.203 510.918 663.281 511.312 cv
663.355 511.711 663.465 512.031 663.609 512.266 cv
663.75 512.508 663.93 512.676 664.145 512.777 cv
664.355 512.879 664.605 512.93 664.895 512.93 cv
665.184 512.93 665.434 512.875 665.652 512.766 cv
665.863 512.656 666.043 512.512 666.184 512.328 cv
666.324 512.145 666.426 511.937 666.496 511.707 cv
666.559 511.477 666.594 511.242 666.594 511 cv
cp
f
16.988 323.23 mo
17.031 323.23 17.066 323.238 17.098 323.254 cv
17.129 323.27 17.156 323.305 17.176 323.355 cv
17.195 323.41 17.207 323.484 17.223 323.578 cv
17.23 323.676 17.238 323.801 17.238 323.953 cv
17.238 324.09 17.23 324.199 17.223 324.285 cv
17.207 324.371 17.195 324.441 17.172 324.492 cv
17.152 324.547 17.117 324.586 17.074 324.613 cv
17.035 324.645 16.984 324.672 16.918 324.687 cv
14.531 325.617 li
14.262 325.73 14.016 325.844 13.785 325.957 cv
13.563 326.078 13.367 326.219 13.199 326.375 cv
13.039 326.539 12.91 326.73 12.816 326.949 cv
12.727 327.172 12.68 327.434 12.68 327.738 cv
12.68 328.637 li
16.988 328.637 li
17.031 328.641 17.066 328.652 17.098 328.672 cv
17.129 328.699 17.156 328.734 17.172 328.781 cv
17.191 328.832 17.203 328.898 17.219 328.984 cv
17.23 329.07 17.238 329.18 17.238 329.309 cv
17.238 329.441 17.23 329.551 17.219 329.637 cv
17.203 329.727 17.191 329.797 17.172 329.844 cv
17.156 329.898 17.129 329.934 17.098 329.953 cv
17.066 329.977 17.031 329.988 16.988 329.984 cv
7.617 329.984 li
7.414 329.988 7.273 329.934 7.191 329.824 cv
7.113 329.719 7.074 329.605 7.07 329.48 cv
7.07 327.332 li
7.074 327.078 7.078 326.867 7.09 326.695 cv
7.105 326.527 7.121 326.375 7.133 326.234 cv
7.203 325.848 7.309 325.5 7.453 325.199 cv
7.602 324.902 7.789 324.652 8.008 324.445 cv
8.234 324.246 8.488 324.094 8.777 323.988 cv
9.066 323.891 9.387 323.84 9.738 323.836 cv
10.078 323.84 10.383 323.887 10.648 323.973 cv
10.918 324.066 11.156 324.195 11.359 324.367 cv
11.57 324.539 11.746 324.746 11.895 324.984 cv
12.047 325.227 12.176 325.496 12.277 325.789 cv
12.352 325.625 12.445 325.473 12.559 325.336 cv
12.672 325.203 12.805 325.078 12.961 324.957 cv
13.117 324.844 13.297 324.73 13.5 324.625 cv
13.703 324.523 13.934 324.422 14.188 324.312 cv
16.418 323.402 li
16.605 323.332 16.738 323.285 16.813 323.262 cv
16.891 323.242 16.949 323.23 16.988 323.23 cv
cp
9.879 325.258 mo
9.48 325.258 9.145 325.348 8.871 325.523 cv
8.598 325.703 8.402 326 8.281 326.414 cv
8.246 326.547 8.219 326.695 8.203 326.859 cv
8.188 327.027 8.18 327.242 8.18 327.504 cv
8.18 328.637 li
11.59 328.637 li
11.59 327.324 li
11.59 326.973 11.547 326.664 11.461 326.406 cv
11.375 326.148 11.258 325.934 11.102 325.758 cv
10.953 325.59 10.77 325.465 10.559 325.379 cv
10.352 325.301 10.125 325.258 9.879 325.258 cv
cp
f
16.996 315.406 mo
17.043 315.41 17.078 315.418 17.102 315.434 cv
17.133 315.453 17.156 315.484 17.176 315.531 cv
17.195 315.578 17.207 315.641 17.223 315.715 cv
17.23 315.793 17.238 315.887 17.238 315.992 cv
17.238 316.117 17.23 316.215 17.223 316.285 cv
17.207 316.363 17.195 316.422 17.176 316.465 cv
17.156 316.512 17.133 316.543 17.102 316.555 cv
17.078 316.574 17.043 316.582 16.996 316.578 cv
16.066 316.578 li
16.512 316.984 16.836 317.379 17.035 317.77 cv
17.238 318.16 17.336 318.559 17.34 318.957 cv
17.336 319.43 17.262 319.824 17.105 320.141 cv
16.953 320.465 16.742 320.723 16.469 320.922 cv
16.203 321.121 15.891 321.266 15.531 321.348 cv
15.176 321.437 14.738 321.48 14.227 321.477 cv
9.957 321.477 li
9.918 321.48 9.883 321.469 9.852 321.449 cv
9.824 321.434 9.797 321.398 9.773 321.344 cv
9.75 321.293 9.734 321.227 9.727 321.141 cv
9.719 321.059 9.715 320.953 9.715 320.824 cv
9.715 320.703 9.719 320.598 9.727 320.512 cv
9.734 320.43 9.75 320.363 9.773 320.312 cv
9.797 320.266 9.824 320.23 9.852 320.207 cv
9.883 320.187 9.918 320.18 9.957 320.176 cv
14.055 320.176 li
14.469 320.18 14.797 320.148 15.043 320.086 cv
15.293 320.027 15.504 319.937 15.68 319.812 cv
15.855 319.695 15.992 319.539 16.086 319.348 cv
16.184 319.164 16.23 318.945 16.23 318.691 cv
16.23 318.371 16.117 318.051 15.887 317.727 cv
15.656 317.406 15.32 317.062 14.875 316.703 cv
9.957 316.703 li
9.918 316.703 9.883 316.695 9.852 316.676 cv
9.824 316.66 9.797 316.625 9.773 316.57 cv
9.75 316.52 9.734 316.453 9.727 316.371 cv
9.719 316.293 9.715 316.187 9.715 316.055 cv
9.715 315.934 9.719 315.828 9.727 315.742 cv
9.734 315.66 9.75 315.598 9.773 315.547 cv
9.797 315.504 9.824 315.469 9.852 315.441 cv
9.883 315.422 9.918 315.41 9.957 315.406 cv
cp
f
16.996 306.961 mo
17.043 306.965 17.078 306.977 17.102 306.992 cv
17.133 307.016 17.156 307.047 17.176 307.094 cv
17.195 307.141 17.207 307.207 17.223 307.289 cv
17.23 307.375 17.238 307.48 17.238 307.602 cv
17.238 307.734 17.23 307.84 17.223 307.922 cv
17.207 308.008 17.195 308.074 17.176 308.117 cv
17.156 308.168 17.133 308.199 17.102 308.219 cv
17.078 308.242 17.043 308.254 16.996 308.25 cv
12.875 308.25 li
12.473 308.254 12.148 308.285 11.902 308.344 cv
11.66 308.41 11.449 308.5 11.27 308.617 cv
11.094 308.738 10.957 308.895 10.863 309.082 cv
10.77 309.273 10.723 309.496 10.723 309.746 cv
10.723 310.074 10.84 310.395 11.066 310.715 cv
11.301 311.039 11.637 311.379 12.074 311.73 cv
16.996 311.73 li
17.043 311.734 17.078 311.746 17.102 311.762 cv
17.133 311.785 17.156 311.816 17.176 311.863 cv
17.195 311.91 17.207 311.977 17.223 312.059 cv
17.23 312.145 17.238 312.25 17.238 312.379 cv
17.238 312.504 17.23 312.609 17.223 312.695 cv
17.207 312.781 17.195 312.848 17.176 312.895 cv
17.156 312.945 17.133 312.98 17.102 312.996 cv
17.078 313.016 17.043 313.023 16.996 313.023 cv
9.957 313.023 li
9.918 313.023 9.883 313.016 9.852 313 cv
9.824 312.984 9.797 312.953 9.773 312.906 cv
9.75 312.859 9.734 312.801 9.727 312.727 cv
9.719 312.652 9.715 312.555 9.715 312.434 cv
9.715 312.32 9.719 312.227 9.727 312.148 cv
9.734 312.078 9.75 312.02 9.773 311.973 cv
9.797 311.934 9.824 311.902 9.852 311.883 cv
9.883 311.867 9.918 311.859 9.957 311.855 cv
10.887 311.855 li
10.445 311.465 10.121 311.07 9.914 310.672 cv
9.711 310.281 9.609 309.883 9.605 309.477 cv
9.609 309.012 9.688 308.617 9.844 308.293 cv
10.004 307.977 10.219 307.715 10.48 307.516 cv
10.75 307.32 11.059 307.18 11.414 307.09 cv
11.773 307.008 12.203 306.965 12.703 306.961 cv
cp
f
16.48 301.094 mo
16.637 301.098 16.754 301.105 16.84 301.125 cv
16.93 301.148 16.996 301.184 17.035 301.223 cv
17.078 301.27 17.117 301.332 17.152 301.41 cv
17.188 301.496 17.215 301.59 17.242 301.695 cv
17.262 301.805 17.281 301.918 17.301 302.035 cv
17.313 302.156 17.32 302.277 17.324 302.395 cv
17.32 302.762 17.273 303.074 17.18 303.332 cv
17.086 303.598 16.941 303.809 16.742 303.973 cv
16.551 304.141 16.305 304.266 16 304.34 cv
15.703 304.418 15.348 304.453 14.938 304.453 cv
10.824 304.453 li
10.824 305.437 li
10.828 305.516 10.785 305.578 10.699 305.625 cv
10.617 305.672 10.484 305.695 10.293 305.695 cv
10.199 305.695 10.113 305.691 10.043 305.676 cv
9.977 305.668 9.922 305.648 9.875 305.625 cv
9.832 305.605 9.801 305.578 9.781 305.543 cv
9.766 305.512 9.758 305.477 9.754 305.43 cv
9.754 304.453 li
8.078 304.453 li
8.047 304.453 8.012 304.445 7.977 304.426 cv
7.949 304.41 7.922 304.375 7.895 304.324 cv
7.875 304.273 7.859 304.207 7.844 304.121 cv
7.836 304.039 7.828 303.934 7.828 303.809 cv
7.828 303.68 7.836 303.574 7.844 303.488 cv
7.859 303.406 7.875 303.34 7.895 303.293 cv
7.922 303.246 7.949 303.215 7.977 303.191 cv
8.012 303.176 8.047 303.164 8.078 303.16 cv
9.754 303.16 li
9.754 301.355 li
9.758 301.316 9.766 301.281 9.781 301.246 cv
9.801 301.215 9.832 301.184 9.875 301.16 cv
9.922 301.137 9.977 301.121 10.043 301.109 cv
10.113 301.102 10.199 301.098 10.293 301.094 cv
10.484 301.098 10.617 301.121 10.699 301.164 cv
10.785 301.215 10.828 301.277 10.824 301.355 cv
10.824 303.16 li
14.75 303.16 li
15.238 303.164 15.605 303.094 15.852 302.945 cv
16.102 302.805 16.227 302.547 16.223 302.176 cv
16.227 302.059 16.215 301.953 16.188 301.855 cv
16.168 301.766 16.141 301.68 16.113 301.605 cv
16.09 301.535 16.066 301.473 16.039 301.418 cv
16.02 301.367 16.008 301.32 16.004 301.277 cv
16.008 301.25 16.016 301.227 16.023 301.199 cv
16.039 301.18 16.063 301.16 16.098 301.145 cv
16.137 301.133 16.188 301.121 16.246 301.109 cv
16.313 301.102 16.391 301.098 16.48 301.094 cv
cp
f
16.996 298.098 mo
17.043 298.102 17.078 298.113 17.102 298.129 cv
17.133 298.152 17.156 298.184 17.176 298.23 cv
17.195 298.277 17.207 298.344 17.223 298.426 cv
17.23 298.512 17.238 298.617 17.238 298.746 cv
17.238 298.871 17.23 298.977 17.223 299.062 cv
17.207 299.148 17.195 299.215 17.176 299.262 cv
17.156 299.312 17.133 299.348 17.102 299.363 cv
17.078 299.383 17.043 299.391 16.996 299.391 cv
9.957 299.391 li
9.922 299.391 9.887 299.383 9.855 299.363 cv
9.824 299.348 9.801 299.312 9.777 299.262 cv
9.762 299.215 9.746 299.148 9.73 299.062 cv
9.723 298.977 9.715 298.871 9.715 298.746 cv
9.715 298.617 9.723 298.512 9.73 298.426 cv
9.746 298.344 9.762 298.277 9.777 298.23 cv
9.801 298.184 9.824 298.152 9.855 298.129 cv
9.887 298.113 9.922 298.102 9.957 298.098 cv
cp
7.578 297.949 mo
7.883 297.949 8.09 298.008 8.195 298.121 cv
8.309 298.238 8.363 298.449 8.359 298.754 cv
8.363 299.062 8.309 299.27 8.199 299.379 cv
8.094 299.492 7.891 299.551 7.594 299.547 cv
7.293 299.551 7.09 299.492 6.977 299.375 cv
6.871 299.262 6.816 299.051 6.813 298.738 cv
6.816 298.441 6.867 298.234 6.973 298.117 cv
7.082 298.008 7.285 297.949 7.578 297.949 cv
cp
f
16.996 285.262 mo
17.043 285.266 17.078 285.277 17.102 285.293 cv
17.133 285.316 17.156 285.348 17.176 285.395 cv
17.195 285.441 17.207 285.508 17.223 285.59 cv
17.23 285.676 17.238 285.781 17.238 285.902 cv
17.238 286.039 17.23 286.145 17.223 286.227 cv
17.207 286.312 17.195 286.379 17.176 286.426 cv
17.156 286.477 17.133 286.512 17.102 286.531 cv
17.078 286.555 17.043 286.566 16.996 286.562 cv
12.719 286.562 li
12.422 286.566 12.148 286.594 11.902 286.641 cv
11.66 286.695 11.449 286.777 11.27 286.891 cv
11.094 287.008 10.957 287.152 10.863 287.328 cv
10.77 287.508 10.723 287.719 10.723 287.953 cv
10.723 288.254 10.84 288.551 11.066 288.852 cv
11.301 289.152 11.637 289.484 12.074 289.84 cv
16.996 289.84 li
17.043 289.844 17.078 289.852 17.102 289.871 cv
17.133 289.895 17.156 289.93 17.176 289.977 cv
17.195 290.027 17.207 290.094 17.223 290.176 cv
17.23 290.262 17.238 290.367 17.238 290.488 cv
17.238 290.609 17.23 290.711 17.223 290.797 cv
17.207 290.883 17.195 290.953 17.176 291 cv
17.156 291.055 17.133 291.086 17.102 291.102 cv
17.078 291.121 17.043 291.133 16.996 291.129 cv
12.719 291.129 li
12.422 291.133 12.148 291.16 11.902 291.215 cv
11.66 291.273 11.449 291.359 11.27 291.473 cv
11.094 291.59 10.957 291.734 10.863 291.906 cv
10.77 292.082 10.723 292.289 10.723 292.531 cv
10.723 292.828 10.84 293.129 11.066 293.43 cv
11.301 293.734 11.637 294.062 12.074 294.414 cv
16.996 294.414 li
17.043 294.418 17.078 294.43 17.102 294.445 cv
17.133 294.469 17.156 294.5 17.176 294.547 cv
17.195 294.594 17.207 294.66 17.223 294.742 cv
17.23 294.828 17.238 294.934 17.238 295.062 cv
17.238 295.187 17.23 295.293 17.223 295.379 cv
17.207 295.465 17.195 295.531 17.176 295.578 cv
17.156 295.629 17.133 295.664 17.102 295.68 cv
17.078 295.699 17.043 295.707 16.996 295.707 cv
9.957 295.707 li
9.918 295.707 9.883 295.699 9.852 295.684 cv
9.824 295.668 9.797 295.637 9.773 295.59 cv
9.75 295.543 9.734 295.484 9.727 295.41 cv
9.719 295.336 9.715 295.238 9.715 295.117 cv
9.715 295.004 9.719 294.91 9.727 294.832 cv
9.734 294.762 9.75 294.703 9.773 294.656 cv
9.797 294.617 9.824 294.586 9.852 294.566 cv
9.883 294.551 9.918 294.543 9.957 294.539 cv
10.887 294.539 li
10.445 294.148 10.121 293.762 9.914 293.387 cv
9.711 293.016 9.609 292.641 9.605 292.258 cv
9.609 291.965 9.645 291.703 9.707 291.469 cv
9.777 291.242 9.871 291.035 9.992 290.855 cv
10.117 290.68 10.262 290.531 10.43 290.402 cv
10.602 290.281 10.793 290.176 10.996 290.09 cv
10.746 289.859 10.527 289.637 10.348 289.422 cv
10.172 289.215 10.031 289.012 9.918 288.812 cv
9.813 288.617 9.73 288.426 9.68 288.238 cv
9.633 288.055 9.609 287.867 9.605 287.68 cv
9.609 287.227 9.688 286.848 9.844 286.539 cv
10.004 286.234 10.219 285.984 10.48 285.793 cv
10.75 285.602 11.059 285.465 11.414 285.383 cv
11.773 285.305 12.152 285.266 12.547 285.262 cv
cp
f
13.172 276.898 mo
13.375 276.902 13.52 276.953 13.605 277.051 cv
13.691 277.156 13.734 277.27 13.734 277.398 cv
13.734 282.035 li
14.125 282.039 14.477 282 14.789 281.918 cv
15.102 281.844 15.371 281.715 15.598 281.527 cv
15.824 281.348 15.996 281.109 16.113 280.812 cv
16.234 280.523 16.297 280.164 16.293 279.734 cv
16.297 279.402 16.27 279.102 16.211 278.84 cv
16.16 278.578 16.098 278.352 16.027 278.16 cv
15.961 277.969 15.898 277.812 15.844 277.687 cv
15.789 277.566 15.762 277.473 15.762 277.406 cv
15.762 277.371 15.773 277.34 15.789 277.309 cv
15.813 277.285 15.84 277.262 15.871 277.242 cv
15.91 277.23 15.961 277.219 16.023 277.207 cv
16.094 277.203 16.172 277.199 16.262 277.195 cv
16.332 277.199 16.391 277.203 16.438 277.203 cv
16.488 277.211 16.531 277.215 16.57 277.223 cv
16.609 277.23 16.645 277.246 16.676 277.262 cv
16.707 277.285 16.738 277.309 16.766 277.332 cv
16.797 277.363 16.844 277.445 16.906 277.586 cv
16.973 277.727 17.035 277.91 17.098 278.133 cv
17.16 278.359 17.215 278.617 17.266 278.91 cv
17.313 279.207 17.336 279.523 17.34 279.855 cv
17.336 280.437 17.258 280.945 17.098 281.375 cv
16.938 281.812 16.699 282.18 16.379 282.477 cv
16.063 282.777 15.664 283 15.184 283.148 cv
14.703 283.301 14.145 283.375 13.508 283.375 cv
12.906 283.375 12.363 283.297 11.879 283.141 cv
11.398 282.984 10.988 282.762 10.648 282.465 cv
10.316 282.172 10.059 281.812 9.875 281.395 cv
9.699 280.98 9.609 280.516 9.605 279.996 cv
9.609 279.445 9.699 278.973 9.871 278.582 cv
10.051 278.195 10.289 277.879 10.586 277.625 cv
10.891 277.379 11.242 277.195 11.641 277.074 cv
12.047 276.961 12.477 276.902 12.938 276.898 cv
cp
12.789 278.195 mo
12.113 278.18 11.578 278.332 11.191 278.648 cv
10.809 278.969 10.617 279.441 10.613 280.062 cv
10.617 280.387 10.676 280.668 10.793 280.906 cv
10.914 281.148 11.074 281.348 11.27 281.512 cv
11.469 281.676 11.699 281.801 11.961 281.887 cv
12.227 281.977 12.504 282.027 12.789 282.035 cv
cp
f
6.414 268.633 mo
7.465 269.129 8.539 269.496 9.641 269.738 cv
10.746 269.98 11.855 270.102 12.969 270.102 cv
14.09 270.102 15.199 269.98 16.301 269.73 cv
17.398 269.488 18.477 269.125 19.539 268.648 cv
19.598 268.625 19.652 268.613 19.699 268.605 cv
19.742 268.605 19.777 268.621 19.809 268.656 cv
19.836 268.695 19.855 268.75 19.871 268.824 cv
19.879 268.902 19.887 269.008 19.891 269.133 cv
19.887 269.23 19.883 269.309 19.883 269.375 cv
19.875 269.445 19.867 269.504 19.852 269.551 cv
19.836 269.602 19.816 269.645 19.797 269.672 cv
19.773 269.707 19.75 269.73 19.727 269.742 cv
19.191 270.027 18.652 270.273 18.109 270.484 cv
17.563 270.699 17.012 270.879 16.449 271.027 cv
15.887 271.176 15.316 271.285 14.738 271.355 cv
14.164 271.43 13.582 271.469 12.992 271.465 cv
12.402 271.469 11.82 271.426 11.246 271.344 cv
10.676 271.266 10.105 271.152 9.539 271 cv
8.973 270.852 8.418 270.668 7.867 270.453 cv
7.324 270.242 6.781 270.004 6.238 269.734 cv
6.223 269.73 6.203 269.715 6.184 269.691 cv
6.172 269.668 6.156 269.637 6.137 269.594 cv
6.125 269.555 6.113 269.496 6.102 269.422 cv
6.098 269.352 6.094 269.258 6.09 269.141 cv
6.094 269.023 6.102 268.93 6.113 268.852 cv
6.133 268.781 6.152 268.723 6.176 268.68 cv
6.203 268.641 6.238 268.617 6.281 268.609 cv
6.324 268.605 6.371 268.613 6.414 268.633 cv
cp
f
16.988 255.301 mo
17.031 255.301 17.066 255.312 17.098 255.336 cv
17.129 255.359 17.156 255.398 17.172 255.449 cv
17.191 255.504 17.203 255.57 17.219 255.652 cv
17.23 255.738 17.238 255.848 17.238 255.977 cv
17.238 256.105 17.23 256.211 17.219 256.297 cv
17.203 256.387 17.191 256.457 17.172 256.508 cv
17.156 256.559 17.129 256.594 17.098 256.613 cv
17.066 256.637 17.031 256.648 16.988 256.645 cv
8.172 256.645 li
8.172 256.66 li
17.027 260.23 li
17.066 260.25 17.098 260.273 17.121 260.297 cv
17.148 260.328 17.172 260.367 17.188 260.422 cv
17.207 260.477 17.219 260.543 17.227 260.617 cv
17.234 260.695 17.238 260.785 17.238 260.887 cv
17.238 261 17.23 261.094 17.223 261.168 cv
17.207 261.25 17.195 261.316 17.18 261.363 cv
17.164 261.418 17.145 261.457 17.113 261.484 cv
17.09 261.516 17.059 261.535 17.027 261.543 cv
8.172 264.953 li
8.172 264.961 li
16.988 264.961 li
17.031 264.965 17.066 264.977 17.098 264.996 cv
17.129 265.02 17.156 265.055 17.172 265.109 cv
17.191 265.164 17.203 265.234 17.219 265.316 cv
17.23 265.406 17.238 265.516 17.238 265.645 cv
17.238 265.777 17.23 265.887 17.219 265.969 cv
17.203 266.059 17.191 266.125 17.172 266.176 cv
17.156 266.227 17.129 266.262 17.098 266.281 cv
17.066 266.301 17.031 266.312 16.988 266.309 cv
7.68 266.309 li
7.465 266.312 7.309 266.254 7.211 266.133 cv
7.121 266.02 7.074 265.887 7.07 265.742 cv
7.07 264.918 li
7.074 264.75 7.09 264.602 7.117 264.473 cv
7.152 264.348 7.199 264.238 7.266 264.141 cv
7.336 264.047 7.422 263.965 7.523 263.902 cv
7.629 263.84 7.754 263.785 7.891 263.734 cv
15.219 260.84 li
15.219 260.801 li
7.914 257.789 li
7.762 257.734 7.629 257.668 7.516 257.598 cv
7.41 257.531 7.32 257.457 7.254 257.371 cv
7.191 257.289 7.145 257.199 7.113 257.098 cv
7.086 257 7.074 256.883 7.07 256.746 cv
7.07 255.883 li
7.074 255.805 7.086 255.73 7.105 255.656 cv
7.133 255.586 7.168 255.523 7.215 255.473 cv
7.266 255.422 7.328 255.379 7.402 255.348 cv
7.48 255.316 7.574 255.301 7.68 255.301 cv
cp
f
16.996 251.465 mo
17.043 251.469 17.078 251.48 17.102 251.496 cv
17.133 251.52 17.156 251.551 17.176 251.598 cv
17.195 251.645 17.207 251.711 17.223 251.793 cv
17.23 251.879 17.238 251.984 17.238 252.113 cv
17.238 252.238 17.23 252.344 17.223 252.43 cv
17.207 252.516 17.195 252.582 17.176 252.629 cv
17.156 252.68 17.133 252.715 17.102 252.73 cv
17.078 252.75 17.043 252.758 16.996 252.758 cv
9.957 252.758 li
9.922 252.758 9.887 252.75 9.855 252.73 cv
9.824 252.715 9.801 252.68 9.777 252.629 cv
9.762 252.582 9.746 252.516 9.73 252.43 cv
9.723 252.344 9.715 252.238 9.715 252.113 cv
9.715 251.984 9.723 251.879 9.73 251.793 cv
9.746 251.711 9.762 251.645 9.777 251.598 cv
9.801 251.551 9.824 251.52 9.855 251.496 cv
9.887 251.48 9.922 251.469 9.957 251.465 cv
cp
7.578 251.316 mo
7.883 251.316 8.09 251.375 8.195 251.488 cv
8.309 251.605 8.363 251.816 8.359 252.121 cv
8.363 252.43 8.309 252.637 8.199 252.746 cv
8.094 252.859 7.891 252.918 7.594 252.914 cv
7.293 252.918 7.09 252.859 6.977 252.742 cv
6.871 252.629 6.816 252.418 6.813 252.105 cv
6.816 251.809 6.867 251.602 6.973 251.484 cv
7.082 251.375 7.285 251.316 7.578 251.316 cv
cp
f
16.996 243.012 mo
17.043 243.016 17.078 243.027 17.102 243.043 cv
17.133 243.066 17.156 243.098 17.176 243.145 cv
17.195 243.191 17.207 243.258 17.223 243.34 cv
17.23 243.426 17.238 243.531 17.238 243.652 cv
17.238 243.785 17.23 243.891 17.223 243.973 cv
17.207 244.059 17.195 244.125 17.176 244.168 cv
17.156 244.219 17.133 244.25 17.102 244.27 cv
17.078 244.293 17.043 244.305 16.996 244.301 cv
12.875 244.301 li
12.473 244.305 12.148 244.336 11.902 244.395 cv
11.66 244.461 11.449 244.551 11.27 244.668 cv
11.094 244.789 10.957 244.945 10.863 245.133 cv
10.77 245.324 10.723 245.547 10.723 245.797 cv
10.723 246.125 10.84 246.445 11.066 246.766 cv
11.301 247.09 11.637 247.43 12.074 247.781 cv
16.996 247.781 li
17.043 247.785 17.078 247.797 17.102 247.812 cv
17.133 247.836 17.156 247.867 17.176 247.914 cv
17.195 247.961 17.207 248.027 17.223 248.109 cv
17.23 248.195 17.238 248.301 17.238 248.43 cv
17.238 248.555 17.23 248.66 17.223 248.746 cv
17.207 248.832 17.195 248.898 17.176 248.945 cv
17.156 248.996 17.133 249.031 17.102 249.047 cv
17.078 249.066 17.043 249.074 16.996 249.074 cv
9.957 249.074 li
9.918 249.074 9.883 249.066 9.852 249.051 cv
9.824 249.035 9.797 249.004 9.773 248.957 cv
9.75 248.91 9.734 248.852 9.727 248.777 cv
9.719 248.703 9.715 248.605 9.715 248.484 cv
9.715 248.371 9.719 248.277 9.727 248.199 cv
9.734 248.129 9.75 248.07 9.773 248.023 cv
9.797 247.984 9.824 247.953 9.852 247.934 cv
9.883 247.918 9.918 247.91 9.957 247.906 cv
10.887 247.906 li
10.445 247.516 10.121 247.121 9.914 246.723 cv
9.711 246.332 9.609 245.934 9.605 245.527 cv
9.609 245.062 9.688 244.668 9.844 244.344 cv
10.004 244.027 10.219 243.766 10.48 243.566 cv
10.75 243.371 11.059 243.23 11.414 243.141 cv
11.773 243.059 12.203 243.016 12.703 243.012 cv
cp
f
16.996 234.633 mo
17.043 234.637 17.078 234.645 17.102 234.66 cv
17.133 234.68 17.156 234.711 17.176 234.758 cv
17.195 234.805 17.207 234.867 17.223 234.941 cv
17.23 235.02 17.238 235.113 17.238 235.219 cv
17.238 235.344 17.23 235.441 17.223 235.512 cv
17.207 235.59 17.195 235.648 17.176 235.691 cv
17.156 235.738 17.133 235.77 17.102 235.781 cv
17.078 235.801 17.043 235.809 16.996 235.805 cv
16.066 235.805 li
16.512 236.211 16.836 236.605 17.035 236.996 cv
17.238 237.387 17.336 237.785 17.34 238.184 cv
17.336 238.656 17.262 239.051 17.105 239.367 cv
16.953 239.691 16.742 239.949 16.469 240.148 cv
16.203 240.348 15.891 240.492 15.531 240.574 cv
15.176 240.664 14.738 240.707 14.227 240.703 cv
9.957 240.703 li
9.918 240.707 9.883 240.695 9.852 240.676 cv
9.824 240.66 9.797 240.625 9.773 240.57 cv
9.75 240.52 9.734 240.453 9.727 240.367 cv
9.719 240.285 9.715 240.18 9.715 240.051 cv
9.715 239.93 9.719 239.824 9.727 239.738 cv
9.734 239.656 9.75 239.59 9.773 239.539 cv
9.797 239.492 9.824 239.457 9.852 239.434 cv
9.883 239.414 9.918 239.406 9.957 239.402 cv
14.055 239.402 li
14.469 239.406 14.797 239.375 15.043 239.312 cv
15.293 239.254 15.504 239.164 15.68 239.039 cv
15.855 238.922 15.992 238.766 16.086 238.574 cv
16.184 238.391 16.23 238.172 16.23 237.918 cv
16.23 237.598 16.117 237.277 15.887 236.953 cv
15.656 236.633 15.32 236.289 14.875 235.93 cv
9.957 235.93 li
9.918 235.93 9.883 235.922 9.852 235.902 cv
9.824 235.887 9.797 235.852 9.773 235.797 cv
9.75 235.746 9.734 235.68 9.727 235.598 cv
9.719 235.52 9.715 235.414 9.715 235.281 cv
9.715 235.16 9.719 235.055 9.727 234.969 cv
9.734 234.887 9.75 234.824 9.773 234.773 cv
9.797 234.73 9.824 234.695 9.852 234.668 cv
9.883 234.648 9.918 234.637 9.957 234.633 cv
cp
f
16.48 228.59 mo
16.637 228.594 16.754 228.602 16.84 228.621 cv
16.93 228.645 16.996 228.68 17.035 228.719 cv
17.078 228.766 17.117 228.828 17.152 228.906 cv
17.188 228.992 17.215 229.086 17.242 229.191 cv
17.262 229.301 17.281 229.414 17.301 229.531 cv
17.313 229.652 17.32 229.773 17.324 229.891 cv
17.32 230.258 17.273 230.57 17.18 230.828 cv
17.086 231.094 16.941 231.305 16.742 231.469 cv
16.551 231.637 16.305 231.762 16 231.836 cv
15.703 231.914 15.348 231.949 14.938 231.949 cv
10.824 231.949 li
10.824 232.934 li
10.828 233.012 10.785 233.074 10.699 233.121 cv
10.617 233.168 10.484 233.191 10.293 233.191 cv
10.199 233.191 10.113 233.187 10.043 233.172 cv
9.977 233.164 9.922 233.145 9.875 233.121 cv
9.832 233.102 9.801 233.074 9.781 233.039 cv
9.766 233.008 9.758 232.973 9.754 232.926 cv
9.754 231.949 li
8.078 231.949 li
8.047 231.949 8.012 231.941 7.977 231.922 cv
7.949 231.906 7.922 231.871 7.895 231.82 cv
7.875 231.77 7.859 231.703 7.844 231.617 cv
7.836 231.535 7.828 231.43 7.828 231.305 cv
7.828 231.176 7.836 231.07 7.844 230.984 cv
7.859 230.902 7.875 230.836 7.895 230.789 cv
7.922 230.742 7.949 230.711 7.977 230.687 cv
8.012 230.672 8.047 230.66 8.078 230.656 cv
9.754 230.656 li
9.754 228.852 li
9.758 228.812 9.766 228.777 9.781 228.742 cv
9.801 228.711 9.832 228.68 9.875 228.656 cv
9.922 228.633 9.977 228.617 10.043 228.605 cv
10.113 228.598 10.199 228.594 10.293 228.59 cv
10.484 228.594 10.617 228.617 10.699 228.66 cv
10.785 228.711 10.828 228.773 10.824 228.852 cv
10.824 230.656 li
14.75 230.656 li
15.238 230.66 15.605 230.59 15.852 230.441 cv
16.102 230.301 16.227 230.043 16.223 229.672 cv
16.227 229.555 16.215 229.449 16.188 229.352 cv
16.168 229.262 16.141 229.176 16.113 229.102 cv
16.09 229.031 16.066 228.969 16.039 228.914 cv
16.02 228.863 16.008 228.816 16.004 228.773 cv
16.008 228.746 16.016 228.723 16.023 228.695 cv
16.039 228.676 16.063 228.656 16.098 228.641 cv
16.137 228.629 16.188 228.617 16.246 228.605 cv
16.313 228.598 16.391 228.594 16.48 228.59 cv
cp
f
13.172 221.039 mo
13.375 221.043 13.52 221.094 13.605 221.191 cv
13.691 221.297 13.734 221.41 13.734 221.539 cv
13.734 226.176 li
14.125 226.18 14.477 226.141 14.789 226.059 cv
15.102 225.984 15.371 225.855 15.598 225.668 cv
15.824 225.488 15.996 225.25 16.113 224.953 cv
16.234 224.664 16.297 224.305 16.293 223.875 cv
16.297 223.543 16.27 223.242 16.211 222.98 cv
16.16 222.719 16.098 222.492 16.027 222.301 cv
15.961 222.109 15.898 221.953 15.844 221.828 cv
15.789 221.707 15.762 221.613 15.762 221.547 cv
15.762 221.512 15.773 221.48 15.789 221.449 cv
15.813 221.426 15.84 221.402 15.871 221.383 cv
15.91 221.371 15.961 221.359 16.023 221.348 cv
16.094 221.344 16.172 221.34 16.262 221.336 cv
16.332 221.34 16.391 221.344 16.438 221.344 cv
16.488 221.352 16.531 221.355 16.57 221.363 cv
16.609 221.371 16.645 221.387 16.676 221.402 cv
16.707 221.426 16.738 221.449 16.766 221.473 cv
16.797 221.504 16.844 221.586 16.906 221.727 cv
16.973 221.867 17.035 222.051 17.098 222.273 cv
17.16 222.5 17.215 222.758 17.266 223.051 cv
17.313 223.348 17.336 223.664 17.34 223.996 cv
17.336 224.578 17.258 225.086 17.098 225.516 cv
16.938 225.953 16.699 226.32 16.379 226.617 cv
16.063 226.918 15.664 227.141 15.184 227.289 cv
14.703 227.441 14.145 227.516 13.508 227.516 cv
12.906 227.516 12.363 227.437 11.879 227.281 cv
11.398 227.125 10.988 226.902 10.648 226.605 cv
10.316 226.312 10.059 225.953 9.875 225.535 cv
9.699 225.121 9.609 224.656 9.605 224.137 cv
9.609 223.586 9.699 223.113 9.871 222.723 cv
10.051 222.336 10.289 222.02 10.586 221.766 cv
10.891 221.52 11.242 221.336 11.641 221.215 cv
12.047 221.102 12.477 221.043 12.938 221.039 cv
cp
12.789 222.336 mo
12.113 222.32 11.578 222.473 11.191 222.789 cv
10.809 223.109 10.617 223.582 10.613 224.203 cv
10.617 224.527 10.676 224.809 10.793 225.047 cv
10.914 225.289 11.074 225.488 11.27 225.652 cv
11.469 225.816 11.699 225.941 11.961 226.027 cv
12.227 226.117 12.504 226.168 12.789 226.176 cv
cp
f
15.078 214.645 mo
15.441 214.648 15.762 214.715 16.043 214.844 cv
16.324 214.98 16.563 215.172 16.754 215.414 cv
16.949 215.664 17.094 215.953 17.191 216.289 cv
17.289 216.629 17.336 217.004 17.34 217.406 cv
17.336 217.66 17.316 217.898 17.281 218.121 cv
17.238 218.352 17.191 218.555 17.133 218.734 cv
17.074 218.918 17.012 219.07 16.945 219.191 cv
16.883 219.32 16.824 219.41 16.77 219.465 cv
16.719 219.523 16.648 219.566 16.551 219.59 cv
16.461 219.617 16.332 219.629 16.168 219.629 cv
16.07 219.629 15.988 219.625 15.918 219.613 cv
15.855 219.605 15.801 219.594 15.754 219.574 cv
15.715 219.562 15.684 219.539 15.664 219.508 cv
15.648 219.48 15.641 219.449 15.637 219.41 cv
15.641 219.355 15.676 219.27 15.742 219.156 cv
15.816 219.047 15.891 218.91 15.973 218.742 cv
16.059 218.578 16.137 218.383 16.203 218.156 cv
16.277 217.937 16.313 217.68 16.309 217.383 cv
16.313 217.168 16.289 216.969 16.238 216.789 cv
16.195 216.613 16.125 216.461 16.031 216.328 cv
15.941 216.203 15.828 216.102 15.684 216.027 cv
15.543 215.961 15.375 215.926 15.18 215.922 cv
14.984 215.926 14.816 215.977 14.68 216.074 cv
14.547 216.18 14.426 216.312 14.32 216.477 cv
14.219 216.645 14.129 216.832 14.043 217.039 cv
13.965 217.25 13.879 217.465 13.789 217.684 cv
13.703 217.906 13.602 218.125 13.488 218.332 cv
13.379 218.547 13.242 218.734 13.078 218.902 cv
12.918 219.07 12.727 219.207 12.5 219.305 cv
12.277 219.41 12.008 219.461 11.691 219.457 cv
11.418 219.461 11.152 219.406 10.898 219.297 cv
10.648 219.191 10.43 219.031 10.234 218.816 cv
10.047 218.602 9.895 218.332 9.777 218.012 cv
9.668 217.691 9.609 217.32 9.605 216.891 cv
9.609 216.707 9.625 216.52 9.652 216.328 cv
9.688 216.145 9.727 215.973 9.77 215.82 cv
9.82 215.672 9.871 215.543 9.922 215.434 cv
9.98 215.324 10.027 215.242 10.066 215.187 cv
10.109 215.133 10.148 215.098 10.176 215.078 cv
10.211 215.062 10.246 215.051 10.281 215.039 cv
10.324 215.035 10.371 215.027 10.426 215.016 cv
10.484 215.012 10.555 215.008 10.637 215.004 cv
10.727 215.008 10.805 215.012 10.867 215.016 cv
10.938 215.027 10.988 215.039 11.027 215.055 cv
11.07 215.074 11.102 215.098 11.117 215.121 cv
11.137 215.152 11.145 215.18 11.145 215.207 cv
11.145 215.258 11.117 215.324 11.059 215.41 cv
11.004 215.5 10.941 215.617 10.875 215.758 cv
10.813 215.902 10.754 216.066 10.691 216.254 cv
10.637 216.445 10.605 216.664 10.605 216.906 cv
10.605 217.129 10.633 217.32 10.68 217.484 cv
10.734 217.652 10.805 217.789 10.891 217.895 cv
10.984 218.004 11.09 218.086 11.215 218.137 cv
11.34 218.195 11.477 218.223 11.621 218.219 cv
11.828 218.223 12 218.172 12.133 218.062 cv
12.273 217.961 12.395 217.824 12.5 217.656 cv
12.605 217.492 12.699 217.301 12.781 217.086 cv
12.867 216.875 12.953 216.66 13.039 216.434 cv
13.129 216.215 13.227 215.996 13.336 215.777 cv
13.445 215.562 13.578 215.367 13.734 215.199 cv
13.891 215.035 14.078 214.902 14.297 214.797 cv
14.516 214.699 14.777 214.648 15.078 214.645 cv
cp
f
12.992 210.191 mo
13.582 210.191 14.164 210.23 14.738 210.301 cv
15.316 210.379 15.887 210.488 16.449 210.629 cv
17.012 210.777 17.563 210.953 18.109 211.164 cv
18.652 211.375 19.191 211.621 19.727 211.902 cv
19.75 211.918 19.773 211.941 19.797 211.973 cv
19.816 212.004 19.836 212.047 19.852 212.094 cv
19.867 212.148 19.875 212.207 19.883 212.27 cv
19.883 212.34 19.887 212.422 19.891 212.516 cv
19.887 212.656 19.879 212.762 19.871 212.832 cv
19.855 212.91 19.836 212.965 19.809 212.996 cv
19.777 213.035 19.742 213.051 19.699 213.043 cv
19.652 213.043 19.598 213.027 19.539 213 cv
18.48 212.52 17.406 212.156 16.305 211.91 cv
15.203 211.668 14.09 211.547 12.969 211.543 cv
11.855 211.547 10.746 211.668 9.641 211.91 cv
8.539 212.156 7.465 212.523 6.414 213.016 cv
6.371 213.039 6.324 213.047 6.281 213.039 cv
6.238 213.035 6.203 213.012 6.176 212.969 cv
6.152 212.93 6.133 212.875 6.113 212.797 cv
6.102 212.727 6.094 212.629 6.09 212.508 cv
6.094 212.398 6.098 212.305 6.102 212.23 cv
6.113 212.16 6.125 212.102 6.137 212.055 cv
6.156 212.012 6.172 211.98 6.184 211.957 cv
6.203 211.937 6.223 211.922 6.238 211.91 cv
7.313 211.375 8.41 210.953 9.539 210.648 cv
10.668 210.344 11.82 210.191 12.992 210.191 cv
cp
f
285.867 531.375 mo
285.863 531.48 285.848 531.57 285.813 531.641 cv
285.777 531.719 285.73 531.777 285.676 531.82 cv
285.617 531.871 285.555 531.906 285.484 531.922 cv
285.414 531.945 285.344 531.953 285.277 531.953 cv
284.832 531.953 li
284.688 531.953 284.563 531.941 284.461 531.91 cv
284.352 531.887 284.254 531.832 284.164 531.754 cv
284.066 531.68 283.973 531.578 283.879 531.445 cv
283.785 531.316 283.684 531.148 283.582 530.945 cv
280.492 525.187 li
280.328 524.895 280.164 524.582 280.004 524.254 cv
279.836 523.926 279.684 523.609 279.547 523.301 cv
279.531 523.301 li
279.539 523.68 279.547 524.062 279.555 524.453 cv
279.559 524.844 279.559 525.234 279.563 525.617 cv
279.563 531.727 li
279.559 531.766 279.547 531.801 279.527 531.832 cv
279.504 531.867 279.469 531.895 279.418 531.91 cv
279.363 531.93 279.293 531.941 279.211 531.957 cv
279.121 531.969 279.016 531.977 278.887 531.977 cv
278.754 531.977 278.645 531.969 278.559 531.957 cv
278.473 531.941 278.402 531.93 278.355 531.91 cv
278.301 531.895 278.266 531.867 278.246 531.832 cv
278.223 531.801 278.211 531.766 278.215 531.727 cv
278.215 522.387 li
278.211 522.18 278.27 522.031 278.391 521.941 cv
278.508 521.855 278.641 521.812 278.781 521.809 cv
279.445 521.809 li
279.598 521.812 279.73 521.824 279.836 521.848 cv
279.938 521.875 280.031 521.918 280.117 521.977 cv
280.199 522.039 280.277 522.121 280.359 522.227 cv
280.434 522.336 280.516 522.473 280.605 522.629 cv
282.98 527.07 li
283.125 527.348 283.266 527.613 283.402 527.867 cv
283.535 528.129 283.664 528.383 283.793 528.629 cv
283.918 528.883 284.043 529.129 284.168 529.367 cv
284.289 529.613 284.414 529.855 284.535 530.098 cv
284.543 530.098 li
284.527 529.687 284.523 529.258 284.523 528.812 cv
284.52 528.367 284.516 527.941 284.52 527.527 cv
284.52 522.035 li
284.516 522 284.527 521.965 284.551 521.934 cv
284.57 521.902 284.609 521.875 284.664 521.852 cv
284.715 521.828 284.781 521.812 284.871 521.801 cv
284.953 521.793 285.066 521.789 285.207 521.785 cv
285.324 521.789 285.43 521.793 285.52 521.801 cv
285.605 521.812 285.672 521.828 285.727 521.852 cv
285.773 521.875 285.809 521.902 285.832 521.934 cv
285.852 521.965 285.863 522 285.867 522.035 cv
cp
f
294.445 531.734 mo
294.441 531.781 294.434 531.816 294.418 531.84 cv
294.398 531.871 294.367 531.895 294.32 531.914 cv
294.273 531.934 294.211 531.945 294.137 531.961 cv
294.059 531.969 293.965 531.977 293.859 531.977 cv
293.734 531.977 293.637 531.969 293.566 531.961 cv
293.488 531.945 293.43 531.934 293.387 531.914 cv
293.34 531.895 293.309 531.871 293.297 531.84 cv
293.277 531.816 293.27 531.781 293.273 531.734 cv
293.273 530.805 li
292.867 531.25 292.473 531.574 292.082 531.773 cv
291.691 531.977 291.293 532.074 290.895 532.078 cv
290.422 532.074 290.027 532 289.711 531.844 cv
289.387 531.691 289.129 531.48 288.93 531.207 cv
288.73 530.941 288.586 530.629 288.504 530.27 cv
288.414 529.914 288.371 529.477 288.375 528.965 cv
288.375 524.695 li
288.371 524.656 288.383 524.621 288.402 524.59 cv
288.418 524.562 288.453 524.535 288.508 524.512 cv
288.559 524.488 288.625 524.473 288.711 524.465 cv
288.793 524.457 288.898 524.453 289.027 524.453 cv
289.148 524.453 289.254 524.457 289.34 524.465 cv
289.422 524.473 289.488 524.488 289.539 524.512 cv
289.586 524.535 289.621 524.562 289.645 524.59 cv
289.664 524.621 289.672 524.656 289.676 524.695 cv
289.676 528.793 li
289.672 529.207 289.703 529.535 289.766 529.781 cv
289.824 530.031 289.914 530.242 290.039 530.418 cv
290.156 530.594 290.313 530.73 290.504 530.824 cv
290.688 530.922 290.906 530.969 291.16 530.969 cv
291.48 530.969 291.801 530.855 292.125 530.625 cv
292.445 530.395 292.789 530.059 293.148 529.613 cv
293.148 524.695 li
293.148 524.656 293.156 524.621 293.176 524.59 cv
293.191 524.562 293.227 524.535 293.281 524.512 cv
293.332 524.488 293.398 524.473 293.48 524.465 cv
293.559 524.457 293.664 524.453 293.797 524.453 cv
293.918 524.453 294.023 524.457 294.109 524.465 cv
294.191 524.473 294.254 524.488 294.305 524.512 cv
294.348 524.535 294.383 524.562 294.41 524.59 cv
294.43 524.621 294.441 524.656 294.445 524.695 cv
cp
f
307.27 531.734 mo
307.266 531.781 307.254 531.816 307.238 531.84 cv
307.215 531.871 307.184 531.895 307.137 531.914 cv
307.09 531.934 307.023 531.945 306.941 531.961 cv
306.855 531.969 306.75 531.977 306.629 531.977 cv
306.492 531.977 306.387 531.969 306.305 531.961 cv
306.219 531.945 306.152 531.934 306.105 531.914 cv
306.055 531.895 306.02 531.871 306 531.84 cv
305.977 531.816 305.965 531.781 305.969 531.734 cv
305.969 527.457 li
305.965 527.16 305.938 526.887 305.891 526.641 cv
305.836 526.398 305.754 526.187 305.641 526.008 cv
305.523 525.832 305.379 525.695 305.203 525.602 cv
305.023 525.508 304.813 525.461 304.578 525.461 cv
304.277 525.461 303.98 525.578 303.68 525.805 cv
303.379 526.039 303.047 526.375 302.691 526.812 cv
302.691 531.734 li
302.688 531.781 302.68 531.816 302.66 531.84 cv
302.637 531.871 302.602 531.895 302.555 531.914 cv
302.504 531.934 302.438 531.945 302.355 531.961 cv
302.27 531.969 302.164 531.977 302.043 531.977 cv
301.922 531.977 301.82 531.969 301.734 531.961 cv
301.648 531.945 301.578 531.934 301.531 531.914 cv
301.477 531.895 301.445 531.871 301.43 531.84 cv
301.41 531.816 301.398 531.781 301.402 531.734 cv
301.402 527.457 li
301.398 527.16 301.371 526.887 301.316 526.641 cv
301.258 526.398 301.172 526.187 301.059 526.008 cv
300.941 525.832 300.797 525.695 300.625 525.602 cv
300.449 525.508 300.242 525.461 300 525.461 cv
299.703 525.461 299.402 525.578 299.102 525.805 cv
298.797 526.039 298.469 526.375 298.117 526.812 cv
298.117 531.734 li
298.113 531.781 298.102 531.816 298.086 531.84 cv
298.063 531.871 298.031 531.895 297.984 531.914 cv
297.938 531.934 297.871 531.945 297.789 531.961 cv
297.703 531.969 297.598 531.977 297.469 531.977 cv
297.344 531.977 297.238 531.969 297.152 531.961 cv
297.066 531.945 297 531.934 296.953 531.914 cv
296.902 531.895 296.867 531.871 296.852 531.84 cv
296.832 531.816 296.824 531.781 296.824 531.734 cv
296.824 524.695 li
296.824 524.656 296.832 524.621 296.848 524.59 cv
296.863 524.562 296.895 524.535 296.941 524.512 cv
296.988 524.488 297.047 524.473 297.121 524.465 cv
297.195 524.457 297.293 524.453 297.414 524.453 cv
297.527 524.453 297.621 524.457 297.699 524.465 cv
297.77 524.473 297.828 524.488 297.875 524.512 cv
297.914 524.535 297.945 524.562 297.965 524.59 cv
297.98 524.621 297.988 524.656 297.992 524.695 cv
297.992 525.625 li
298.383 525.184 298.77 524.859 299.145 524.652 cv
299.516 524.449 299.891 524.348 300.273 524.344 cv
300.566 524.348 300.828 524.383 301.063 524.445 cv
301.289 524.516 301.496 524.609 301.676 524.73 cv
301.852 524.855 302 525 302.129 525.168 cv
302.25 525.34 302.355 525.531 302.441 525.734 cv
302.672 525.484 302.895 525.266 303.109 525.086 cv
303.316 524.91 303.52 524.77 303.719 524.656 cv
303.914 524.551 304.105 524.469 304.293 524.418 cv
304.477 524.371 304.664 524.348 304.852 524.344 cv
305.305 524.348 305.684 524.426 305.992 524.582 cv
306.297 524.742 306.547 524.957 306.738 525.219 cv
306.93 525.488 307.066 525.797 307.148 526.152 cv
307.227 526.512 307.266 526.891 307.27 527.285 cv
cp
f
316.039 528.121 mo
316.035 528.73 315.969 529.281 315.84 529.77 cv
315.703 530.258 315.508 530.672 315.254 531.016 cv
314.992 531.359 314.676 531.625 314.305 531.805 cv
313.926 531.988 313.496 532.074 313.012 532.078 cv
312.785 532.074 312.578 532.055 312.391 532.012 cv
312.199 531.965 312.012 531.895 311.832 531.797 cv
311.645 531.699 311.465 531.574 311.285 531.422 cv
311.102 531.273 310.906 531.09 310.707 530.875 cv
310.707 531.734 li
310.703 531.781 310.695 531.816 310.676 531.844 cv
310.652 531.879 310.617 531.902 310.574 531.918 cv
310.523 531.934 310.465 531.945 310.398 531.961 cv
310.324 531.969 310.234 531.977 310.129 531.977 cv
310.023 531.977 309.934 531.969 309.859 531.961 cv
309.785 531.945 309.727 531.934 309.68 531.918 cv
309.633 531.902 309.602 531.879 309.586 531.844 cv
309.57 531.816 309.563 531.781 309.563 531.734 cv
309.563 521.285 li
309.563 521.246 309.57 521.211 309.59 521.176 cv
309.605 521.148 309.641 521.121 309.691 521.098 cv
309.738 521.078 309.805 521.062 309.891 521.051 cv
309.977 521.043 310.082 521.039 310.207 521.035 cv
310.336 521.039 310.441 521.043 310.527 521.051 cv
310.609 521.062 310.676 521.078 310.723 521.098 cv
310.77 521.121 310.801 521.148 310.824 521.176 cv
310.84 521.211 310.852 521.246 310.855 521.285 cv
310.855 525.5 li
311.063 525.289 311.266 525.109 311.461 524.961 cv
311.656 524.82 311.848 524.699 312.035 524.605 cv
312.223 524.516 312.41 524.449 312.598 524.406 cv
312.785 524.367 312.984 524.348 313.195 524.344 cv
313.703 524.348 314.137 524.449 314.504 524.648 cv
314.863 524.855 315.16 525.129 315.387 525.465 cv
315.613 525.809 315.777 526.207 315.883 526.668 cv
315.984 527.129 316.035 527.613 316.039 528.121 cv
cp
314.703 528.27 mo
314.699 527.914 314.672 527.566 314.621 527.223 cv
314.563 526.887 314.469 526.586 314.332 526.32 cv
314.195 526.062 314.012 525.852 313.789 525.691 cv
313.563 525.535 313.285 525.457 312.949 525.453 cv
312.777 525.457 312.609 525.48 312.449 525.523 cv
312.285 525.574 312.121 525.652 311.953 525.758 cv
311.785 525.871 311.609 526.012 311.43 526.18 cv
311.246 526.355 311.055 526.57 310.855 526.828 cv
310.855 529.637 li
311.211 530.074 311.551 530.402 311.879 530.629 cv
312.199 530.855 312.539 530.969 312.895 530.969 cv
313.219 530.969 313.496 530.891 313.727 530.734 cv
313.957 530.578 314.145 530.371 314.289 530.113 cv
314.434 529.855 314.539 529.566 314.605 529.242 cv
314.668 528.926 314.699 528.602 314.703 528.27 cv
cp
f
323.98 527.91 mo
323.977 528.113 323.926 528.258 323.828 528.344 cv
323.723 528.43 323.609 528.473 323.48 528.473 cv
318.844 528.473 li
318.84 528.863 318.879 529.215 318.961 529.527 cv
319.035 529.84 319.164 530.109 319.352 530.336 cv
319.531 530.562 319.77 530.734 320.066 530.852 cv
320.355 530.973 320.715 531.035 321.145 531.031 cv
321.477 531.035 321.777 531.008 322.039 530.949 cv
322.301 530.898 322.527 530.836 322.719 530.766 cv
322.91 530.699 323.066 530.637 323.191 530.582 cv
323.313 530.527 323.406 530.5 323.473 530.5 cv
323.508 530.5 323.539 530.512 323.57 530.527 cv
323.594 530.551 323.617 530.578 323.637 530.609 cv
323.648 530.648 323.66 530.699 323.672 530.762 cv
323.676 530.832 323.68 530.91 323.684 531 cv
323.68 531.07 323.676 531.129 323.676 531.176 cv
323.668 531.227 323.664 531.27 323.656 531.309 cv
323.648 531.348 323.633 531.383 323.617 531.414 cv
323.594 531.445 323.57 531.477 323.547 531.504 cv
323.516 531.535 323.434 531.582 323.293 531.645 cv
323.152 531.711 322.969 531.773 322.746 531.836 cv
322.52 531.898 322.262 531.953 321.969 532.004 cv
321.672 532.051 321.355 532.074 321.023 532.078 cv
320.441 532.074 319.934 531.996 319.504 531.836 cv
319.066 531.676 318.699 531.437 318.402 531.117 cv
318.102 530.801 317.879 530.402 317.73 529.922 cv
317.578 529.441 317.504 528.883 317.504 528.246 cv
317.504 527.645 317.582 527.102 317.738 526.617 cv
317.895 526.137 318.117 525.727 318.414 525.387 cv
318.707 525.055 319.066 524.797 319.484 524.613 cv
319.898 524.437 320.363 524.348 320.883 524.344 cv
321.434 524.348 321.906 524.437 322.297 524.609 cv
322.684 524.789 323 525.027 323.254 525.324 cv
323.5 525.629 323.684 525.98 323.805 526.379 cv
323.918 526.785 323.977 527.215 323.98 527.676 cv
cp
322.684 527.527 mo
322.699 526.852 322.547 526.316 322.23 525.93 cv
321.91 525.547 321.438 525.355 320.816 525.352 cv
320.492 525.355 320.211 525.414 319.973 525.531 cv
319.73 525.652 319.531 525.812 319.367 526.008 cv
319.203 526.207 319.078 526.437 318.992 526.699 cv
318.902 526.965 318.852 527.242 318.844 527.527 cv
cp
f
330.066 525.156 mo
330.063 525.273 330.059 525.371 330.059 525.445 cv
330.051 525.527 330.043 525.59 330.027 525.629 cv
330.012 525.676 329.992 525.707 329.969 525.73 cv
329.945 525.754 329.91 525.766 329.871 525.766 cv
329.824 525.766 329.773 525.754 329.719 525.73 cv
329.656 525.707 329.59 525.684 329.512 525.66 cv
329.434 525.637 329.348 525.617 329.258 525.594 cv
329.16 525.578 329.059 525.566 328.953 525.562 cv
328.82 525.566 328.691 525.594 328.57 525.641 cv
328.441 525.695 328.313 525.781 328.176 525.898 cv
328.035 526.023 327.891 526.18 327.742 526.375 cv
327.59 526.574 327.422 526.816 327.242 527.102 cv
327.242 531.734 li
327.238 531.781 327.227 531.816 327.211 531.84 cv
327.188 531.871 327.156 531.895 327.109 531.914 cv
327.063 531.934 326.996 531.945 326.914 531.961 cv
326.828 531.969 326.723 531.977 326.594 531.977 cv
326.469 531.977 326.363 531.969 326.277 531.961 cv
326.191 531.945 326.125 531.934 326.078 531.914 cv
326.027 531.895 325.992 531.871 325.977 531.84 cv
325.957 531.816 325.949 531.781 325.949 531.734 cv
325.949 524.695 li
325.949 524.656 325.957 524.621 325.973 524.59 cv
325.988 524.562 326.02 524.535 326.066 524.512 cv
326.113 524.488 326.172 524.473 326.246 524.465 cv
326.32 524.457 326.418 524.453 326.539 524.453 cv
326.652 524.453 326.746 524.457 326.824 524.465 cv
326.895 524.473 326.953 524.488 327 524.512 cv
327.039 524.535 327.07 524.562 327.09 524.59 cv
327.105 524.621 327.113 524.656 327.117 524.695 cv
327.117 525.719 li
327.305 525.437 327.488 525.211 327.66 525.031 cv
327.828 524.859 327.988 524.719 328.141 524.613 cv
328.289 524.516 328.438 524.445 328.59 524.402 cv
328.734 524.367 328.883 524.348 329.039 524.344 cv
329.102 524.348 329.18 524.352 329.27 524.355 cv
329.352 524.367 329.441 524.383 329.539 524.398 cv
329.633 524.422 329.719 524.445 329.797 524.469 cv
329.871 524.5 329.926 524.523 329.957 524.547 cv
329.988 524.574 330.008 524.602 330.02 524.621 cv
330.027 524.648 330.035 524.676 330.047 524.711 cv
330.051 524.75 330.059 524.805 330.063 524.871 cv
330.063 524.945 330.063 525.039 330.066 525.156 cv
cp
f
341.707 528.137 mo
341.703 528.715 341.629 529.242 341.48 529.723 cv
341.328 530.207 341.102 530.621 340.805 530.969 cv
340.5 531.32 340.125 531.594 339.68 531.785 cv
339.227 531.98 338.703 532.074 338.109 532.078 cv
337.527 532.074 337.023 531.992 336.598 531.82 cv
336.164 531.652 335.805 531.402 335.52 531.07 cv
335.23 530.746 335.02 530.348 334.879 529.875 cv
334.738 529.406 334.668 528.875 334.668 528.277 cv
334.668 527.707 334.742 527.18 334.891 526.695 cv
335.039 526.215 335.262 525.797 335.563 525.445 cv
335.863 525.098 336.238 524.828 336.688 524.633 cv
337.133 524.445 337.656 524.348 338.258 524.344 cv
338.836 524.348 339.34 524.434 339.773 524.602 cv
340.199 524.777 340.559 525.027 340.848 525.352 cv
341.133 525.684 341.348 526.082 341.492 526.551 cv
341.633 527.02 341.703 527.551 341.707 528.137 cv
cp
340.371 528.223 mo
340.367 527.844 340.332 527.484 340.262 527.145 cv
340.188 526.805 340.07 526.508 339.91 526.25 cv
339.746 526 339.527 525.797 339.25 525.645 cv
338.969 525.5 338.621 525.426 338.207 525.422 cv
337.824 525.426 337.492 525.492 337.219 525.625 cv
336.938 525.762 336.711 525.953 336.535 526.199 cv
336.352 526.449 336.219 526.746 336.137 527.082 cv
336.047 527.426 336.004 527.793 336.008 528.191 cv
336.004 528.578 336.039 528.941 336.113 529.277 cv
336.18 529.617 336.297 529.914 336.469 530.168 cv
336.633 530.422 336.855 530.621 337.137 530.77 cv
337.41 530.918 337.758 530.992 338.176 530.992 cv
338.555 530.992 338.883 530.926 339.164 530.789 cv
339.438 530.656 339.668 530.465 339.848 530.219 cv
340.027 529.973 340.156 529.68 340.242 529.34 cv
340.324 529.004 340.367 528.633 340.371 528.223 cv
cp
f
347.461 521.801 mo
347.457 521.902 347.453 521.98 347.445 522.039 cv
347.434 522.102 347.422 522.152 347.41 522.184 cv
347.395 522.223 347.375 522.246 347.359 522.258 cv
347.336 522.273 347.313 522.281 347.281 522.277 cv
347.242 522.281 347.195 522.27 347.141 522.242 cv
347.086 522.223 347.02 522.195 346.941 522.164 cv
346.863 522.137 346.77 522.109 346.664 522.086 cv
346.555 522.062 346.43 522.051 346.293 522.051 cv
346.098 522.051 345.934 522.082 345.801 522.145 cv
345.66 522.207 345.551 522.305 345.473 522.437 cv
345.387 522.57 345.328 522.742 345.293 522.953 cv
345.254 523.164 345.234 523.422 345.238 523.723 cv
345.238 524.492 li
346.809 524.492 li
346.848 524.496 346.883 524.504 346.914 524.52 cv
346.938 524.539 346.965 524.57 346.992 524.613 cv
347.012 524.66 347.031 524.715 347.047 524.781 cv
347.059 524.852 347.063 524.937 347.066 525.031 cv
347.063 525.223 347.039 525.355 346.996 525.437 cv
346.945 525.523 346.883 525.566 346.809 525.562 cv
345.238 525.562 li
345.238 531.734 li
345.234 531.781 345.227 531.816 345.207 531.84 cv
345.184 531.871 345.148 531.895 345.102 531.914 cv
345.051 531.934 344.984 531.945 344.902 531.961 cv
344.816 531.969 344.711 531.977 344.59 531.977 cv
344.461 531.977 344.355 531.969 344.277 531.961 cv
344.191 531.945 344.125 531.934 344.078 531.914 cv
344.023 531.895 343.988 531.871 343.969 531.84 cv
343.945 531.816 343.934 531.781 343.938 531.734 cv
343.938 525.562 li
342.945 525.562 li
342.859 525.566 342.797 525.523 342.758 525.437 cv
342.715 525.355 342.691 525.223 342.695 525.031 cv
342.691 524.937 342.699 524.852 342.711 524.781 cv
342.719 524.715 342.734 524.66 342.758 524.613 cv
342.777 524.57 342.801 524.539 342.836 524.52 cv
342.863 524.504 342.902 524.496 342.945 524.492 cv
343.938 524.492 li
343.938 523.762 li
343.934 523.273 343.98 522.855 344.074 522.5 cv
344.164 522.152 344.305 521.863 344.496 521.637 cv
344.68 521.414 344.914 521.25 345.203 521.141 cv
345.484 521.035 345.82 520.98 346.207 520.977 cv
346.387 520.98 346.563 520.996 346.738 521.031 cv
346.906 521.066 347.039 521.105 347.137 521.141 cv
347.23 521.184 347.297 521.219 347.328 521.246 cv
347.359 521.281 347.383 521.32 347.406 521.367 cv
347.422 521.418 347.438 521.477 347.449 521.547 cv
347.453 521.617 347.457 521.703 347.461 521.801 cv
cp
f
357.648 529.09 mo
357.645 529.566 357.559 529.988 357.387 530.359 cv
357.211 530.73 356.969 531.047 356.66 531.301 cv
356.348 531.562 355.98 531.754 355.563 531.883 cv
355.141 532.012 354.691 532.074 354.207 532.078 cv
353.867 532.074 353.551 532.047 353.266 531.992 cv
352.973 531.934 352.715 531.867 352.488 531.781 cv
352.258 531.703 352.066 531.617 351.918 531.523 cv
351.762 531.437 351.656 531.359 351.598 531.297 cv
351.535 531.234 351.492 531.156 351.465 531.059 cv
351.434 530.965 351.418 530.836 351.422 530.672 cv
351.418 530.559 351.422 530.465 351.438 530.387 cv
351.445 530.312 351.461 530.25 351.484 530.199 cv
351.5 530.156 351.527 530.121 351.563 530.102 cv
351.59 530.086 351.625 530.078 351.672 530.074 cv
351.742 530.078 351.848 530.121 351.98 530.207 cv
352.113 530.297 352.281 530.395 352.492 530.5 cv
352.699 530.605 352.953 530.703 353.25 530.793 cv
353.543 530.887 353.883 530.934 354.27 530.93 cv
354.559 530.934 354.824 530.895 355.07 530.812 cv
355.309 530.738 355.52 530.629 355.695 530.48 cv
355.871 530.34 356.004 530.16 356.102 529.949 cv
356.191 529.742 356.238 529.508 356.242 529.238 cv
356.238 528.957 356.176 528.711 356.047 528.504 cv
355.914 528.305 355.738 528.125 355.527 527.969 cv
355.309 527.816 355.066 527.676 354.797 527.547 cv
354.52 527.422 354.238 527.293 353.957 527.156 cv
353.668 527.023 353.391 526.875 353.121 526.711 cv
352.848 526.551 352.605 526.359 352.391 526.141 cv
352.176 525.922 352 525.668 351.871 525.371 cv
351.734 525.082 351.668 524.727 351.672 524.312 cv
351.668 523.891 351.746 523.516 351.902 523.18 cv
352.055 522.852 352.27 522.574 352.543 522.348 cv
352.816 522.129 353.141 521.957 353.523 521.836 cv
353.898 521.723 354.309 521.664 354.746 521.66 cv
354.969 521.664 355.191 521.684 355.422 521.719 cv
355.648 521.762 355.863 521.812 356.066 521.875 cv
356.262 521.941 356.441 522.016 356.602 522.094 cv
356.754 522.176 356.855 522.242 356.91 522.289 cv
356.957 522.344 356.992 522.383 357.008 522.406 cv
357.023 522.437 357.035 522.473 357.047 522.516 cv
357.055 522.562 357.063 522.617 357.07 522.676 cv
357.074 522.742 357.078 522.82 357.078 522.918 cv
357.078 523.012 357.074 523.098 357.066 523.168 cv
357.059 523.246 357.047 523.305 357.031 523.352 cv
357.016 523.402 356.992 523.441 356.965 523.461 cv
356.934 523.488 356.902 523.5 356.867 523.496 cv
356.809 523.5 356.719 523.461 356.598 523.387 cv
356.473 523.316 356.32 523.234 356.148 523.141 cv
355.969 523.051 355.758 522.969 355.516 522.891 cv
355.27 522.816 355 522.777 354.699 522.777 cv
354.418 522.777 354.172 522.816 353.965 522.891 cv
353.754 522.969 353.582 523.07 353.449 523.191 cv
353.313 523.32 353.211 523.469 353.145 523.637 cv
353.074 523.812 353.039 523.996 353.043 524.187 cv
353.039 524.473 353.105 524.715 353.238 524.914 cv
353.367 525.121 353.539 525.301 353.758 525.453 cv
353.969 525.613 354.215 525.754 354.496 525.883 cv
354.77 526.016 355.051 526.148 355.34 526.277 cv
355.625 526.414 355.91 526.559 356.188 526.715 cv
356.461 526.875 356.707 527.066 356.926 527.281 cv
357.141 527.5 357.313 527.754 357.449 528.047 cv
357.578 528.344 357.645 528.691 357.648 529.09 cv
cp
f
365.496 531.734 mo
365.492 531.781 365.484 531.816 365.469 531.84 cv
365.449 531.871 365.418 531.895 365.371 531.914 cv
365.324 531.934 365.262 531.945 365.188 531.961 cv
365.109 531.969 365.016 531.977 364.91 531.977 cv
364.785 531.977 364.688 531.969 364.617 531.961 cv
364.539 531.945 364.48 531.934 364.438 531.914 cv
364.391 531.895 364.359 531.871 364.348 531.84 cv
364.328 531.816 364.32 531.781 364.324 531.734 cv
364.324 530.805 li
363.918 531.25 363.523 531.574 363.133 531.773 cv
362.742 531.977 362.344 532.074 361.945 532.078 cv
361.473 532.074 361.078 532 360.762 531.844 cv
360.438 531.691 360.18 531.48 359.98 531.207 cv
359.781 530.941 359.637 530.629 359.555 530.27 cv
359.465 529.914 359.422 529.477 359.426 528.965 cv
359.426 524.695 li
359.422 524.656 359.434 524.621 359.453 524.59 cv
359.469 524.562 359.504 524.535 359.559 524.512 cv
359.609 524.488 359.676 524.473 359.762 524.465 cv
359.844 524.457 359.949 524.453 360.078 524.453 cv
360.199 524.453 360.305 524.457 360.391 524.465 cv
360.473 524.473 360.539 524.488 360.59 524.512 cv
360.637 524.535 360.672 524.562 360.695 524.59 cv
360.715 524.621 360.723 524.656 360.727 524.695 cv
360.727 528.793 li
360.723 529.207 360.754 529.535 360.816 529.781 cv
360.875 530.031 360.965 530.242 361.09 530.418 cv
361.207 530.594 361.363 530.73 361.555 530.824 cv
361.738 530.922 361.957 530.969 362.211 530.969 cv
362.531 530.969 362.852 530.855 363.176 530.625 cv
363.496 530.395 363.84 530.059 364.199 529.613 cv
364.199 524.695 li
364.199 524.656 364.207 524.621 364.227 524.59 cv
364.242 524.562 364.277 524.535 364.332 524.512 cv
364.383 524.488 364.449 524.473 364.531 524.465 cv
364.609 524.457 364.715 524.453 364.848 524.453 cv
364.969 524.453 365.074 524.457 365.16 524.465 cv
365.242 524.473 365.305 524.488 365.355 524.512 cv
365.398 524.535 365.434 524.562 365.461 524.59 cv
365.48 524.621 365.492 524.656 365.496 524.695 cv
cp
f
374.352 528.121 mo
374.348 528.73 374.281 529.281 374.152 529.77 cv
374.016 530.258 373.82 530.672 373.566 531.016 cv
373.305 531.359 372.988 531.625 372.617 531.805 cv
372.238 531.988 371.809 532.074 371.324 532.078 cv
371.098 532.074 370.891 532.055 370.703 532.012 cv
370.512 531.965 370.324 531.895 370.145 531.797 cv
369.957 531.699 369.777 531.574 369.598 531.422 cv
369.414 531.273 369.219 531.09 369.02 530.875 cv
369.02 531.734 li
369.016 531.781 369.008 531.816 368.988 531.844 cv
368.965 531.879 368.93 531.902 368.887 531.918 cv
368.836 531.934 368.777 531.945 368.711 531.961 cv
368.637 531.969 368.547 531.977 368.441 531.977 cv
368.336 531.977 368.246 531.969 368.172 531.961 cv
368.098 531.945 368.039 531.934 367.992 531.918 cv
367.945 531.902 367.914 531.879 367.898 531.844 cv
367.883 531.816 367.875 531.781 367.875 531.734 cv
367.875 521.285 li
367.875 521.246 367.883 521.211 367.902 521.176 cv
367.918 521.148 367.953 521.121 368.004 521.098 cv
368.051 521.078 368.117 521.062 368.203 521.051 cv
368.289 521.043 368.395 521.039 368.52 521.035 cv
368.648 521.039 368.754 521.043 368.84 521.051 cv
368.922 521.062 368.988 521.078 369.035 521.098 cv
369.082 521.121 369.113 521.148 369.137 521.176 cv
369.152 521.211 369.164 521.246 369.168 521.285 cv
369.168 525.5 li
369.375 525.289 369.578 525.109 369.773 524.961 cv
369.969 524.82 370.16 524.699 370.348 524.605 cv
370.535 524.516 370.723 524.449 370.91 524.406 cv
371.098 524.367 371.297 524.348 371.508 524.344 cv
372.016 524.348 372.449 524.449 372.816 524.648 cv
373.176 524.855 373.473 525.129 373.699 525.465 cv
373.926 525.809 374.09 526.207 374.195 526.668 cv
374.297 527.129 374.348 527.613 374.352 528.121 cv
cp
373.016 528.27 mo
373.012 527.914 372.984 527.566 372.934 527.223 cv
372.875 526.887 372.781 526.586 372.645 526.32 cv
372.508 526.062 372.324 525.852 372.102 525.691 cv
371.875 525.535 371.598 525.457 371.262 525.453 cv
371.09 525.457 370.922 525.48 370.762 525.523 cv
370.598 525.574 370.434 525.652 370.266 525.758 cv
370.098 525.871 369.922 526.012 369.742 526.18 cv
369.559 526.355 369.367 526.57 369.168 526.828 cv
369.168 529.637 li
369.523 530.074 369.863 530.402 370.191 530.629 cv
370.512 530.855 370.852 530.969 371.207 530.969 cv
371.531 530.969 371.809 530.891 372.039 530.734 cv
372.27 530.578 372.457 530.371 372.602 530.113 cv
372.746 529.855 372.852 529.566 372.918 529.242 cv
372.98 528.926 373.012 528.602 373.016 528.27 cv
cp
f
379.453 527.98 mo
379.449 528.184 379.426 528.324 379.383 528.402 cv
379.332 528.48 379.266 528.52 379.18 528.52 cv
375.91 528.52 li
375.816 528.52 375.746 528.48 375.699 528.398 cv
375.652 528.32 375.629 528.18 375.629 527.98 cv
375.629 527.785 375.652 527.648 375.699 527.566 cv
375.746 527.492 375.816 527.453 375.91 527.449 cv
379.18 527.449 li
379.219 527.453 379.254 527.461 379.293 527.473 cv
379.324 527.492 379.355 527.523 379.379 527.562 cv
379.402 527.609 379.418 527.664 379.434 527.73 cv
379.441 527.801 379.449 527.883 379.453 527.98 cv
cp
f
382.703 531.727 mo
382.699 531.77 382.691 531.805 382.672 531.836 cv
382.648 531.867 382.609 531.895 382.563 531.91 cv
382.508 531.93 382.441 531.941 382.355 531.957 cv
382.27 531.969 382.16 531.977 382.031 531.977 cv
381.902 531.977 381.793 531.969 381.707 531.957 cv
381.613 531.941 381.543 531.93 381.496 531.91 cv
381.441 531.895 381.406 531.867 381.387 531.836 cv
381.363 531.805 381.352 531.77 381.355 531.727 cv
381.355 522.012 li
381.352 521.973 381.363 521.937 381.391 521.902 cv
381.41 521.875 381.449 521.848 381.508 521.828 cv
381.563 521.812 381.637 521.797 381.723 521.781 cv
381.809 521.77 381.91 521.766 382.031 521.762 cv
382.16 521.766 382.27 521.77 382.355 521.781 cv
382.441 521.797 382.508 521.812 382.563 521.828 cv
382.609 521.848 382.648 521.875 382.672 521.902 cv
382.691 521.937 382.699 521.973 382.703 522.012 cv
cp
f
395.688 531.734 mo
395.684 531.781 395.672 531.816 395.656 531.84 cv
395.633 531.871 395.602 531.895 395.555 531.914 cv
395.508 531.934 395.441 531.945 395.359 531.961 cv
395.273 531.969 395.168 531.977 395.047 531.977 cv
394.91 531.977 394.805 531.969 394.723 531.961 cv
394.637 531.945 394.57 531.934 394.523 531.914 cv
394.473 531.895 394.438 531.871 394.418 531.84 cv
394.395 531.816 394.383 531.781 394.387 531.734 cv
394.387 527.457 li
394.383 527.16 394.355 526.887 394.309 526.641 cv
394.254 526.398 394.172 526.187 394.059 526.008 cv
393.941 525.832 393.797 525.695 393.621 525.602 cv
393.441 525.508 393.23 525.461 392.996 525.461 cv
392.695 525.461 392.398 525.578 392.098 525.805 cv
391.797 526.039 391.465 526.375 391.109 526.812 cv
391.109 531.734 li
391.105 531.781 391.098 531.816 391.078 531.84 cv
391.055 531.871 391.02 531.895 390.973 531.914 cv
390.922 531.934 390.855 531.945 390.773 531.961 cv
390.688 531.969 390.582 531.977 390.461 531.977 cv
390.34 531.977 390.238 531.969 390.152 531.961 cv
390.066 531.945 389.996 531.934 389.949 531.914 cv
389.895 531.895 389.863 531.871 389.848 531.84 cv
389.828 531.816 389.816 531.781 389.82 531.734 cv
389.82 527.457 li
389.816 527.16 389.789 526.887 389.734 526.641 cv
389.676 526.398 389.59 526.187 389.477 526.008 cv
389.359 525.832 389.215 525.695 389.043 525.602 cv
388.867 525.508 388.66 525.461 388.418 525.461 cv
388.121 525.461 387.82 525.578 387.52 525.805 cv
387.215 526.039 386.887 526.375 386.535 526.812 cv
386.535 531.734 li
386.531 531.781 386.52 531.816 386.504 531.84 cv
386.48 531.871 386.449 531.895 386.402 531.914 cv
386.355 531.934 386.289 531.945 386.207 531.961 cv
386.121 531.969 386.016 531.977 385.887 531.977 cv
385.762 531.977 385.656 531.969 385.57 531.961 cv
385.484 531.945 385.418 531.934 385.371 531.914 cv
385.32 531.895 385.285 531.871 385.27 531.84 cv
385.25 531.816 385.242 531.781 385.242 531.734 cv
385.242 524.695 li
385.242 524.656 385.25 524.621 385.266 524.59 cv
385.281 524.562 385.313 524.535 385.359 524.512 cv
385.406 524.488 385.465 524.473 385.539 524.465 cv
385.613 524.457 385.711 524.453 385.832 524.453 cv
385.945 524.453 386.039 524.457 386.117 524.465 cv
386.188 524.473 386.246 524.488 386.293 524.512 cv
386.332 524.535 386.363 524.562 386.383 524.59 cv
386.398 524.621 386.406 524.656 386.41 524.695 cv
386.41 525.625 li
386.801 525.184 387.188 524.859 387.563 524.652 cv
387.934 524.449 388.309 524.348 388.691 524.344 cv
388.984 524.348 389.246 524.383 389.48 524.445 cv
389.707 524.516 389.914 524.609 390.094 524.73 cv
390.27 524.855 390.418 525 390.547 525.168 cv
390.668 525.34 390.773 525.531 390.859 525.734 cv
391.09 525.484 391.313 525.266 391.527 525.086 cv
391.734 524.91 391.938 524.77 392.137 524.656 cv
392.332 524.551 392.523 524.469 392.711 524.418 cv
392.895 524.371 393.082 524.348 393.27 524.344 cv
393.723 524.348 394.102 524.426 394.41 524.582 cv
394.715 524.742 394.965 524.957 395.156 525.219 cv
395.348 525.488 395.484 525.797 395.566 526.152 cv
395.645 526.512 395.684 526.891 395.688 527.285 cv
cp
f
403.348 531.742 mo
403.344 531.805 403.324 531.852 403.285 531.883 cv
403.242 531.914 403.184 531.937 403.113 531.953 cv
403.035 531.969 402.93 531.977 402.793 531.977 cv
402.656 531.977 402.547 531.969 402.469 531.953 cv
402.383 531.937 402.324 531.914 402.293 531.883 cv
402.254 531.852 402.238 531.805 402.238 531.742 cv
402.238 531.039 li
401.93 531.367 401.586 531.625 401.207 531.805 cv
400.828 531.988 400.426 532.074 400.008 532.078 cv
399.633 532.074 399.301 532.027 399.004 531.934 cv
398.703 531.836 398.445 531.699 398.234 531.516 cv
398.02 531.336 397.855 531.113 397.742 530.844 cv
397.621 530.582 397.563 530.277 397.566 529.934 cv
397.563 529.539 397.645 529.195 397.809 528.902 cv
397.969 528.613 398.199 528.371 398.504 528.176 cv
398.805 527.984 399.176 527.84 399.617 527.742 cv
400.051 527.648 400.543 527.602 401.094 527.598 cv
402.066 527.598 li
402.066 527.047 li
402.063 526.781 402.035 526.539 401.98 526.328 cv
401.922 526.121 401.828 525.949 401.699 525.809 cv
401.57 525.672 401.402 525.566 401.203 525.496 cv
400.996 525.426 400.746 525.391 400.453 525.391 cv
400.133 525.391 399.848 525.43 399.598 525.504 cv
399.34 525.582 399.121 525.664 398.934 525.754 cv
398.742 525.848 398.582 525.934 398.453 526.004 cv
398.324 526.082 398.227 526.117 398.168 526.117 cv
398.121 526.117 398.086 526.109 398.059 526.086 cv
398.023 526.07 397.996 526.039 397.977 525.992 cv
397.949 525.953 397.934 525.898 397.926 525.832 cv
397.914 525.77 397.906 525.699 397.91 525.617 cv
397.906 525.492 397.918 525.387 397.938 525.309 cv
397.953 525.234 397.996 525.164 398.07 525.094 cv
398.137 525.027 398.258 524.949 398.434 524.855 cv
398.605 524.77 398.805 524.684 399.031 524.605 cv
399.254 524.531 399.5 524.469 399.766 524.418 cv
400.031 524.371 400.297 524.348 400.57 524.344 cv
401.07 524.348 401.5 524.406 401.859 524.516 cv
402.211 524.633 402.5 524.801 402.723 525.02 cv
402.938 525.246 403.098 525.52 403.199 525.844 cv
403.297 526.176 403.344 526.559 403.348 526.992 cv
cp
402.066 528.527 mo
400.961 528.527 li
400.605 528.531 400.297 528.562 400.039 528.617 cv
399.777 528.68 399.563 528.766 399.391 528.883 cv
399.219 529 399.09 529.141 399.012 529.305 cv
398.926 529.469 398.887 529.66 398.891 529.871 cv
398.887 530.242 399.004 530.531 399.238 530.746 cv
399.469 530.965 399.793 531.074 400.211 531.07 cv
400.547 531.074 400.859 530.988 401.152 530.812 cv
401.441 530.645 401.746 530.379 402.066 530.02 cv
cp
f
411.598 525.016 mo
411.598 525.199 411.57 525.332 411.523 525.41 cv
411.469 525.492 411.406 525.531 411.332 525.531 cv
410.324 525.531 li
410.504 525.719 410.633 525.926 410.707 526.152 cv
410.777 526.379 410.813 526.617 410.816 526.859 cv
410.813 527.273 410.746 527.633 410.621 527.941 cv
410.488 528.258 410.305 528.523 410.063 528.734 cv
409.82 528.953 409.531 529.117 409.195 529.23 cv
408.859 529.348 408.488 529.406 408.086 529.402 cv
407.797 529.406 407.523 529.367 407.27 529.289 cv
407.008 529.215 406.809 529.121 406.672 529.004 cv
406.574 529.102 406.5 529.207 406.441 529.324 cv
406.379 529.445 406.348 529.582 406.352 529.738 cv
406.348 529.922 406.434 530.074 406.605 530.195 cv
406.773 530.316 406.996 530.383 407.281 530.391 cv
409.117 530.469 li
409.465 530.484 409.785 530.531 410.082 530.613 cv
410.371 530.703 410.625 530.824 410.84 530.98 cv
411.051 531.141 411.219 531.336 411.34 531.566 cv
411.457 531.801 411.516 532.07 411.52 532.375 cv
411.516 532.695 411.449 533 411.316 533.297 cv
411.18 533.586 410.973 533.844 410.695 534.07 cv
410.414 534.289 410.055 534.465 409.625 534.594 cv
409.188 534.719 408.68 534.781 408.094 534.785 cv
407.523 534.781 407.039 534.734 406.641 534.641 cv
406.242 534.543 405.914 534.41 405.66 534.246 cv
405.402 534.074 405.219 533.875 405.105 533.645 cv
404.988 533.41 404.93 533.16 404.934 532.891 cv
404.93 532.719 404.949 532.551 404.996 532.391 cv
405.035 532.227 405.102 532.074 405.188 531.93 cv
405.273 531.785 405.379 531.648 405.508 531.512 cv
405.633 531.383 405.781 531.25 405.949 531.117 cv
405.691 530.988 405.5 530.824 405.383 530.625 cv
405.258 530.426 405.199 530.211 405.199 529.98 cv
405.199 529.664 405.262 529.379 405.395 529.129 cv
405.52 528.879 405.684 528.656 405.879 528.457 cv
405.715 528.266 405.586 528.047 405.496 527.805 cv
405.398 527.562 405.352 527.27 405.355 526.922 cv
405.352 526.523 405.418 526.164 405.559 525.844 cv
405.691 525.527 405.879 525.258 406.121 525.039 cv
406.359 524.82 406.648 524.652 406.988 524.535 cv
407.32 524.418 407.688 524.359 408.086 524.359 cv
408.297 524.359 408.496 524.371 408.684 524.395 cv
408.867 524.418 409.039 524.453 409.203 524.492 cv
411.332 524.492 li
411.418 524.496 411.484 524.539 411.531 524.621 cv
411.574 524.711 411.598 524.84 411.598 525.016 cv
cp
409.582 526.867 mo
409.582 526.391 409.449 526.02 409.184 525.746 cv
408.918 525.48 408.543 525.344 408.063 525.344 cv
407.809 525.344 407.59 525.387 407.41 525.469 cv
407.223 525.555 407.07 525.668 406.949 525.812 cv
406.824 525.961 406.734 526.129 406.676 526.316 cv
406.613 526.508 406.582 526.707 406.586 526.914 cv
406.582 527.383 406.715 527.75 406.98 528.012 cv
407.242 528.281 407.609 528.414 408.086 528.41 cv
408.34 528.414 408.563 528.375 408.75 528.289 cv
408.938 528.211 409.09 528.098 409.215 527.953 cv
409.336 527.812 409.43 527.648 409.492 527.457 cv
409.551 527.27 409.582 527.07 409.582 526.867 cv
cp
410.23 532.445 mo
410.227 532.141 410.102 531.91 409.859 531.746 cv
409.609 531.586 409.273 531.496 408.852 531.484 cv
407.031 531.422 li
406.863 531.555 406.727 531.68 406.621 531.793 cv
406.512 531.91 406.426 532.02 406.367 532.129 cv
406.301 532.234 406.258 532.34 406.238 532.445 cv
406.211 532.547 406.199 532.652 406.203 532.766 cv
406.199 533.102 406.371 533.359 406.719 533.535 cv
407.059 533.711 407.539 533.797 408.156 533.801 cv
408.543 533.797 408.871 533.762 409.137 533.687 cv
409.402 533.609 409.613 533.508 409.777 533.383 cv
409.934 533.258 410.051 533.113 410.125 532.953 cv
410.191 532.789 410.227 532.621 410.23 532.445 cv
cp
f
419.141 527.91 mo
419.137 528.113 419.086 528.258 418.988 528.344 cv
418.883 528.43 418.77 528.473 418.641 528.473 cv
414.004 528.473 li
414 528.863 414.039 529.215 414.121 529.527 cv
414.195 529.84 414.324 530.109 414.512 530.336 cv
414.691 530.562 414.93 530.734 415.227 530.852 cv
415.516 530.973 415.875 531.035 416.305 531.031 cv
416.637 531.035 416.938 531.008 417.199 530.949 cv
417.461 530.898 417.688 530.836 417.879 530.766 cv
418.07 530.699 418.227 530.637 418.352 530.582 cv
418.473 530.527 418.566 530.5 418.633 530.5 cv
418.668 530.5 418.699 530.512 418.73 530.527 cv
418.754 530.551 418.777 530.578 418.797 530.609 cv
418.809 530.648 418.82 530.699 418.832 530.762 cv
418.836 530.832 418.84 530.91 418.844 531 cv
418.84 531.07 418.836 531.129 418.836 531.176 cv
418.828 531.227 418.824 531.27 418.816 531.309 cv
418.809 531.348 418.793 531.383 418.777 531.414 cv
418.754 531.445 418.73 531.477 418.707 531.504 cv
418.676 531.535 418.594 531.582 418.453 531.645 cv
418.313 531.711 418.129 531.773 417.906 531.836 cv
417.68 531.898 417.422 531.953 417.129 532.004 cv
416.832 532.051 416.516 532.074 416.184 532.078 cv
415.602 532.074 415.094 531.996 414.664 531.836 cv
414.227 531.676 413.859 531.437 413.563 531.117 cv
413.262 530.801 413.039 530.402 412.891 529.922 cv
412.738 529.441 412.664 528.883 412.664 528.246 cv
412.664 527.645 412.742 527.102 412.898 526.617 cv
413.055 526.137 413.277 525.727 413.574 525.387 cv
413.867 525.055 414.227 524.797 414.645 524.613 cv
415.059 524.437 415.523 524.348 416.043 524.344 cv
416.594 524.348 417.066 524.437 417.457 524.609 cv
417.844 524.789 418.16 525.027 418.414 525.324 cv
418.66 525.629 418.844 525.98 418.965 526.379 cv
419.078 526.785 419.137 527.215 419.141 527.676 cv
cp
417.844 527.527 mo
417.859 526.852 417.707 526.316 417.391 525.93 cv
417.07 525.547 416.598 525.355 415.977 525.352 cv
415.652 525.355 415.371 525.414 415.133 525.531 cv
414.891 525.652 414.691 525.812 414.527 526.008 cv
414.363 526.207 414.238 526.437 414.152 526.699 cv
414.063 526.965 414.012 527.242 414.004 527.527 cv
cp
f
425.531 529.816 mo
425.527 530.18 425.461 530.5 425.332 530.781 cv
425.195 531.062 425.004 531.301 424.762 531.492 cv
424.512 531.687 424.223 531.832 423.887 531.93 cv
423.547 532.027 423.172 532.074 422.77 532.078 cv
422.516 532.074 422.277 532.055 422.055 532.02 cv
421.824 531.977 421.621 531.93 421.441 531.871 cv
421.258 531.812 421.105 531.75 420.984 531.684 cv
420.855 531.621 420.766 531.562 420.711 531.508 cv
420.652 531.457 420.609 531.387 420.586 531.289 cv
420.559 531.199 420.547 531.07 420.547 530.906 cv
420.547 530.809 420.551 530.727 420.563 530.656 cv
420.57 530.594 420.582 530.539 420.602 530.492 cv
420.613 530.453 420.637 530.422 420.668 530.402 cv
420.695 530.387 420.727 530.379 420.766 530.375 cv
420.82 530.379 420.906 530.414 421.02 530.48 cv
421.129 530.555 421.266 530.629 421.434 530.711 cv
421.598 530.797 421.793 530.875 422.02 530.941 cv
422.238 531.016 422.496 531.051 422.793 531.047 cv
423.008 531.051 423.207 531.027 423.387 530.977 cv
423.563 530.934 423.715 530.863 423.848 530.77 cv
423.973 530.68 424.074 530.566 424.148 530.422 cv
424.215 530.281 424.25 530.113 424.254 529.918 cv
424.25 529.723 424.199 529.555 424.102 529.418 cv
423.996 529.285 423.863 529.164 423.699 529.059 cv
423.531 528.957 423.344 528.867 423.137 528.781 cv
422.926 528.703 422.711 528.617 422.492 528.527 cv
422.27 528.441 422.051 528.34 421.844 528.227 cv
421.629 528.117 421.441 527.98 421.273 527.816 cv
421.105 527.656 420.969 527.465 420.871 527.238 cv
420.766 527.016 420.715 526.746 420.719 526.43 cv
420.715 526.156 420.77 525.891 420.879 525.637 cv
420.984 525.387 421.145 525.168 421.359 524.973 cv
421.574 524.785 421.844 524.633 422.164 524.516 cv
422.484 524.406 422.855 524.348 423.285 524.344 cv
423.469 524.348 423.656 524.363 423.848 524.391 cv
424.031 524.426 424.203 524.465 424.355 524.508 cv
424.504 524.559 424.633 524.609 424.742 524.66 cv
424.852 524.719 424.934 524.766 424.988 524.805 cv
425.043 524.848 425.078 524.887 425.098 524.914 cv
425.113 524.949 425.125 524.984 425.137 525.02 cv
425.141 525.062 425.148 525.109 425.16 525.164 cv
425.164 525.223 425.168 525.293 425.172 525.375 cv
425.168 525.465 425.164 525.543 425.16 525.605 cv
425.148 525.676 425.137 525.727 425.121 525.766 cv
425.102 525.809 425.078 525.84 425.055 525.855 cv
425.023 525.875 424.996 525.883 424.969 525.883 cv
424.918 525.883 424.852 525.855 424.766 525.797 cv
424.676 525.742 424.559 525.68 424.418 525.613 cv
424.273 525.551 424.109 525.492 423.922 525.43 cv
423.73 525.375 423.512 525.344 423.27 525.344 cv
423.047 525.344 422.855 525.371 422.691 525.418 cv
422.523 525.473 422.387 525.543 422.281 525.629 cv
422.172 525.723 422.09 525.828 422.039 525.953 cv
421.98 526.078 421.953 526.215 421.957 526.359 cv
421.953 526.566 422.004 526.738 422.113 526.871 cv
422.215 527.012 422.352 527.133 422.52 527.238 cv
422.684 527.344 422.875 527.437 423.09 527.52 cv
423.301 527.605 423.516 527.691 423.742 527.777 cv
423.961 527.867 424.18 527.965 424.398 528.074 cv
424.613 528.184 424.809 528.316 424.977 528.473 cv
425.141 528.629 425.273 528.816 425.379 529.035 cv
425.477 529.254 425.527 529.516 425.531 529.816 cv
cp
f
229.012 11.645 mo
229.008 12.484 228.902 13.234 228.695 13.898 cv
228.484 14.562 228.172 15.129 227.762 15.59 cv
227.348 16.055 226.84 16.406 226.23 16.645 cv
225.621 16.887 224.918 17.004 224.121 17.008 cv
223.332 17.004 222.645 16.902 222.059 16.699 cv
221.473 16.496 220.98 16.184 220.59 15.758 cv
220.195 15.336 219.902 14.797 219.707 14.145 cv
219.508 13.492 219.41 12.719 219.414 11.824 cv
219.41 11.004 219.516 10.27 219.727 9.61298 cv
219.938 8.961 220.246 8.40198 220.66 7.94098 cv
221.07 7.48401 221.582 7.133 222.191 6.883 cv
222.797 6.64099 223.504 6.51599 224.313 6.51202 cv
225.074 6.51599 225.75 6.617 226.34 6.82001 cv
226.926 7.02301 227.418 7.34003 227.813 7.76202 cv
228.207 8.18701 228.504 8.71899 228.707 9.36298 cv
228.906 10.008 229.008 10.77 229.012 11.645 cv
cp
226.848 11.754 mo
226.844 11.223 226.805 10.738 226.723 10.301 cv
226.637 9.86298 226.492 9.492 226.297 9.17999 cv
226.094 8.875 225.828 8.633 225.492 8.461 cv
225.156 8.289 224.738 8.203 224.238 8.203 cv
223.73 8.203 223.305 8.30103 222.969 8.492 cv
222.625 8.68402 222.352 8.93701 222.148 9.25403 cv
221.938 9.57397 221.793 9.94501 221.707 10.371 cv
221.621 10.797 221.578 11.25 221.578 11.723 cv
221.578 12.277 221.617 12.773 221.703 13.215 cv
221.781 13.656 221.922 14.035 222.125 14.348 cv
222.32 14.664 222.586 14.902 222.922 15.062 cv
223.254 15.23 223.676 15.312 224.184 15.309 cv
224.688 15.312 225.109 15.219 225.453 15.027 cv
225.789 14.844 226.066 14.586 226.277 14.262 cv
226.484 13.937 226.629 13.562 226.719 13.129 cv
226.801 12.699 226.844 12.238 226.848 11.754 cv
cp
f
237.051 9.56598 mo
237.051 9.59802 237.047 9.62903 237.047 9.65997 cv
237.039 9.69897 237.035 9.73798 237.031 9.78497 cv
237.02 9.83197 237.008 9.883 237 9.93701 cv
236.984 9.99597 236.969 10.062 236.949 10.133 cv
234.848 16.453 li
234.82 16.543 234.785 16.617 234.742 16.668 cv
234.695 16.727 234.621 16.77 234.523 16.797 cv
234.418 16.828 234.281 16.844 234.109 16.859 cv
233.934 16.867 233.703 16.875 233.422 16.875 cv
233.145 16.875 232.918 16.867 232.746 16.855 cv
232.566 16.84 232.43 16.82 232.336 16.789 cv
232.234 16.762 232.164 16.719 232.121 16.66 cv
232.074 16.609 232.039 16.539 232.016 16.453 cv
229.914 10.133 li
229.883 10.031 229.855 9.93701 229.84 9.85199 cv
229.816 9.77002 229.809 9.70697 229.809 9.66803 cv
229.805 9.633 229.801 9.60199 229.805 9.56598 cv
229.801 9.52002 229.816 9.47302 229.848 9.42999 cv
229.875 9.39502 229.926 9.36298 230 9.33197 cv
230.07 9.30902 230.172 9.289 230.301 9.27698 cv
230.43 9.27002 230.59 9.26599 230.785 9.26202 cv
230.996 9.26599 231.168 9.27002 231.301 9.28101 cv
231.43 9.297 231.531 9.31598 231.609 9.336 cv
231.68 9.36298 231.734 9.39801 231.77 9.43701 cv
231.797 9.48401 231.824 9.53497 231.848 9.59802 cv
233.438 14.73 li
233.484 14.926 li
233.531 14.73 li
235.098 9.59802 li
235.113 9.53497 235.141 9.48401 235.176 9.43701 cv
235.207 9.39801 235.258 9.36298 235.336 9.336 cv
235.406 9.31598 235.504 9.297 235.629 9.28101 cv
235.746 9.27002 235.906 9.26599 236.109 9.26202 cv
236.297 9.26599 236.457 9.27002 236.582 9.27698 cv
236.707 9.289 236.801 9.30902 236.871 9.33197 cv
236.934 9.36298 236.98 9.39502 237.012 9.42999 cv
237.035 9.47302 237.051 9.52002 237.051 9.56598 cv
cp
f
244.469 12.863 mo
244.469 13.109 244.414 13.289 244.309 13.398 cv
244.199 13.516 244.051 13.57 243.863 13.57 cv
239.613 13.57 li
239.609 13.867 239.645 14.141 239.719 14.383 cv
239.785 14.629 239.898 14.832 240.055 15 cv
240.207 15.172 240.406 15.301 240.648 15.387 cv
240.891 15.477 241.18 15.523 241.523 15.52 cv
241.863 15.523 242.168 15.496 242.43 15.445 cv
242.691 15.398 242.918 15.344 243.109 15.281 cv
243.297 15.223 243.453 15.168 243.582 15.117 cv
243.703 15.07 243.805 15.047 243.887 15.043 cv
243.93 15.047 243.969 15.055 244.004 15.07 cv
244.031 15.09 244.059 15.125 244.082 15.168 cv
244.105 15.219 244.121 15.285 244.129 15.367 cv
244.137 15.457 244.141 15.562 244.141 15.691 cv
244.141 15.809 244.137 15.91 244.133 15.988 cv
244.125 16.074 244.117 16.141 244.109 16.195 cv
244.098 16.254 244.082 16.305 244.059 16.34 cv
244.035 16.383 244.008 16.418 243.977 16.453 cv
243.941 16.492 243.848 16.543 243.699 16.602 cv
243.547 16.668 243.355 16.73 243.121 16.785 cv
242.887 16.848 242.617 16.895 242.313 16.941 cv
242.008 16.98 241.684 17.004 241.344 17.008 cv
240.719 17.004 240.172 16.93 239.707 16.773 cv
239.238 16.621 238.852 16.383 238.539 16.062 cv
238.227 15.746 237.992 15.344 237.836 14.855 cv
237.68 14.371 237.602 13.801 237.605 13.148 cv
237.602 12.527 237.684 11.969 237.848 11.469 cv
238.012 10.973 238.246 10.551 238.555 10.199 cv
238.859 9.85498 239.234 9.59003 239.676 9.40198 cv
240.117 9.22302 240.613 9.12903 241.172 9.12903 cv
241.75 9.12903 242.25 9.21503 242.668 9.38702 cv
243.082 9.55902 243.422 9.80103 243.691 10.105 cv
243.957 10.414 244.156 10.773 244.281 11.191 cv
244.406 11.609 244.469 12.062 244.469 12.551 cv
cp
242.559 12.301 mo
242.574 11.75 242.461 11.316 242.223 11 cv
241.984 10.684 241.617 10.523 241.125 10.523 cv
240.867 10.523 240.648 10.57 240.469 10.664 cv
240.281 10.758 240.129 10.887 240.008 11.043 cv
239.883 11.207 239.789 11.395 239.727 11.609 cv
239.66 11.828 239.621 12.059 239.613 12.301 cv
cp
f
250.566 10.227 mo
250.566 10.418 250.559 10.57 250.551 10.687 cv
250.535 10.809 250.52 10.902 250.504 10.969 cv
250.48 11.039 250.453 11.086 250.422 11.109 cv
250.383 11.137 250.34 11.152 250.293 11.148 cv
250.246 11.152 250.199 11.141 250.152 11.121 cv
250.098 11.105 250.039 11.086 249.977 11.062 cv
249.906 11.043 249.836 11.023 249.762 11.004 cv
249.68 10.988 249.594 10.98 249.504 10.977 cv
249.391 10.98 249.281 11.004 249.172 11.043 cv
249.063 11.09 248.949 11.16 248.832 11.254 cv
248.715 11.352 248.59 11.477 248.465 11.629 cv
248.332 11.789 248.195 11.98 248.055 12.207 cv
248.055 16.562 li
248.051 16.617 248.035 16.66 248.008 16.699 cv
247.973 16.738 247.922 16.773 247.848 16.797 cv
247.77 16.824 247.668 16.84 247.543 16.855 cv
247.418 16.867 247.258 16.875 247.066 16.875 cv
246.871 16.875 246.711 16.867 246.59 16.855 cv
246.461 16.84 246.363 16.824 246.289 16.797 cv
246.211 16.773 246.156 16.738 246.129 16.699 cv
246.094 16.66 246.078 16.617 246.082 16.562 cv
246.082 9.57397 li
246.078 9.52301 246.09 9.47998 246.121 9.43701 cv
246.145 9.40198 246.191 9.367 246.262 9.34003 cv
246.324 9.31598 246.414 9.297 246.523 9.28101 cv
246.629 9.27002 246.762 9.26599 246.926 9.26202 cv
247.09 9.26599 247.227 9.27002 247.34 9.28101 cv
247.449 9.297 247.535 9.31598 247.598 9.34003 cv
247.652 9.367 247.695 9.40198 247.727 9.43701 cv
247.75 9.47998 247.766 9.52301 247.766 9.57397 cv
247.766 10.445 li
247.945 10.187 248.117 9.97302 248.281 9.80103 cv
248.441 9.633 248.594 9.49597 248.742 9.39502 cv
248.887 9.297 249.031 9.22699 249.18 9.18701 cv
249.324 9.14801 249.473 9.12903 249.621 9.12903 cv
249.688 9.12903 249.762 9.133 249.84 9.14099 cv
249.918 9.14801 249.996 9.164 250.082 9.17999 cv
250.16 9.203 250.234 9.22302 250.301 9.242 cv
250.359 9.27002 250.406 9.29303 250.438 9.31598 cv
250.465 9.34399 250.484 9.375 250.5 9.40198 cv
250.512 9.43701 250.523 9.47998 250.535 9.53101 cv
250.543 9.59003 250.551 9.672 250.559 9.78101 cv
250.563 9.89502 250.566 10.043 250.566 10.227 cv
cp
f
257.344 16.586 mo
257.344 16.664 257.316 16.719 257.266 16.758 cv
257.211 16.801 257.129 16.828 257.02 16.848 cv
256.906 16.863 256.742 16.875 256.523 16.875 cv
256.289 16.875 256.117 16.863 256.008 16.848 cv
255.898 16.828 255.82 16.801 255.781 16.758 cv
255.734 16.719 255.715 16.664 255.715 16.586 cv
255.715 16.027 li
255.426 16.34 255.098 16.582 254.73 16.75 cv
254.363 16.922 253.953 17.004 253.508 17.008 cv
253.133 17.004 252.793 16.957 252.484 16.863 cv
252.172 16.77 251.902 16.629 251.68 16.434 cv
251.449 16.246 251.273 16.008 251.148 15.727 cv
251.02 15.445 250.957 15.117 250.961 14.738 cv
250.957 14.332 251.035 13.977 251.199 13.676 cv
251.355 13.379 251.594 13.133 251.914 12.934 cv
252.227 12.738 252.621 12.594 253.09 12.496 cv
253.559 12.406 254.105 12.359 254.73 12.355 cv
255.41 12.355 li
255.41 11.934 li
255.41 11.719 255.387 11.527 255.344 11.359 cv
255.297 11.195 255.223 11.055 255.125 10.945 cv
255.02 10.836 254.887 10.758 254.719 10.703 cv
254.547 10.656 254.336 10.629 254.086 10.625 cv
253.758 10.629 253.465 10.664 253.207 10.734 cv
252.949 10.809 252.719 10.891 252.52 10.977 cv
252.32 11.066 252.156 11.148 252.023 11.219 cv
251.891 11.297 251.781 11.332 251.699 11.328 cv
251.641 11.332 251.59 11.312 251.547 11.273 cv
251.5 11.238 251.465 11.187 251.438 11.117 cv
251.406 11.051 251.383 10.969 251.371 10.867 cv
251.352 10.773 251.344 10.664 251.348 10.539 cv
251.344 10.383 251.355 10.254 251.387 10.156 cv
251.41 10.066 251.461 9.97998 251.535 9.90198 cv
251.605 9.828 251.734 9.74597 251.918 9.65198 cv
252.098 9.56201 252.309 9.47699 252.559 9.39502 cv
252.801 9.32001 253.07 9.258 253.363 9.203 cv
253.648 9.15601 253.945 9.12903 254.258 9.12903 cv
254.805 9.12903 255.273 9.18402 255.664 9.289 cv
256.051 9.39801 256.371 9.56201 256.625 9.78497 cv
256.871 10.008 257.055 10.293 257.172 10.641 cv
257.285 10.992 257.344 11.41 257.344 11.887 cv
cp
255.41 13.594 mo
254.66 13.594 li
254.34 13.594 254.066 13.617 253.844 13.664 cv
253.617 13.711 253.434 13.781 253.297 13.875 cv
253.152 13.969 253.051 14.082 252.988 14.215 cv
252.922 14.348 252.891 14.504 252.891 14.676 cv
252.891 14.973 252.98 15.199 253.168 15.363 cv
253.348 15.531 253.605 15.617 253.938 15.613 cv
254.215 15.617 254.469 15.547 254.703 15.402 cv
254.93 15.266 255.168 15.059 255.41 14.785 cv
cp
f
261.289 16.562 mo
261.285 16.617 261.27 16.66 261.242 16.699 cv
261.207 16.738 261.156 16.773 261.082 16.797 cv
261.004 16.824 260.902 16.84 260.777 16.855 cv
260.652 16.867 260.492 16.875 260.301 16.875 cv
260.105 16.875 259.945 16.867 259.824 16.855 cv
259.695 16.84 259.598 16.824 259.523 16.797 cv
259.445 16.773 259.391 16.738 259.363 16.699 cv
259.328 16.66 259.313 16.617 259.316 16.562 cv
259.316 6.26202 li
259.313 6.21503 259.328 6.16803 259.363 6.12097 cv
259.391 6.08197 259.445 6.047 259.523 6.01599 cv
259.598 5.992 259.695 5.96899 259.824 5.94897 cv
259.945 5.93701 260.105 5.92999 260.301 5.92603 cv
260.492 5.92999 260.652 5.93701 260.777 5.94897 cv
260.902 5.96899 261.004 5.992 261.082 6.01599 cv
261.156 6.047 261.207 6.08197 261.242 6.12097 cv
261.27 6.16803 261.285 6.21503 261.289 6.26202 cv
cp
f
265.234 16.562 mo
265.23 16.617 265.215 16.66 265.188 16.699 cv
265.152 16.738 265.102 16.773 265.027 16.797 cv
264.949 16.824 264.848 16.84 264.723 16.855 cv
264.598 16.867 264.438 16.875 264.246 16.875 cv
264.051 16.875 263.891 16.867 263.77 16.855 cv
263.641 16.84 263.543 16.824 263.469 16.797 cv
263.391 16.773 263.336 16.738 263.309 16.699 cv
263.273 16.66 263.258 16.617 263.262 16.562 cv
263.262 6.26202 li
263.258 6.21503 263.273 6.16803 263.309 6.12097 cv
263.336 6.08197 263.391 6.047 263.469 6.01599 cv
263.543 5.992 263.641 5.96899 263.77 5.94897 cv
263.891 5.93701 264.051 5.92999 264.246 5.92603 cv
264.438 5.92999 264.598 5.93701 264.723 5.94897 cv
264.848 5.96899 264.949 5.992 265.027 6.01599 cv
265.102 6.047 265.152 6.08197 265.188 6.12097 cv
265.215 6.16803 265.23 6.21503 265.234 6.26202 cv
cp
f
278.406 16.562 mo
278.406 16.625 278.395 16.672 278.371 16.707 cv
278.348 16.75 278.297 16.781 278.223 16.805 cv
278.141 16.828 278.027 16.844 277.879 16.859 cv
277.727 16.867 277.52 16.875 277.262 16.875 cv
277.039 16.875 276.863 16.867 276.734 16.859 cv
276.602 16.844 276.5 16.828 276.426 16.801 cv
276.348 16.773 276.293 16.738 276.266 16.691 cv
276.23 16.652 276.203 16.598 276.188 16.531 cv
275.281 14.266 li
275.168 14.016 275.059 13.789 274.957 13.586 cv
274.848 13.391 274.734 13.223 274.609 13.09 cv
274.48 12.957 274.332 12.855 274.168 12.785 cv
274 12.719 273.805 12.687 273.586 12.684 cv
272.945 12.684 li
272.945 16.547 li
272.945 16.602 272.926 16.648 272.895 16.687 cv
272.855 16.73 272.801 16.766 272.727 16.789 cv
272.645 16.816 272.539 16.836 272.414 16.852 cv
272.281 16.867 272.113 16.875 271.91 16.875 cv
271.707 16.875 271.543 16.867 271.414 16.852 cv
271.277 16.836 271.172 16.816 271.098 16.789 cv
271.016 16.766 270.961 16.73 270.934 16.687 cv
270.898 16.648 270.883 16.602 270.887 16.547 cv
270.887 7.34399 li
270.883 7.117 270.941 6.953 271.063 6.84802 cv
271.176 6.75 271.32 6.69897 271.496 6.69501 cv
274.121 6.69501 li
274.383 6.69897 274.602 6.703 274.777 6.711 cv
274.945 6.72302 275.102 6.73401 275.246 6.75 cv
275.652 6.80902 276.02 6.90997 276.348 7.047 cv
276.672 7.19098 276.949 7.375 277.18 7.59802 cv
277.402 7.828 277.574 8.09802 277.699 8.40601 cv
277.816 8.71899 277.879 9.07397 277.879 9.47302 cv
277.879 9.81598 277.836 10.125 277.75 10.402 cv
277.664 10.684 277.535 10.934 277.371 11.152 cv
277.199 11.375 276.992 11.566 276.75 11.723 cv
276.5 11.887 276.223 12.016 275.914 12.113 cv
276.063 12.187 276.203 12.277 276.34 12.379 cv
276.469 12.488 276.594 12.613 276.715 12.762 cv
276.832 12.91 276.945 13.082 277.051 13.27 cv
277.152 13.465 277.254 13.68 277.355 13.914 cv
278.207 15.91 li
278.285 16.113 278.336 16.258 278.363 16.348 cv
278.391 16.441 278.406 16.516 278.406 16.562 cv
cp
275.75 9.68402 mo
275.746 9.35498 275.672 9.07397 275.523 8.84003 cv
275.371 8.61298 275.121 8.44897 274.777 8.35498 cv
274.672 8.33197 274.555 8.31201 274.422 8.29303 cv
274.289 8.28101 274.105 8.27301 273.871 8.27002 cv
272.945 8.27002 li
272.945 11.141 li
273.996 11.141 li
274.285 11.145 274.543 11.109 274.762 11.035 cv
274.98 10.969 275.16 10.871 275.309 10.738 cv
275.453 10.613 275.566 10.461 275.641 10.281 cv
275.711 10.109 275.746 9.90997 275.75 9.68402 cv
cp
f
286.426 16.562 mo
286.422 16.617 286.41 16.66 286.387 16.699 cv
286.359 16.738 286.313 16.773 286.25 16.797 cv
286.18 16.824 286.094 16.84 285.988 16.855 cv
285.879 16.867 285.746 16.875 285.586 16.875 cv
285.414 16.875 285.273 16.867 285.168 16.855 cv
285.059 16.84 284.973 16.824 284.914 16.797 cv
284.848 16.773 284.805 16.738 284.781 16.699 cv
284.754 16.66 284.742 16.617 284.742 16.562 cv
284.742 15.754 li
284.352 16.176 283.957 16.488 283.563 16.695 cv
283.16 16.902 282.746 17.004 282.32 17.008 cv
281.84 17.004 281.438 16.93 281.109 16.773 cv
280.781 16.621 280.516 16.406 280.32 16.133 cv
280.117 15.863 279.977 15.547 279.891 15.187 cv
279.805 14.832 279.762 14.387 279.762 13.852 cv
279.762 9.57397 li
279.762 9.52301 279.773 9.47998 279.805 9.43701 cv
279.828 9.40198 279.883 9.367 279.961 9.34003 cv
280.035 9.31598 280.137 9.297 280.266 9.28101 cv
280.391 9.27002 280.547 9.26599 280.738 9.26202 cv
280.93 9.26599 281.09 9.27002 281.215 9.28101 cv
281.34 9.297 281.441 9.31598 281.52 9.34003 cv
281.594 9.367 281.645 9.40198 281.68 9.43701 cv
281.707 9.47998 281.723 9.52301 281.727 9.57397 cv
281.727 13.523 li
281.723 13.891 281.746 14.172 281.797 14.363 cv
281.84 14.559 281.914 14.723 282.012 14.859 cv
282.105 15 282.227 15.109 282.379 15.18 cv
282.523 15.258 282.699 15.293 282.902 15.293 cv
283.152 15.293 283.402 15.203 283.656 15.02 cv
283.906 14.84 284.176 14.574 284.469 14.219 cv
284.469 9.57397 li
284.465 9.52301 284.48 9.47998 284.512 9.43701 cv
284.539 9.40198 284.59 9.367 284.668 9.34003 cv
284.738 9.31598 284.84 9.297 284.969 9.28101 cv
285.09 9.27002 285.25 9.26599 285.445 9.26202 cv
285.637 9.26599 285.793 9.27002 285.922 9.28101 cv
286.047 9.297 286.148 9.31598 286.223 9.34003 cv
286.293 9.367 286.344 9.40198 286.379 9.43701 cv
286.406 9.47998 286.422 9.52301 286.426 9.57397 cv
cp
f
295.02 16.562 mo
295.016 16.617 295 16.66 294.973 16.699 cv
294.938 16.738 294.887 16.773 294.816 16.797 cv
294.742 16.824 294.641 16.84 294.512 16.855 cv
294.383 16.867 294.227 16.875 294.039 16.875 cv
293.844 16.875 293.684 16.867 293.559 16.855 cv
293.43 16.84 293.328 16.824 293.258 16.797 cv
293.184 16.773 293.133 16.738 293.102 16.699 cv
293.07 16.66 293.055 16.617 293.055 16.562 cv
293.055 12.574 li
293.055 12.238 293.027 11.973 292.98 11.777 cv
292.926 11.586 292.855 11.422 292.762 11.281 cv
292.668 11.145 292.547 11.035 292.398 10.957 cv
292.25 10.883 292.074 10.848 291.879 10.844 cv
291.625 10.848 291.371 10.937 291.117 11.121 cv
290.859 11.305 290.594 11.57 290.32 11.918 cv
290.32 16.562 li
290.316 16.617 290.301 16.66 290.273 16.699 cv
290.238 16.738 290.188 16.773 290.113 16.797 cv
290.035 16.824 289.934 16.84 289.809 16.855 cv
289.684 16.867 289.523 16.875 289.332 16.875 cv
289.137 16.875 288.977 16.867 288.855 16.855 cv
288.727 16.84 288.629 16.824 288.555 16.797 cv
288.477 16.773 288.422 16.738 288.395 16.699 cv
288.359 16.66 288.344 16.617 288.348 16.562 cv
288.348 9.57397 li
288.344 9.52301 288.355 9.47998 288.387 9.43701 cv
288.41 9.40198 288.457 9.367 288.527 9.34003 cv
288.59 9.31598 288.68 9.297 288.789 9.28101 cv
288.895 9.27002 289.027 9.26599 289.191 9.26202 cv
289.355 9.26599 289.492 9.27002 289.605 9.28101 cv
289.715 9.297 289.801 9.31598 289.863 9.34003 cv
289.918 9.367 289.961 9.40198 289.992 9.43701 cv
290.016 9.47998 290.031 9.52301 290.031 9.57397 cv
290.031 10.383 li
290.414 9.96503 290.805 9.65198 291.207 9.44098 cv
291.605 9.23401 292.023 9.12903 292.457 9.12903 cv
292.934 9.12903 293.332 9.20697 293.66 9.36298 cv
293.98 9.52002 294.246 9.73401 294.449 10.004 cv
294.652 10.273 294.797 10.59 294.887 10.949 cv
294.973 11.312 295.016 11.742 295.02 12.246 cv
cp
f
300.887 15.871 mo
300.887 16.105 300.871 16.281 300.844 16.402 cv
300.813 16.527 300.773 16.613 300.73 16.66 cv
300.68 16.711 300.613 16.754 300.523 16.793 cv
300.43 16.832 300.32 16.863 300.203 16.895 cv
300.078 16.918 299.945 16.941 299.801 16.961 cv
299.656 16.973 299.512 16.98 299.367 16.984 cv
298.973 16.98 298.633 16.93 298.348 16.836 cv
298.059 16.734 297.82 16.586 297.637 16.379 cv
297.445 16.176 297.309 15.918 297.223 15.602 cv
297.133 15.289 297.09 14.918 297.09 14.488 cv
297.09 10.906 li
296.25 10.906 li
296.148 10.91 296.074 10.848 296.023 10.723 cv
295.969 10.602 295.941 10.398 295.945 10.109 cv
295.941 9.961 295.949 9.83197 295.965 9.72699 cv
295.977 9.62097 295.996 9.539 296.023 9.47699 cv
296.047 9.41803 296.078 9.375 296.121 9.34802 cv
296.156 9.32397 296.203 9.31201 296.258 9.30902 cv
297.09 9.30902 li
297.09 7.75 li
297.09 7.703 297.102 7.65601 297.133 7.60901 cv
297.156 7.57001 297.211 7.53497 297.289 7.50403 cv
297.363 7.47998 297.465 7.45697 297.594 7.44098 cv
297.719 7.42999 297.875 7.42603 298.066 7.422 cv
298.258 7.42603 298.418 7.42999 298.551 7.44098 cv
298.676 7.45697 298.777 7.47998 298.852 7.50403 cv
298.922 7.53497 298.973 7.57001 299.008 7.60901 cv
299.035 7.65601 299.051 7.703 299.055 7.75 cv
299.055 9.30902 li
300.574 9.30902 li
300.625 9.31201 300.672 9.32397 300.711 9.34802 cv
300.75 9.375 300.781 9.41803 300.809 9.47699 cv
300.832 9.539 300.852 9.62097 300.867 9.72699 cv
300.879 9.83197 300.887 9.961 300.887 10.109 cv
300.887 10.398 300.859 10.602 300.809 10.723 cv
300.754 10.848 300.68 10.91 300.582 10.906 cv
299.055 10.906 li
299.055 14.187 li
299.051 14.574 299.113 14.859 299.234 15.047 cv
299.352 15.238 299.566 15.336 299.879 15.332 cv
299.98 15.336 300.074 15.324 300.16 15.305 cv
300.242 15.289 300.316 15.27 300.383 15.242 cv
300.445 15.223 300.5 15.203 300.547 15.18 cv
300.59 15.164 300.629 15.152 300.668 15.152 cv
300.695 15.152 300.727 15.164 300.758 15.18 cv
300.785 15.203 300.805 15.238 300.824 15.289 cv
300.836 15.348 300.852 15.422 300.867 15.512 cv
300.879 15.609 300.887 15.73 300.887 15.871 cv
cp
f
304.293 16.562 mo
304.289 16.617 304.273 16.66 304.246 16.699 cv
304.211 16.738 304.16 16.773 304.086 16.797 cv
304.008 16.824 303.906 16.84 303.781 16.855 cv
303.656 16.867 303.496 16.875 303.305 16.875 cv
303.109 16.875 302.949 16.867 302.828 16.855 cv
302.699 16.84 302.602 16.824 302.527 16.797 cv
302.449 16.773 302.395 16.738 302.367 16.699 cv
302.332 16.66 302.316 16.617 302.32 16.562 cv
302.32 9.59003 li
302.316 9.54303 302.332 9.49597 302.367 9.453 cv
302.395 9.41803 302.449 9.383 302.527 9.35199 cv
302.602 9.32397 302.699 9.30499 302.828 9.28497 cv
302.949 9.27301 303.109 9.26599 303.305 9.26202 cv
303.496 9.26599 303.656 9.27301 303.781 9.28497 cv
303.906 9.30499 304.008 9.32397 304.086 9.35199 cv
304.16 9.383 304.211 9.41803 304.246 9.453 cv
304.273 9.49597 304.289 9.54303 304.293 9.59003 cv
cp
304.441 7.211 mo
304.438 7.60901 304.355 7.883 304.199 8.03497 cv
304.035 8.18701 303.734 8.26202 303.297 8.26202 cv
302.852 8.26202 302.555 8.19098 302.402 8.04303 cv
302.246 7.89801 302.168 7.633 302.172 7.25 cv
302.168 6.85498 302.25 6.58197 302.41 6.42603 cv
302.566 6.27301 302.867 6.19501 303.313 6.19098 cv
303.75 6.19501 304.047 6.27002 304.207 6.414 cv
304.359 6.56598 304.438 6.83197 304.441 7.211 cv
cp
f
317.379 16.562 mo
317.375 16.617 317.359 16.66 317.332 16.699 cv
317.297 16.738 317.246 16.773 317.176 16.797 cv
317.102 16.824 317 16.84 316.875 16.855 cv
316.746 16.867 316.59 16.875 316.398 16.875 cv
316.199 16.875 316.035 16.867 315.914 16.855 cv
315.785 16.84 315.688 16.824 315.613 16.797 cv
315.535 16.773 315.48 16.738 315.453 16.699 cv
315.422 16.66 315.406 16.617 315.41 16.562 cv
315.41 12.418 li
315.406 12.187 315.387 11.973 315.344 11.777 cv
315.297 11.586 315.227 11.422 315.141 11.281 cv
315.047 11.145 314.934 11.035 314.797 10.957 cv
314.656 10.883 314.492 10.848 314.301 10.844 cv
314.066 10.848 313.828 10.937 313.586 11.121 cv
313.344 11.305 313.082 11.57 312.805 11.918 cv
312.805 16.562 li
312.801 16.617 312.785 16.66 312.758 16.699 cv
312.723 16.738 312.668 16.773 312.598 16.797 cv
312.52 16.824 312.418 16.84 312.293 16.855 cv
312.164 16.867 312.008 16.875 311.824 16.875 cv
311.629 16.875 311.473 16.867 311.348 16.855 cv
311.223 16.84 311.121 16.824 311.047 16.797 cv
310.969 16.773 310.914 16.738 310.887 16.699 cv
310.852 16.66 310.836 16.617 310.84 16.562 cv
310.84 12.418 li
310.836 12.187 310.813 11.973 310.77 11.777 cv
310.723 11.586 310.656 11.422 310.57 11.281 cv
310.477 11.145 310.363 11.035 310.227 10.957 cv
310.082 10.883 309.918 10.848 309.734 10.844 cv
309.492 10.848 309.25 10.937 309.012 11.121 cv
308.77 11.305 308.512 11.57 308.238 11.918 cv
308.238 16.562 li
308.234 16.617 308.219 16.66 308.191 16.699 cv
308.156 16.738 308.105 16.773 308.031 16.797 cv
307.953 16.824 307.852 16.84 307.727 16.855 cv
307.602 16.867 307.441 16.875 307.25 16.875 cv
307.055 16.875 306.895 16.867 306.773 16.855 cv
306.645 16.84 306.547 16.824 306.473 16.797 cv
306.395 16.773 306.34 16.738 306.313 16.699 cv
306.277 16.66 306.262 16.617 306.266 16.562 cv
306.266 9.57397 li
306.262 9.52301 306.273 9.47998 306.305 9.43701 cv
306.328 9.40198 306.375 9.367 306.445 9.34003 cv
306.508 9.31598 306.598 9.297 306.707 9.28101 cv
306.813 9.27002 306.945 9.26599 307.109 9.26202 cv
307.273 9.26599 307.41 9.27002 307.523 9.28101 cv
307.633 9.297 307.719 9.31598 307.781 9.34003 cv
307.836 9.367 307.879 9.40198 307.91 9.43701 cv
307.934 9.47998 307.949 9.52301 307.949 9.57397 cv
307.949 10.383 li
308.332 9.96503 308.715 9.65198 309.102 9.44098 cv
309.484 9.23401 309.887 9.12903 310.305 9.12903 cv
310.59 9.12903 310.848 9.15997 311.078 9.21899 cv
311.309 9.28101 311.512 9.367 311.695 9.47699 cv
311.871 9.59003 312.027 9.72699 312.16 9.883 cv
312.289 10.043 312.398 10.215 312.492 10.406 cv
312.695 10.184 312.902 9.992 313.105 9.828 cv
313.305 9.66803 313.5 9.53497 313.699 9.42999 cv
313.895 9.33197 314.094 9.258 314.289 9.203 cv
314.484 9.15601 314.684 9.12903 314.887 9.12903 cv
315.352 9.12903 315.742 9.20697 316.063 9.36298 cv
316.379 9.52002 316.637 9.73401 316.832 10.004 cv
317.027 10.273 317.168 10.59 317.254 10.949 cv
317.336 11.312 317.375 11.691 317.379 12.09 cv
cp
f
325.758 12.863 mo
325.758 13.109 325.703 13.289 325.598 13.398 cv
325.488 13.516 325.34 13.57 325.152 13.57 cv
320.902 13.57 li
320.898 13.867 320.934 14.141 321.008 14.383 cv
321.074 14.629 321.188 14.832 321.344 15 cv
321.496 15.172 321.695 15.301 321.938 15.387 cv
322.18 15.477 322.469 15.523 322.813 15.52 cv
323.152 15.523 323.457 15.496 323.719 15.445 cv
323.98 15.398 324.207 15.344 324.398 15.281 cv
324.586 15.223 324.742 15.168 324.871 15.117 cv
324.992 15.07 325.094 15.047 325.176 15.043 cv
325.219 15.047 325.258 15.055 325.293 15.07 cv
325.32 15.09 325.348 15.125 325.371 15.168 cv
325.395 15.219 325.41 15.285 325.418 15.367 cv
325.426 15.457 325.43 15.562 325.43 15.691 cv
325.43 15.809 325.426 15.91 325.422 15.988 cv
325.414 16.074 325.406 16.141 325.398 16.195 cv
325.387 16.254 325.371 16.305 325.348 16.34 cv
325.324 16.383 325.297 16.418 325.266 16.453 cv
325.23 16.492 325.137 16.543 324.988 16.602 cv
324.836 16.668 324.645 16.73 324.41 16.785 cv
324.176 16.848 323.906 16.895 323.602 16.941 cv
323.297 16.98 322.973 17.004 322.633 17.008 cv
322.008 17.004 321.461 16.93 320.996 16.773 cv
320.527 16.621 320.141 16.383 319.828 16.062 cv
319.516 15.746 319.281 15.344 319.125 14.855 cv
318.969 14.371 318.891 13.801 318.895 13.148 cv
318.891 12.527 318.973 11.969 319.137 11.469 cv
319.301 10.973 319.535 10.551 319.844 10.199 cv
320.148 9.85498 320.523 9.59003 320.965 9.40198 cv
321.406 9.22302 321.902 9.12903 322.461 9.12903 cv
323.039 9.12903 323.539 9.21503 323.957 9.38702 cv
324.371 9.55902 324.711 9.80103 324.98 10.105 cv
325.246 10.414 325.445 10.773 325.57 11.191 cv
325.695 11.609 325.758 12.062 325.758 12.551 cv
cp
323.848 12.301 mo
323.863 11.75 323.75 11.316 323.512 11 cv
323.273 10.684 322.906 10.523 322.414 10.523 cv
322.156 10.523 321.938 10.57 321.758 10.664 cv
321.57 10.758 321.418 10.887 321.297 11.043 cv
321.172 11.207 321.078 11.395 321.016 11.609 cv
320.949 11.828 320.91 12.059 320.902 12.301 cv
cp
f
332.293 14.59 mo
332.293 14.988 332.215 15.34 332.066 15.641 cv
331.914 15.945 331.707 16.199 331.438 16.398 cv
331.164 16.605 330.84 16.754 330.473 16.855 cv
330.098 16.953 329.699 17.004 329.27 17.008 cv
329.008 17.004 328.758 16.984 328.52 16.949 cv
328.281 16.906 328.066 16.859 327.883 16.801 cv
327.691 16.742 327.535 16.68 327.414 16.617 cv
327.285 16.555 327.195 16.496 327.137 16.441 cv
327.078 16.387 327.031 16.301 327.004 16.184 cv
326.969 16.066 326.953 15.895 326.957 15.66 cv
326.953 15.512 326.961 15.391 326.973 15.297 cv
326.98 15.211 326.996 15.137 327.02 15.078 cv
327.039 15.027 327.063 14.992 327.098 14.969 cv
327.125 14.953 327.168 14.941 327.219 14.941 cv
327.273 14.941 327.355 14.977 327.473 15.039 cv
327.582 15.109 327.723 15.18 327.891 15.254 cv
328.055 15.336 328.25 15.41 328.473 15.473 cv
328.695 15.543 328.945 15.574 329.23 15.574 cv
329.402 15.574 329.563 15.559 329.703 15.52 cv
329.84 15.488 329.957 15.434 330.063 15.363 cv
330.16 15.297 330.238 15.211 330.293 15.105 cv
330.344 15.004 330.371 14.887 330.375 14.746 cv
330.371 14.594 330.32 14.457 330.227 14.344 cv
330.125 14.23 330 14.133 329.844 14.047 cv
329.684 13.965 329.504 13.887 329.305 13.812 cv
329.102 13.742 328.895 13.66 328.684 13.57 cv
328.473 13.484 328.266 13.383 328.066 13.266 cv
327.863 13.152 327.684 13.012 327.527 12.844 cv
327.367 12.676 327.238 12.477 327.141 12.238 cv
327.043 12.008 326.996 11.727 326.996 11.395 cv
326.996 11.062 327.059 10.754 327.191 10.473 cv
327.32 10.195 327.512 9.95697 327.758 9.758 cv
328 9.55902 328.297 9.40198 328.652 9.29303 cv
329.004 9.18402 329.398 9.12903 329.84 9.12903 cv
330.055 9.12903 330.27 9.14502 330.477 9.17603 cv
330.684 9.20697 330.871 9.24597 331.039 9.29303 cv
331.203 9.34003 331.344 9.39099 331.461 9.44501 cv
331.574 9.5 331.656 9.547 331.707 9.586 cv
331.754 9.625 331.789 9.664 331.813 9.703 cv
331.832 9.742 331.848 9.79303 331.859 9.84802 cv
331.871 9.90601 331.879 9.97302 331.891 10.051 cv
331.895 10.133 331.898 10.234 331.902 10.352 cv
331.898 10.496 331.895 10.609 331.891 10.695 cv
331.879 10.785 331.867 10.855 331.848 10.906 cv
331.828 10.961 331.801 10.996 331.773 11.012 cv
331.738 11.031 331.703 11.039 331.664 11.039 cv
331.613 11.039 331.539 11.012 331.445 10.957 cv
331.344 10.902 331.223 10.844 331.074 10.781 cv
330.926 10.719 330.75 10.66 330.555 10.605 cv
330.355 10.551 330.133 10.523 329.887 10.523 cv
329.707 10.523 329.555 10.543 329.426 10.578 cv
329.293 10.617 329.188 10.668 329.105 10.734 cv
329.02 10.805 328.957 10.887 328.918 10.973 cv
328.875 11.066 328.852 11.164 328.855 11.266 cv
328.852 11.434 328.902 11.57 329.004 11.676 cv
329.102 11.789 329.23 11.883 329.395 11.965 cv
329.551 12.051 329.734 12.129 329.945 12.199 cv
330.148 12.273 330.359 12.355 330.57 12.437 cv
330.781 12.527 330.988 12.629 331.199 12.742 cv
331.402 12.859 331.586 13 331.75 13.164 cv
331.91 13.336 332.043 13.535 332.145 13.762 cv
332.242 13.996 332.293 14.27 332.293 14.59 cv
cp
f
340.859 12.887 mo
340.855 13.195 340.828 13.406 340.773 13.523 cv
340.715 13.645 340.625 13.707 340.5 13.703 cv
337.242 13.703 li
337.109 13.707 337.012 13.645 336.957 13.52 cv
336.895 13.398 336.867 13.187 336.871 12.887 cv
336.867 12.598 336.895 12.391 336.957 12.27 cv
337.012 12.152 337.109 12.094 337.242 12.09 cv
340.5 12.09 li
340.563 12.094 340.613 12.105 340.66 12.129 cv
340.699 12.156 340.738 12.203 340.773 12.262 cv
340.801 12.328 340.824 12.41 340.84 12.512 cv
340.852 12.617 340.855 12.742 340.859 12.887 cv
cp
f
353.555 16.562 mo
353.555 16.625 353.543 16.672 353.52 16.707 cv
353.496 16.75 353.445 16.781 353.371 16.805 cv
353.289 16.828 353.176 16.844 353.027 16.859 cv
352.875 16.867 352.668 16.875 352.41 16.875 cv
352.188 16.875 352.012 16.867 351.883 16.859 cv
351.75 16.844 351.648 16.828 351.574 16.801 cv
351.496 16.773 351.441 16.738 351.414 16.691 cv
351.379 16.652 351.352 16.598 351.336 16.531 cv
350.43 14.266 li
350.316 14.016 350.207 13.789 350.105 13.586 cv
349.996 13.391 349.883 13.223 349.758 13.09 cv
349.629 12.957 349.48 12.855 349.316 12.785 cv
349.148 12.719 348.953 12.687 348.734 12.684 cv
348.094 12.684 li
348.094 16.547 li
348.094 16.602 348.074 16.648 348.043 16.687 cv
348.004 16.73 347.949 16.766 347.875 16.789 cv
347.793 16.816 347.688 16.836 347.563 16.852 cv
347.43 16.867 347.262 16.875 347.059 16.875 cv
346.855 16.875 346.691 16.867 346.563 16.852 cv
346.426 16.836 346.32 16.816 346.246 16.789 cv
346.164 16.766 346.109 16.73 346.082 16.687 cv
346.047 16.648 346.031 16.602 346.035 16.547 cv
346.035 7.34399 li
346.031 7.117 346.09 6.953 346.211 6.84802 cv
346.324 6.75 346.469 6.69897 346.645 6.69501 cv
349.27 6.69501 li
349.531 6.69897 349.75 6.703 349.926 6.711 cv
350.094 6.72302 350.25 6.73401 350.395 6.75 cv
350.801 6.80902 351.168 6.90997 351.496 7.047 cv
351.82 7.19098 352.098 7.375 352.328 7.59802 cv
352.551 7.828 352.723 8.09802 352.848 8.40601 cv
352.965 8.71899 353.027 9.07397 353.027 9.47302 cv
353.027 9.81598 352.984 10.125 352.898 10.402 cv
352.813 10.684 352.684 10.934 352.52 11.152 cv
352.348 11.375 352.141 11.566 351.898 11.723 cv
351.648 11.887 351.371 12.016 351.063 12.113 cv
351.211 12.187 351.352 12.277 351.488 12.379 cv
351.617 12.488 351.742 12.613 351.863 12.762 cv
351.98 12.91 352.094 13.082 352.199 13.27 cv
352.301 13.465 352.402 13.68 352.504 13.914 cv
353.355 15.91 li
353.434 16.113 353.484 16.258 353.512 16.348 cv
353.539 16.441 353.555 16.516 353.555 16.562 cv
cp
350.898 9.68402 mo
350.895 9.35498 350.82 9.07397 350.672 8.84003 cv
350.52 8.61298 350.27 8.44897 349.926 8.35498 cv
349.82 8.33197 349.703 8.31201 349.57 8.29303 cv
349.438 8.28101 349.254 8.27301 349.02 8.27002 cv
348.094 8.27002 li
348.094 11.141 li
349.145 11.141 li
349.434 11.145 349.691 11.109 349.91 11.035 cv
350.129 10.969 350.309 10.871 350.457 10.738 cv
350.602 10.613 350.715 10.461 350.789 10.281 cv
350.859 10.109 350.895 9.90997 350.898 9.68402 cv
cp
f
361.129 12.863 mo
361.129 13.109 361.074 13.289 360.969 13.398 cv
360.859 13.516 360.711 13.57 360.523 13.57 cv
356.273 13.57 li
356.27 13.867 356.305 14.141 356.379 14.383 cv
356.445 14.629 356.559 14.832 356.715 15 cv
356.867 15.172 357.066 15.301 357.309 15.387 cv
357.551 15.477 357.84 15.523 358.184 15.52 cv
358.523 15.523 358.828 15.496 359.09 15.445 cv
359.352 15.398 359.578 15.344 359.77 15.281 cv
359.957 15.223 360.113 15.168 360.242 15.117 cv
360.363 15.07 360.465 15.047 360.547 15.043 cv
360.59 15.047 360.629 15.055 360.664 15.07 cv
360.691 15.09 360.719 15.125 360.742 15.168 cv
360.766 15.219 360.781 15.285 360.789 15.367 cv
360.797 15.457 360.801 15.562 360.801 15.691 cv
360.801 15.809 360.797 15.91 360.793 15.988 cv
360.785 16.074 360.777 16.141 360.77 16.195 cv
360.758 16.254 360.742 16.305 360.719 16.34 cv
360.695 16.383 360.668 16.418 360.637 16.453 cv
360.602 16.492 360.508 16.543 360.359 16.602 cv
360.207 16.668 360.016 16.73 359.781 16.785 cv
359.547 16.848 359.277 16.895 358.973 16.941 cv
358.668 16.98 358.344 17.004 358.004 17.008 cv
357.379 17.004 356.832 16.93 356.367 16.773 cv
355.898 16.621 355.512 16.383 355.199 16.062 cv
354.887 15.746 354.652 15.344 354.496 14.855 cv
354.34 14.371 354.262 13.801 354.266 13.148 cv
354.262 12.527 354.344 11.969 354.508 11.469 cv
354.672 10.973 354.906 10.551 355.215 10.199 cv
355.52 9.85498 355.895 9.59003 356.336 9.40198 cv
356.777 9.22302 357.273 9.12903 357.832 9.12903 cv
358.41 9.12903 358.91 9.21503 359.328 9.38702 cv
359.742 9.55902 360.082 9.80103 360.352 10.105 cv
360.617 10.414 360.816 10.773 360.941 11.191 cv
361.066 11.609 361.129 12.062 361.129 12.551 cv
cp
359.219 12.301 mo
359.234 11.75 359.121 11.316 358.883 11 cv
358.645 10.684 358.277 10.523 357.785 10.523 cv
357.527 10.523 357.309 10.57 357.129 10.664 cv
356.941 10.758 356.789 10.887 356.668 11.043 cv
356.543 11.207 356.449 11.395 356.387 11.609 cv
356.32 11.828 356.281 12.059 356.273 12.301 cv
cp
f
373.859 16.562 mo
373.855 16.617 373.84 16.66 373.813 16.699 cv
373.777 16.738 373.727 16.773 373.656 16.797 cv
373.582 16.824 373.48 16.84 373.355 16.855 cv
373.227 16.867 373.07 16.875 372.879 16.875 cv
372.68 16.875 372.516 16.867 372.395 16.855 cv
372.266 16.84 372.168 16.824 372.094 16.797 cv
372.016 16.773 371.961 16.738 371.934 16.699 cv
371.902 16.66 371.887 16.617 371.891 16.562 cv
371.891 12.418 li
371.887 12.187 371.867 11.973 371.824 11.777 cv
371.777 11.586 371.707 11.422 371.621 11.281 cv
371.527 11.145 371.414 11.035 371.277 10.957 cv
371.137 10.883 370.973 10.848 370.781 10.844 cv
370.547 10.848 370.309 10.937 370.066 11.121 cv
369.824 11.305 369.563 11.57 369.285 11.918 cv
369.285 16.562 li
369.281 16.617 369.266 16.66 369.238 16.699 cv
369.203 16.738 369.148 16.773 369.078 16.797 cv
369 16.824 368.898 16.84 368.773 16.855 cv
368.645 16.867 368.488 16.875 368.305 16.875 cv
368.109 16.875 367.953 16.867 367.828 16.855 cv
367.703 16.84 367.602 16.824 367.527 16.797 cv
367.449 16.773 367.395 16.738 367.367 16.699 cv
367.332 16.66 367.316 16.617 367.32 16.562 cv
367.32 12.418 li
367.316 12.187 367.293 11.973 367.25 11.777 cv
367.203 11.586 367.137 11.422 367.051 11.281 cv
366.957 11.145 366.844 11.035 366.707 10.957 cv
366.563 10.883 366.398 10.848 366.215 10.844 cv
365.973 10.848 365.73 10.937 365.492 11.121 cv
365.25 11.305 364.992 11.57 364.719 11.918 cv
364.719 16.562 li
364.715 16.617 364.699 16.66 364.672 16.699 cv
364.637 16.738 364.586 16.773 364.512 16.797 cv
364.434 16.824 364.332 16.84 364.207 16.855 cv
364.082 16.867 363.922 16.875 363.73 16.875 cv
363.535 16.875 363.375 16.867 363.254 16.855 cv
363.125 16.84 363.027 16.824 362.953 16.797 cv
362.875 16.773 362.82 16.738 362.793 16.699 cv
362.758 16.66 362.742 16.617 362.746 16.562 cv
362.746 9.57397 li
362.742 9.52301 362.754 9.47998 362.785 9.43701 cv
362.809 9.40198 362.855 9.367 362.926 9.34003 cv
362.988 9.31598 363.078 9.297 363.188 9.28101 cv
363.293 9.27002 363.426 9.26599 363.59 9.26202 cv
363.754 9.26599 363.891 9.27002 364.004 9.28101 cv
364.113 9.297 364.199 9.31598 364.262 9.34003 cv
364.316 9.367 364.359 9.40198 364.391 9.43701 cv
364.414 9.47998 364.43 9.52301 364.43 9.57397 cv
364.43 10.383 li
364.813 9.96503 365.195 9.65198 365.582 9.44098 cv
365.965 9.23401 366.367 9.12903 366.785 9.12903 cv
367.07 9.12903 367.328 9.15997 367.559 9.21899 cv
367.789 9.28101 367.992 9.367 368.176 9.47699 cv
368.352 9.59003 368.508 9.72699 368.641 9.883 cv
368.77 10.043 368.879 10.215 368.973 10.406 cv
369.176 10.184 369.383 9.992 369.586 9.828 cv
369.785 9.66803 369.98 9.53497 370.18 9.42999 cv
370.375 9.33197 370.574 9.258 370.77 9.203 cv
370.965 9.15601 371.164 9.12903 371.367 9.12903 cv
371.832 9.12903 372.223 9.20697 372.543 9.36298 cv
372.859 9.52002 373.117 9.73401 373.313 10.004 cv
373.508 10.273 373.648 10.59 373.734 10.949 cv
373.816 11.312 373.855 11.691 373.859 12.09 cv
cp
f
382.801 13 mo
382.801 13.598 382.723 14.141 382.566 14.629 cv
382.41 15.121 382.172 15.543 381.852 15.898 cv
381.531 16.254 381.129 16.527 380.652 16.719 cv
380.168 16.91 379.609 17.004 378.973 17.008 cv
378.348 17.004 377.805 16.922 377.348 16.75 cv
376.887 16.582 376.508 16.332 376.207 16 cv
375.902 15.672 375.676 15.266 375.531 14.785 cv
375.383 14.305 375.313 13.758 375.313 13.141 cv
375.313 12.547 375.391 12 375.551 11.508 cv
375.711 11.016 375.949 10.594 376.27 10.238 cv
376.582 9.88702 376.98 9.61298 377.461 9.41803 cv
377.938 9.22699 378.5 9.12903 379.145 9.12903 cv
379.77 9.12903 380.309 9.21503 380.77 9.383 cv
381.227 9.55499 381.609 9.80499 381.91 10.133 cv
382.211 10.465 382.434 10.871 382.582 11.348 cv
382.727 11.832 382.801 12.383 382.801 13 cv
cp
380.773 13.078 mo
380.773 12.734 380.746 12.418 380.691 12.125 cv
380.637 11.84 380.543 11.59 380.41 11.371 cv
380.277 11.16 380.102 10.992 379.891 10.867 cv
379.672 10.75 379.402 10.687 379.074 10.687 cv
378.777 10.687 378.52 10.742 378.305 10.848 cv
378.082 10.957 377.902 11.113 377.766 11.32 cv
377.621 11.527 377.516 11.777 377.449 12.062 cv
377.375 12.355 377.34 12.684 377.344 13.055 cv
377.34 13.398 377.367 13.715 377.43 14.004 cv
377.484 14.293 377.578 14.547 377.707 14.762 cv
377.832 14.977 378.004 15.141 378.227 15.258 cv
378.441 15.375 378.715 15.434 379.043 15.434 cv
379.336 15.434 379.594 15.383 379.816 15.273 cv
380.031 15.172 380.211 15.016 380.355 14.809 cv
380.496 14.609 380.602 14.363 380.672 14.07 cv
380.738 13.781 380.773 13.449 380.773 13.078 cv
cp
f
388.5 15.871 mo
388.5 16.105 388.484 16.281 388.457 16.402 cv
388.426 16.527 388.387 16.613 388.344 16.66 cv
388.293 16.711 388.227 16.754 388.137 16.793 cv
388.043 16.832 387.934 16.863 387.816 16.895 cv
387.691 16.918 387.559 16.941 387.414 16.961 cv
387.27 16.973 387.125 16.98 386.98 16.984 cv
386.586 16.98 386.246 16.93 385.961 16.836 cv
385.672 16.734 385.434 16.586 385.25 16.379 cv
385.059 16.176 384.922 15.918 384.836 15.602 cv
384.746 15.289 384.703 14.918 384.703 14.488 cv
384.703 10.906 li
383.863 10.906 li
383.762 10.91 383.688 10.848 383.637 10.723 cv
383.582 10.602 383.555 10.398 383.559 10.109 cv
383.555 9.961 383.563 9.83197 383.578 9.72699 cv
383.59 9.62097 383.609 9.539 383.637 9.47699 cv
383.66 9.41803 383.691 9.375 383.734 9.34802 cv
383.77 9.32397 383.816 9.31201 383.871 9.30902 cv
384.703 9.30902 li
384.703 7.75 li
384.703 7.703 384.715 7.65601 384.746 7.60901 cv
384.77 7.57001 384.824 7.53497 384.902 7.50403 cv
384.977 7.47998 385.078 7.45697 385.207 7.44098 cv
385.332 7.42999 385.488 7.42603 385.68 7.422 cv
385.871 7.42603 386.031 7.42999 386.164 7.44098 cv
386.289 7.45697 386.391 7.47998 386.465 7.50403 cv
386.535 7.53497 386.586 7.57001 386.621 7.60901 cv
386.648 7.65601 386.664 7.703 386.668 7.75 cv
386.668 9.30902 li
388.188 9.30902 li
388.238 9.31201 388.285 9.32397 388.324 9.34802 cv
388.363 9.375 388.395 9.41803 388.422 9.47699 cv
388.445 9.539 388.465 9.62097 388.48 9.72699 cv
388.492 9.83197 388.5 9.961 388.5 10.109 cv
388.5 10.398 388.473 10.602 388.422 10.723 cv
388.367 10.848 388.293 10.91 388.195 10.906 cv
386.668 10.906 li
386.668 14.187 li
386.664 14.574 386.727 14.859 386.848 15.047 cv
386.965 15.238 387.18 15.336 387.492 15.332 cv
387.594 15.336 387.688 15.324 387.773 15.305 cv
387.855 15.289 387.93 15.27 387.996 15.242 cv
388.059 15.223 388.113 15.203 388.16 15.18 cv
388.203 15.164 388.242 15.152 388.281 15.152 cv
388.309 15.152 388.34 15.164 388.371 15.18 cv
388.398 15.203 388.418 15.238 388.438 15.289 cv
388.449 15.348 388.465 15.422 388.48 15.512 cv
388.492 15.609 388.5 15.73 388.5 15.871 cv
cp
f
396.227 12.863 mo
396.227 13.109 396.172 13.289 396.066 13.398 cv
395.957 13.516 395.809 13.57 395.621 13.57 cv
391.371 13.57 li
391.367 13.867 391.402 14.141 391.477 14.383 cv
391.543 14.629 391.656 14.832 391.813 15 cv
391.965 15.172 392.164 15.301 392.406 15.387 cv
392.648 15.477 392.938 15.523 393.281 15.52 cv
393.621 15.523 393.926 15.496 394.188 15.445 cv
394.449 15.398 394.676 15.344 394.867 15.281 cv
395.055 15.223 395.211 15.168 395.34 15.117 cv
395.461 15.07 395.563 15.047 395.645 15.043 cv
395.688 15.047 395.727 15.055 395.762 15.07 cv
395.789 15.09 395.816 15.125 395.84 15.168 cv
395.863 15.219 395.879 15.285 395.887 15.367 cv
395.895 15.457 395.898 15.562 395.898 15.691 cv
395.898 15.809 395.895 15.91 395.891 15.988 cv
395.883 16.074 395.875 16.141 395.867 16.195 cv
395.855 16.254 395.84 16.305 395.816 16.34 cv
395.793 16.383 395.766 16.418 395.734 16.453 cv
395.699 16.492 395.605 16.543 395.457 16.602 cv
395.305 16.668 395.113 16.73 394.879 16.785 cv
394.645 16.848 394.375 16.895 394.07 16.941 cv
393.766 16.98 393.441 17.004 393.102 17.008 cv
392.477 17.004 391.93 16.93 391.465 16.773 cv
390.996 16.621 390.609 16.383 390.297 16.062 cv
389.984 15.746 389.75 15.344 389.594 14.855 cv
389.438 14.371 389.359 13.801 389.363 13.148 cv
389.359 12.527 389.441 11.969 389.605 11.469 cv
389.77 10.973 390.004 10.551 390.313 10.199 cv
390.617 9.85498 390.992 9.59003 391.434 9.40198 cv
391.875 9.22302 392.371 9.12903 392.93 9.12903 cv
393.508 9.12903 394.008 9.21503 394.426 9.38702 cv
394.84 9.55902 395.18 9.80103 395.449 10.105 cv
395.715 10.414 395.914 10.773 396.039 11.191 cv
396.164 11.609 396.227 12.062 396.227 12.551 cv
cp
394.316 12.301 mo
394.332 11.75 394.219 11.316 393.98 11 cv
393.742 10.684 393.375 10.523 392.883 10.523 cv
392.625 10.523 392.406 10.57 392.227 10.664 cv
392.039 10.758 391.887 10.887 391.766 11.043 cv
391.641 11.207 391.547 11.395 391.484 11.609 cv
391.418 11.828 391.379 12.059 391.371 12.301 cv
cp
f
413.277 16.547 mo
413.277 16.602 413.262 16.648 413.234 16.687 cv
413.203 16.73 413.152 16.766 413.078 16.789 cv
413 16.816 412.898 16.836 412.777 16.852 cv
412.648 16.867 412.488 16.875 412.301 16.875 cv
412.105 16.875 411.949 16.867 411.828 16.852 cv
411.699 16.836 411.602 16.816 411.531 16.789 cv
411.457 16.766 411.402 16.73 411.375 16.687 cv
411.34 16.648 411.324 16.602 411.328 16.547 cv
411.328 8.30103 li
411.313 8.30103 li
408.375 16.539 li
408.352 16.609 408.32 16.664 408.273 16.707 cv
408.227 16.754 408.16 16.789 408.082 16.812 cv
407.996 16.84 407.895 16.855 407.773 16.863 cv
407.645 16.871 407.492 16.875 407.316 16.875 cv
407.137 16.875 406.984 16.867 406.863 16.855 cv
406.734 16.84 406.633 16.82 406.555 16.793 cv
406.473 16.766 406.41 16.73 406.363 16.687 cv
406.316 16.648 406.285 16.602 406.27 16.539 cv
403.434 8.30103 li
403.418 8.30103 li
403.418 16.547 li
403.414 16.602 403.402 16.648 403.375 16.687 cv
403.344 16.73 403.289 16.766 403.215 16.789 cv
403.133 16.816 403.031 16.836 402.914 16.852 cv
402.789 16.867 402.633 16.875 402.438 16.875 cv
402.25 16.875 402.094 16.867 401.969 16.852 cv
401.844 16.836 401.742 16.816 401.668 16.789 cv
401.59 16.766 401.539 16.73 401.512 16.687 cv
401.48 16.648 401.465 16.602 401.469 16.547 cv
401.469 7.51599 li
401.465 7.25403 401.535 7.05103 401.68 6.90601 cv
401.816 6.77002 402.004 6.69897 402.242 6.69501 cv
403.59 6.69501 li
403.828 6.69897 404.035 6.71899 404.207 6.75403 cv
404.379 6.797 404.527 6.85901 404.656 6.94897 cv
404.777 7.04303 404.883 7.164 404.969 7.30902 cv
405.051 7.461 405.121 7.64502 405.188 7.85901 cv
407.379 13.898 li
407.41 13.898 li
409.684 7.875 li
409.75 7.65601 409.824 7.47302 409.906 7.32001 cv
409.984 7.172 410.078 7.05103 410.188 6.953 cv
410.293 6.86298 410.418 6.797 410.566 6.75403 cv
410.711 6.71899 410.883 6.69897 411.078 6.69501 cv
412.465 6.69501 li
412.602 6.69897 412.723 6.71503 412.828 6.75 cv
412.926 6.789 413.012 6.84399 413.078 6.90997 cv
413.141 6.98401 413.188 7.07001 413.227 7.16803 cv
413.258 7.27301 413.277 7.39099 413.277 7.51599 cv
cp
f
422.434 13 mo
422.434 13.598 422.355 14.141 422.199 14.629 cv
422.043 15.121 421.805 15.543 421.484 15.898 cv
421.164 16.254 420.762 16.527 420.285 16.719 cv
419.801 16.91 419.242 17.004 418.605 17.008 cv
417.98 17.004 417.438 16.922 416.98 16.75 cv
416.52 16.582 416.141 16.332 415.84 16 cv
415.535 15.672 415.309 15.266 415.164 14.785 cv
415.016 14.305 414.945 13.758 414.945 13.141 cv
414.945 12.547 415.023 12 415.184 11.508 cv
415.344 11.016 415.582 10.594 415.902 10.238 cv
416.215 9.88702 416.613 9.61298 417.094 9.41803 cv
417.57 9.22699 418.133 9.12903 418.777 9.12903 cv
419.402 9.12903 419.941 9.21503 420.402 9.383 cv
420.859 9.55499 421.242 9.80499 421.543 10.133 cv
421.844 10.465 422.066 10.871 422.215 11.348 cv
422.359 11.832 422.434 12.383 422.434 13 cv
cp
420.406 13.078 mo
420.406 12.734 420.379 12.418 420.324 12.125 cv
420.27 11.84 420.176 11.59 420.043 11.371 cv
419.91 11.16 419.734 10.992 419.523 10.867 cv
419.305 10.75 419.035 10.687 418.707 10.687 cv
418.41 10.687 418.152 10.742 417.938 10.848 cv
417.715 10.957 417.535 11.113 417.398 11.32 cv
417.254 11.527 417.148 11.777 417.082 12.062 cv
417.008 12.355 416.973 12.684 416.977 13.055 cv
416.973 13.398 417 13.715 417.063 14.004 cv
417.117 14.293 417.211 14.547 417.34 14.762 cv
417.465 14.977 417.637 15.141 417.859 15.258 cv
418.074 15.375 418.348 15.434 418.676 15.434 cv
418.969 15.434 419.227 15.383 419.449 15.273 cv
419.664 15.172 419.844 15.016 419.988 14.809 cv
420.129 14.609 420.234 14.363 420.305 14.07 cv
420.371 13.781 420.406 13.449 420.406 13.078 cv
cp
f
430.625 16.562 mo
430.621 16.625 430.609 16.672 430.586 16.707 cv
430.559 16.75 430.516 16.781 430.453 16.805 cv
430.391 16.828 430.305 16.844 430.195 16.859 cv
430.086 16.867 429.953 16.875 429.801 16.875 cv
429.633 16.875 429.496 16.867 429.395 16.859 cv
429.285 16.844 429.203 16.828 429.141 16.805 cv
429.074 16.781 429.027 16.75 429 16.707 cv
428.969 16.672 428.953 16.625 428.957 16.562 cv
428.957 15.785 li
428.594 16.176 428.215 16.477 427.824 16.687 cv
427.426 16.898 426.988 17.004 426.512 17.008 cv
425.977 17.004 425.527 16.902 425.16 16.699 cv
424.789 16.496 424.488 16.219 424.262 15.867 cv
424.027 15.516 423.859 15.109 423.754 14.641 cv
423.648 14.176 423.598 13.684 423.598 13.164 cv
423.598 12.547 423.664 11.988 423.797 11.488 cv
423.93 10.996 424.125 10.57 424.383 10.219 cv
424.637 9.867 424.953 9.59802 425.336 9.40997 cv
425.715 9.22302 426.152 9.12903 426.652 9.12903 cv
427.043 9.12903 427.398 9.211 427.719 9.367 cv
428.031 9.53101 428.348 9.76599 428.668 10.07 cv
428.668 6.28497 li
428.664 6.23798 428.68 6.19098 428.711 6.14502 cv
428.738 6.10498 428.789 6.07001 428.867 6.039 cv
428.938 6.01599 429.039 5.992 429.168 5.97302 cv
429.289 5.961 429.449 5.953 429.645 5.94897 cv
429.836 5.953 429.992 5.961 430.121 5.97302 cv
430.246 5.992 430.348 6.01599 430.422 6.039 cv
430.492 6.07001 430.543 6.10498 430.578 6.14502 cv
430.605 6.19098 430.621 6.23798 430.625 6.28497 cv
cp
428.668 11.895 mo
428.379 11.543 428.109 11.273 427.855 11.082 cv
427.594 10.895 427.324 10.801 427.047 10.797 cv
426.785 10.801 426.563 10.863 426.383 10.988 cv
426.195 11.117 426.047 11.289 425.938 11.504 cv
425.82 11.719 425.738 11.957 425.688 12.219 cv
425.629 12.484 425.602 12.754 425.605 13.031 cv
425.602 13.324 425.625 13.609 425.676 13.883 cv
425.719 14.16 425.797 14.406 425.906 14.625 cv
426.012 14.844 426.152 15.02 426.332 15.145 cv
426.508 15.277 426.734 15.34 427.008 15.34 cv
427.141 15.34 427.27 15.32 427.402 15.281 cv
427.527 15.242 427.66 15.18 427.793 15.09 cv
427.926 15.004 428.063 14.887 428.203 14.742 cv
428.344 14.602 428.496 14.426 428.668 14.211 cv
cp
f
439.004 12.863 mo
439.004 13.109 438.949 13.289 438.844 13.398 cv
438.734 13.516 438.586 13.57 438.398 13.57 cv
434.148 13.57 li
434.145 13.867 434.18 14.141 434.254 14.383 cv
434.32 14.629 434.434 14.832 434.59 15 cv
434.742 15.172 434.941 15.301 435.184 15.387 cv
435.426 15.477 435.715 15.523 436.059 15.52 cv
436.398 15.523 436.703 15.496 436.965 15.445 cv
437.227 15.398 437.453 15.344 437.645 15.281 cv
437.832 15.223 437.988 15.168 438.117 15.117 cv
438.238 15.07 438.34 15.047 438.422 15.043 cv
438.465 15.047 438.504 15.055 438.539 15.07 cv
438.566 15.09 438.594 15.125 438.617 15.168 cv
438.641 15.219 438.656 15.285 438.664 15.367 cv
438.672 15.457 438.676 15.562 438.676 15.691 cv
438.676 15.809 438.672 15.91 438.668 15.988 cv
438.66 16.074 438.652 16.141 438.645 16.195 cv
438.633 16.254 438.617 16.305 438.594 16.34 cv
438.57 16.383 438.543 16.418 438.512 16.453 cv
438.477 16.492 438.383 16.543 438.234 16.602 cv
438.082 16.668 437.891 16.73 437.656 16.785 cv
437.422 16.848 437.152 16.895 436.848 16.941 cv
436.543 16.98 436.219 17.004 435.879 17.008 cv
435.254 17.004 434.707 16.93 434.242 16.773 cv
433.773 16.621 433.387 16.383 433.074 16.062 cv
432.762 15.746 432.527 15.344 432.371 14.855 cv
432.215 14.371 432.137 13.801 432.141 13.148 cv
432.137 12.527 432.219 11.969 432.383 11.469 cv
432.547 10.973 432.781 10.551 433.09 10.199 cv
433.395 9.85498 433.77 9.59003 434.211 9.40198 cv
434.652 9.22302 435.148 9.12903 435.707 9.12903 cv
436.285 9.12903 436.785 9.21503 437.203 9.38702 cv
437.617 9.55902 437.957 9.80103 438.227 10.105 cv
438.492 10.414 438.691 10.773 438.816 11.191 cv
438.941 11.609 439.004 12.062 439.004 12.551 cv
cp
437.094 12.301 mo
437.109 11.75 436.996 11.316 436.758 11 cv
436.52 10.684 436.152 10.523 435.66 10.523 cv
435.402 10.523 435.184 10.57 435.004 10.664 cv
434.816 10.758 434.664 10.887 434.543 11.043 cv
434.418 11.207 434.324 11.395 434.262 11.609 cv
434.195 11.828 434.156 12.059 434.148 12.301 cv
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
