%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ScalingOfFilteringTimes-Local.pdf
%%Creator: Adobe Acrobat 11.0.6
%%For: mmeh012
%%CreationDate: 10/12/2018, 3:43:39 p.m.
%%BoundingBox: 0 0 660 537
%%HiResBoundingBox: 0 0 659.1601 536.2800
%%CropBox: 0 0 659.1601 536.2800
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.11.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.11.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -536.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 536.28 li
659.16 536.28 li
659.16 0 li
cp
clp
gsave
0 536.28 mo
660 536.28 li
660 -.720032 li
0 -.720032 li
cp
clp
0 -6.10352e-5 mo
659.16 -6.10352e-5 li
659.16 536.281 li
0 536.281 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
35.641 453.961 mo
642.961 453.961 li
35.641 423.84 mo
642.961 423.84 li
35.641 393.719 mo
642.961 393.719 li
35.641 363.602 mo
642.961 363.602 li
35.641 333.481 mo
642.961 333.481 li
35.641 303.359 mo
642.961 303.359 li
35.641 273.238 mo
642.961 273.238 li
35.641 243.121 mo
642.961 243.121 li
35.641 213 mo
642.961 213 li
35.641 183 mo
642.961 183 li
35.641 152.879 mo
642.961 152.879 li
35.641 122.762 mo
642.961 122.762 li
35.641 92.641 mo
642.961 92.641 li
35.641 62.52 mo
642.961 62.52 li
35.641 32.398 mo
642.961 32.398 li
.326574 .281529 .277562 0 cmyk
@
73.559 32.398 mo
73.559 483.961 li
149.52 32.398 mo
149.52 483.961 li
225.359 32.398 mo
225.359 483.961 li
301.32 32.398 mo
301.32 483.961 li
377.281 32.398 mo
377.281 483.961 li
453.238 32.398 mo
453.238 483.961 li
529.078 32.398 mo
529.078 483.961 li
605.039 32.398 mo
605.039 483.961 li
.175235 .144778 .143648 0 cmyk
@
35.641 32.398 mo
35.641 483.961 li
111.48 32.398 mo
111.48 483.961 li
187.441 32.398 mo
187.441 483.961 li
263.398 32.398 mo
263.398 483.961 li
339.359 32.398 mo
339.359 483.961 li
415.199 32.398 mo
415.199 483.961 li
491.16 32.398 mo
491.16 483.961 li
567.121 32.398 mo
567.121 483.961 li
642.961 32.398 mo
642.961 483.961 li
.326574 .281529 .277562 0 cmyk
@
15.48 474.719 mo
22.558 474.719 li
22.558 491.762 li
15.48 491.762 li
cp
0 0 0 0 cmyk
ef
15.48 444.602 mo
22.558 444.602 li
22.558 461.641 li
15.48 461.641 li
cp
ef
15.48 414.481 mo
22.558 414.481 li
22.558 431.52 li
15.48 431.52 li
cp
ef
15.48 384.359 mo
22.558 384.359 li
22.558 401.519 li
15.48 401.519 li
cp
ef
15.48 354.238 mo
22.558 354.238 li
22.558 371.398 li
15.48 371.398 li
cp
ef
15.48 324.121 mo
22.558 324.121 li
22.558 341.281 li
15.48 341.281 li
cp
ef
15.48 294 mo
22.558 294 li
22.558 311.16 li
15.48 311.16 li
cp
ef
15.48 264 mo
22.558 264 li
22.558 281.039 li
15.48 281.039 li
cp
ef
15.48 233.879 mo
22.558 233.879 li
22.558 250.922 li
15.48 250.922 li
cp
ef
8.398 203.762 mo
22.558 203.762 li
22.558 220.801 li
8.398 220.801 li
cp
ef
8.398 173.641 mo
22.558 173.641 li
22.558 190.68 li
8.398 190.68 li
cp
ef
8.398 143.52 mo
22.558 143.52 li
22.558 160.559 li
8.398 160.559 li
cp
ef
8.398 113.398 mo
22.558 113.398 li
22.558 130.558 li
8.398 130.558 li
cp
ef
8.398 83.281 mo
22.558 83.281 li
22.558 100.441 li
8.398 100.441 li
cp
ef
8.398 53.16 mo
22.558 53.16 li
22.558 70.32 li
8.398 70.32 li
cp
ef
8.398 23.16 mo
22.558 23.16 li
22.558 40.199 li
8.398 40.199 li
cp
ef
.96 lw
35.641 483.961 mo
642.961 483.961 li
.369879 .299321 .304356 .000976577 cmyk
@
35.641 483.961 mo
35.641 488.398 li
111.48 483.961 mo
111.48 488.398 li
187.441 483.961 mo
187.441 488.398 li
263.398 483.961 mo
263.398 488.398 li
339.359 483.961 mo
339.359 488.398 li
415.199 483.961 mo
415.199 488.398 li
491.16 483.961 mo
491.16 488.398 li
567.121 483.961 mo
567.121 488.398 li
642.961 483.961 mo
642.961 488.398 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
1 lc
35.641 483.961 mo
111.48 465.359 li
187.441 417.84 li
263.398 329.281 li
339.359 276 li
415.199 216.84 li
491.16 157.32 li
567.121 98.641 li
642.961 39.359 li
.62829 .284672 0 0 cmyk
@
grestore
1 lw
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.62829 .284672 0 0 cmyk
@
116.52 470.281 mo
106.441 460.199 li
106.441 470.281 mo
116.52 460.199 li
@
192.48 422.762 mo
182.398 412.68 li
182.398 422.762 mo
192.48 412.68 li
@
268.32 334.199 mo
258.238 324.121 li
258.238 334.199 mo
268.32 324.121 li
@
344.281 280.922 mo
334.199 270.84 li
334.199 280.922 mo
344.281 270.84 li
@
420.238 221.762 mo
410.16 211.68 li
410.16 221.762 mo
420.238 211.68 li
@
496.199 162.359 mo
486.121 152.281 li
486.121 162.359 mo
496.199 152.281 li
@
572.039 103.68 mo
561.961 93.602 li
561.961 103.68 mo
572.039 93.602 li
@
648 44.398 mo
637.922 34.32 li
637.922 44.398 mo
648 34.32 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
35.641 483.961 mo
111.48 462.238 li
187.441 417 li
263.398 288.602 li
339.359 276.602 li
415.199 217.559 li
491.16 158.879 li
567.121 99.48 li
642.961 40.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.0321965 .622736 .922606 .000579843 cmyk
@
116.52 467.16 mo
106.441 457.078 li
106.441 467.16 mo
116.52 457.078 li
@
192.48 422.039 mo
182.398 411.961 li
182.398 422.039 mo
192.48 411.961 li
@
268.32 293.641 mo
258.238 283.559 li
258.238 293.641 mo
268.32 283.559 li
@
344.281 281.52 mo
334.199 271.441 li
334.199 281.52 mo
344.281 271.441 li
@
420.238 222.602 mo
410.16 212.52 li
410.16 222.602 mo
420.238 212.52 li
@
496.199 163.801 mo
486.121 153.719 li
486.121 163.801 mo
496.199 153.719 li
@
572.039 104.52 mo
561.961 94.441 li
561.961 104.52 mo
572.039 94.441 li
@
648 45.719 mo
637.922 35.641 li
637.922 45.719 mo
648 35.641 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
35.641 483.961 mo
111.48 462.238 li
187.441 393 li
263.398 289.68 li
339.359 322.441 li
415.199 275.398 li
491.16 229.078 li
567.121 181.801 li
642.961 134.52 li
.621118 .109194 .980743 .0040589 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.621118 .109194 .980743 .0040589 cmyk
@
116.52 467.16 mo
106.441 457.078 li
106.441 467.16 mo
116.52 457.078 li
@
192.48 398.039 mo
182.398 387.961 li
182.398 398.039 mo
192.48 387.961 li
@
268.32 294.719 mo
258.238 284.641 li
258.238 294.719 mo
268.32 284.641 li
@
344.281 327.481 mo
334.199 317.398 li
334.199 327.481 mo
344.281 317.398 li
@
420.238 280.441 mo
410.16 270.359 li
410.16 280.441 mo
420.238 270.359 li
@
496.199 234 mo
486.121 223.922 li
486.121 234 mo
496.199 223.922 li
@
572.039 186.719 mo
561.961 176.641 li
561.961 186.719 mo
572.039 176.641 li
@
648 139.559 mo
637.922 129.481 li
637.922 139.559 mo
648 129.481 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
35.641 483.961 mo
111.48 462.719 li
187.441 375.961 li
263.398 357.359 li
339.359 323.641 li
415.199 277.32 li
491.16 232.441 li
567.121 184.559 li
642.961 144 li
0 .993988 1 0 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
0 .993988 1 0 cmyk
@
116.52 467.641 mo
106.441 457.559 li
106.441 467.641 mo
116.52 457.559 li
@
192.48 381 mo
182.398 370.922 li
182.398 381 mo
192.48 370.922 li
@
268.32 362.281 mo
258.238 352.199 li
258.238 362.281 mo
268.32 352.199 li
@
344.281 328.68 mo
334.199 318.602 li
334.199 328.68 mo
344.281 318.602 li
@
420.238 282.238 mo
410.16 272.16 li
410.16 282.238 mo
420.238 272.16 li
@
496.199 237.359 mo
486.121 227.281 li
486.121 237.359 mo
496.199 227.281 li
@
572.039 189.481 mo
561.961 179.398 li
561.961 189.481 mo
572.039 179.398 li
@
648 149.039 mo
637.922 138.961 li
637.922 149.039 mo
648 138.961 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.641 483.961 mo
111.48 448.922 li
187.441 381.961 li
263.398 383.16 li
339.359 355.559 li
415.199 323.039 li
491.16 280.078 li
567.121 237.359 li
642.961 207 li
.62829 .284672 0 0 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.62829 .284672 0 0 cmyk
@
116.52 453.84 mo
106.441 443.762 li
106.441 453.84 mo
116.52 443.762 li
@
192.48 387 mo
182.398 376.922 li
182.398 387 mo
192.48 376.922 li
@
268.32 388.078 mo
258.238 378 li
258.238 388.078 mo
268.32 378 li
@
344.281 360.481 mo
334.199 350.398 li
334.199 360.481 mo
344.281 350.398 li
@
420.238 327.961 mo
410.16 317.879 li
410.16 327.961 mo
420.238 317.879 li
@
496.199 285.121 mo
486.121 275.039 li
486.121 285.121 mo
496.199 275.039 li
@
572.039 242.281 mo
561.961 232.199 li
561.961 242.281 mo
572.039 232.199 li
@
648 211.922 mo
637.922 201.84 li
637.922 211.922 mo
648 201.84 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.641 483.961 mo
111.48 462.48 li
187.441 353.641 li
263.398 384.602 li
339.359 370.32 li
415.199 332.52 li
491.16 323.16 li
567.121 284.281 li
642.961 169.801 li
.0321965 .622736 .922606 .000579843 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.0321965 .622736 .922606 .000579843 cmyk
@
116.52 467.398 mo
106.441 457.32 li
106.441 467.398 mo
116.52 457.32 li
@
192.48 358.559 mo
182.398 348.481 li
182.398 358.559 mo
192.48 348.481 li
@
268.32 389.52 mo
258.238 379.441 li
258.238 389.52 mo
268.32 379.441 li
@
344.281 375.238 mo
334.199 365.16 li
334.199 375.238 mo
344.281 365.16 li
@
420.238 337.559 mo
410.16 327.481 li
410.16 337.559 mo
420.238 327.481 li
@
496.199 328.078 mo
486.121 318 li
486.121 328.078 mo
496.199 318 li
@
572.039 289.199 mo
561.961 279.121 li
561.961 289.199 mo
572.039 279.121 li
@
648 174.719 mo
637.922 164.641 li
637.922 174.719 mo
648 164.641 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.641 483.961 mo
111.48 462.48 li
187.441 375.719 li
263.398 397.559 li
339.359 391.801 li
415.199 367.32 li
491.16 322.68 li
567.121 321.719 li
642.961 234.48 li
.467353 0 .87747 0 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
.621118 .109194 .980743 .0040589 cmyk
@
116.52 467.52 mo
106.441 457.441 li
106.441 467.52 mo
116.52 457.441 li
@
192.48 380.762 mo
182.398 370.68 li
182.398 380.762 mo
192.48 370.68 li
@
268.32 402.481 mo
258.238 392.398 li
258.238 402.481 mo
268.32 392.398 li
@
344.281 396.719 mo
334.199 386.641 li
334.199 396.719 mo
344.281 386.641 li
@
420.238 372.238 mo
410.16 362.16 li
410.16 372.238 mo
420.238 362.16 li
@
496.199 327.602 mo
486.121 317.52 li
486.121 327.602 mo
496.199 317.52 li
@
572.039 326.641 mo
561.961 316.559 li
561.961 326.641 mo
572.039 316.559 li
@
648 239.398 mo
637.922 229.32 li
637.922 239.398 mo
648 229.32 li
@
gsave
35.52 32.398 mo
643.68 32.398 li
643.68 484.679 li
35.52 484.679 li
cp
clp
.96 lw
1 lc
[2.88 3.84 ] 0 dsh
35.641 483.961 mo
111.48 462.359 li
187.441 353.762 li
263.398 397.922 li
339.359 411.359 li
415.199 385.199 li
491.16 340.199 li
567.121 336.238 li
642.961 284.398 li
0 .993988 1 0 cmyk
@
grestore
40.559 489 mo
30.48 478.922 li
30.48 489 mo
40.559 478.922 li
0 .993988 1 0 cmyk
@
116.52 467.281 mo
106.441 457.199 li
106.441 467.281 mo
116.52 457.199 li
@
192.48 358.68 mo
182.398 348.602 li
182.398 358.68 mo
192.48 348.602 li
@
268.32 402.84 mo
258.238 392.762 li
258.238 402.84 mo
268.32 392.762 li
@
344.281 416.281 mo
334.199 406.199 li
334.199 416.281 mo
344.281 406.199 li
@
420.238 390.121 mo
410.16 380.039 li
410.16 390.121 mo
420.238 380.039 li
@
496.199 345.238 mo
486.121 335.16 li
486.121 345.238 mo
496.199 335.16 li
@
572.039 341.16 mo
561.961 331.078 li
561.961 341.16 mo
572.039 331.078 li
@
648 289.441 mo
637.922 279.359 li
637.922 289.441 mo
648 279.359 li
@
15.512 474.688 mo
22.606 474.688 li
22.606 491.778 li
15.512 491.778 li
cp
0 0 0 0 cmyk
ef
21.887 487.648 mo
21.883 487.738 21.875 487.809 21.863 487.867 cv
21.848 487.93 21.828 487.98 21.809 488.012 cv
21.785 488.051 21.762 488.074 21.73 488.09 cv
21.699 488.105 21.668 488.113 21.641 488.113 cv
17.004 488.113 li
16.969 488.113 16.941 488.105 16.914 488.09 cv
16.887 488.074 16.859 488.051 16.836 488.012 cv
16.809 487.98 16.789 487.93 16.777 487.867 cv
16.762 487.809 16.754 487.738 16.758 487.648 cv
16.754 487.57 16.762 487.496 16.777 487.434 cv
16.789 487.375 16.805 487.328 16.828 487.289 cv
16.844 487.254 16.871 487.223 16.902 487.199 cv
16.934 487.18 16.965 487.172 17.004 487.168 cv
18.855 487.168 li
18.855 480.422 li
17.141 481.441 li
17.051 481.492 16.98 481.52 16.934 481.527 cv
16.879 481.535 16.836 481.527 16.805 481.496 cv
16.77 481.469 16.75 481.418 16.738 481.348 cv
16.727 481.281 16.719 481.195 16.723 481.086 cv
16.719 481.012 16.723 480.945 16.734 480.887 cv
16.738 480.836 16.75 480.789 16.766 480.75 cv
16.777 480.715 16.797 480.684 16.82 480.656 cv
16.844 480.629 16.875 480.602 16.922 480.574 cv
18.965 479.262 li
18.98 479.25 19 479.238 19.031 479.23 cv
19.055 479.223 19.09 479.215 19.137 479.203 cv
19.176 479.195 19.227 479.187 19.281 479.184 cv
19.336 479.184 19.402 479.184 19.488 479.18 cv
19.594 479.184 19.688 479.187 19.762 479.195 cv
19.832 479.203 19.887 479.219 19.934 479.234 cv
19.973 479.254 20 479.273 20.016 479.297 cv
20.023 479.324 20.031 479.348 20.035 479.371 cv
20.035 487.168 li
21.641 487.168 li
21.676 487.172 21.711 487.18 21.742 487.199 cv
21.773 487.223 21.797 487.254 21.82 487.289 cv
21.836 487.328 21.852 487.375 21.867 487.434 cv
21.875 487.496 21.883 487.57 21.887 487.648 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 444.582 mo
22.606 444.582 li
22.606 461.672 li
15.512 461.672 li
cp
0 0 0 0 cmyk
ef
21.867 457.48 mo
21.863 457.566 21.859 457.641 21.848 457.703 cv
21.836 457.77 21.82 457.824 21.801 457.863 cv
21.777 457.91 21.75 457.941 21.719 457.957 cv
21.684 457.98 21.645 457.988 21.605 457.988 cv
16.703 457.988 li
16.641 457.988 16.582 457.98 16.535 457.965 cv
16.484 457.949 16.445 457.926 16.41 457.887 cv
16.375 457.855 16.348 457.801 16.336 457.73 cv
16.316 457.66 16.309 457.574 16.313 457.473 cv
16.309 457.383 16.313 457.305 16.32 457.234 cv
16.324 457.168 16.34 457.109 16.367 457.055 cv
16.391 457.004 16.422 456.949 16.457 456.895 cv
16.492 456.844 16.535 456.789 16.594 456.727 cv
18.367 454.902 li
18.777 454.484 19.105 454.109 19.355 453.773 cv
19.602 453.445 19.793 453.141 19.926 452.863 cv
20.059 452.59 20.145 452.34 20.191 452.113 cv
20.23 451.891 20.254 451.68 20.254 451.484 cv
20.254 451.289 20.219 451.105 20.152 450.926 cv
20.086 450.754 19.992 450.598 19.867 450.461 cv
19.742 450.332 19.586 450.227 19.398 450.145 cv
19.211 450.07 18.992 450.031 18.746 450.027 cv
18.457 450.031 18.199 450.07 17.973 450.145 cv
17.742 450.227 17.543 450.312 17.371 450.398 cv
17.199 450.492 17.055 450.574 16.938 450.652 cv
16.82 450.73 16.734 450.77 16.684 450.77 cv
16.648 450.77 16.617 450.762 16.594 450.742 cv
16.563 450.727 16.543 450.695 16.527 450.652 cv
16.512 450.613 16.496 450.559 16.488 450.488 cv
16.477 450.422 16.473 450.34 16.477 450.242 cv
16.473 450.176 16.477 450.117 16.484 450.066 cv
16.488 450.016 16.496 449.973 16.508 449.934 cv
16.516 449.898 16.531 449.863 16.551 449.832 cv
16.57 449.801 16.605 449.762 16.664 449.711 cv
16.715 449.664 16.809 449.598 16.945 449.516 cv
17.078 449.434 17.25 449.355 17.453 449.273 cv
17.656 449.195 17.879 449.125 18.125 449.07 cv
18.367 449.016 18.625 448.988 18.898 448.988 cv
19.324 448.988 19.699 449.051 20.023 449.172 cv
20.344 449.293 20.609 449.457 20.824 449.668 cv
21.035 449.879 21.195 450.125 21.301 450.398 cv
21.406 450.68 21.461 450.977 21.461 451.289 cv
21.461 451.578 21.434 451.859 21.383 452.137 cv
21.332 452.422 21.227 452.727 21.066 453.051 cv
20.902 453.379 20.668 453.742 20.363 454.141 cv
20.055 454.543 19.648 455.004 19.145 455.52 cv
17.738 456.988 li
21.598 456.988 li
21.629 456.992 21.664 457.004 21.703 457.02 cv
21.734 457.043 21.766 457.074 21.793 457.113 cv
21.816 457.156 21.836 457.207 21.848 457.266 cv
21.859 457.332 21.863 457.402 21.867 457.48 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 414.481 mo
22.606 414.481 li
22.606 431.571 li
15.512 431.571 li
cp
0 0 0 0 cmyk
ef
21.797 425.336 mo
21.793 425.746 21.723 426.113 21.582 426.437 cv
21.438 426.766 21.234 427.047 20.973 427.277 cv
20.707 427.512 20.379 427.687 19.992 427.812 cv
19.602 427.937 19.164 428 18.68 428 cv
18.375 428 18.098 427.973 17.844 427.926 cv
17.582 427.879 17.352 427.828 17.156 427.758 cv
16.953 427.695 16.789 427.625 16.656 427.555 cv
16.523 427.484 16.438 427.434 16.406 427.398 cv
16.367 427.371 16.344 427.34 16.328 427.305 cv
16.309 427.273 16.289 427.234 16.277 427.187 cv
16.262 427.145 16.254 427.09 16.246 427.02 cv
16.238 426.957 16.234 426.875 16.238 426.773 cv
16.234 426.613 16.25 426.5 16.285 426.434 cv
16.316 426.371 16.363 426.336 16.426 426.336 cv
16.469 426.336 16.551 426.375 16.676 426.445 cv
16.797 426.523 16.957 426.602 17.152 426.684 cv
17.344 426.77 17.57 426.848 17.836 426.918 cv
18.094 426.992 18.387 427.027 18.707 427.027 cv
19.016 427.027 19.285 426.988 19.523 426.91 cv
19.754 426.832 19.953 426.723 20.113 426.582 cv
20.27 426.441 20.387 426.273 20.469 426.078 cv
20.547 425.883 20.586 425.672 20.59 425.445 cv
20.586 425.195 20.535 424.969 20.438 424.766 cv
20.332 424.566 20.184 424.395 19.992 424.246 cv
19.793 424.102 19.555 423.988 19.27 423.91 cv
18.984 423.832 18.66 423.793 18.297 423.793 cv
17.426 423.793 li
17.383 423.793 17.348 423.785 17.313 423.77 cv
17.277 423.754 17.246 423.727 17.223 423.687 cv
17.195 423.652 17.176 423.605 17.16 423.547 cv
17.145 423.488 17.137 423.41 17.137 423.312 cv
17.137 423.227 17.141 423.156 17.156 423.098 cv
17.164 423.043 17.184 422.996 17.215 422.961 cv
17.238 422.926 17.27 422.902 17.301 422.883 cv
17.332 422.871 17.367 422.863 17.41 422.859 cv
18.184 422.859 li
18.484 422.863 18.754 422.824 18.996 422.742 cv
19.23 422.668 19.434 422.555 19.605 422.406 cv
19.77 422.262 19.898 422.086 19.988 421.883 cv
20.078 421.68 20.125 421.453 20.125 421.199 cv
20.125 421.02 20.094 420.844 20.035 420.676 cv
19.973 420.512 19.883 420.367 19.766 420.242 cv
19.645 420.117 19.492 420.02 19.313 419.949 cv
19.125 419.879 18.914 419.844 18.672 419.844 cv
18.406 419.844 18.16 419.887 17.941 419.965 cv
17.715 420.047 17.52 420.133 17.348 420.223 cv
17.172 420.316 17.027 420.402 16.914 420.48 cv
16.801 420.562 16.719 420.602 16.676 420.598 cv
16.641 420.602 16.613 420.594 16.59 420.582 cv
16.563 420.57 16.543 420.547 16.527 420.512 cv
16.512 420.48 16.5 420.434 16.492 420.367 cv
16.484 420.309 16.48 420.227 16.484 420.125 cv
16.48 420.059 16.48 420 16.488 419.945 cv
16.488 419.895 16.5 419.848 16.516 419.805 cv
16.531 419.77 16.547 419.734 16.566 419.699 cv
16.582 419.672 16.613 419.633 16.656 419.586 cv
16.699 419.543 16.785 419.48 16.922 419.398 cv
17.051 419.316 17.215 419.238 17.41 419.156 cv
17.602 419.078 17.824 419.008 18.082 418.953 cv
18.332 418.898 18.605 418.871 18.902 418.871 cv
19.309 418.871 19.672 418.926 19.984 419.027 cv
20.297 419.137 20.555 419.285 20.766 419.473 cv
20.969 419.668 21.125 419.898 21.23 420.164 cv
21.332 420.434 21.383 420.727 21.387 421.051 cv
21.383 421.332 21.348 421.594 21.277 421.828 cv
21.203 422.07 21.094 422.281 20.953 422.465 cv
20.809 422.652 20.637 422.809 20.434 422.937 cv
20.227 423.07 19.988 423.164 19.719 423.211 cv
19.719 423.223 li
20.023 423.258 20.305 423.332 20.559 423.453 cv
20.813 423.574 21.031 423.727 21.215 423.91 cv
21.395 424.094 21.535 424.309 21.641 424.551 cv
21.742 424.797 21.793 425.059 21.797 425.336 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 384.371 mo
22.606 384.371 li
22.606 401.461 li
15.512 401.461 li
cp
0 0 0 0 cmyk
ef
22.242 395.258 mo
22.238 395.41 22.215 395.531 22.172 395.617 cv
22.125 395.707 22.063 395.75 21.98 395.746 cv
20.98 395.746 li
20.98 397.609 li
20.98 397.648 20.969 397.68 20.953 397.703 cv
20.93 397.73 20.898 397.75 20.855 397.77 cv
20.805 397.785 20.742 397.797 20.672 397.809 cv
20.594 397.816 20.5 397.82 20.383 397.824 cv
20.266 397.82 20.168 397.816 20.098 397.809 cv
20.02 397.797 19.961 397.785 19.918 397.77 cv
19.871 397.75 19.84 397.73 19.824 397.703 cv
19.805 397.68 19.797 397.648 19.801 397.609 cv
19.801 395.746 li
16.172 395.746 li
16.113 395.75 16.07 395.742 16.035 395.727 cv
16 395.715 15.965 395.687 15.938 395.648 cv
15.906 395.613 15.887 395.562 15.875 395.492 cv
15.863 395.426 15.859 395.336 15.859 395.223 cv
15.859 395.141 15.859 395.062 15.867 394.992 cv
15.867 394.922 15.879 394.859 15.895 394.805 cv
15.906 394.75 15.922 394.695 15.949 394.641 cv
15.969 394.586 15.996 394.531 16.031 394.469 cv
19.191 389.082 li
19.211 389.047 19.246 389.016 19.293 388.988 cv
19.336 388.961 19.391 388.937 19.465 388.918 cv
19.531 388.902 19.617 388.891 19.723 388.879 cv
19.824 388.875 19.945 388.871 20.086 388.867 cv
20.234 388.871 20.371 388.875 20.488 388.887 cv
20.602 388.898 20.691 388.914 20.766 388.93 cv
20.832 388.949 20.887 388.973 20.926 389.004 cv
20.961 389.035 20.98 389.07 20.98 389.109 cv
20.98 394.773 li
21.98 394.773 li
22.055 394.777 22.117 394.816 22.168 394.895 cv
22.215 394.977 22.238 395.098 22.242 395.258 cv
cp
19.801 389.906 mo
19.789 389.906 li
16.938 394.773 li
19.801 394.773 li
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 354.27 mo
22.606 354.27 li
22.606 371.36 li
15.512 371.36 li
cp
0 0 0 0 cmyk
ef
21.824 364.809 mo
21.824 365.285 21.742 365.707 21.582 366.078 cv
21.422 366.449 21.195 366.762 20.906 367.016 cv
20.609 367.27 20.262 367.465 19.859 367.594 cv
19.453 367.727 19.004 367.789 18.512 367.789 cv
18.234 367.789 17.973 367.77 17.73 367.73 cv
17.48 367.691 17.262 367.645 17.074 367.59 cv
16.879 367.535 16.723 367.48 16.598 367.422 cv
16.473 367.371 16.395 367.328 16.363 367.293 cv
16.328 367.262 16.305 367.23 16.293 367.203 cv
16.277 367.176 16.262 367.145 16.254 367.102 cv
16.238 367.066 16.23 367.016 16.23 366.953 cv
16.223 366.895 16.223 366.824 16.223 366.742 cv
16.223 366.668 16.227 366.598 16.234 366.535 cv
16.242 366.473 16.254 366.422 16.273 366.383 cv
16.289 366.344 16.309 366.316 16.336 366.297 cv
16.359 366.281 16.391 366.273 16.422 366.27 cv
16.469 366.273 16.539 366.301 16.633 366.355 cv
16.727 366.414 16.855 366.477 17.02 366.543 cv
17.184 366.609 17.383 366.672 17.625 366.73 cv
17.859 366.789 18.145 366.816 18.48 366.816 cv
18.781 366.816 19.063 366.781 19.32 366.707 cv
19.574 366.637 19.797 366.523 19.984 366.367 cv
20.168 366.215 20.313 366.02 20.418 365.781 cv
20.523 365.547 20.574 365.258 20.578 364.918 cv
20.574 364.637 20.531 364.387 20.441 364.168 cv
20.352 363.949 20.215 363.77 20.031 363.625 cv
19.844 363.484 19.609 363.379 19.328 363.305 cv
19.043 363.234 18.703 363.195 18.316 363.195 cv
18.031 363.195 17.793 363.211 17.594 363.238 cv
17.391 363.27 17.203 363.285 17.031 363.281 cv
16.902 363.285 16.809 363.254 16.758 363.191 cv
16.699 363.133 16.672 363.02 16.676 362.848 cv
16.676 359.234 li
16.672 359.086 16.707 358.977 16.781 358.898 cv
16.848 358.828 16.949 358.789 17.086 358.789 cv
21.016 358.789 li
21.051 358.789 21.086 358.801 21.121 358.82 cv
21.152 358.844 21.18 358.875 21.207 358.914 cv
21.227 358.957 21.242 359.008 21.258 359.07 cv
21.266 359.137 21.273 359.215 21.277 359.297 cv
21.273 359.465 21.25 359.59 21.211 359.68 cv
21.164 359.773 21.105 359.82 21.027 359.816 cv
17.855 359.816 li
17.855 362.305 li
18.008 362.285 18.164 362.273 18.328 362.266 cv
18.484 362.262 18.672 362.258 18.887 362.258 cv
19.371 362.258 19.797 362.32 20.164 362.441 cv
20.527 362.562 20.832 362.734 21.082 362.953 cv
21.324 363.18 21.512 363.445 21.637 363.758 cv
21.762 364.074 21.824 364.426 21.824 364.809 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 324.16 mo
22.606 324.16 li
22.606 341.25 li
15.512 341.25 li
cp
0 0 0 0 cmyk
ef
22.094 334.668 mo
22.094 335.059 22.031 335.437 21.914 335.797 cv
21.789 336.164 21.605 336.48 21.363 336.754 cv
21.113 337.031 20.801 337.254 20.426 337.418 cv
20.043 337.586 19.598 337.668 19.082 337.668 cv
18.711 337.668 18.383 337.625 18.102 337.531 cv
17.816 337.445 17.57 337.312 17.359 337.141 cv
17.148 336.973 16.973 336.766 16.836 336.52 cv
16.695 336.273 16.582 335.992 16.5 335.676 cv
16.414 335.363 16.355 335.02 16.32 334.641 cv
16.281 334.27 16.262 333.867 16.266 333.434 cv
16.262 333.055 16.281 332.672 16.324 332.281 cv
16.363 331.898 16.438 331.523 16.543 331.156 cv
16.648 330.797 16.793 330.457 16.973 330.141 cv
17.152 329.824 17.379 329.547 17.652 329.312 cv
17.926 329.078 18.25 328.891 18.629 328.75 cv
19.008 328.613 19.449 328.547 19.953 328.543 cv
20.121 328.547 20.293 328.555 20.465 328.574 cv
20.637 328.598 20.797 328.629 20.945 328.66 cv
21.094 328.699 21.215 328.734 21.316 328.773 cv
21.414 328.812 21.48 328.848 21.516 328.871 cv
21.543 328.898 21.566 328.926 21.586 328.953 cv
21.602 328.984 21.617 329.016 21.625 329.051 cv
21.633 329.086 21.637 329.125 21.645 329.168 cv
21.645 329.211 21.648 329.266 21.652 329.328 cv
21.648 329.414 21.648 329.484 21.648 329.539 cv
21.645 329.602 21.633 329.648 21.621 329.684 cv
21.602 329.723 21.582 329.75 21.559 329.766 cv
21.531 329.785 21.5 329.793 21.461 329.793 cv
21.41 329.793 21.34 329.777 21.254 329.746 cv
21.164 329.715 21.059 329.68 20.938 329.637 cv
20.813 329.602 20.664 329.566 20.488 329.531 cv
20.313 329.504 20.109 329.488 19.879 329.484 cv
19.449 329.488 19.082 329.574 18.777 329.746 cv
18.473 329.918 18.223 330.152 18.027 330.445 cv
17.832 330.738 17.688 331.078 17.598 331.461 cv
17.5 331.852 17.445 332.254 17.438 332.672 cv
17.555 332.605 17.691 332.539 17.84 332.469 cv
17.988 332.402 18.148 332.34 18.324 332.281 cv
18.5 332.23 18.688 332.184 18.883 332.148 cv
19.078 332.117 19.289 332.102 19.516 332.098 cv
19.992 332.102 20.395 332.168 20.727 332.293 cv
21.055 332.426 21.32 332.605 21.527 332.836 cv
21.727 333.066 21.871 333.336 21.961 333.648 cv
22.047 333.961 22.094 334.301 22.094 334.668 cv
cp
20.898 334.777 mo
20.898 334.516 20.871 334.273 20.82 334.055 cv
20.766 333.84 20.676 333.656 20.555 333.5 cv
20.43 333.352 20.266 333.234 20.063 333.152 cv
19.852 333.07 19.598 333.027 19.301 333.027 cv
19.129 333.027 18.961 333.043 18.793 333.074 cv
18.621 333.105 18.457 333.148 18.301 333.195 cv
18.141 333.25 17.992 333.312 17.852 333.383 cv
17.707 333.457 17.574 333.531 17.457 333.609 cv
17.453 334.203 17.492 334.699 17.57 335.094 cv
17.645 335.492 17.754 335.809 17.898 336.047 cv
18.043 336.289 18.223 336.461 18.438 336.562 cv
18.652 336.668 18.902 336.719 19.191 336.715 cv
19.48 336.719 19.734 336.664 19.949 336.551 cv
20.164 336.445 20.34 336.297 20.484 336.109 cv
20.625 335.926 20.73 335.719 20.797 335.488 cv
20.863 335.258 20.898 335.023 20.898 334.777 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 294.059 mo
22.606 294.059 li
22.606 311.149 li
15.512 311.149 li
cp
0 0 0 0 cmyk
ef
21.996 299.078 mo
21.992 299.164 21.988 299.238 21.984 299.301 cv
21.977 299.371 21.969 299.434 21.957 299.492 cv
21.945 299.559 21.93 299.617 21.91 299.672 cv
21.887 299.73 21.863 299.793 21.84 299.852 cv
18.645 307.215 li
18.617 307.273 18.59 307.316 18.559 307.348 cv
18.523 307.383 18.48 307.41 18.426 307.43 cv
18.371 307.449 18.301 307.461 18.223 307.473 cv
18.137 307.477 18.039 307.48 17.922 307.484 cv
17.766 307.48 17.645 307.473 17.559 307.461 cv
17.473 307.445 17.41 307.43 17.371 307.398 cv
17.332 307.371 17.313 307.332 17.32 307.289 cv
17.32 307.246 17.336 307.195 17.367 307.133 cv
20.727 299.605 li
16.469 299.605 li
16.383 299.609 16.316 299.562 16.273 299.469 cv
16.23 299.379 16.211 299.25 16.211 299.086 cv
16.211 299 16.215 298.926 16.227 298.859 cv
16.238 298.797 16.254 298.742 16.277 298.699 cv
16.297 298.656 16.324 298.625 16.359 298.602 cv
16.391 298.582 16.43 298.57 16.469 298.57 cv
21.641 298.57 li
21.699 298.57 21.754 298.578 21.805 298.594 cv
21.852 298.609 21.887 298.637 21.914 298.676 cv
21.938 298.715 21.957 298.77 21.973 298.832 cv
21.984 298.898 21.992 298.98 21.996 299.078 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 263.949 mo
22.606 263.949 li
22.606 281.039 li
15.512 281.039 li
cp
0 0 0 0 cmyk
ef
22.07 275.043 mo
22.07 275.43 22 275.773 21.863 276.07 cv
21.727 276.375 21.531 276.625 21.273 276.828 cv
21.016 277.035 20.695 277.191 20.316 277.293 cv
19.934 277.398 19.5 277.449 19.016 277.449 cv
18.555 277.449 18.145 277.402 17.785 277.309 cv
17.422 277.215 17.117 277.074 16.867 276.883 cv
16.617 276.699 16.426 276.469 16.293 276.191 cv
16.16 275.918 16.094 275.605 16.094 275.25 cv
16.094 274.977 16.137 274.719 16.23 274.484 cv
16.316 274.25 16.449 274.035 16.625 273.84 cv
16.793 273.645 17.004 273.461 17.258 273.285 cv
17.508 273.117 17.793 272.953 18.109 272.797 cv
17.836 272.656 17.594 272.508 17.383 272.348 cv
17.172 272.191 16.992 272.02 16.848 271.832 cv
16.699 271.648 16.59 271.453 16.516 271.242 cv
16.438 271.035 16.398 270.805 16.402 270.555 cv
16.398 270.246 16.453 269.953 16.57 269.68 cv
16.68 269.41 16.852 269.176 17.078 268.973 cv
17.305 268.773 17.59 268.613 17.941 268.496 cv
18.285 268.379 18.695 268.32 19.164 268.32 cv
19.609 268.32 19.996 268.375 20.324 268.48 cv
20.652 268.59 20.922 268.734 21.133 268.918 cv
21.344 269.105 21.5 269.324 21.605 269.574 cv
21.703 269.824 21.754 270.094 21.758 270.383 cv
21.754 270.617 21.715 270.844 21.645 271.055 cv
21.566 271.273 21.457 271.477 21.309 271.664 cv
21.16 271.859 20.98 272.039 20.77 272.203 cv
20.559 272.375 20.316 272.531 20.043 272.672 cv
20.363 272.836 20.648 273 20.906 273.168 cv
21.156 273.336 21.371 273.516 21.547 273.711 cv
21.715 273.906 21.844 274.113 21.938 274.328 cv
22.023 274.547 22.07 274.785 22.07 275.043 cv
cp
20.59 270.492 mo
20.586 270.305 20.555 270.129 20.488 269.973 cv
20.422 269.816 20.324 269.684 20.199 269.574 cv
20.07 269.465 19.91 269.383 19.723 269.324 cv
19.527 269.27 19.313 269.242 19.074 269.238 cv
18.578 269.242 18.203 269.352 17.953 269.574 cv
17.695 269.801 17.57 270.109 17.574 270.492 cv
17.57 270.672 17.602 270.836 17.664 270.988 cv
17.727 271.145 17.82 271.289 17.953 271.426 cv
18.078 271.562 18.242 271.695 18.445 271.824 cv
18.641 271.957 18.879 272.094 19.156 272.234 cv
19.617 272 19.973 271.738 20.219 271.445 cv
20.465 271.16 20.586 270.844 20.59 270.492 cv
cp
20.879 275.168 mo
20.875 274.961 20.836 274.77 20.762 274.598 cv
20.68 274.43 20.563 274.27 20.406 274.117 cv
20.25 273.969 20.051 273.824 19.816 273.684 cv
19.578 273.547 19.309 273.402 19 273.25 cv
18.711 273.395 18.457 273.535 18.242 273.676 cv
18.023 273.816 17.844 273.965 17.707 274.113 cv
17.566 274.27 17.461 274.426 17.391 274.59 cv
17.316 274.758 17.281 274.941 17.285 275.141 cv
17.281 275.586 17.434 275.93 17.742 276.168 cv
18.043 276.414 18.496 276.535 19.102 276.531 cv
19.684 276.535 20.129 276.414 20.43 276.164 cv
20.727 275.922 20.875 275.59 20.879 275.168 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
15.512 233.84 mo
22.606 233.84 li
22.606 250.93 li
15.512 250.93 li
cp
0 0 0 0 cmyk
ef
21.934 242.434 mo
21.93 242.82 21.906 243.207 21.863 243.598 cv
21.816 243.992 21.738 244.371 21.633 244.734 cv
21.52 245.098 21.375 245.437 21.191 245.754 cv
21.004 246.074 20.77 246.355 20.492 246.59 cv
20.207 246.832 19.871 247.016 19.488 247.148 cv
19.098 247.281 18.652 247.348 18.145 247.348 cv
17.945 247.348 17.754 247.332 17.57 247.309 cv
17.383 247.281 17.215 247.254 17.07 247.219 cv
16.918 247.184 16.793 247.145 16.695 247.102 cv
16.594 247.062 16.52 247.023 16.477 246.98 cv
16.43 246.941 16.398 246.887 16.379 246.812 cv
16.355 246.742 16.344 246.645 16.348 246.527 cv
16.344 246.426 16.348 246.348 16.355 246.289 cv
16.359 246.23 16.371 246.184 16.387 246.152 cv
16.402 246.121 16.422 246.102 16.445 246.086 cv
16.469 246.078 16.5 246.07 16.539 246.066 cv
16.586 246.07 16.656 246.086 16.75 246.117 cv
16.84 246.152 16.953 246.191 17.098 246.23 cv
17.234 246.273 17.398 246.312 17.586 246.344 cv
17.77 246.383 17.98 246.398 18.219 246.395 cv
18.66 246.398 19.039 246.312 19.359 246.141 cv
19.672 245.969 19.934 245.742 20.137 245.453 cv
20.34 245.168 20.488 244.832 20.59 244.449 cv
20.688 244.07 20.742 243.672 20.754 243.25 cv
20.508 243.395 20.219 243.52 19.883 243.625 cv
19.543 243.738 19.156 243.793 18.719 243.789 cv
18.227 243.793 17.813 243.727 17.477 243.59 cv
17.141 243.457 16.867 243.273 16.664 243.039 cv
16.457 242.809 16.313 242.531 16.227 242.207 cv
16.137 241.891 16.094 241.539 16.094 241.16 cv
16.094 240.77 16.148 240.398 16.266 240.039 cv
16.375 239.687 16.555 239.375 16.801 239.105 cv
17.039 238.836 17.348 238.621 17.727 238.461 cv
18.098 238.301 18.547 238.219 19.07 238.219 cv
19.438 238.219 19.762 238.266 20.051 238.359 cv
20.332 238.453 20.582 238.59 20.797 238.766 cv
21.004 238.941 21.184 239.152 21.332 239.402 cv
21.477 239.652 21.594 239.934 21.684 240.246 cv
21.77 240.562 21.832 240.906 21.875 241.273 cv
21.91 241.645 21.93 242.031 21.934 242.434 cv
cp
20.734 242.305 mo
20.734 241.723 20.695 241.23 20.617 240.828 cv
20.539 240.43 20.422 240.105 20.273 239.855 cv
20.121 239.609 19.938 239.43 19.719 239.32 cv
19.496 239.211 19.242 239.156 18.961 239.156 cv
18.656 239.156 18.402 239.211 18.195 239.32 cv
17.984 239.43 17.813 239.574 17.68 239.75 cv
17.543 239.934 17.441 240.137 17.379 240.363 cv
17.313 240.594 17.281 240.832 17.285 241.07 cv
17.281 241.344 17.313 241.59 17.371 241.809 cv
17.426 242.035 17.516 242.223 17.648 242.379 cv
17.773 242.535 17.941 242.656 18.148 242.742 cv
18.352 242.828 18.605 242.871 18.91 242.867 cv
19.25 242.871 19.582 242.82 19.906 242.715 cv
20.223 242.613 20.5 242.477 20.734 242.305 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
8.418 203.738 mo
22.609 203.738 li
22.609 220.828 li
8.418 220.828 li
cp
0 0 0 0 cmyk
ef
14.781 216.637 mo
14.777 216.727 14.77 216.797 14.758 216.855 cv
14.742 216.918 14.723 216.969 14.703 217 cv
14.68 217.039 14.656 217.062 14.625 217.078 cv
14.594 217.094 14.563 217.102 14.535 217.102 cv
9.898 217.102 li
9.863 217.102 9.836 217.094 9.809 217.078 cv
9.781 217.062 9.754 217.039 9.73 217 cv
9.703 216.969 9.684 216.918 9.672 216.855 cv
9.656 216.797 9.648 216.727 9.652 216.637 cv
9.648 216.559 9.656 216.484 9.672 216.422 cv
9.684 216.363 9.699 216.316 9.723 216.277 cv
9.738 216.242 9.766 216.211 9.797 216.187 cv
9.828 216.168 9.859 216.16 9.898 216.156 cv
11.75 216.156 li
11.75 209.41 li
10.035 210.43 li
9.945 210.48 9.875 210.508 9.828 210.516 cv
9.773 210.523 9.73 210.516 9.699 210.484 cv
9.664 210.457 9.645 210.406 9.633 210.336 cv
9.621 210.27 9.613 210.184 9.617 210.074 cv
9.613 210 9.617 209.934 9.629 209.875 cv
9.633 209.824 9.645 209.777 9.66 209.738 cv
9.672 209.703 9.691 209.672 9.715 209.645 cv
9.738 209.617 9.77 209.59 9.816 209.562 cv
11.859 208.25 li
11.875 208.238 11.895 208.227 11.926 208.219 cv
11.949 208.211 11.984 208.203 12.031 208.191 cv
12.07 208.184 12.121 208.176 12.176 208.172 cv
12.23 208.172 12.297 208.172 12.383 208.168 cv
12.488 208.172 12.582 208.176 12.656 208.184 cv
12.727 208.191 12.781 208.207 12.828 208.223 cv
12.867 208.242 12.895 208.262 12.91 208.285 cv
12.918 208.312 12.926 208.336 12.93 208.359 cv
12.93 216.156 li
14.535 216.156 li
14.57 216.16 14.605 216.168 14.637 216.187 cv
14.668 216.211 14.691 216.242 14.715 216.277 cv
14.73 216.316 14.746 216.363 14.762 216.422 cv
14.77 216.484 14.777 216.559 14.781 216.637 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.133 212.645 mo
22.129 213.328 22.078 213.949 21.973 214.512 cv
21.863 215.074 21.684 215.559 21.438 215.961 cv
21.184 216.367 20.855 216.68 20.457 216.898 cv
20.051 217.121 19.559 217.23 18.973 217.23 cv
18.414 217.23 17.941 217.133 17.563 216.934 cv
17.18 216.738 16.875 216.445 16.641 216.059 cv
16.406 215.672 16.238 215.199 16.145 214.633 cv
16.043 214.07 15.996 213.422 15.996 212.687 cv
15.996 212.016 16.051 211.395 16.16 210.828 cv
16.27 210.266 16.445 209.781 16.695 209.375 cv
16.938 208.973 17.262 208.66 17.668 208.434 cv
18.066 208.215 18.563 208.102 19.152 208.102 cv
19.711 208.102 20.184 208.203 20.566 208.398 cv
20.949 208.602 21.254 208.895 21.488 209.277 cv
21.719 209.668 21.887 210.141 21.984 210.703 cv
22.082 211.266 22.129 211.914 22.133 212.645 cv
cp
20.926 212.727 mo
20.922 212.285 20.906 211.887 20.879 211.535 cv
20.844 211.184 20.797 210.875 20.738 210.605 cv
20.672 210.336 20.594 210.105 20.496 209.91 cv
20.398 209.719 20.281 209.559 20.145 209.43 cv
20.004 209.305 19.844 209.211 19.672 209.152 cv
19.492 209.098 19.297 209.07 19.082 209.066 cv
18.691 209.07 18.375 209.16 18.137 209.344 cv
17.891 209.527 17.699 209.781 17.563 210.098 cv
17.422 210.418 17.328 210.789 17.277 211.219 cv
17.227 211.648 17.203 212.113 17.203 212.605 cv
17.203 213.27 17.234 213.832 17.305 214.293 cv
17.371 214.762 17.48 215.141 17.633 215.43 cv
17.777 215.727 17.969 215.937 18.199 216.066 cv
18.43 216.203 18.711 216.27 19.043 216.266 cv
19.297 216.27 19.52 216.23 19.715 216.145 cv
19.906 216.066 20.074 215.945 20.215 215.789 cv
20.355 215.637 20.469 215.453 20.563 215.238 cv
20.648 215.023 20.723 214.785 20.781 214.523 cv
20.832 214.266 20.871 213.984 20.895 213.68 cv
20.914 213.375 20.922 213.059 20.926 212.727 cv
cp
f
8.418 173.629 mo
22.609 173.629 li
22.609 190.719 li
8.418 190.719 li
cp
0 0 0 0 cmyk
ef
14.781 186.516 mo
14.777 186.605 14.77 186.676 14.758 186.734 cv
14.742 186.797 14.723 186.848 14.703 186.879 cv
14.68 186.918 14.656 186.941 14.625 186.957 cv
14.594 186.973 14.563 186.98 14.535 186.98 cv
9.898 186.98 li
9.863 186.98 9.836 186.973 9.809 186.957 cv
9.781 186.941 9.754 186.918 9.73 186.879 cv
9.703 186.848 9.684 186.797 9.672 186.734 cv
9.656 186.676 9.648 186.605 9.652 186.516 cv
9.648 186.437 9.656 186.363 9.672 186.301 cv
9.684 186.242 9.699 186.195 9.723 186.156 cv
9.738 186.121 9.766 186.09 9.797 186.066 cv
9.828 186.047 9.859 186.039 9.898 186.035 cv
11.75 186.035 li
11.75 179.289 li
10.035 180.309 li
9.945 180.359 9.875 180.387 9.828 180.395 cv
9.773 180.402 9.73 180.395 9.699 180.363 cv
9.664 180.336 9.645 180.285 9.633 180.215 cv
9.621 180.148 9.613 180.062 9.617 179.953 cv
9.613 179.879 9.617 179.812 9.629 179.754 cv
9.633 179.703 9.645 179.656 9.66 179.617 cv
9.672 179.582 9.691 179.551 9.715 179.523 cv
9.738 179.496 9.77 179.469 9.816 179.441 cv
11.859 178.129 li
11.875 178.117 11.895 178.105 11.926 178.098 cv
11.949 178.09 11.984 178.082 12.031 178.07 cv
12.07 178.062 12.121 178.055 12.176 178.051 cv
12.23 178.051 12.297 178.051 12.383 178.047 cv
12.488 178.051 12.582 178.055 12.656 178.062 cv
12.727 178.07 12.781 178.086 12.828 178.102 cv
12.867 178.121 12.895 178.141 12.91 178.164 cv
12.918 178.191 12.926 178.215 12.93 178.238 cv
12.93 186.035 li
14.535 186.035 li
14.57 186.039 14.605 186.047 14.637 186.066 cv
14.668 186.09 14.691 186.121 14.715 186.156 cv
14.73 186.195 14.746 186.242 14.762 186.301 cv
14.77 186.363 14.777 186.437 14.781 186.516 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
21.859 186.516 mo
21.855 186.605 21.848 186.676 21.836 186.734 cv
21.82 186.797 21.801 186.848 21.781 186.879 cv
21.758 186.918 21.734 186.941 21.703 186.957 cv
21.672 186.973 21.641 186.98 21.613 186.98 cv
16.977 186.98 li
16.941 186.98 16.914 186.973 16.887 186.957 cv
16.859 186.941 16.832 186.918 16.809 186.879 cv
16.781 186.848 16.762 186.797 16.75 186.734 cv
16.734 186.676 16.727 186.605 16.73 186.516 cv
16.727 186.437 16.734 186.363 16.75 186.301 cv
16.762 186.242 16.777 186.195 16.801 186.156 cv
16.816 186.121 16.844 186.09 16.875 186.066 cv
16.906 186.047 16.938 186.039 16.977 186.035 cv
18.828 186.035 li
18.828 179.289 li
17.113 180.309 li
17.023 180.359 16.953 180.387 16.906 180.395 cv
16.852 180.402 16.809 180.395 16.777 180.363 cv
16.742 180.336 16.723 180.285 16.711 180.215 cv
16.699 180.148 16.691 180.062 16.695 179.953 cv
16.691 179.879 16.695 179.812 16.707 179.754 cv
16.711 179.703 16.723 179.656 16.738 179.617 cv
16.75 179.582 16.77 179.551 16.793 179.523 cv
16.816 179.496 16.848 179.469 16.895 179.441 cv
18.938 178.129 li
18.953 178.117 18.973 178.105 19.004 178.098 cv
19.027 178.09 19.063 178.082 19.109 178.07 cv
19.148 178.062 19.199 178.055 19.254 178.051 cv
19.309 178.051 19.375 178.051 19.461 178.047 cv
19.566 178.051 19.66 178.055 19.734 178.062 cv
19.805 178.07 19.859 178.086 19.906 178.102 cv
19.945 178.121 19.973 178.141 19.988 178.164 cv
19.996 178.191 20.004 178.215 20.008 178.238 cv
20.008 186.035 li
21.613 186.035 li
21.648 186.039 21.684 186.047 21.715 186.066 cv
21.746 186.09 21.77 186.121 21.793 186.156 cv
21.809 186.195 21.824 186.242 21.84 186.301 cv
21.848 186.363 21.855 186.437 21.859 186.516 cv
cp
f
8.418 143.531 mo
22.609 143.531 li
22.609 160.621 li
8.418 160.621 li
cp
0 0 0 0 cmyk
ef
14.781 156.426 mo
14.777 156.516 14.77 156.586 14.758 156.645 cv
14.742 156.707 14.723 156.758 14.703 156.789 cv
14.68 156.828 14.656 156.852 14.625 156.867 cv
14.594 156.883 14.563 156.891 14.535 156.891 cv
9.898 156.891 li
9.863 156.891 9.836 156.883 9.809 156.867 cv
9.781 156.852 9.754 156.828 9.73 156.789 cv
9.703 156.758 9.684 156.707 9.672 156.645 cv
9.656 156.586 9.648 156.516 9.652 156.426 cv
9.648 156.348 9.656 156.273 9.672 156.211 cv
9.684 156.152 9.699 156.105 9.723 156.066 cv
9.738 156.031 9.766 156 9.797 155.977 cv
9.828 155.957 9.859 155.949 9.898 155.945 cv
11.75 155.945 li
11.75 149.199 li
10.035 150.219 li
9.945 150.27 9.875 150.297 9.828 150.305 cv
9.773 150.312 9.73 150.305 9.699 150.273 cv
9.664 150.246 9.645 150.195 9.633 150.125 cv
9.621 150.059 9.613 149.973 9.617 149.863 cv
9.613 149.789 9.617 149.723 9.629 149.664 cv
9.633 149.613 9.645 149.566 9.66 149.527 cv
9.672 149.492 9.691 149.461 9.715 149.434 cv
9.738 149.406 9.77 149.379 9.816 149.352 cv
11.859 148.039 li
11.875 148.027 11.895 148.016 11.926 148.008 cv
11.949 148 11.984 147.992 12.031 147.98 cv
12.07 147.973 12.121 147.965 12.176 147.961 cv
12.23 147.961 12.297 147.961 12.383 147.957 cv
12.488 147.961 12.582 147.965 12.656 147.973 cv
12.727 147.98 12.781 147.996 12.828 148.012 cv
12.867 148.031 12.895 148.051 12.91 148.074 cv
12.918 148.102 12.926 148.125 12.93 148.148 cv
12.93 155.945 li
14.535 155.945 li
14.57 155.949 14.605 155.957 14.637 155.977 cv
14.668 156 14.691 156.031 14.715 156.066 cv
14.73 156.105 14.746 156.152 14.762 156.211 cv
14.77 156.273 14.777 156.348 14.781 156.426 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
21.84 156.383 mo
21.836 156.469 21.832 156.543 21.82 156.605 cv
21.809 156.672 21.793 156.727 21.773 156.766 cv
21.75 156.812 21.723 156.844 21.691 156.859 cv
21.656 156.883 21.617 156.891 21.578 156.891 cv
16.676 156.891 li
16.613 156.891 16.555 156.883 16.508 156.867 cv
16.457 156.852 16.418 156.828 16.383 156.789 cv
16.348 156.758 16.32 156.703 16.309 156.633 cv
16.289 156.562 16.281 156.477 16.285 156.375 cv
16.281 156.285 16.285 156.207 16.293 156.137 cv
16.297 156.07 16.313 156.012 16.34 155.957 cv
16.363 155.906 16.395 155.852 16.43 155.797 cv
16.465 155.746 16.508 155.691 16.566 155.629 cv
18.34 153.805 li
18.75 153.387 19.078 153.012 19.328 152.676 cv
19.574 152.348 19.766 152.043 19.898 151.766 cv
20.031 151.492 20.117 151.242 20.164 151.016 cv
20.203 150.793 20.227 150.582 20.227 150.387 cv
20.227 150.191 20.191 150.008 20.125 149.828 cv
20.059 149.656 19.965 149.5 19.84 149.363 cv
19.715 149.234 19.559 149.129 19.371 149.047 cv
19.184 148.973 18.965 148.934 18.719 148.93 cv
18.43 148.934 18.172 148.973 17.945 149.047 cv
17.715 149.129 17.516 149.215 17.344 149.301 cv
17.172 149.395 17.027 149.477 16.91 149.555 cv
16.793 149.633 16.707 149.672 16.656 149.672 cv
16.621 149.672 16.59 149.664 16.566 149.645 cv
16.535 149.629 16.516 149.598 16.5 149.555 cv
16.484 149.516 16.469 149.461 16.461 149.391 cv
16.449 149.324 16.445 149.242 16.449 149.145 cv
16.445 149.078 16.449 149.02 16.457 148.969 cv
16.461 148.918 16.469 148.875 16.48 148.836 cv
16.488 148.801 16.504 148.766 16.523 148.734 cv
16.543 148.703 16.578 148.664 16.637 148.613 cv
16.688 148.566 16.781 148.5 16.918 148.418 cv
17.051 148.336 17.223 148.258 17.426 148.176 cv
17.629 148.098 17.852 148.027 18.098 147.973 cv
18.34 147.918 18.598 147.891 18.871 147.891 cv
19.297 147.891 19.672 147.953 19.996 148.074 cv
20.316 148.195 20.582 148.359 20.797 148.57 cv
21.008 148.781 21.168 149.027 21.273 149.301 cv
21.379 149.582 21.434 149.879 21.434 150.191 cv
21.434 150.48 21.406 150.762 21.355 151.039 cv
21.305 151.324 21.199 151.629 21.039 151.953 cv
20.875 152.281 20.641 152.645 20.336 153.043 cv
20.027 153.445 19.621 153.906 19.117 154.422 cv
17.711 155.891 li
21.57 155.891 li
21.602 155.895 21.637 155.906 21.676 155.922 cv
21.707 155.945 21.738 155.977 21.766 156.016 cv
21.789 156.059 21.809 156.109 21.82 156.168 cv
21.832 156.234 21.836 156.305 21.84 156.383 cv
cp
f
8.418 113.422 mo
22.609 113.422 li
22.609 130.512 li
8.418 130.512 li
cp
0 0 0 0 cmyk
ef
14.781 126.305 mo
14.777 126.395 14.77 126.465 14.758 126.523 cv
14.742 126.586 14.723 126.637 14.703 126.668 cv
14.68 126.707 14.656 126.73 14.625 126.746 cv
14.594 126.762 14.563 126.77 14.535 126.77 cv
9.898 126.77 li
9.863 126.77 9.836 126.762 9.809 126.746 cv
9.781 126.73 9.754 126.707 9.73 126.668 cv
9.703 126.637 9.684 126.586 9.672 126.523 cv
9.656 126.465 9.648 126.395 9.652 126.305 cv
9.648 126.227 9.656 126.152 9.672 126.09 cv
9.684 126.031 9.699 125.984 9.723 125.945 cv
9.738 125.91 9.766 125.879 9.797 125.855 cv
9.828 125.836 9.859 125.828 9.898 125.824 cv
11.75 125.824 li
11.75 119.078 li
10.035 120.098 li
9.945 120.148 9.875 120.176 9.828 120.184 cv
9.773 120.191 9.73 120.184 9.699 120.152 cv
9.664 120.125 9.645 120.074 9.633 120.004 cv
9.621 119.937 9.613 119.852 9.617 119.742 cv
9.613 119.668 9.617 119.602 9.629 119.543 cv
9.633 119.492 9.645 119.445 9.66 119.406 cv
9.672 119.371 9.691 119.34 9.715 119.312 cv
9.738 119.285 9.77 119.258 9.816 119.23 cv
11.859 117.918 li
11.875 117.906 11.895 117.895 11.926 117.887 cv
11.949 117.879 11.984 117.871 12.031 117.859 cv
12.07 117.852 12.121 117.844 12.176 117.84 cv
12.23 117.84 12.297 117.84 12.383 117.836 cv
12.488 117.84 12.582 117.844 12.656 117.852 cv
12.727 117.859 12.781 117.875 12.828 117.891 cv
12.867 117.91 12.895 117.93 12.91 117.953 cv
12.918 117.98 12.926 118.004 12.93 118.027 cv
12.93 125.824 li
14.535 125.824 li
14.57 125.828 14.605 125.836 14.637 125.855 cv
14.668 125.879 14.691 125.91 14.715 125.945 cv
14.73 125.984 14.746 126.031 14.762 126.09 cv
14.77 126.152 14.777 126.227 14.781 126.305 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
21.77 124.234 mo
21.766 124.645 21.695 125.012 21.555 125.336 cv
21.41 125.664 21.207 125.945 20.945 126.176 cv
20.68 126.41 20.352 126.586 19.965 126.711 cv
19.574 126.836 19.137 126.898 18.652 126.898 cv
18.348 126.898 18.07 126.871 17.816 126.824 cv
17.555 126.777 17.324 126.727 17.129 126.656 cv
16.926 126.594 16.762 126.523 16.629 126.453 cv
16.496 126.383 16.41 126.332 16.379 126.297 cv
16.34 126.27 16.316 126.238 16.301 126.203 cv
16.281 126.172 16.262 126.133 16.25 126.086 cv
16.234 126.043 16.227 125.988 16.219 125.918 cv
16.211 125.855 16.207 125.773 16.211 125.672 cv
16.207 125.512 16.223 125.398 16.258 125.332 cv
16.289 125.27 16.336 125.234 16.398 125.234 cv
16.441 125.234 16.523 125.273 16.648 125.344 cv
16.77 125.422 16.93 125.5 17.125 125.582 cv
17.316 125.668 17.543 125.746 17.809 125.816 cv
18.066 125.891 18.359 125.926 18.68 125.926 cv
18.988 125.926 19.258 125.887 19.496 125.809 cv
19.727 125.73 19.926 125.621 20.086 125.48 cv
20.242 125.34 20.359 125.172 20.441 124.977 cv
20.52 124.781 20.559 124.57 20.563 124.344 cv
20.559 124.094 20.508 123.867 20.41 123.664 cv
20.305 123.465 20.156 123.293 19.965 123.145 cv
19.766 123 19.527 122.887 19.242 122.809 cv
18.957 122.73 18.633 122.691 18.27 122.691 cv
17.398 122.691 li
17.355 122.691 17.32 122.684 17.285 122.668 cv
17.25 122.652 17.219 122.625 17.195 122.586 cv
17.168 122.551 17.148 122.504 17.133 122.445 cv
17.117 122.387 17.109 122.309 17.109 122.211 cv
17.109 122.125 17.113 122.055 17.129 121.996 cv
17.137 121.941 17.156 121.895 17.188 121.859 cv
17.211 121.824 17.242 121.801 17.273 121.781 cv
17.305 121.77 17.34 121.762 17.383 121.758 cv
18.156 121.758 li
18.457 121.762 18.727 121.723 18.969 121.641 cv
19.203 121.566 19.406 121.453 19.578 121.305 cv
19.742 121.16 19.871 120.984 19.961 120.781 cv
20.051 120.578 20.098 120.352 20.098 120.098 cv
20.098 119.918 20.066 119.742 20.008 119.574 cv
19.945 119.41 19.855 119.266 19.738 119.141 cv
19.617 119.016 19.465 118.918 19.285 118.848 cv
19.098 118.777 18.887 118.742 18.645 118.742 cv
18.379 118.742 18.133 118.785 17.914 118.863 cv
17.688 118.945 17.492 119.031 17.32 119.121 cv
17.145 119.215 17 119.301 16.887 119.379 cv
16.773 119.461 16.691 119.5 16.648 119.496 cv
16.613 119.5 16.586 119.492 16.563 119.48 cv
16.535 119.469 16.516 119.445 16.5 119.41 cv
16.484 119.379 16.473 119.332 16.465 119.266 cv
16.457 119.207 16.453 119.125 16.457 119.023 cv
16.453 118.957 16.453 118.898 16.461 118.844 cv
16.461 118.793 16.473 118.746 16.488 118.703 cv
16.504 118.668 16.52 118.633 16.539 118.598 cv
16.555 118.57 16.586 118.531 16.629 118.484 cv
16.672 118.441 16.758 118.379 16.895 118.297 cv
17.023 118.215 17.188 118.137 17.383 118.055 cv
17.574 117.977 17.797 117.906 18.055 117.852 cv
18.305 117.797 18.578 117.77 18.875 117.77 cv
19.281 117.77 19.645 117.824 19.957 117.926 cv
20.27 118.035 20.527 118.184 20.738 118.371 cv
20.941 118.566 21.098 118.797 21.203 119.062 cv
21.305 119.332 21.355 119.625 21.359 119.949 cv
21.355 120.23 21.32 120.492 21.25 120.727 cv
21.176 120.969 21.066 121.18 20.926 121.363 cv
20.781 121.551 20.609 121.707 20.406 121.836 cv
20.199 121.969 19.961 122.062 19.691 122.109 cv
19.691 122.121 li
19.996 122.156 20.277 122.23 20.531 122.352 cv
20.785 122.473 21.004 122.625 21.188 122.809 cv
21.367 122.992 21.508 123.207 21.613 123.449 cv
21.715 123.695 21.766 123.957 21.77 124.234 cv
cp
f
8.418 83.32 mo
22.609 83.32 li
22.609 100.41 li
8.418 100.41 li
cp
0 0 0 0 cmyk
ef
14.781 96.184 mo
14.777 96.273 14.77 96.344 14.758 96.402 cv
14.742 96.465 14.723 96.516 14.703 96.547 cv
14.68 96.586 14.656 96.609 14.625 96.625 cv
14.594 96.641 14.563 96.648 14.535 96.648 cv
9.898 96.648 li
9.863 96.648 9.836 96.641 9.809 96.625 cv
9.781 96.609 9.754 96.586 9.73 96.547 cv
9.703 96.516 9.684 96.465 9.672 96.402 cv
9.656 96.344 9.648 96.273 9.652 96.184 cv
9.648 96.105 9.656 96.031 9.672 95.969 cv
9.684 95.91 9.699 95.863 9.723 95.824 cv
9.738 95.789 9.766 95.758 9.797 95.734 cv
9.828 95.715 9.859 95.707 9.898 95.703 cv
11.75 95.703 li
11.75 88.957 li
10.035 89.977 li
9.945 90.027 9.875 90.055 9.828 90.062 cv
9.773 90.07 9.73 90.062 9.699 90.031 cv
9.664 90.004 9.645 89.953 9.633 89.883 cv
9.621 89.816 9.613 89.73 9.617 89.621 cv
9.613 89.547 9.617 89.48 9.629 89.422 cv
9.633 89.371 9.645 89.324 9.66 89.285 cv
9.672 89.25 9.691 89.219 9.715 89.191 cv
9.738 89.164 9.77 89.137 9.816 89.109 cv
11.859 87.797 li
11.875 87.785 11.895 87.773 11.926 87.766 cv
11.949 87.758 11.984 87.75 12.031 87.738 cv
12.07 87.73 12.121 87.723 12.176 87.719 cv
12.23 87.719 12.297 87.719 12.383 87.715 cv
12.488 87.719 12.582 87.723 12.656 87.73 cv
12.727 87.738 12.781 87.754 12.828 87.77 cv
12.867 87.789 12.895 87.809 12.91 87.832 cv
12.918 87.859 12.926 87.883 12.93 87.906 cv
12.93 95.703 li
14.535 95.703 li
14.57 95.707 14.605 95.715 14.637 95.734 cv
14.668 95.758 14.691 95.789 14.715 95.824 cv
14.73 95.863 14.746 95.91 14.762 95.969 cv
14.77 96.031 14.777 96.105 14.781 96.184 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.215 94.125 mo
22.211 94.277 22.188 94.398 22.145 94.484 cv
22.098 94.574 22.035 94.617 21.953 94.613 cv
20.953 94.613 li
20.953 96.477 li
20.953 96.516 20.941 96.547 20.926 96.57 cv
20.902 96.598 20.871 96.617 20.828 96.637 cv
20.777 96.652 20.715 96.664 20.645 96.676 cv
20.566 96.684 20.473 96.687 20.355 96.691 cv
20.238 96.687 20.141 96.684 20.07 96.676 cv
19.992 96.664 19.934 96.652 19.891 96.637 cv
19.844 96.617 19.813 96.598 19.797 96.57 cv
19.777 96.547 19.77 96.516 19.773 96.477 cv
19.773 94.613 li
16.145 94.613 li
16.086 94.617 16.043 94.609 16.008 94.594 cv
15.973 94.582 15.938 94.555 15.91 94.516 cv
15.879 94.48 15.859 94.43 15.848 94.359 cv
15.836 94.293 15.832 94.203 15.832 94.09 cv
15.832 94.008 15.832 93.93 15.84 93.859 cv
15.84 93.789 15.852 93.727 15.867 93.672 cv
15.879 93.617 15.895 93.562 15.922 93.508 cv
15.941 93.453 15.969 93.398 16.004 93.336 cv
19.164 87.949 li
19.184 87.914 19.219 87.883 19.266 87.855 cv
19.309 87.828 19.363 87.805 19.438 87.785 cv
19.504 87.77 19.59 87.758 19.695 87.746 cv
19.797 87.742 19.918 87.738 20.059 87.734 cv
20.207 87.738 20.344 87.742 20.461 87.754 cv
20.574 87.766 20.664 87.781 20.738 87.797 cv
20.805 87.816 20.859 87.84 20.898 87.871 cv
20.934 87.902 20.953 87.937 20.953 87.977 cv
20.953 93.641 li
21.953 93.641 li
22.027 93.645 22.09 93.684 22.141 93.762 cv
22.188 93.844 22.211 93.965 22.215 94.125 cv
cp
19.773 88.773 mo
19.762 88.773 li
16.91 93.641 li
19.773 93.641 li
cp
f
8.418 53.211 mo
22.609 53.211 li
22.609 70.301 li
8.418 70.301 li
cp
0 0 0 0 cmyk
ef
14.781 66.086 mo
14.777 66.176 14.77 66.246 14.758 66.305 cv
14.742 66.367 14.723 66.418 14.703 66.449 cv
14.68 66.488 14.656 66.512 14.625 66.527 cv
14.594 66.543 14.563 66.551 14.535 66.551 cv
9.898 66.551 li
9.863 66.551 9.836 66.543 9.809 66.527 cv
9.781 66.512 9.754 66.488 9.73 66.449 cv
9.703 66.418 9.684 66.367 9.672 66.305 cv
9.656 66.246 9.648 66.176 9.652 66.086 cv
9.648 66.008 9.656 65.934 9.672 65.871 cv
9.684 65.812 9.699 65.766 9.723 65.727 cv
9.738 65.691 9.766 65.66 9.797 65.637 cv
9.828 65.617 9.859 65.609 9.898 65.605 cv
11.75 65.605 li
11.75 58.859 li
10.035 59.879 li
9.945 59.93 9.875 59.957 9.828 59.965 cv
9.773 59.973 9.73 59.965 9.699 59.934 cv
9.664 59.906 9.645 59.855 9.633 59.785 cv
9.621 59.719 9.613 59.633 9.617 59.523 cv
9.613 59.449 9.617 59.383 9.629 59.324 cv
9.633 59.273 9.645 59.227 9.66 59.187 cv
9.672 59.152 9.691 59.121 9.715 59.094 cv
9.738 59.066 9.77 59.039 9.816 59.012 cv
11.859 57.699 li
11.875 57.687 11.895 57.676 11.926 57.668 cv
11.949 57.66 11.984 57.652 12.031 57.641 cv
12.07 57.633 12.121 57.625 12.176 57.621 cv
12.23 57.621 12.297 57.621 12.383 57.617 cv
12.488 57.621 12.582 57.625 12.656 57.633 cv
12.727 57.641 12.781 57.656 12.828 57.672 cv
12.867 57.691 12.895 57.711 12.91 57.734 cv
12.918 57.762 12.926 57.785 12.93 57.809 cv
12.93 65.605 li
14.535 65.605 li
14.57 65.609 14.605 65.617 14.637 65.637 cv
14.668 65.66 14.691 65.691 14.715 65.727 cv
14.73 65.766 14.746 65.812 14.762 65.871 cv
14.77 65.934 14.777 66.008 14.781 66.086 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
21.797 63.699 mo
21.797 64.176 21.715 64.598 21.555 64.969 cv
21.395 65.34 21.168 65.652 20.879 65.906 cv
20.582 66.16 20.234 66.355 19.832 66.484 cv
19.426 66.617 18.977 66.68 18.484 66.68 cv
18.207 66.68 17.945 66.66 17.703 66.621 cv
17.453 66.582 17.234 66.535 17.047 66.48 cv
16.852 66.426 16.695 66.371 16.57 66.312 cv
16.445 66.262 16.367 66.219 16.336 66.184 cv
16.301 66.152 16.277 66.121 16.266 66.094 cv
16.25 66.066 16.234 66.035 16.227 65.992 cv
16.211 65.957 16.203 65.906 16.203 65.844 cv
16.195 65.785 16.195 65.715 16.195 65.633 cv
16.195 65.559 16.199 65.488 16.207 65.426 cv
16.215 65.363 16.227 65.312 16.246 65.273 cv
16.262 65.234 16.281 65.207 16.309 65.187 cv
16.332 65.172 16.363 65.164 16.395 65.16 cv
16.441 65.164 16.512 65.191 16.605 65.246 cv
16.699 65.305 16.828 65.367 16.992 65.434 cv
17.156 65.5 17.355 65.562 17.598 65.621 cv
17.832 65.68 18.117 65.707 18.453 65.707 cv
18.754 65.707 19.035 65.672 19.293 65.598 cv
19.547 65.527 19.77 65.414 19.957 65.258 cv
20.141 65.105 20.285 64.91 20.391 64.672 cv
20.496 64.437 20.547 64.148 20.551 63.809 cv
20.547 63.527 20.504 63.277 20.414 63.059 cv
20.324 62.84 20.188 62.66 20.004 62.516 cv
19.816 62.375 19.582 62.27 19.301 62.195 cv
19.016 62.125 18.676 62.086 18.289 62.086 cv
18.004 62.086 17.766 62.102 17.566 62.129 cv
17.363 62.16 17.176 62.176 17.004 62.172 cv
16.875 62.176 16.781 62.145 16.73 62.082 cv
16.672 62.023 16.645 61.91 16.648 61.738 cv
16.648 58.125 li
16.645 57.977 16.68 57.867 16.754 57.789 cv
16.82 57.719 16.922 57.68 17.059 57.68 cv
20.988 57.68 li
21.023 57.68 21.059 57.691 21.094 57.711 cv
21.125 57.734 21.152 57.766 21.18 57.805 cv
21.199 57.848 21.215 57.898 21.23 57.961 cv
21.238 58.027 21.246 58.105 21.25 58.187 cv
21.246 58.355 21.223 58.48 21.184 58.57 cv
21.137 58.664 21.078 58.711 21 58.707 cv
17.828 58.707 li
17.828 61.195 li
17.98 61.176 18.137 61.164 18.301 61.156 cv
18.457 61.152 18.645 61.148 18.859 61.148 cv
19.344 61.148 19.77 61.211 20.137 61.332 cv
20.5 61.453 20.805 61.625 21.055 61.844 cv
21.297 62.07 21.484 62.336 21.609 62.648 cv
21.734 62.965 21.797 63.316 21.797 63.699 cv
cp
f
8.418 23.102 mo
22.609 23.102 li
22.609 40.192 li
8.418 40.192 li
cp
0 0 0 0 cmyk
ef
14.781 35.965 mo
14.777 36.055 14.77 36.125 14.758 36.184 cv
14.742 36.246 14.723 36.297 14.703 36.328 cv
14.68 36.367 14.656 36.391 14.625 36.406 cv
14.594 36.422 14.563 36.43 14.535 36.43 cv
9.898 36.43 li
9.863 36.43 9.836 36.422 9.809 36.406 cv
9.781 36.391 9.754 36.367 9.73 36.328 cv
9.703 36.297 9.684 36.246 9.672 36.184 cv
9.656 36.125 9.648 36.055 9.652 35.965 cv
9.648 35.887 9.656 35.812 9.672 35.75 cv
9.684 35.691 9.699 35.645 9.723 35.605 cv
9.738 35.57 9.766 35.539 9.797 35.516 cv
9.828 35.496 9.859 35.488 9.898 35.484 cv
11.75 35.484 li
11.75 28.738 li
10.035 29.758 li
9.945 29.809 9.875 29.836 9.828 29.844 cv
9.773 29.852 9.73 29.844 9.699 29.812 cv
9.664 29.785 9.645 29.734 9.633 29.664 cv
9.621 29.598 9.613 29.512 9.617 29.402 cv
9.613 29.328 9.617 29.262 9.629 29.203 cv
9.633 29.152 9.645 29.105 9.66 29.066 cv
9.672 29.031 9.691 29 9.715 28.973 cv
9.738 28.945 9.77 28.918 9.816 28.891 cv
11.859 27.578 li
11.875 27.566 11.895 27.555 11.926 27.547 cv
11.949 27.539 11.984 27.531 12.031 27.52 cv
12.07 27.512 12.121 27.504 12.176 27.5 cv
12.23 27.5 12.297 27.5 12.383 27.496 cv
12.488 27.5 12.582 27.504 12.656 27.512 cv
12.727 27.52 12.781 27.535 12.828 27.551 cv
12.867 27.57 12.895 27.59 12.91 27.613 cv
12.918 27.641 12.926 27.664 12.93 27.687 cv
12.93 35.484 li
14.535 35.484 li
14.57 35.488 14.605 35.496 14.637 35.516 cv
14.668 35.539 14.691 35.57 14.715 35.605 cv
14.73 35.645 14.746 35.691 14.762 35.75 cv
14.77 35.812 14.777 35.887 14.781 35.965 cv
cp
.629236 .549432 .540154 .282963 cmyk
f
22.066 33.559 mo
22.066 33.949 22.004 34.328 21.887 34.687 cv
21.762 35.055 21.578 35.371 21.336 35.645 cv
21.086 35.922 20.773 36.145 20.398 36.309 cv
20.016 36.477 19.57 36.559 19.055 36.559 cv
18.684 36.559 18.355 36.516 18.074 36.422 cv
17.789 36.336 17.543 36.203 17.332 36.031 cv
17.121 35.863 16.945 35.656 16.809 35.41 cv
16.668 35.164 16.555 34.883 16.473 34.566 cv
16.387 34.254 16.328 33.91 16.293 33.531 cv
16.254 33.16 16.234 32.758 16.238 32.324 cv
16.234 31.945 16.254 31.562 16.297 31.172 cv
16.336 30.789 16.41 30.414 16.516 30.047 cv
16.621 29.687 16.766 29.348 16.945 29.031 cv
17.125 28.715 17.352 28.437 17.625 28.203 cv
17.898 27.969 18.223 27.781 18.602 27.641 cv
18.98 27.504 19.422 27.437 19.926 27.434 cv
20.094 27.437 20.266 27.445 20.438 27.465 cv
20.609 27.488 20.77 27.52 20.918 27.551 cv
21.066 27.59 21.188 27.625 21.289 27.664 cv
21.387 27.703 21.453 27.738 21.488 27.762 cv
21.516 27.789 21.539 27.816 21.559 27.844 cv
21.574 27.875 21.59 27.906 21.598 27.941 cv
21.605 27.977 21.609 28.016 21.617 28.059 cv
21.617 28.102 21.621 28.156 21.625 28.219 cv
21.621 28.305 21.621 28.375 21.621 28.43 cv
21.617 28.492 21.605 28.539 21.594 28.574 cv
21.574 28.613 21.555 28.641 21.531 28.656 cv
21.504 28.676 21.473 28.684 21.434 28.684 cv
21.383 28.684 21.313 28.668 21.227 28.637 cv
21.137 28.605 21.031 28.57 20.91 28.527 cv
20.785 28.492 20.637 28.457 20.461 28.422 cv
20.285 28.395 20.082 28.379 19.852 28.375 cv
19.422 28.379 19.055 28.465 18.75 28.637 cv
18.445 28.809 18.195 29.043 18 29.336 cv
17.805 29.629 17.66 29.969 17.57 30.352 cv
17.473 30.742 17.418 31.145 17.41 31.562 cv
17.527 31.496 17.664 31.43 17.813 31.359 cv
17.961 31.293 18.121 31.23 18.297 31.172 cv
18.473 31.121 18.66 31.074 18.855 31.039 cv
19.051 31.008 19.262 30.992 19.488 30.988 cv
19.965 30.992 20.367 31.059 20.699 31.184 cv
21.027 31.316 21.293 31.496 21.5 31.727 cv
21.699 31.957 21.844 32.227 21.934 32.539 cv
22.02 32.852 22.066 33.191 22.066 33.559 cv
cp
20.871 33.668 mo
20.871 33.406 20.844 33.164 20.793 32.945 cv
20.738 32.73 20.648 32.547 20.527 32.391 cv
20.402 32.242 20.238 32.125 20.035 32.043 cv
19.824 31.961 19.57 31.918 19.273 31.918 cv
19.102 31.918 18.934 31.934 18.766 31.965 cv
18.594 31.996 18.43 32.039 18.273 32.086 cv
18.113 32.141 17.965 32.203 17.824 32.273 cv
17.68 32.348 17.547 32.422 17.43 32.5 cv
17.426 33.094 17.465 33.59 17.543 33.984 cv
17.617 34.383 17.727 34.699 17.871 34.937 cv
18.016 35.18 18.195 35.352 18.41 35.453 cv
18.625 35.559 18.875 35.609 19.164 35.605 cv
19.453 35.609 19.707 35.555 19.922 35.441 cv
20.137 35.336 20.313 35.187 20.457 35 cv
20.598 34.816 20.703 34.609 20.77 34.379 cv
20.836 34.148 20.871 33.914 20.871 33.668 cv
cp
f
38.414 505.84 mo
38.41 505.93 38.402 506 38.391 506.059 cv
38.375 506.121 38.355 506.172 38.336 506.203 cv
38.313 506.242 38.289 506.266 38.258 506.281 cv
38.227 506.297 38.195 506.305 38.168 506.305 cv
33.531 506.305 li
33.496 506.305 33.469 506.297 33.441 506.281 cv
33.414 506.266 33.387 506.242 33.363 506.203 cv
33.336 506.172 33.316 506.121 33.305 506.059 cv
33.289 506 33.281 505.93 33.285 505.84 cv
33.281 505.762 33.289 505.687 33.305 505.625 cv
33.316 505.566 33.332 505.52 33.355 505.48 cv
33.371 505.445 33.398 505.414 33.43 505.391 cv
33.461 505.371 33.492 505.363 33.531 505.359 cv
35.383 505.359 li
35.383 498.613 li
33.668 499.633 li
33.578 499.684 33.508 499.711 33.461 499.719 cv
33.406 499.727 33.363 499.719 33.332 499.687 cv
33.297 499.66 33.277 499.609 33.266 499.539 cv
33.254 499.473 33.246 499.387 33.25 499.277 cv
33.246 499.203 33.25 499.137 33.262 499.078 cv
33.266 499.027 33.277 498.98 33.293 498.941 cv
33.305 498.906 33.324 498.875 33.348 498.848 cv
33.371 498.82 33.402 498.793 33.449 498.766 cv
35.492 497.453 li
35.508 497.441 35.527 497.43 35.559 497.422 cv
35.582 497.414 35.617 497.406 35.664 497.395 cv
35.703 497.387 35.754 497.379 35.809 497.375 cv
35.863 497.375 35.93 497.375 36.016 497.371 cv
36.121 497.375 36.215 497.379 36.289 497.387 cv
36.359 497.395 36.414 497.41 36.461 497.426 cv
36.5 497.445 36.527 497.465 36.543 497.488 cv
36.551 497.516 36.559 497.539 36.563 497.562 cv
36.563 505.359 li
38.168 505.359 li
38.203 505.363 38.238 505.371 38.27 505.391 cv
38.301 505.414 38.324 505.445 38.348 505.48 cv
38.363 505.52 38.379 505.566 38.395 505.625 cv
38.402 505.687 38.41 505.762 38.414 505.84 cv
cp
f
114.336 505.797 mo
114.332 505.883 114.328 505.957 114.316 506.02 cv
114.305 506.086 114.289 506.141 114.27 506.18 cv
114.246 506.227 114.219 506.258 114.188 506.273 cv
114.152 506.297 114.113 506.305 114.074 506.305 cv
109.172 506.305 li
109.109 506.305 109.051 506.297 109.004 506.281 cv
108.953 506.266 108.914 506.242 108.879 506.203 cv
108.844 506.172 108.816 506.117 108.805 506.047 cv
108.785 505.977 108.777 505.891 108.781 505.789 cv
108.777 505.699 108.781 505.621 108.789 505.551 cv
108.793 505.484 108.809 505.426 108.836 505.371 cv
108.859 505.32 108.891 505.266 108.926 505.211 cv
108.961 505.16 109.004 505.105 109.063 505.043 cv
110.836 503.219 li
111.246 502.801 111.574 502.426 111.824 502.09 cv
112.07 501.762 112.262 501.457 112.395 501.18 cv
112.527 500.906 112.613 500.656 112.66 500.43 cv
112.699 500.207 112.723 499.996 112.723 499.801 cv
112.723 499.605 112.688 499.422 112.621 499.242 cv
112.555 499.07 112.461 498.914 112.336 498.777 cv
112.211 498.648 112.055 498.543 111.867 498.461 cv
111.68 498.387 111.461 498.348 111.215 498.344 cv
110.926 498.348 110.668 498.387 110.441 498.461 cv
110.211 498.543 110.012 498.629 109.84 498.715 cv
109.668 498.809 109.523 498.891 109.406 498.969 cv
109.289 499.047 109.203 499.086 109.152 499.086 cv
109.117 499.086 109.086 499.078 109.063 499.059 cv
109.031 499.043 109.012 499.012 108.996 498.969 cv
108.98 498.93 108.965 498.875 108.957 498.805 cv
108.945 498.738 108.941 498.656 108.945 498.559 cv
108.941 498.492 108.945 498.434 108.953 498.383 cv
108.957 498.332 108.965 498.289 108.977 498.25 cv
108.984 498.215 109 498.18 109.02 498.148 cv
109.039 498.117 109.074 498.078 109.133 498.027 cv
109.184 497.98 109.277 497.914 109.414 497.832 cv
109.547 497.75 109.719 497.672 109.922 497.59 cv
110.125 497.512 110.348 497.441 110.594 497.387 cv
110.836 497.332 111.094 497.305 111.367 497.305 cv
111.793 497.305 112.168 497.367 112.492 497.488 cv
112.813 497.609 113.078 497.773 113.293 497.984 cv
113.504 498.195 113.664 498.441 113.77 498.715 cv
113.875 498.996 113.93 499.293 113.93 499.605 cv
113.93 499.895 113.902 500.176 113.852 500.453 cv
113.801 500.738 113.695 501.043 113.535 501.367 cv
113.371 501.695 113.137 502.059 112.832 502.457 cv
112.523 502.859 112.117 503.32 111.613 503.836 cv
110.207 505.305 li
114.066 505.305 li
114.098 505.309 114.133 505.32 114.172 505.336 cv
114.203 505.359 114.234 505.391 114.262 505.43 cv
114.285 505.473 114.305 505.523 114.316 505.582 cv
114.328 505.648 114.332 505.719 114.336 505.797 cv
cp
f
190.652 503.781 mo
190.648 503.934 190.625 504.055 190.582 504.141 cv
190.535 504.23 190.473 504.273 190.391 504.27 cv
189.391 504.27 li
189.391 506.133 li
189.391 506.172 189.379 506.203 189.363 506.227 cv
189.34 506.254 189.309 506.273 189.266 506.293 cv
189.215 506.309 189.152 506.32 189.082 506.332 cv
189.004 506.34 188.91 506.344 188.793 506.348 cv
188.676 506.344 188.578 506.34 188.508 506.332 cv
188.43 506.32 188.371 506.309 188.328 506.293 cv
188.281 506.273 188.25 506.254 188.234 506.227 cv
188.215 506.203 188.207 506.172 188.211 506.133 cv
188.211 504.27 li
184.582 504.27 li
184.523 504.273 184.48 504.266 184.445 504.25 cv
184.41 504.238 184.375 504.211 184.348 504.172 cv
184.316 504.137 184.297 504.086 184.285 504.016 cv
184.273 503.949 184.27 503.859 184.27 503.746 cv
184.27 503.664 184.27 503.586 184.277 503.516 cv
184.277 503.445 184.289 503.383 184.305 503.328 cv
184.316 503.273 184.332 503.219 184.359 503.164 cv
184.379 503.109 184.406 503.055 184.441 502.992 cv
187.602 497.605 li
187.621 497.57 187.656 497.539 187.703 497.512 cv
187.746 497.484 187.801 497.461 187.875 497.441 cv
187.941 497.426 188.027 497.414 188.133 497.402 cv
188.234 497.398 188.355 497.395 188.496 497.391 cv
188.645 497.395 188.781 497.398 188.898 497.41 cv
189.012 497.422 189.102 497.437 189.176 497.453 cv
189.242 497.473 189.297 497.496 189.336 497.527 cv
189.371 497.559 189.391 497.594 189.391 497.633 cv
189.391 503.297 li
190.391 503.297 li
190.465 503.301 190.527 503.34 190.578 503.418 cv
190.625 503.5 190.648 503.621 190.652 503.781 cv
cp
188.211 498.43 mo
188.199 498.43 li
185.348 503.297 li
188.211 503.297 li
cp
f
266.434 503.434 mo
266.434 503.824 266.371 504.203 266.254 504.562 cv
266.129 504.93 265.945 505.246 265.703 505.52 cv
265.453 505.797 265.141 506.02 264.766 506.184 cv
264.383 506.352 263.938 506.434 263.422 506.434 cv
263.051 506.434 262.723 506.391 262.441 506.297 cv
262.156 506.211 261.91 506.078 261.699 505.906 cv
261.488 505.738 261.313 505.531 261.176 505.285 cv
261.035 505.039 260.922 504.758 260.84 504.441 cv
260.754 504.129 260.695 503.785 260.66 503.406 cv
260.621 503.035 260.602 502.633 260.605 502.199 cv
260.602 501.82 260.621 501.437 260.664 501.047 cv
260.703 500.664 260.777 500.289 260.883 499.922 cv
260.988 499.562 261.133 499.223 261.313 498.906 cv
261.492 498.59 261.719 498.312 261.992 498.078 cv
262.266 497.844 262.59 497.656 262.969 497.516 cv
263.348 497.379 263.789 497.312 264.293 497.309 cv
264.461 497.312 264.633 497.32 264.805 497.34 cv
264.977 497.363 265.137 497.395 265.285 497.426 cv
265.434 497.465 265.555 497.5 265.656 497.539 cv
265.754 497.578 265.82 497.613 265.855 497.637 cv
265.883 497.664 265.906 497.691 265.926 497.719 cv
265.941 497.75 265.957 497.781 265.965 497.816 cv
265.973 497.852 265.977 497.891 265.984 497.934 cv
265.984 497.977 265.988 498.031 265.992 498.094 cv
265.988 498.18 265.988 498.25 265.988 498.305 cv
265.984 498.367 265.973 498.414 265.961 498.449 cv
265.941 498.488 265.922 498.516 265.898 498.531 cv
265.871 498.551 265.84 498.559 265.801 498.559 cv
265.75 498.559 265.68 498.543 265.594 498.512 cv
265.504 498.48 265.398 498.445 265.277 498.402 cv
265.152 498.367 265.004 498.332 264.828 498.297 cv
264.652 498.27 264.449 498.254 264.219 498.25 cv
263.789 498.254 263.422 498.34 263.117 498.512 cv
262.813 498.684 262.563 498.918 262.367 499.211 cv
262.172 499.504 262.027 499.844 261.938 500.227 cv
261.84 500.617 261.785 501.02 261.777 501.437 cv
261.895 501.371 262.031 501.305 262.18 501.234 cv
262.328 501.168 262.488 501.105 262.664 501.047 cv
262.84 500.996 263.027 500.949 263.223 500.914 cv
263.418 500.883 263.629 500.867 263.855 500.863 cv
264.332 500.867 264.734 500.934 265.066 501.059 cv
265.395 501.191 265.66 501.371 265.867 501.602 cv
266.066 501.832 266.211 502.102 266.301 502.414 cv
266.387 502.727 266.434 503.066 266.434 503.434 cv
cp
265.238 503.543 mo
265.238 503.281 265.211 503.039 265.16 502.82 cv
265.105 502.605 265.016 502.422 264.895 502.266 cv
264.77 502.117 264.605 502 264.402 501.918 cv
264.191 501.836 263.938 501.793 263.641 501.793 cv
263.469 501.793 263.301 501.809 263.133 501.84 cv
262.961 501.871 262.797 501.914 262.641 501.961 cv
262.48 502.016 262.332 502.078 262.191 502.148 cv
262.047 502.223 261.914 502.297 261.797 502.375 cv
261.793 502.969 261.832 503.465 261.91 503.859 cv
261.984 504.258 262.094 504.574 262.238 504.812 cv
262.383 505.055 262.563 505.227 262.777 505.328 cv
262.992 505.434 263.242 505.484 263.531 505.48 cv
263.82 505.484 264.074 505.43 264.289 505.316 cv
264.504 505.211 264.68 505.062 264.824 504.875 cv
264.965 504.691 265.07 504.484 265.137 504.254 cv
265.203 504.023 265.238 503.789 265.238 503.543 cv
cp
f
342.348 504.027 mo
342.348 504.414 342.277 504.758 342.141 505.055 cv
342.004 505.359 341.809 505.609 341.551 505.812 cv
341.293 506.02 340.973 506.176 340.594 506.277 cv
340.211 506.383 339.777 506.434 339.293 506.434 cv
338.832 506.434 338.422 506.387 338.063 506.293 cv
337.699 506.199 337.395 506.059 337.145 505.867 cv
336.895 505.684 336.703 505.453 336.57 505.176 cv
336.438 504.902 336.371 504.59 336.371 504.234 cv
336.371 503.961 336.414 503.703 336.508 503.469 cv
336.594 503.234 336.727 503.02 336.902 502.824 cv
337.07 502.629 337.281 502.445 337.535 502.27 cv
337.785 502.102 338.07 501.937 338.387 501.781 cv
338.113 501.641 337.871 501.492 337.66 501.332 cv
337.449 501.176 337.27 501.004 337.125 500.816 cv
336.977 500.633 336.867 500.437 336.793 500.227 cv
336.715 500.02 336.676 499.789 336.68 499.539 cv
336.676 499.23 336.73 498.937 336.848 498.664 cv
336.957 498.395 337.129 498.16 337.355 497.957 cv
337.582 497.758 337.867 497.598 338.219 497.48 cv
338.563 497.363 338.973 497.305 339.441 497.305 cv
339.887 497.305 340.273 497.359 340.602 497.465 cv
340.93 497.574 341.199 497.719 341.41 497.902 cv
341.621 498.09 341.777 498.309 341.883 498.559 cv
341.98 498.809 342.031 499.078 342.035 499.367 cv
342.031 499.602 341.992 499.828 341.922 500.039 cv
341.844 500.258 341.734 500.461 341.586 500.648 cv
341.438 500.844 341.258 501.023 341.047 501.187 cv
340.836 501.359 340.594 501.516 340.32 501.656 cv
340.641 501.82 340.926 501.984 341.184 502.152 cv
341.434 502.32 341.648 502.5 341.824 502.695 cv
341.992 502.891 342.121 503.098 342.215 503.312 cv
342.301 503.531 342.348 503.77 342.348 504.027 cv
cp
340.867 499.477 mo
340.863 499.289 340.832 499.113 340.766 498.957 cv
340.699 498.801 340.602 498.668 340.477 498.559 cv
340.348 498.449 340.188 498.367 340 498.309 cv
339.805 498.254 339.59 498.227 339.352 498.223 cv
338.855 498.227 338.48 498.336 338.23 498.559 cv
337.973 498.785 337.848 499.094 337.852 499.477 cv
337.848 499.656 337.879 499.82 337.941 499.973 cv
338.004 500.129 338.098 500.273 338.23 500.41 cv
338.355 500.547 338.52 500.68 338.723 500.809 cv
338.918 500.941 339.156 501.078 339.434 501.219 cv
339.895 500.984 340.25 500.723 340.496 500.43 cv
340.742 500.145 340.863 499.828 340.867 499.477 cv
cp
341.156 504.152 mo
341.152 503.945 341.113 503.754 341.039 503.582 cv
340.957 503.414 340.84 503.254 340.684 503.102 cv
340.527 502.953 340.328 502.809 340.094 502.668 cv
339.855 502.531 339.586 502.387 339.277 502.234 cv
338.988 502.379 338.734 502.52 338.52 502.66 cv
338.301 502.801 338.121 502.949 337.984 503.098 cv
337.844 503.254 337.738 503.41 337.668 503.574 cv
337.594 503.742 337.559 503.926 337.563 504.125 cv
337.559 504.57 337.711 504.914 338.02 505.152 cv
338.32 505.398 338.773 505.52 339.379 505.516 cv
339.961 505.52 340.406 505.398 340.707 505.148 cv
341.004 504.906 341.152 504.574 341.156 504.152 cv
cp
f
414.547 505.84 mo
414.543 505.93 414.535 506 414.523 506.059 cv
414.508 506.121 414.488 506.172 414.469 506.203 cv
414.445 506.242 414.422 506.266 414.391 506.281 cv
414.359 506.297 414.328 506.305 414.301 506.305 cv
409.664 506.305 li
409.629 506.305 409.602 506.297 409.574 506.281 cv
409.547 506.266 409.52 506.242 409.496 506.203 cv
409.469 506.172 409.449 506.121 409.438 506.059 cv
409.422 506 409.414 505.93 409.418 505.84 cv
409.414 505.762 409.422 505.687 409.438 505.625 cv
409.449 505.566 409.465 505.52 409.488 505.48 cv
409.504 505.445 409.531 505.414 409.563 505.391 cv
409.594 505.371 409.625 505.363 409.664 505.359 cv
411.516 505.359 li
411.516 498.613 li
409.801 499.633 li
409.711 499.684 409.641 499.711 409.594 499.719 cv
409.539 499.727 409.496 499.719 409.465 499.687 cv
409.43 499.66 409.41 499.609 409.398 499.539 cv
409.387 499.473 409.379 499.387 409.383 499.277 cv
409.379 499.203 409.383 499.137 409.395 499.078 cv
409.398 499.027 409.41 498.98 409.426 498.941 cv
409.438 498.906 409.457 498.875 409.48 498.848 cv
409.504 498.82 409.535 498.793 409.582 498.766 cv
411.625 497.453 li
411.641 497.441 411.66 497.43 411.691 497.422 cv
411.715 497.414 411.75 497.406 411.797 497.395 cv
411.836 497.387 411.887 497.379 411.941 497.375 cv
411.996 497.375 412.063 497.375 412.148 497.371 cv
412.254 497.375 412.348 497.379 412.422 497.387 cv
412.492 497.395 412.547 497.41 412.594 497.426 cv
412.633 497.445 412.66 497.465 412.676 497.488 cv
412.684 497.516 412.691 497.539 412.695 497.562 cv
412.695 505.359 li
414.301 505.359 li
414.336 505.363 414.371 505.371 414.402 505.391 cv
414.434 505.414 414.457 505.445 414.48 505.48 cv
414.496 505.52 414.512 505.566 414.527 505.625 cv
414.535 505.687 414.543 505.762 414.547 505.84 cv
cp
f
421.898 501.848 mo
421.895 502.531 421.844 503.152 421.738 503.715 cv
421.629 504.277 421.449 504.762 421.203 505.164 cv
420.949 505.57 420.621 505.883 420.223 506.102 cv
419.816 506.324 419.324 506.434 418.738 506.434 cv
418.18 506.434 417.707 506.336 417.328 506.137 cv
416.945 505.941 416.641 505.648 416.406 505.262 cv
416.172 504.875 416.004 504.402 415.91 503.836 cv
415.809 503.273 415.762 502.625 415.762 501.891 cv
415.762 501.219 415.816 500.598 415.926 500.031 cv
416.035 499.469 416.211 498.984 416.461 498.578 cv
416.703 498.176 417.027 497.863 417.434 497.637 cv
417.832 497.418 418.328 497.305 418.918 497.305 cv
419.477 497.305 419.949 497.406 420.332 497.602 cv
420.715 497.805 421.02 498.098 421.254 498.48 cv
421.484 498.871 421.652 499.344 421.75 499.906 cv
421.848 500.469 421.895 501.117 421.898 501.848 cv
cp
420.691 501.93 mo
420.688 501.488 420.672 501.09 420.645 500.738 cv
420.609 500.387 420.563 500.078 420.504 499.809 cv
420.438 499.539 420.359 499.309 420.262 499.113 cv
420.164 498.922 420.047 498.762 419.91 498.633 cv
419.77 498.508 419.609 498.414 419.438 498.355 cv
419.258 498.301 419.063 498.273 418.848 498.27 cv
418.457 498.273 418.141 498.363 417.902 498.547 cv
417.656 498.73 417.465 498.984 417.328 499.301 cv
417.188 499.621 417.094 499.992 417.043 500.422 cv
416.992 500.852 416.969 501.316 416.969 501.809 cv
416.969 502.473 417 503.035 417.07 503.496 cv
417.137 503.965 417.246 504.344 417.398 504.633 cv
417.543 504.93 417.734 505.141 417.965 505.27 cv
418.195 505.406 418.477 505.473 418.809 505.469 cv
419.063 505.473 419.285 505.434 419.48 505.348 cv
419.672 505.27 419.84 505.148 419.98 504.992 cv
420.121 504.84 420.234 504.656 420.328 504.441 cv
420.414 504.227 420.488 503.988 420.547 503.727 cv
420.598 503.469 420.637 503.187 420.66 502.883 cv
420.68 502.578 420.688 502.262 420.691 501.93 cv
cp
f
490.504 505.84 mo
490.5 505.93 490.492 506 490.48 506.059 cv
490.465 506.121 490.445 506.172 490.426 506.203 cv
490.402 506.242 490.379 506.266 490.348 506.281 cv
490.316 506.297 490.285 506.305 490.258 506.305 cv
485.621 506.305 li
485.586 506.305 485.559 506.297 485.531 506.281 cv
485.504 506.266 485.477 506.242 485.453 506.203 cv
485.426 506.172 485.406 506.121 485.395 506.059 cv
485.379 506 485.371 505.93 485.375 505.84 cv
485.371 505.762 485.379 505.687 485.395 505.625 cv
485.406 505.566 485.422 505.52 485.445 505.48 cv
485.461 505.445 485.488 505.414 485.52 505.391 cv
485.551 505.371 485.582 505.363 485.621 505.359 cv
487.473 505.359 li
487.473 498.613 li
485.758 499.633 li
485.668 499.684 485.598 499.711 485.551 499.719 cv
485.496 499.727 485.453 499.719 485.422 499.687 cv
485.387 499.66 485.367 499.609 485.355 499.539 cv
485.344 499.473 485.336 499.387 485.34 499.277 cv
485.336 499.203 485.34 499.137 485.352 499.078 cv
485.355 499.027 485.367 498.98 485.383 498.941 cv
485.395 498.906 485.414 498.875 485.438 498.848 cv
485.461 498.82 485.492 498.793 485.539 498.766 cv
487.582 497.453 li
487.598 497.441 487.617 497.43 487.648 497.422 cv
487.672 497.414 487.707 497.406 487.754 497.395 cv
487.793 497.387 487.844 497.379 487.898 497.375 cv
487.953 497.375 488.02 497.375 488.105 497.371 cv
488.211 497.375 488.305 497.379 488.379 497.387 cv
488.449 497.395 488.504 497.41 488.551 497.426 cv
488.59 497.445 488.617 497.465 488.633 497.488 cv
488.641 497.516 488.648 497.539 488.652 497.562 cv
488.652 505.359 li
490.258 505.359 li
490.293 505.363 490.328 505.371 490.359 505.391 cv
490.391 505.414 490.414 505.445 490.438 505.48 cv
490.453 505.52 490.469 505.566 490.484 505.625 cv
490.492 505.687 490.5 505.762 490.504 505.84 cv
cp
f
497.566 505.797 mo
497.563 505.883 497.559 505.957 497.547 506.02 cv
497.535 506.086 497.52 506.141 497.5 506.18 cv
497.477 506.227 497.449 506.258 497.418 506.273 cv
497.383 506.297 497.344 506.305 497.305 506.305 cv
492.402 506.305 li
492.34 506.305 492.281 506.297 492.234 506.281 cv
492.184 506.266 492.145 506.242 492.109 506.203 cv
492.074 506.172 492.047 506.117 492.035 506.047 cv
492.016 505.977 492.008 505.891 492.012 505.789 cv
492.008 505.699 492.012 505.621 492.02 505.551 cv
492.023 505.484 492.039 505.426 492.066 505.371 cv
492.09 505.32 492.121 505.266 492.156 505.211 cv
492.191 505.16 492.234 505.105 492.293 505.043 cv
494.066 503.219 li
494.477 502.801 494.805 502.426 495.055 502.09 cv
495.301 501.762 495.492 501.457 495.625 501.18 cv
495.758 500.906 495.844 500.656 495.891 500.43 cv
495.93 500.207 495.953 499.996 495.953 499.801 cv
495.953 499.605 495.918 499.422 495.852 499.242 cv
495.785 499.07 495.691 498.914 495.566 498.777 cv
495.441 498.648 495.285 498.543 495.098 498.461 cv
494.91 498.387 494.691 498.348 494.445 498.344 cv
494.156 498.348 493.898 498.387 493.672 498.461 cv
493.441 498.543 493.242 498.629 493.07 498.715 cv
492.898 498.809 492.754 498.891 492.637 498.969 cv
492.52 499.047 492.434 499.086 492.383 499.086 cv
492.348 499.086 492.316 499.078 492.293 499.059 cv
492.262 499.043 492.242 499.012 492.227 498.969 cv
492.211 498.93 492.195 498.875 492.188 498.805 cv
492.176 498.738 492.172 498.656 492.176 498.559 cv
492.172 498.492 492.176 498.434 492.184 498.383 cv
492.188 498.332 492.195 498.289 492.207 498.25 cv
492.215 498.215 492.23 498.18 492.25 498.148 cv
492.27 498.117 492.305 498.078 492.363 498.027 cv
492.414 497.98 492.508 497.914 492.645 497.832 cv
492.777 497.75 492.949 497.672 493.152 497.59 cv
493.355 497.512 493.578 497.441 493.824 497.387 cv
494.066 497.332 494.324 497.305 494.598 497.305 cv
495.023 497.305 495.398 497.367 495.723 497.488 cv
496.043 497.609 496.309 497.773 496.523 497.984 cv
496.734 498.195 496.895 498.441 497 498.715 cv
497.105 498.996 497.16 499.293 497.16 499.605 cv
497.16 499.895 497.133 500.176 497.082 500.453 cv
497.031 500.738 496.926 501.043 496.766 501.367 cv
496.602 501.695 496.367 502.059 496.063 502.457 cv
495.754 502.859 495.348 503.32 494.844 503.836 cv
493.438 505.305 li
497.297 505.305 li
497.328 505.309 497.363 505.32 497.402 505.336 cv
497.434 505.359 497.465 505.391 497.492 505.43 cv
497.516 505.473 497.535 505.523 497.547 505.582 cv
497.559 505.648 497.563 505.719 497.566 505.797 cv
cp
f
566.445 505.84 mo
566.441 505.93 566.434 506 566.422 506.059 cv
566.406 506.121 566.387 506.172 566.367 506.203 cv
566.344 506.242 566.32 506.266 566.289 506.281 cv
566.258 506.297 566.227 506.305 566.199 506.305 cv
561.563 506.305 li
561.527 506.305 561.5 506.297 561.473 506.281 cv
561.445 506.266 561.418 506.242 561.395 506.203 cv
561.367 506.172 561.348 506.121 561.336 506.059 cv
561.32 506 561.313 505.93 561.316 505.84 cv
561.313 505.762 561.32 505.687 561.336 505.625 cv
561.348 505.566 561.363 505.52 561.387 505.48 cv
561.402 505.445 561.43 505.414 561.461 505.391 cv
561.492 505.371 561.523 505.363 561.563 505.359 cv
563.414 505.359 li
563.414 498.613 li
561.699 499.633 li
561.609 499.684 561.539 499.711 561.492 499.719 cv
561.438 499.727 561.395 499.719 561.363 499.687 cv
561.328 499.66 561.309 499.609 561.297 499.539 cv
561.285 499.473 561.277 499.387 561.281 499.277 cv
561.277 499.203 561.281 499.137 561.293 499.078 cv
561.297 499.027 561.309 498.98 561.324 498.941 cv
561.336 498.906 561.355 498.875 561.379 498.848 cv
561.402 498.82 561.434 498.793 561.48 498.766 cv
563.523 497.453 li
563.539 497.441 563.559 497.43 563.59 497.422 cv
563.613 497.414 563.648 497.406 563.695 497.395 cv
563.734 497.387 563.785 497.379 563.84 497.375 cv
563.895 497.375 563.961 497.375 564.047 497.371 cv
564.152 497.375 564.246 497.379 564.32 497.387 cv
564.391 497.395 564.445 497.41 564.492 497.426 cv
564.531 497.445 564.559 497.465 564.574 497.488 cv
564.582 497.516 564.59 497.539 564.594 497.562 cv
564.594 505.359 li
566.199 505.359 li
566.234 505.363 566.27 505.371 566.301 505.391 cv
566.332 505.414 566.355 505.445 566.379 505.48 cv
566.395 505.52 566.41 505.566 566.426 505.625 cv
566.434 505.687 566.441 505.762 566.445 505.84 cv
cp
f
573.883 503.781 mo
573.879 503.934 573.855 504.055 573.813 504.141 cv
573.766 504.23 573.703 504.273 573.621 504.27 cv
572.621 504.27 li
572.621 506.133 li
572.621 506.172 572.609 506.203 572.594 506.227 cv
572.57 506.254 572.539 506.273 572.496 506.293 cv
572.445 506.309 572.383 506.32 572.313 506.332 cv
572.234 506.34 572.141 506.344 572.023 506.348 cv
571.906 506.344 571.809 506.34 571.738 506.332 cv
571.66 506.32 571.602 506.309 571.559 506.293 cv
571.512 506.273 571.48 506.254 571.465 506.227 cv
571.445 506.203 571.438 506.172 571.441 506.133 cv
571.441 504.27 li
567.813 504.27 li
567.754 504.273 567.711 504.266 567.676 504.25 cv
567.641 504.238 567.605 504.211 567.578 504.172 cv
567.547 504.137 567.527 504.086 567.516 504.016 cv
567.504 503.949 567.5 503.859 567.5 503.746 cv
567.5 503.664 567.5 503.586 567.508 503.516 cv
567.508 503.445 567.52 503.383 567.535 503.328 cv
567.547 503.273 567.563 503.219 567.59 503.164 cv
567.609 503.109 567.637 503.055 567.672 502.992 cv
570.832 497.605 li
570.852 497.57 570.887 497.539 570.934 497.512 cv
570.977 497.484 571.031 497.461 571.105 497.441 cv
571.172 497.426 571.258 497.414 571.363 497.402 cv
571.465 497.398 571.586 497.395 571.727 497.391 cv
571.875 497.395 572.012 497.398 572.129 497.41 cv
572.242 497.422 572.332 497.437 572.406 497.453 cv
572.473 497.473 572.527 497.496 572.566 497.527 cv
572.602 497.559 572.621 497.594 572.621 497.633 cv
572.621 503.297 li
573.621 503.297 li
573.695 503.301 573.758 503.34 573.809 503.418 cv
573.855 503.5 573.879 503.621 573.883 503.781 cv
cp
571.441 498.43 mo
571.43 498.43 li
568.578 503.297 li
571.441 503.297 li
cp
f
642.375 505.84 mo
642.371 505.93 642.363 506 642.352 506.059 cv
642.336 506.121 642.316 506.172 642.297 506.203 cv
642.273 506.242 642.25 506.266 642.219 506.281 cv
642.188 506.297 642.156 506.305 642.129 506.305 cv
637.492 506.305 li
637.457 506.305 637.43 506.297 637.402 506.281 cv
637.375 506.266 637.348 506.242 637.324 506.203 cv
637.297 506.172 637.277 506.121 637.266 506.059 cv
637.25 506 637.242 505.93 637.246 505.84 cv
637.242 505.762 637.25 505.687 637.266 505.625 cv
637.277 505.566 637.293 505.52 637.316 505.48 cv
637.332 505.445 637.359 505.414 637.391 505.391 cv
637.422 505.371 637.453 505.363 637.492 505.359 cv
639.344 505.359 li
639.344 498.613 li
637.629 499.633 li
637.539 499.684 637.469 499.711 637.422 499.719 cv
637.367 499.727 637.324 499.719 637.293 499.687 cv
637.258 499.66 637.238 499.609 637.227 499.539 cv
637.215 499.473 637.207 499.387 637.211 499.277 cv
637.207 499.203 637.211 499.137 637.223 499.078 cv
637.227 499.027 637.238 498.98 637.254 498.941 cv
637.266 498.906 637.285 498.875 637.309 498.848 cv
637.332 498.82 637.363 498.793 637.41 498.766 cv
639.453 497.453 li
639.469 497.441 639.488 497.43 639.52 497.422 cv
639.543 497.414 639.578 497.406 639.625 497.395 cv
639.664 497.387 639.715 497.379 639.77 497.375 cv
639.824 497.375 639.891 497.375 639.977 497.371 cv
640.082 497.375 640.176 497.379 640.25 497.387 cv
640.32 497.395 640.375 497.41 640.422 497.426 cv
640.461 497.445 640.488 497.465 640.504 497.488 cv
640.512 497.516 640.52 497.539 640.523 497.562 cv
640.523 505.359 li
642.129 505.359 li
642.164 505.363 642.199 505.371 642.23 505.391 cv
642.262 505.414 642.285 505.445 642.309 505.48 cv
642.324 505.52 642.34 505.566 642.355 505.625 cv
642.363 505.687 642.371 505.762 642.375 505.84 cv
cp
f
649.664 503.434 mo
649.664 503.824 649.602 504.203 649.484 504.562 cv
649.359 504.93 649.176 505.246 648.934 505.52 cv
648.684 505.797 648.371 506.02 647.996 506.184 cv
647.613 506.352 647.168 506.434 646.652 506.434 cv
646.281 506.434 645.953 506.391 645.672 506.297 cv
645.387 506.211 645.141 506.078 644.93 505.906 cv
644.719 505.738 644.543 505.531 644.406 505.285 cv
644.266 505.039 644.152 504.758 644.07 504.441 cv
643.984 504.129 643.926 503.785 643.891 503.406 cv
643.852 503.035 643.832 502.633 643.836 502.199 cv
643.832 501.82 643.852 501.437 643.895 501.047 cv
643.934 500.664 644.008 500.289 644.113 499.922 cv
644.219 499.562 644.363 499.223 644.543 498.906 cv
644.723 498.59 644.949 498.312 645.223 498.078 cv
645.496 497.844 645.82 497.656 646.199 497.516 cv
646.578 497.379 647.02 497.312 647.523 497.309 cv
647.691 497.312 647.863 497.32 648.035 497.34 cv
648.207 497.363 648.367 497.395 648.516 497.426 cv
648.664 497.465 648.785 497.5 648.887 497.539 cv
648.984 497.578 649.051 497.613 649.086 497.637 cv
649.113 497.664 649.137 497.691 649.156 497.719 cv
649.172 497.75 649.188 497.781 649.195 497.816 cv
649.203 497.852 649.207 497.891 649.215 497.934 cv
649.215 497.977 649.219 498.031 649.223 498.094 cv
649.219 498.18 649.219 498.25 649.219 498.305 cv
649.215 498.367 649.203 498.414 649.191 498.449 cv
649.172 498.488 649.152 498.516 649.129 498.531 cv
649.102 498.551 649.07 498.559 649.031 498.559 cv
648.98 498.559 648.91 498.543 648.824 498.512 cv
648.734 498.48 648.629 498.445 648.508 498.402 cv
648.383 498.367 648.234 498.332 648.059 498.297 cv
647.883 498.27 647.68 498.254 647.449 498.25 cv
647.02 498.254 646.652 498.34 646.348 498.512 cv
646.043 498.684 645.793 498.918 645.598 499.211 cv
645.402 499.504 645.258 499.844 645.168 500.227 cv
645.07 500.617 645.016 501.02 645.008 501.437 cv
645.125 501.371 645.262 501.305 645.41 501.234 cv
645.559 501.168 645.719 501.105 645.895 501.047 cv
646.07 500.996 646.258 500.949 646.453 500.914 cv
646.648 500.883 646.859 500.867 647.086 500.863 cv
647.563 500.867 647.965 500.934 648.297 501.059 cv
648.625 501.191 648.891 501.371 649.098 501.602 cv
649.297 501.832 649.441 502.102 649.531 502.414 cv
649.617 502.727 649.664 503.066 649.664 503.434 cv
cp
648.469 503.543 mo
648.469 503.281 648.441 503.039 648.391 502.82 cv
648.336 502.605 648.246 502.422 648.125 502.266 cv
648 502.117 647.836 502 647.633 501.918 cv
647.422 501.836 647.168 501.793 646.871 501.793 cv
646.699 501.793 646.531 501.809 646.363 501.84 cv
646.191 501.871 646.027 501.914 645.871 501.961 cv
645.711 502.016 645.563 502.078 645.422 502.148 cv
645.277 502.223 645.145 502.297 645.027 502.375 cv
645.023 502.969 645.063 503.465 645.141 503.859 cv
645.215 504.258 645.324 504.574 645.469 504.812 cv
645.613 505.055 645.793 505.227 646.008 505.328 cv
646.223 505.434 646.473 505.484 646.762 505.48 cv
647.051 505.484 647.305 505.43 647.52 505.316 cv
647.734 505.211 647.91 505.062 648.055 504.875 cv
648.195 504.691 648.301 504.484 648.367 504.254 cv
648.434 504.023 648.469 503.789 648.469 503.543 cv
cp
f
271.66 530.012 mo
271.656 530.117 271.641 530.207 271.605 530.277 cv
271.57 530.355 271.523 530.414 271.469 530.457 cv
271.41 530.508 271.348 530.543 271.281 530.559 cv
271.207 530.582 271.137 530.59 271.074 530.59 cv
270.629 530.59 li
270.488 530.59 270.367 530.578 270.262 530.547 cv
270.156 530.523 270.059 530.469 269.965 530.391 cv
269.871 530.316 269.777 530.215 269.684 530.082 cv
269.59 529.953 269.488 529.789 269.383 529.586 cv
266.309 523.848 li
266.145 523.555 265.98 523.246 265.82 522.918 cv
265.652 522.598 265.5 522.281 265.363 521.973 cv
265.348 521.973 li
265.355 522.348 265.363 522.73 265.371 523.117 cv
265.375 523.508 265.375 523.895 265.379 524.277 cv
265.379 530.363 li
265.375 530.402 265.363 530.437 265.344 530.469 cv
265.32 530.504 265.285 530.531 265.234 530.547 cv
265.18 530.566 265.109 530.578 265.027 530.594 cv
264.941 530.605 264.836 530.613 264.707 530.613 cv
264.57 530.613 264.461 530.605 264.379 530.594 cv
264.293 530.578 264.227 530.566 264.18 530.547 cv
264.129 530.531 264.094 530.504 264.07 530.469 cv
264.047 530.437 264.035 530.402 264.039 530.363 cv
264.039 521.059 li
264.035 520.852 264.094 520.703 264.215 520.613 cv
264.332 520.527 264.461 520.484 264.602 520.48 cv
265.262 520.48 li
265.414 520.484 265.547 520.496 265.652 520.52 cv
265.754 520.547 265.848 520.59 265.934 520.648 cv
266.016 520.711 266.094 520.793 266.176 520.898 cv
266.25 521.008 266.332 521.145 266.418 521.301 cv
268.785 525.727 li
268.93 526 269.07 526.266 269.207 526.52 cv
269.34 526.777 269.469 527.031 269.598 527.277 cv
269.719 527.531 269.844 527.777 269.969 528.016 cv
270.09 528.258 270.211 528.5 270.336 528.742 cv
270.344 528.742 li
270.332 528.336 270.324 527.906 270.324 527.461 cv
270.316 527.016 270.316 526.59 270.32 526.18 cv
270.32 520.707 li
270.316 520.672 270.328 520.637 270.352 520.605 cv
270.375 520.574 270.41 520.547 270.465 520.523 cv
270.512 520.5 270.582 520.484 270.668 520.473 cv
270.754 520.465 270.863 520.461 271.004 520.457 cv
271.121 520.461 271.227 520.465 271.316 520.473 cv
271.402 520.484 271.469 520.5 271.52 520.523 cv
271.566 520.547 271.602 520.574 271.625 520.605 cv
271.645 520.637 271.656 520.672 271.66 520.707 cv
cp
f
280.211 530.371 mo
280.207 530.418 280.199 530.453 280.184 530.477 cv
280.164 530.508 280.129 530.531 280.086 530.551 cv
280.039 530.57 279.98 530.582 279.906 530.598 cv
279.828 530.605 279.734 530.613 279.629 530.613 cv
279.504 530.613 279.406 530.605 279.336 530.598 cv
279.258 530.582 279.199 530.57 279.156 530.551 cv
279.109 530.531 279.078 530.508 279.066 530.477 cv
279.047 530.453 279.039 530.418 279.043 530.371 cv
279.043 529.445 li
278.641 529.891 278.246 530.211 277.859 530.41 cv
277.465 530.613 277.07 530.711 276.676 530.715 cv
276.203 530.711 275.809 530.637 275.492 530.48 cv
275.172 530.328 274.914 530.117 274.719 529.848 cv
274.516 529.582 274.375 529.27 274.293 528.91 cv
274.203 528.555 274.16 528.121 274.164 527.613 cv
274.164 523.359 li
274.16 523.32 274.168 523.285 274.191 523.254 cv
274.207 523.227 274.242 523.203 274.297 523.176 cv
274.344 523.156 274.414 523.141 274.5 523.129 cv
274.582 523.125 274.684 523.121 274.813 523.117 cv
274.934 523.121 275.039 523.125 275.125 523.129 cv
275.207 523.141 275.273 523.156 275.32 523.176 cv
275.367 523.203 275.402 523.227 275.426 523.254 cv
275.445 523.285 275.453 523.32 275.457 523.359 cv
275.457 527.441 li
275.453 527.855 275.484 528.184 275.547 528.43 cv
275.605 528.676 275.695 528.887 275.82 529.059 cv
275.938 529.238 276.094 529.371 276.285 529.465 cv
276.469 529.562 276.688 529.613 276.938 529.609 cv
277.258 529.613 277.578 529.496 277.902 529.266 cv
278.219 529.039 278.559 528.703 278.918 528.258 cv
278.918 523.359 li
278.918 523.32 278.926 523.285 278.945 523.254 cv
278.961 523.227 278.996 523.203 279.051 523.176 cv
279.102 523.156 279.168 523.141 279.25 523.129 cv
279.328 523.125 279.434 523.121 279.566 523.117 cv
279.688 523.121 279.793 523.125 279.879 523.129 cv
279.961 523.141 280.023 523.156 280.07 523.176 cv
280.113 523.203 280.148 523.227 280.176 523.254 cv
280.195 523.285 280.207 523.32 280.211 523.359 cv
cp
f
292.988 530.371 mo
292.984 530.418 292.977 530.453 292.957 530.477 cv
292.934 530.508 292.898 530.531 292.855 530.551 cv
292.805 530.57 292.738 530.582 292.66 530.598 cv
292.574 530.605 292.473 530.613 292.348 530.613 cv
292.215 530.613 292.105 530.605 292.027 530.598 cv
291.941 530.582 291.875 530.57 291.828 530.551 cv
291.773 530.531 291.738 530.508 291.723 530.477 cv
291.699 530.453 291.691 530.418 291.691 530.371 cv
291.691 526.109 li
291.691 525.816 291.664 525.547 291.613 525.301 cv
291.559 525.059 291.477 524.848 291.363 524.668 cv
291.25 524.492 291.105 524.355 290.93 524.262 cv
290.75 524.168 290.539 524.121 290.305 524.121 cv
290.008 524.121 289.711 524.238 289.414 524.465 cv
289.109 524.699 288.781 525.031 288.426 525.469 cv
288.426 530.371 li
288.422 530.418 288.41 530.453 288.395 530.477 cv
288.371 530.508 288.34 530.531 288.293 530.551 cv
288.242 530.57 288.176 530.582 288.094 530.598 cv
288.008 530.605 287.902 530.613 287.781 530.613 cv
287.66 530.613 287.559 530.605 287.473 530.598 cv
287.387 530.582 287.316 530.57 287.27 530.551 cv
287.215 530.531 287.184 530.508 287.168 530.477 cv
287.148 530.453 287.137 530.418 287.141 530.371 cv
287.141 526.109 li
287.137 525.816 287.109 525.547 287.055 525.301 cv
286.996 525.059 286.91 524.848 286.797 524.668 cv
286.684 524.492 286.539 524.355 286.367 524.262 cv
286.188 524.168 285.98 524.121 285.746 524.121 cv
285.445 524.121 285.148 524.238 284.848 524.465 cv
284.547 524.699 284.219 525.031 283.867 525.469 cv
283.867 530.371 li
283.863 530.418 283.852 530.453 283.836 530.477 cv
283.813 530.508 283.781 530.531 283.734 530.551 cv
283.688 530.57 283.621 530.582 283.543 530.598 cv
283.457 530.605 283.352 530.613 283.223 530.613 cv
283.094 530.613 282.988 530.605 282.91 530.598 cv
282.824 530.582 282.758 530.57 282.711 530.551 cv
282.656 530.531 282.625 530.508 282.609 530.477 cv
282.59 530.453 282.578 530.418 282.582 530.371 cv
282.582 523.359 li
282.578 523.32 282.586 523.285 282.605 523.254 cv
282.617 523.227 282.648 523.203 282.699 523.176 cv
282.742 523.156 282.805 523.141 282.879 523.129 cv
282.949 523.125 283.043 523.121 283.168 523.117 cv
283.277 523.121 283.375 523.125 283.453 523.129 cv
283.527 523.141 283.586 523.156 283.629 523.176 cv
283.668 523.203 283.695 523.227 283.715 523.254 cv
283.73 523.285 283.738 523.32 283.742 523.359 cv
283.742 524.285 li
284.133 523.844 284.516 523.523 284.891 523.316 cv
285.258 523.113 285.637 523.008 286.02 523.008 cv
286.309 523.008 286.566 523.043 286.801 523.109 cv
287.027 523.18 287.234 523.273 287.414 523.395 cv
287.59 523.516 287.738 523.66 287.867 523.828 cv
287.988 524 288.094 524.191 288.18 524.395 cv
288.41 524.145 288.633 523.93 288.844 523.75 cv
289.055 523.578 289.258 523.434 289.453 523.32 cv
289.648 523.215 289.836 523.137 290.02 523.082 cv
290.203 523.035 290.391 523.008 290.578 523.008 cv
291.031 523.008 291.41 523.09 291.715 523.246 cv
292.02 523.41 292.266 523.621 292.461 523.883 cv
292.648 524.148 292.785 524.457 292.867 524.812 cv
292.945 525.168 292.984 525.543 292.988 525.937 cv
cp
f
301.785 526.77 mo
301.781 527.379 301.715 527.93 301.586 528.414 cv
301.449 528.902 301.254 529.316 301 529.656 cv
300.742 530 300.426 530.262 300.055 530.441 cv
299.68 530.625 299.254 530.711 298.77 530.715 cv
298.543 530.711 298.336 530.691 298.148 530.648 cv
297.961 530.602 297.773 530.531 297.594 530.434 cv
297.406 530.336 297.227 530.211 297.047 530.059 cv
296.863 529.91 296.672 529.73 296.473 529.516 cv
296.473 530.371 li
296.473 530.418 296.461 530.453 296.441 530.48 cv
296.418 530.516 296.383 530.539 296.34 530.555 cv
296.289 530.57 296.23 530.582 296.164 530.598 cv
296.09 530.605 296 530.613 295.895 530.613 cv
295.785 530.613 295.699 530.605 295.629 530.598 cv
295.555 530.582 295.492 530.57 295.449 530.555 cv
295.398 530.539 295.367 530.516 295.355 530.48 cv
295.336 530.453 295.328 530.418 295.332 530.371 cv
295.332 519.961 li
295.328 519.922 295.34 519.887 295.359 519.852 cv
295.375 519.824 295.406 519.797 295.461 519.773 cv
295.508 519.754 295.574 519.738 295.66 519.727 cv
295.738 519.719 295.844 519.715 295.973 519.711 cv
296.102 519.715 296.207 519.719 296.293 519.727 cv
296.371 519.738 296.438 519.754 296.484 519.773 cv
296.531 519.797 296.563 519.824 296.586 519.852 cv
296.602 519.887 296.613 519.922 296.617 519.961 cv
296.617 524.16 li
296.824 523.949 297.027 523.77 297.223 523.625 cv
297.418 523.48 297.605 523.363 297.793 523.27 cv
297.977 523.184 298.164 523.117 298.355 523.07 cv
298.539 523.031 298.738 523.008 298.949 523.008 cv
299.453 523.008 299.887 523.109 300.254 523.312 cv
300.613 523.516 300.906 523.789 301.133 524.125 cv
301.355 524.469 301.523 524.867 301.629 525.324 cv
301.73 525.781 301.781 526.262 301.785 526.77 cv
cp
300.453 526.918 mo
300.449 526.562 300.422 526.215 300.371 525.875 cv
300.313 525.539 300.219 525.242 300.082 524.98 cv
299.945 524.723 299.766 524.512 299.543 524.352 cv
299.316 524.195 299.035 524.117 298.703 524.113 cv
298.535 524.117 298.371 524.141 298.211 524.184 cv
298.047 524.234 297.883 524.312 297.715 524.418 cv
297.547 524.531 297.371 524.672 297.195 524.84 cv
297.012 525.016 296.82 525.23 296.617 525.484 cv
296.617 528.281 li
296.973 528.715 297.313 529.047 297.637 529.27 cv
297.961 529.5 298.297 529.613 298.648 529.609 cv
298.969 529.613 299.246 529.535 299.48 529.375 cv
299.707 529.223 299.895 529.016 300.039 528.754 cv
300.184 528.5 300.289 528.211 300.355 527.891 cv
300.418 527.574 300.449 527.25 300.453 526.918 cv
cp
f
309.695 526.562 mo
309.691 526.766 309.641 526.906 309.543 526.992 cv
309.438 527.078 309.32 527.121 309.195 527.121 cv
304.578 527.121 li
304.574 527.512 304.613 527.863 304.695 528.176 cv
304.77 528.488 304.902 528.758 305.086 528.977 cv
305.266 529.203 305.5 529.375 305.797 529.492 cv
306.086 529.617 306.445 529.676 306.871 529.672 cv
307.203 529.676 307.5 529.648 307.762 529.59 cv
308.023 529.539 308.25 529.477 308.441 529.406 cv
308.629 529.34 308.785 529.281 308.91 529.223 cv
309.031 529.172 309.125 529.145 309.188 529.141 cv
309.223 529.145 309.254 529.152 309.285 529.168 cv
309.313 529.187 309.336 529.215 309.355 529.25 cv
309.367 529.289 309.379 529.34 309.391 529.402 cv
309.395 529.469 309.398 529.547 309.402 529.641 cv
309.398 529.711 309.395 529.77 309.395 529.816 cv
309.387 529.863 309.383 529.906 309.375 529.945 cv
309.367 529.984 309.352 530.02 309.336 530.051 cv
309.313 530.082 309.289 530.113 309.266 530.141 cv
309.234 530.172 309.152 530.219 309.012 530.281 cv
308.871 530.348 308.688 530.41 308.465 530.473 cv
308.238 530.535 307.98 530.59 307.688 530.641 cv
307.395 530.687 307.082 530.711 306.75 530.715 cv
306.172 530.711 305.664 530.633 305.234 530.473 cv
304.797 530.312 304.434 530.074 304.141 529.758 cv
303.84 529.441 303.617 529.047 303.469 528.566 cv
303.32 528.09 303.246 527.531 303.246 526.895 cv
303.246 526.297 303.32 525.758 303.477 525.273 cv
303.629 524.797 303.855 524.387 304.152 524.051 cv
304.445 523.715 304.801 523.457 305.215 523.277 cv
305.629 523.098 306.094 523.008 306.609 523.008 cv
307.16 523.008 307.629 523.098 308.016 523.273 cv
308.402 523.453 308.719 523.691 308.973 523.988 cv
309.219 524.289 309.402 524.641 309.52 525.039 cv
309.633 525.445 309.691 525.875 309.695 526.328 cv
cp
308.402 526.18 mo
308.418 525.504 308.266 524.973 307.949 524.59 cv
307.633 524.207 307.164 524.016 306.547 524.012 cv
306.223 524.016 305.941 524.074 305.703 524.191 cv
305.461 524.312 305.262 524.473 305.102 524.668 cv
304.938 524.867 304.813 525.098 304.727 525.359 cv
304.637 525.621 304.586 525.895 304.578 526.18 cv
cp
f
315.762 523.816 mo
315.758 523.934 315.758 524.031 315.754 524.105 cv
315.746 524.187 315.734 524.25 315.723 524.289 cv
315.703 524.336 315.684 524.367 315.664 524.391 cv
315.637 524.414 315.605 524.426 315.566 524.426 cv
315.523 524.426 315.473 524.414 315.414 524.391 cv
315.352 524.367 315.281 524.344 315.211 524.32 cv
315.133 524.297 315.051 524.277 314.957 524.254 cv
314.863 524.238 314.762 524.227 314.652 524.223 cv
314.52 524.227 314.391 524.254 314.27 524.301 cv
314.145 524.355 314.016 524.441 313.879 524.559 cv
313.738 524.684 313.594 524.84 313.445 525.035 cv
313.293 525.23 313.125 525.473 312.945 525.758 cv
312.945 530.371 li
312.941 530.418 312.93 530.453 312.914 530.477 cv
312.891 530.508 312.859 530.531 312.813 530.551 cv
312.766 530.57 312.699 530.582 312.621 530.598 cv
312.535 530.605 312.43 530.613 312.301 530.613 cv
312.172 530.613 312.066 530.605 311.988 530.598 cv
311.902 530.582 311.836 530.57 311.789 530.551 cv
311.734 530.531 311.703 530.508 311.688 530.477 cv
311.668 530.453 311.656 530.418 311.66 530.371 cv
311.66 523.359 li
311.656 523.32 311.664 523.285 311.684 523.254 cv
311.695 523.227 311.727 523.203 311.777 523.176 cv
311.82 523.156 311.883 523.141 311.957 523.129 cv
312.027 523.125 312.121 523.121 312.246 523.117 cv
312.355 523.121 312.453 523.125 312.531 523.129 cv
312.605 523.141 312.664 523.156 312.707 523.176 cv
312.746 523.203 312.773 523.227 312.793 523.254 cv
312.809 523.285 312.816 523.32 312.82 523.359 cv
312.82 524.379 li
313.008 524.098 313.191 523.871 313.363 523.695 cv
313.531 523.52 313.691 523.379 313.844 523.277 cv
313.992 523.176 314.141 523.105 314.289 523.066 cv
314.438 523.027 314.586 523.008 314.738 523.008 cv
314.805 523.008 314.883 523.012 314.969 523.02 cv
315.055 523.027 315.145 523.043 315.238 523.062 cv
315.332 523.086 315.414 523.109 315.492 523.133 cv
315.563 523.16 315.617 523.187 315.652 523.211 cv
315.68 523.242 315.699 523.266 315.715 523.285 cv
315.723 523.312 315.734 523.344 315.742 523.375 cv
315.75 523.414 315.754 523.465 315.758 523.535 cv
315.758 523.605 315.758 523.699 315.762 523.816 cv
cp
f
327.52 526.785 mo
327.516 527.363 327.441 527.891 327.293 528.367 cv
327.141 528.852 326.914 529.266 326.617 529.609 cv
326.316 529.961 325.941 530.23 325.496 530.422 cv
325.043 530.617 324.523 530.711 323.934 530.715 cv
323.355 530.711 322.852 530.629 322.426 530.457 cv
321.996 530.289 321.641 530.039 321.355 529.711 cv
321.066 529.383 320.852 528.988 320.715 528.52 cv
320.574 528.055 320.508 527.523 320.508 526.926 cv
320.508 526.359 320.578 525.832 320.727 525.352 cv
320.871 524.871 321.098 524.457 321.398 524.105 cv
321.695 523.758 322.066 523.488 322.516 523.297 cv
322.961 523.105 323.484 523.008 324.082 523.008 cv
324.66 523.008 325.16 523.094 325.59 523.266 cv
326.016 523.437 326.375 523.687 326.66 524.016 cv
326.945 524.344 327.16 524.742 327.305 525.207 cv
327.445 525.676 327.516 526.203 327.52 526.785 cv
cp
326.188 526.871 mo
326.184 526.496 326.148 526.137 326.082 525.797 cv
326.008 525.461 325.891 525.168 325.73 524.91 cv
325.566 524.66 325.348 524.457 325.07 524.305 cv
324.789 524.16 324.441 524.086 324.031 524.082 cv
323.645 524.086 323.316 524.152 323.043 524.285 cv
322.766 524.422 322.539 524.613 322.363 524.859 cv
322.184 525.105 322.051 525.398 321.969 525.734 cv
321.879 526.074 321.836 526.441 321.84 526.84 cv
321.836 527.227 321.871 527.59 321.945 527.926 cv
322.012 528.266 322.129 528.559 322.297 528.809 cv
322.461 529.062 322.684 529.266 322.961 529.41 cv
323.238 529.562 323.586 529.637 324 529.633 cv
324.375 529.637 324.703 529.566 324.984 529.43 cv
325.262 529.297 325.488 529.109 325.668 528.859 cv
325.844 528.617 325.973 528.324 326.059 527.988 cv
326.141 527.652 326.184 527.281 326.188 526.871 cv
cp
f
333.25 520.473 mo
333.246 520.574 333.242 520.652 333.234 520.711 cv
333.223 520.773 333.211 520.824 333.199 520.855 cv
333.184 520.895 333.168 520.918 333.148 520.93 cv
333.125 520.945 333.098 520.953 333.07 520.949 cv
333.031 520.953 332.984 520.941 332.934 520.914 cv
332.875 520.895 332.809 520.867 332.734 520.836 cv
332.652 520.809 332.563 520.781 332.457 520.758 cv
332.348 520.734 332.223 520.723 332.09 520.723 cv
331.895 520.723 331.73 520.754 331.598 520.816 cv
331.457 520.879 331.348 520.977 331.27 521.109 cv
331.184 521.242 331.125 521.414 331.09 521.625 cv
331.051 521.836 331.031 522.094 331.035 522.391 cv
331.035 523.156 li
332.602 523.156 li
332.641 523.16 332.676 523.168 332.707 523.184 cv
332.734 523.203 332.762 523.234 332.785 523.277 cv
332.809 523.324 332.824 523.383 332.84 523.445 cv
332.848 523.516 332.855 523.598 332.859 523.691 cv
332.855 523.883 332.832 524.016 332.789 524.098 cv
332.738 524.184 332.676 524.227 332.602 524.223 cv
331.035 524.223 li
331.035 530.371 li
331.031 530.418 331.023 530.453 331.004 530.477 cv
330.98 530.508 330.945 530.531 330.898 530.551 cv
330.848 530.57 330.781 530.582 330.699 530.598 cv
330.613 530.605 330.508 530.613 330.391 530.613 cv
330.262 530.613 330.16 530.605 330.078 530.598 cv
329.992 530.582 329.926 530.57 329.879 530.551 cv
329.828 530.531 329.793 530.508 329.773 530.477 cv
329.75 530.453 329.738 530.418 329.742 530.371 cv
329.742 524.223 li
328.754 524.223 li
328.668 524.227 328.605 524.184 328.566 524.098 cv
328.523 524.016 328.5 523.883 328.504 523.691 cv
328.5 523.598 328.508 523.516 328.52 523.445 cv
328.527 523.383 328.543 523.324 328.566 523.277 cv
328.586 523.234 328.609 523.203 328.645 523.184 cv
328.672 523.168 328.711 523.16 328.754 523.156 cv
329.742 523.156 li
329.742 522.43 li
329.738 521.945 329.785 521.527 329.879 521.172 cv
329.969 520.824 330.105 520.535 330.293 520.312 cv
330.477 520.09 330.711 519.926 331 519.816 cv
331.281 519.711 331.617 519.656 332.004 519.656 cv
332.18 519.656 332.355 519.676 332.531 519.707 cv
332.699 519.746 332.832 519.781 332.93 519.816 cv
333.02 519.859 333.082 519.895 333.117 519.922 cv
333.145 519.957 333.172 519.996 333.195 520.043 cv
333.215 520.094 333.227 520.156 333.238 520.223 cv
333.242 520.297 333.246 520.379 333.25 520.473 cv
cp
f
343.449 527.738 mo
343.445 528.211 343.359 528.633 343.188 529 cv
343.012 529.375 342.77 529.687 342.461 529.941 cv
342.152 530.199 341.789 530.391 341.371 530.52 cv
340.949 530.648 340.5 530.711 340.02 530.715 cv
339.68 530.711 339.363 530.684 339.078 530.629 cv
338.789 530.57 338.535 530.504 338.309 530.418 cv
338.082 530.34 337.891 530.254 337.738 530.16 cv
337.582 530.074 337.477 529.996 337.418 529.934 cv
337.359 529.871 337.316 529.793 337.289 529.699 cv
337.258 529.605 337.242 529.477 337.246 529.312 cv
337.242 529.199 337.246 529.105 337.262 529.027 cv
337.27 528.953 337.285 528.891 337.309 528.844 cv
337.324 528.797 337.352 528.766 337.387 528.746 cv
337.414 528.73 337.449 528.723 337.492 528.719 cv
337.563 528.723 337.664 528.766 337.801 528.852 cv
337.93 528.941 338.102 529.039 338.313 529.141 cv
338.52 529.25 338.77 529.348 339.063 529.434 cv
339.355 529.527 339.695 529.57 340.082 529.57 cv
340.371 529.57 340.637 529.531 340.879 529.453 cv
341.117 529.375 341.324 529.266 341.504 529.121 cv
341.676 528.98 341.813 528.805 341.906 528.594 cv
342 528.387 342.047 528.152 342.047 527.887 cv
342.047 527.605 341.98 527.359 341.852 527.152 cv
341.719 526.953 341.547 526.777 341.336 526.621 cv
341.121 526.473 340.879 526.332 340.605 526.199 cv
340.332 526.074 340.051 525.941 339.77 525.809 cv
339.48 525.676 339.203 525.531 338.934 525.367 cv
338.664 525.211 338.422 525.02 338.211 524.801 cv
337.992 524.582 337.82 524.328 337.691 524.031 cv
337.555 523.742 337.488 523.391 337.492 522.977 cv
337.488 522.559 337.566 522.184 337.723 521.852 cv
337.875 521.523 338.086 521.246 338.363 521.02 cv
338.633 520.801 338.957 520.629 339.336 520.512 cv
339.711 520.395 340.121 520.336 340.559 520.336 cv
340.777 520.336 341 520.355 341.23 520.395 cv
341.453 520.434 341.664 520.484 341.867 520.547 cv
342.063 520.613 342.242 520.687 342.402 520.766 cv
342.555 520.848 342.656 520.914 342.711 520.961 cv
342.758 521.016 342.793 521.055 342.809 521.078 cv
342.824 521.109 342.836 521.145 342.848 521.187 cv
342.855 521.234 342.863 521.289 342.871 521.348 cv
342.875 521.414 342.879 521.492 342.879 521.59 cv
342.879 521.684 342.875 521.77 342.867 521.84 cv
342.859 521.918 342.848 521.977 342.832 522.023 cv
342.816 522.07 342.793 522.105 342.766 522.129 cv
342.734 522.152 342.703 522.164 342.668 522.164 cv
342.609 522.164 342.52 522.129 342.398 522.059 cv
342.273 521.988 342.121 521.906 341.949 521.812 cv
341.77 521.723 341.563 521.641 341.324 521.562 cv
341.078 521.488 340.809 521.449 340.512 521.449 cv
340.23 521.449 339.984 521.488 339.777 521.562 cv
339.566 521.641 339.395 521.742 339.262 521.863 cv
339.125 521.988 339.023 522.133 338.957 522.305 cv
338.891 522.477 338.859 522.66 338.859 522.852 cv
338.859 523.137 338.922 523.379 339.051 523.578 cv
339.18 523.781 339.352 523.961 339.57 524.113 cv
339.781 524.273 340.027 524.414 340.305 524.543 cv
340.578 524.676 340.859 524.809 341.148 524.937 cv
341.434 525.07 341.715 525.215 341.988 525.371 cv
342.262 525.531 342.508 525.719 342.727 525.934 cv
342.941 526.152 343.113 526.406 343.25 526.699 cv
343.379 526.992 343.445 527.34 343.449 527.738 cv
cp
f
351.215 530.371 mo
351.211 530.418 351.203 530.453 351.188 530.477 cv
351.168 530.508 351.133 530.531 351.09 530.551 cv
351.043 530.57 350.984 530.582 350.91 530.598 cv
350.832 530.605 350.738 530.613 350.633 530.613 cv
350.508 530.613 350.41 530.605 350.34 530.598 cv
350.262 530.582 350.203 530.57 350.16 530.551 cv
350.113 530.531 350.082 530.508 350.07 530.477 cv
350.051 530.453 350.043 530.418 350.047 530.371 cv
350.047 529.445 li
349.645 529.891 349.25 530.211 348.863 530.41 cv
348.469 530.613 348.074 530.711 347.68 530.715 cv
347.207 530.711 346.813 530.637 346.496 530.48 cv
346.176 530.328 345.918 530.117 345.723 529.848 cv
345.52 529.582 345.379 529.27 345.297 528.91 cv
345.207 528.555 345.164 528.121 345.168 527.613 cv
345.168 523.359 li
345.164 523.32 345.172 523.285 345.195 523.254 cv
345.211 523.227 345.246 523.203 345.301 523.176 cv
345.348 523.156 345.418 523.141 345.504 523.129 cv
345.586 523.125 345.688 523.121 345.816 523.117 cv
345.938 523.121 346.043 523.125 346.129 523.129 cv
346.211 523.141 346.277 523.156 346.324 523.176 cv
346.371 523.203 346.406 523.227 346.43 523.254 cv
346.449 523.285 346.457 523.32 346.461 523.359 cv
346.461 527.441 li
346.457 527.855 346.488 528.184 346.551 528.43 cv
346.609 528.676 346.699 528.887 346.824 529.059 cv
346.941 529.238 347.098 529.371 347.289 529.465 cv
347.473 529.562 347.691 529.613 347.941 529.609 cv
348.262 529.613 348.582 529.496 348.906 529.266 cv
349.223 529.039 349.563 528.703 349.922 528.258 cv
349.922 523.359 li
349.922 523.32 349.93 523.285 349.949 523.254 cv
349.965 523.227 350 523.203 350.055 523.176 cv
350.105 523.156 350.172 523.141 350.254 523.129 cv
350.332 523.125 350.438 523.121 350.57 523.117 cv
350.691 523.121 350.797 523.125 350.883 523.129 cv
350.965 523.141 351.027 523.156 351.074 523.176 cv
351.117 523.203 351.152 523.227 351.18 523.254 cv
351.199 523.285 351.211 523.32 351.215 523.359 cv
cp
f
360.07 526.77 mo
360.066 527.379 360 527.93 359.871 528.414 cv
359.734 528.902 359.539 529.316 359.285 529.656 cv
359.027 530 358.711 530.262 358.34 530.441 cv
357.965 530.625 357.539 530.711 357.055 530.715 cv
356.828 530.711 356.621 530.691 356.434 530.648 cv
356.246 530.602 356.059 530.531 355.879 530.434 cv
355.691 530.336 355.512 530.211 355.332 530.059 cv
355.148 529.91 354.957 529.73 354.758 529.516 cv
354.758 530.371 li
354.758 530.418 354.746 530.453 354.727 530.48 cv
354.703 530.516 354.668 530.539 354.625 530.555 cv
354.574 530.57 354.516 530.582 354.449 530.598 cv
354.375 530.605 354.285 530.613 354.18 530.613 cv
354.07 530.613 353.984 530.605 353.914 530.598 cv
353.84 530.582 353.777 530.57 353.734 530.555 cv
353.684 530.539 353.652 530.516 353.641 530.48 cv
353.621 530.453 353.613 530.418 353.617 530.371 cv
353.617 519.961 li
353.613 519.922 353.625 519.887 353.645 519.852 cv
353.66 519.824 353.691 519.797 353.746 519.773 cv
353.793 519.754 353.859 519.738 353.945 519.727 cv
354.023 519.719 354.129 519.715 354.258 519.711 cv
354.387 519.715 354.492 519.719 354.578 519.727 cv
354.656 519.738 354.723 519.754 354.77 519.773 cv
354.816 519.797 354.848 519.824 354.871 519.852 cv
354.887 519.887 354.898 519.922 354.902 519.961 cv
354.902 524.16 li
355.109 523.949 355.313 523.77 355.508 523.625 cv
355.703 523.48 355.891 523.363 356.078 523.27 cv
356.262 523.184 356.449 523.117 356.641 523.07 cv
356.824 523.031 357.023 523.008 357.234 523.008 cv
357.738 523.008 358.172 523.109 358.539 523.312 cv
358.898 523.516 359.191 523.789 359.418 524.125 cv
359.641 524.469 359.809 524.867 359.914 525.324 cv
360.016 525.781 360.066 526.262 360.07 526.77 cv
cp
358.738 526.918 mo
358.734 526.562 358.707 526.215 358.656 525.875 cv
358.598 525.539 358.504 525.242 358.367 524.98 cv
358.23 524.723 358.051 524.512 357.828 524.352 cv
357.602 524.195 357.32 524.117 356.988 524.113 cv
356.82 524.117 356.656 524.141 356.496 524.184 cv
356.332 524.234 356.168 524.312 356 524.418 cv
355.832 524.531 355.656 524.672 355.48 524.84 cv
355.297 525.016 355.105 525.23 354.902 525.484 cv
354.902 528.281 li
355.258 528.715 355.598 529.047 355.922 529.27 cv
356.246 529.5 356.582 529.613 356.934 529.609 cv
357.254 529.613 357.531 529.535 357.766 529.375 cv
357.992 529.223 358.18 529.016 358.324 528.754 cv
358.469 528.5 358.574 528.211 358.641 527.891 cv
358.703 527.574 358.734 527.25 358.738 526.918 cv
cp
f
365.207 526.633 mo
365.207 526.836 365.184 526.973 365.137 527.051 cv
365.09 527.129 365.02 527.168 364.934 527.168 cv
361.676 527.168 li
361.582 527.168 361.516 527.129 361.469 527.047 cv
361.422 526.969 361.398 526.832 361.398 526.633 cv
361.398 526.437 361.422 526.297 361.469 526.219 cv
361.516 526.141 361.582 526.102 361.676 526.102 cv
364.934 526.102 li
364.973 526.102 365.012 526.109 365.047 526.125 cv
365.078 526.141 365.105 526.172 365.133 526.215 cv
365.152 526.262 365.172 526.316 365.188 526.383 cv
365.199 526.453 365.207 526.539 365.207 526.633 cv
cp
f
368.461 530.363 mo
368.457 530.406 368.449 530.441 368.43 530.473 cv
368.406 530.504 368.367 530.531 368.32 530.547 cv
368.266 530.566 368.199 530.578 368.113 530.594 cv
368.027 530.605 367.918 530.613 367.793 530.613 cv
367.664 530.613 367.559 530.605 367.473 530.594 cv
367.383 530.578 367.313 530.566 367.262 530.547 cv
367.207 530.531 367.172 530.504 367.152 530.473 cv
367.129 530.441 367.117 530.406 367.121 530.363 cv
367.121 520.684 li
367.117 520.645 367.129 520.609 367.156 520.574 cv
367.176 520.547 367.215 520.52 367.273 520.5 cv
367.324 520.484 367.395 520.469 367.484 520.453 cv
367.566 520.441 367.668 520.437 367.793 520.434 cv
367.918 520.437 368.027 520.441 368.113 520.453 cv
368.199 520.469 368.266 520.484 368.32 520.5 cv
368.367 520.52 368.406 520.547 368.43 520.574 cv
368.449 520.609 368.457 520.645 368.461 520.684 cv
cp
f
381.449 530.371 mo
381.445 530.418 381.438 530.453 381.418 530.477 cv
381.395 530.508 381.359 530.531 381.316 530.551 cv
381.266 530.57 381.199 530.582 381.121 530.598 cv
381.035 530.605 380.934 530.613 380.809 530.613 cv
380.676 530.613 380.566 530.605 380.488 530.598 cv
380.402 530.582 380.336 530.57 380.289 530.551 cv
380.234 530.531 380.199 530.508 380.184 530.477 cv
380.16 530.453 380.152 530.418 380.152 530.371 cv
380.152 526.109 li
380.152 525.816 380.125 525.547 380.074 525.301 cv
380.02 525.059 379.938 524.848 379.824 524.668 cv
379.711 524.492 379.566 524.355 379.391 524.262 cv
379.211 524.168 379 524.121 378.766 524.121 cv
378.469 524.121 378.172 524.238 377.875 524.465 cv
377.57 524.699 377.242 525.031 376.887 525.469 cv
376.887 530.371 li
376.883 530.418 376.871 530.453 376.855 530.477 cv
376.832 530.508 376.801 530.531 376.754 530.551 cv
376.703 530.57 376.637 530.582 376.555 530.598 cv
376.469 530.605 376.363 530.613 376.242 530.613 cv
376.121 530.613 376.02 530.605 375.934 530.598 cv
375.848 530.582 375.777 530.57 375.73 530.551 cv
375.676 530.531 375.645 530.508 375.629 530.477 cv
375.609 530.453 375.598 530.418 375.602 530.371 cv
375.602 526.109 li
375.598 525.816 375.57 525.547 375.516 525.301 cv
375.457 525.059 375.371 524.848 375.258 524.668 cv
375.145 524.492 375 524.355 374.828 524.262 cv
374.648 524.168 374.441 524.121 374.207 524.121 cv
373.906 524.121 373.609 524.238 373.309 524.465 cv
373.008 524.699 372.68 525.031 372.328 525.469 cv
372.328 530.371 li
372.324 530.418 372.313 530.453 372.297 530.477 cv
372.273 530.508 372.242 530.531 372.195 530.551 cv
372.148 530.57 372.082 530.582 372.004 530.598 cv
371.918 530.605 371.813 530.613 371.684 530.613 cv
371.555 530.613 371.449 530.605 371.371 530.598 cv
371.285 530.582 371.219 530.57 371.172 530.551 cv
371.117 530.531 371.086 530.508 371.07 530.477 cv
371.051 530.453 371.039 530.418 371.043 530.371 cv
371.043 523.359 li
371.039 523.32 371.047 523.285 371.066 523.254 cv
371.078 523.227 371.109 523.203 371.16 523.176 cv
371.203 523.156 371.266 523.141 371.34 523.129 cv
371.41 523.125 371.504 523.121 371.629 523.117 cv
371.738 523.121 371.836 523.125 371.914 523.129 cv
371.988 523.141 372.047 523.156 372.09 523.176 cv
372.129 523.203 372.156 523.227 372.176 523.254 cv
372.191 523.285 372.199 523.32 372.203 523.359 cv
372.203 524.285 li
372.594 523.844 372.977 523.523 373.352 523.316 cv
373.719 523.113 374.098 523.008 374.48 523.008 cv
374.77 523.008 375.027 523.043 375.262 523.109 cv
375.488 523.18 375.695 523.273 375.875 523.395 cv
376.051 523.516 376.199 523.66 376.328 523.828 cv
376.449 524 376.555 524.191 376.641 524.395 cv
376.871 524.145 377.094 523.93 377.305 523.75 cv
377.516 523.578 377.719 523.434 377.914 523.32 cv
378.109 523.215 378.297 523.137 378.48 523.082 cv
378.664 523.035 378.852 523.008 379.039 523.008 cv
379.492 523.008 379.871 523.09 380.176 523.246 cv
380.48 523.41 380.727 523.621 380.922 523.883 cv
381.109 524.148 381.246 524.457 381.328 524.812 cv
381.406 525.168 381.445 525.543 381.449 525.937 cv
cp
f
389.078 530.379 mo
389.074 530.441 389.055 530.488 389.016 530.52 cv
388.973 530.551 388.914 530.574 388.844 530.59 cv
388.766 530.605 388.66 530.613 388.523 530.613 cv
388.387 530.613 388.277 530.605 388.199 530.59 cv
388.113 530.574 388.055 530.551 388.023 530.52 cv
387.984 530.488 387.969 530.441 387.973 530.379 cv
387.973 529.68 li
387.664 530.008 387.32 530.262 386.945 530.441 cv
386.566 530.625 386.168 530.711 385.75 530.715 cv
385.375 530.711 385.043 530.664 384.746 530.57 cv
384.449 530.473 384.195 530.336 383.984 530.152 cv
383.773 529.973 383.609 529.75 383.492 529.484 cv
383.375 529.223 383.316 528.922 383.32 528.578 cv
383.316 528.187 383.395 527.844 383.559 527.551 cv
383.715 527.262 383.949 527.02 384.254 526.828 cv
384.555 526.637 384.922 526.492 385.359 526.395 cv
385.793 526.301 386.285 526.254 386.832 526.25 cv
387.801 526.25 li
387.801 525.703 li
387.797 525.434 387.77 525.195 387.715 524.988 cv
387.656 524.781 387.563 524.609 387.438 524.469 cv
387.305 524.332 387.141 524.227 386.941 524.156 cv
386.734 524.086 386.484 524.051 386.195 524.051 cv
385.875 524.051 385.59 524.09 385.34 524.164 cv
385.082 524.242 384.863 524.324 384.676 524.414 cv
384.488 524.508 384.328 524.594 384.203 524.664 cv
384.07 524.742 383.977 524.777 383.918 524.777 cv
383.875 524.777 383.84 524.77 383.809 524.746 cv
383.777 524.73 383.75 524.699 383.727 524.652 cv
383.703 524.613 383.684 524.559 383.676 524.492 cv
383.66 524.43 383.656 524.359 383.66 524.277 cv
383.656 524.152 383.664 524.047 383.688 523.969 cv
383.703 523.895 383.75 523.824 383.82 523.754 cv
383.891 523.687 384.012 523.609 384.184 523.52 cv
384.355 523.43 384.551 523.348 384.773 523.27 cv
384.996 523.199 385.242 523.137 385.508 523.082 cv
385.773 523.035 386.039 523.008 386.313 523.008 cv
386.813 523.008 387.242 523.066 387.594 523.18 cv
387.945 523.297 388.23 523.465 388.453 523.684 cv
388.668 523.906 388.828 524.18 388.93 524.504 cv
389.027 524.836 389.074 525.219 389.078 525.648 cv
cp
387.801 527.176 mo
386.699 527.176 li
386.344 527.18 386.039 527.211 385.781 527.266 cv
385.52 527.328 385.305 527.414 385.133 527.531 cv
384.961 527.648 384.836 527.789 384.758 527.953 cv
384.676 528.117 384.633 528.305 384.637 528.516 cv
384.633 528.883 384.75 529.176 384.98 529.387 cv
385.211 529.605 385.535 529.711 385.953 529.711 cv
386.289 529.711 386.602 529.625 386.891 529.453 cv
387.18 529.281 387.48 529.02 387.801 528.664 cv
cp
f
397.297 523.676 mo
397.293 523.859 397.27 523.992 397.223 524.07 cv
397.172 524.152 397.109 524.191 397.035 524.191 cv
396.027 524.191 li
396.207 524.379 396.336 524.586 396.41 524.812 cv
396.48 525.039 396.516 525.273 396.52 525.516 cv
396.516 525.922 396.449 526.281 396.324 526.594 cv
396.191 526.906 396.008 527.172 395.766 527.383 cv
395.523 527.602 395.234 527.766 394.906 527.879 cv
394.57 527.996 394.203 528.055 393.801 528.051 cv
393.512 528.055 393.238 528.016 392.984 527.937 cv
392.723 527.863 392.527 527.77 392.391 527.652 cv
392.297 527.75 392.219 527.855 392.16 527.973 cv
392.098 528.094 392.066 528.23 392.07 528.383 cv
392.066 528.566 392.152 528.719 392.324 528.836 cv
392.492 528.961 392.715 529.023 392.996 529.031 cv
394.828 529.109 li
395.176 529.121 395.492 529.168 395.785 529.254 cv
396.074 529.34 396.328 529.465 396.543 529.621 cv
396.754 529.781 396.922 529.973 397.043 530.203 cv
397.16 530.437 397.219 530.707 397.223 531.012 cv
397.219 531.332 397.152 531.637 397.02 531.93 cv
396.883 532.219 396.676 532.473 396.398 532.695 cv
396.117 532.914 395.762 533.09 395.332 533.219 cv
394.902 533.344 394.395 533.406 393.809 533.41 cv
393.238 533.406 392.754 533.359 392.359 533.266 cv
391.961 533.168 391.637 533.035 391.383 532.871 cv
391.129 532.703 390.945 532.508 390.832 532.277 cv
390.715 532.043 390.656 531.789 390.66 531.523 cv
390.656 531.352 390.676 531.187 390.723 531.027 cv
390.762 530.863 390.824 530.711 390.91 530.566 cv
390.992 530.422 391.102 530.285 391.23 530.148 cv
391.355 530.02 391.5 529.887 391.672 529.758 cv
391.414 529.629 391.227 529.465 391.105 529.266 cv
390.984 529.07 390.926 528.859 390.926 528.625 cv
390.926 528.312 390.988 528.027 391.117 527.777 cv
391.246 527.527 391.406 527.305 391.602 527.105 cv
391.438 526.914 391.313 526.699 391.219 526.457 cv
391.125 526.219 391.078 525.926 391.078 525.578 cv
391.078 525.184 391.145 524.824 391.281 524.504 cv
391.414 524.187 391.602 523.922 391.844 523.703 cv
392.082 523.488 392.367 523.32 392.703 523.199 cv
393.035 523.086 393.402 523.027 393.801 523.023 cv
394.012 523.027 394.211 523.039 394.395 523.059 cv
394.578 523.086 394.75 523.117 394.914 523.156 cv
397.035 523.156 li
397.121 523.16 397.188 523.203 397.23 523.285 cv
397.273 523.375 397.293 523.504 397.297 523.676 cv
cp
395.289 525.523 mo
395.285 525.051 395.152 524.68 394.895 524.406 cv
394.629 524.141 394.258 524.004 393.777 524.004 cv
393.523 524.004 393.305 524.047 393.125 524.129 cv
392.938 524.215 392.785 524.328 392.664 524.473 cv
392.543 524.621 392.453 524.789 392.395 524.977 cv
392.332 525.164 392.301 525.363 392.305 525.57 cv
392.301 526.035 392.434 526.398 392.695 526.664 cv
392.957 526.93 393.324 527.062 393.801 527.059 cv
394.051 527.062 394.27 527.023 394.461 526.937 cv
394.645 526.859 394.801 526.746 394.926 526.605 cv
395.047 526.465 395.137 526.301 395.199 526.109 cv
395.254 525.926 395.285 525.73 395.289 525.523 cv
cp
395.934 531.082 mo
395.93 530.777 395.805 530.547 395.563 530.383 cv
395.313 530.223 394.98 530.133 394.563 530.121 cv
392.746 530.059 li
392.578 530.191 392.441 530.316 392.34 530.43 cv
392.23 530.547 392.148 530.656 392.086 530.766 cv
392.023 530.871 391.98 530.977 391.957 531.082 cv
391.934 531.184 391.922 531.289 391.922 531.398 cv
391.922 531.734 392.09 531.988 392.434 532.168 cv
392.773 532.34 393.254 532.43 393.871 532.43 cv
394.258 532.43 394.582 532.391 394.848 532.316 cv
395.105 532.238 395.316 532.137 395.48 532.016 cv
395.637 531.887 395.754 531.746 395.828 531.586 cv
395.895 531.426 395.93 531.258 395.934 531.082 cv
cp
f
404.859 526.562 mo
404.855 526.766 404.805 526.906 404.707 526.992 cv
404.602 527.078 404.484 527.121 404.359 527.121 cv
399.742 527.121 li
399.738 527.512 399.777 527.863 399.859 528.176 cv
399.934 528.488 400.066 528.758 400.25 528.977 cv
400.43 529.203 400.664 529.375 400.961 529.492 cv
401.25 529.617 401.609 529.676 402.035 529.672 cv
402.367 529.676 402.664 529.648 402.926 529.59 cv
403.188 529.539 403.414 529.477 403.605 529.406 cv
403.793 529.34 403.949 529.281 404.074 529.223 cv
404.195 529.172 404.289 529.145 404.352 529.141 cv
404.387 529.145 404.418 529.152 404.449 529.168 cv
404.477 529.187 404.5 529.215 404.52 529.25 cv
404.531 529.289 404.543 529.34 404.555 529.402 cv
404.559 529.469 404.563 529.547 404.566 529.641 cv
404.563 529.711 404.559 529.77 404.559 529.816 cv
404.551 529.863 404.547 529.906 404.539 529.945 cv
404.531 529.984 404.516 530.02 404.5 530.051 cv
404.477 530.082 404.453 530.113 404.43 530.141 cv
404.398 530.172 404.316 530.219 404.176 530.281 cv
404.035 530.348 403.852 530.41 403.629 530.473 cv
403.402 530.535 403.145 530.59 402.852 530.641 cv
402.559 530.687 402.246 530.711 401.914 530.715 cv
401.336 530.711 400.828 530.633 400.398 530.473 cv
399.961 530.312 399.598 530.074 399.305 529.758 cv
399.004 529.441 398.781 529.047 398.633 528.566 cv
398.484 528.09 398.41 527.531 398.41 526.895 cv
398.41 526.297 398.484 525.758 398.641 525.273 cv
398.793 524.797 399.02 524.387 399.316 524.051 cv
399.609 523.715 399.965 523.457 400.379 523.277 cv
400.793 523.098 401.258 523.008 401.773 523.008 cv
402.324 523.008 402.793 523.098 403.18 523.273 cv
403.566 523.453 403.883 523.691 404.137 523.988 cv
404.383 524.289 404.566 524.641 404.684 525.039 cv
404.797 525.445 404.855 525.875 404.859 526.328 cv
cp
403.566 526.18 mo
403.582 525.504 403.43 524.973 403.113 524.59 cv
402.797 524.207 402.328 524.016 401.711 524.012 cv
401.387 524.016 401.105 524.074 400.867 524.191 cv
400.625 524.312 400.426 524.473 400.266 524.668 cv
400.102 524.867 399.977 525.098 399.891 525.359 cv
399.801 525.621 399.75 525.895 399.742 526.18 cv
cp
f
411.227 528.461 mo
411.223 528.824 411.156 529.145 411.027 529.422 cv
410.895 529.703 410.707 529.937 410.465 530.129 cv
410.219 530.324 409.926 530.469 409.59 530.566 cv
409.25 530.664 408.879 530.711 408.477 530.715 cv
408.223 530.711 407.984 530.691 407.762 530.656 cv
407.535 530.613 407.336 530.566 407.156 530.508 cv
406.977 530.449 406.824 530.387 406.699 530.32 cv
406.574 530.258 406.48 530.199 406.426 530.145 cv
406.367 530.094 406.328 530.023 406.305 529.926 cv
406.277 529.836 406.266 529.707 406.266 529.547 cv
406.266 529.449 406.27 529.367 406.281 529.297 cv
406.289 529.23 406.301 529.176 406.32 529.133 cv
406.332 529.094 406.355 529.062 406.383 529.043 cv
406.41 529.027 406.441 529.02 406.48 529.016 cv
406.535 529.02 406.621 529.055 406.734 529.121 cv
406.844 529.195 406.98 529.273 407.148 529.352 cv
407.309 529.437 407.5 529.512 407.727 529.582 cv
407.945 529.652 408.203 529.687 408.5 529.687 cv
408.715 529.687 408.914 529.664 409.094 529.617 cv
409.27 529.57 409.422 529.504 409.551 529.41 cv
409.68 529.324 409.781 529.207 409.852 529.062 cv
409.922 528.926 409.957 528.758 409.957 528.562 cv
409.957 528.367 409.906 528.203 409.805 528.066 cv
409.703 527.934 409.566 527.812 409.402 527.707 cv
409.234 527.605 409.051 527.516 408.844 527.43 cv
408.633 527.352 408.418 527.266 408.199 527.176 cv
407.98 527.09 407.766 526.988 407.555 526.875 cv
407.344 526.766 407.152 526.633 406.988 526.469 cv
406.816 526.312 406.684 526.117 406.586 525.891 cv
406.48 525.668 406.43 525.402 406.434 525.09 cv
406.43 524.816 406.484 524.551 406.594 524.297 cv
406.699 524.047 406.859 523.828 407.074 523.637 cv
407.285 523.449 407.551 523.297 407.871 523.18 cv
408.191 523.066 408.563 523.008 408.992 523.008 cv
409.176 523.008 409.363 523.023 409.551 523.055 cv
409.734 523.086 409.902 523.125 410.059 523.172 cv
410.207 523.219 410.336 523.27 410.445 523.324 cv
410.547 523.379 410.629 523.43 410.688 523.469 cv
410.738 523.516 410.773 523.551 410.797 523.578 cv
410.813 523.609 410.828 523.645 410.836 523.68 cv
410.844 523.723 410.852 523.77 410.859 523.824 cv
410.867 523.883 410.871 523.953 410.871 524.035 cv
410.871 524.125 410.867 524.203 410.859 524.266 cv
410.852 524.336 410.836 524.387 410.82 524.426 cv
410.797 524.469 410.777 524.5 410.754 524.516 cv
410.727 524.535 410.695 524.543 410.668 524.543 cv
410.617 524.543 410.551 524.516 410.465 524.457 cv
410.375 524.402 410.262 524.34 410.121 524.273 cv
409.98 524.211 409.813 524.152 409.625 524.09 cv
409.434 524.035 409.219 524.004 408.977 524.004 cv
408.754 524.004 408.563 524.031 408.398 524.078 cv
408.23 524.133 408.094 524.203 407.988 524.289 cv
407.883 524.383 407.801 524.488 407.75 524.613 cv
407.691 524.738 407.664 524.875 407.668 525.02 cv
407.664 525.223 407.715 525.391 407.82 525.527 cv
407.922 525.668 408.059 525.789 408.227 525.891 cv
408.391 525.996 408.582 526.09 408.797 526.172 cv
409.008 526.258 409.223 526.344 409.445 526.43 cv
409.664 526.52 409.883 526.621 410.102 526.727 cv
410.316 526.836 410.508 526.965 410.676 527.121 cv
410.84 527.277 410.973 527.465 411.074 527.684 cv
411.172 527.902 411.223 528.164 411.227 528.461 cv
cp
f
160.773 13.727 mo
160.77 14.258 160.672 14.723 160.477 15.121 cv
160.277 15.523 160.012 15.859 159.676 16.125 cv
159.336 16.395 158.938 16.594 158.488 16.727 cv
158.035 16.859 157.555 16.926 157.043 16.93 cv
156.691 16.926 156.367 16.898 156.07 16.844 cv
155.77 16.785 155.508 16.719 155.281 16.637 cv
155.051 16.559 154.859 16.473 154.707 16.383 cv
154.555 16.297 154.445 16.219 154.379 16.148 cv
154.309 16.082 154.258 15.984 154.234 15.859 cv
154.203 15.734 154.191 15.551 154.191 15.309 cv
154.191 15.148 154.195 15.016 154.207 14.902 cv
154.215 14.797 154.23 14.707 154.258 14.637 cv
154.277 14.57 154.309 14.523 154.352 14.492 cv
154.387 14.469 154.434 14.453 154.484 14.449 cv
154.555 14.453 154.656 14.496 154.793 14.578 cv
154.922 14.668 155.094 14.762 155.305 14.863 cv
155.512 14.969 155.758 15.066 156.047 15.148 cv
156.332 15.238 156.668 15.281 157.051 15.277 cv
157.301 15.281 157.523 15.25 157.719 15.187 cv
157.914 15.129 158.082 15.043 158.223 14.934 cv
158.359 14.824 158.465 14.691 158.539 14.531 cv
158.609 14.371 158.645 14.191 158.648 13.992 cv
158.645 13.766 158.582 13.57 158.461 13.402 cv
158.332 13.242 158.168 13.098 157.973 12.969 cv
157.77 12.844 157.543 12.723 157.289 12.609 cv
157.035 12.5 156.773 12.383 156.504 12.254 cv
156.23 12.133 155.969 11.988 155.715 11.828 cv
155.461 11.672 155.234 11.484 155.035 11.262 cv
154.832 11.043 154.668 10.781 154.547 10.477 cv
154.422 10.176 154.359 9.81598 154.363 9.39502 cv
154.359 8.914 154.449 8.48798 154.629 8.12097 cv
154.805 7.758 155.047 7.453 155.355 7.20697 cv
155.656 6.96899 156.016 6.789 156.43 6.66803 cv
156.844 6.55103 157.281 6.492 157.742 6.48798 cv
157.98 6.492 158.219 6.508 158.461 6.54303 cv
158.699 6.58197 158.922 6.633 159.129 6.69098 cv
159.336 6.75403 159.52 6.82397 159.684 6.89801 cv
159.84 6.97998 159.949 7.04303 160.004 7.09399 cv
160.055 7.14801 160.09 7.19501 160.109 7.22699 cv
160.125 7.26599 160.141 7.31201 160.156 7.37097 cv
160.168 7.43402 160.176 7.508 160.184 7.59802 cv
160.188 7.69098 160.191 7.80499 160.191 7.93701 cv
160.191 8.09003 160.188 8.21899 160.18 8.32001 cv
160.172 8.42603 160.156 8.51202 160.141 8.57397 cv
160.117 8.64502 160.094 8.69098 160.063 8.72302 cv
160.027 8.75403 159.98 8.77002 159.926 8.77002 cv
159.867 8.77002 159.777 8.73401 159.652 8.65997 cv
159.527 8.59003 159.371 8.51202 159.191 8.422 cv
159.008 8.34003 158.801 8.26202 158.563 8.19098 cv
158.32 8.125 158.055 8.09003 157.773 8.086 cv
157.547 8.09003 157.355 8.117 157.191 8.16803 cv
157.023 8.22302 156.883 8.297 156.773 8.39099 cv
156.66 8.48798 156.578 8.60498 156.523 8.73798 cv
156.469 8.87903 156.441 9.02002 156.441 9.16803 cv
156.441 9.39502 156.5 9.59003 156.625 9.75 cv
156.742 9.914 156.906 10.059 157.117 10.184 cv
157.32 10.312 157.555 10.434 157.813 10.543 cv
158.07 10.66 158.336 10.777 158.609 10.898 cv
158.879 11.027 159.141 11.168 159.402 11.324 cv
159.66 11.48 159.895 11.672 160.098 11.891 cv
160.301 12.117 160.461 12.375 160.586 12.672 cv
160.707 12.969 160.77 13.32 160.773 13.727 cv
cp
f
167.492 15.379 mo
167.488 15.516 167.484 15.629 167.48 15.719 cv
167.469 15.812 167.461 15.891 167.449 15.949 cv
167.434 16.012 167.418 16.062 167.402 16.098 cv
167.383 16.141 167.34 16.187 167.281 16.246 cv
167.215 16.309 167.109 16.383 166.961 16.465 cv
166.809 16.555 166.637 16.633 166.445 16.695 cv
166.254 16.766 166.047 16.816 165.82 16.859 cv
165.594 16.898 165.359 16.918 165.125 16.922 cv
164.586 16.918 164.113 16.84 163.699 16.672 cv
163.285 16.508 162.938 16.262 162.66 15.937 cv
162.375 15.613 162.164 15.219 162.023 14.75 cv
161.883 14.285 161.813 13.746 161.813 13.141 cv
161.813 12.445 161.898 11.848 162.07 11.34 cv
162.242 10.836 162.484 10.414 162.801 10.082 cv
163.109 9.75 163.477 9.50403 163.906 9.34003 cv
164.328 9.17999 164.797 9.09802 165.309 9.09802 cv
165.516 9.09802 165.719 9.117 165.922 9.15198 cv
166.117 9.19098 166.305 9.242 166.48 9.30103 cv
166.652 9.367 166.809 9.43701 166.949 9.51202 cv
167.086 9.59399 167.184 9.65997 167.242 9.71503 cv
167.297 9.77301 167.336 9.82001 167.363 9.85498 cv
167.383 9.89801 167.402 9.94897 167.418 10.008 cv
167.43 10.074 167.441 10.152 167.449 10.238 cv
167.457 10.332 167.461 10.441 167.461 10.57 cv
167.461 10.875 167.434 11.086 167.383 11.207 cv
167.328 11.328 167.262 11.391 167.18 11.387 cv
167.09 11.391 166.996 11.355 166.898 11.281 cv
166.797 11.211 166.68 11.129 166.547 11.039 cv
166.414 10.953 166.254 10.871 166.066 10.797 cv
165.879 10.727 165.652 10.691 165.395 10.687 cv
164.883 10.691 164.496 10.887 164.227 11.277 cv
163.953 11.668 163.816 12.242 163.82 13 cv
163.816 13.375 163.852 13.707 163.922 13.992 cv
163.988 14.277 164.086 14.516 164.223 14.707 cv
164.352 14.902 164.52 15.047 164.723 15.141 cv
164.922 15.238 165.152 15.285 165.418 15.285 cv
165.684 15.285 165.918 15.246 166.117 15.164 cv
166.309 15.086 166.477 14.996 166.625 14.895 cv
166.766 14.797 166.891 14.707 166.992 14.625 cv
167.09 14.547 167.172 14.508 167.242 14.504 cv
167.285 14.508 167.324 14.52 167.359 14.543 cv
167.387 14.57 167.41 14.617 167.434 14.687 cv
167.449 14.758 167.465 14.848 167.477 14.957 cv
167.484 15.066 167.488 15.207 167.492 15.379 cv
cp
f
174.762 16.508 mo
174.758 16.586 174.73 16.641 174.684 16.68 cv
174.629 16.723 174.547 16.75 174.438 16.77 cv
174.32 16.785 174.156 16.797 173.941 16.797 cv
173.703 16.797 173.531 16.785 173.43 16.77 cv
173.32 16.75 173.246 16.723 173.207 16.68 cv
173.16 16.641 173.141 16.586 173.141 16.508 cv
173.141 15.957 li
172.852 16.266 172.523 16.504 172.16 16.672 cv
171.793 16.844 171.387 16.926 170.941 16.93 cv
170.57 16.926 170.23 16.879 169.922 16.785 cv
169.613 16.691 169.348 16.551 169.121 16.355 cv
168.895 16.168 168.719 15.934 168.594 15.652 cv
168.469 15.375 168.406 15.047 168.41 14.668 cv
168.406 14.27 168.484 13.918 168.645 13.613 cv
168.801 13.316 169.039 13.07 169.355 12.875 cv
169.668 12.684 170.059 12.539 170.527 12.441 cv
170.996 12.352 171.539 12.305 172.156 12.301 cv
172.836 12.301 li
172.836 11.879 li
172.836 11.664 172.813 11.473 172.77 11.309 cv
172.723 11.148 172.648 11.012 172.551 10.898 cv
172.445 10.793 172.313 10.711 172.145 10.656 cv
171.973 10.605 171.762 10.582 171.52 10.578 cv
171.188 10.582 170.895 10.617 170.641 10.687 cv
170.379 10.762 170.152 10.844 169.957 10.93 cv
169.758 11.023 169.594 11.102 169.465 11.172 cv
169.328 11.246 169.219 11.285 169.141 11.281 cv
169.078 11.285 169.027 11.266 168.988 11.227 cv
168.941 11.191 168.906 11.141 168.879 11.07 cv
168.848 11.008 168.824 10.922 168.813 10.82 cv
168.793 10.723 168.785 10.613 168.789 10.492 cv
168.785 10.332 168.801 10.207 168.828 10.109 cv
168.852 10.02 168.898 9.93402 168.977 9.85498 cv
169.047 9.78101 169.176 9.69897 169.359 9.60901 cv
169.539 9.52002 169.75 9.43402 169.996 9.35498 cv
170.238 9.27698 170.508 9.21503 170.797 9.164 cv
171.086 9.117 171.383 9.09399 171.691 9.09003 cv
172.234 9.09399 172.699 9.14502 173.086 9.25 cv
173.473 9.35901 173.793 9.52301 174.043 9.742 cv
174.293 9.961 174.473 10.246 174.59 10.594 cv
174.699 10.945 174.758 11.359 174.762 11.832 cv
cp
172.836 13.531 mo
172.086 13.531 li
171.77 13.535 171.5 13.559 171.277 13.602 cv
171.051 13.652 170.867 13.723 170.73 13.812 cv
170.586 13.91 170.484 14.023 170.422 14.152 cv
170.355 14.289 170.32 14.437 170.324 14.605 cv
170.32 14.898 170.414 15.129 170.602 15.293 cv
170.785 15.461 171.043 15.543 171.371 15.543 cv
171.645 15.543 171.895 15.473 172.129 15.332 cv
172.355 15.191 172.594 14.988 172.836 14.715 cv
cp
f
178.688 16.484 mo
178.684 16.539 178.668 16.582 178.641 16.621 cv
178.605 16.66 178.551 16.695 178.48 16.719 cv
178.402 16.746 178.305 16.762 178.18 16.777 cv
178.055 16.789 177.895 16.797 177.707 16.797 cv
177.512 16.797 177.355 16.789 177.23 16.777 cv
177.105 16.762 177.004 16.746 176.93 16.719 cv
176.852 16.695 176.797 16.66 176.77 16.621 cv
176.734 16.582 176.719 16.539 176.723 16.484 cv
176.723 6.23798 li
176.719 6.18701 176.734 6.14099 176.77 6.09802 cv
176.797 6.05902 176.852 6.02301 176.93 5.992 cv
177.004 5.96503 177.105 5.94501 177.23 5.92603 cv
177.355 5.914 177.512 5.90601 177.707 5.90198 cv
177.895 5.90601 178.055 5.914 178.18 5.92603 cv
178.305 5.94501 178.402 5.96503 178.48 5.992 cv
178.551 6.02301 178.605 6.05902 178.641 6.09802 cv
178.668 6.14099 178.684 6.18701 178.688 6.23798 cv
cp
f
182.66 16.484 mo
182.656 16.539 182.641 16.582 182.613 16.621 cv
182.578 16.66 182.523 16.695 182.453 16.719 cv
182.375 16.746 182.277 16.762 182.152 16.777 cv
182.027 16.789 181.867 16.797 181.68 16.797 cv
181.484 16.797 181.328 16.789 181.203 16.777 cv
181.078 16.762 180.977 16.746 180.902 16.719 cv
180.824 16.695 180.77 16.66 180.742 16.621 cv
180.707 16.582 180.691 16.539 180.695 16.484 cv
180.695 9.55103 li
180.691 9.5 180.707 9.453 180.742 9.414 cv
180.77 9.375 180.824 9.34399 180.902 9.31201 cv
180.977 9.289 181.078 9.26599 181.203 9.24597 cv
181.328 9.23401 181.484 9.22699 181.68 9.22302 cv
181.867 9.22699 182.027 9.23401 182.152 9.24597 cv
182.277 9.26599 182.375 9.289 182.453 9.31201 cv
182.523 9.34399 182.578 9.375 182.613 9.414 cv
182.641 9.453 182.656 9.5 182.66 9.55103 cv
cp
182.809 7.17999 mo
182.809 7.578 182.727 7.85199 182.566 8 cv
182.402 8.15198 182.105 8.22699 181.672 8.22302 cv
181.227 8.22699 180.926 8.15198 180.777 8.008 cv
180.621 7.86298 180.547 7.60199 180.547 7.21899 cv
180.547 6.82397 180.625 6.55103 180.785 6.39801 cv
180.941 6.24597 181.242 6.16803 181.688 6.16803 cv
182.121 6.16803 182.418 6.242 182.574 6.39099 cv
182.73 6.539 182.809 6.80499 182.809 7.17999 cv
cp
f
191.262 16.484 mo
191.258 16.539 191.242 16.582 191.215 16.621 cv
191.18 16.66 191.129 16.695 191.059 16.719 cv
190.984 16.746 190.883 16.762 190.758 16.777 cv
190.629 16.789 190.473 16.797 190.289 16.797 cv
190.094 16.797 189.934 16.789 189.809 16.777 cv
189.68 16.762 189.578 16.746 189.508 16.719 cv
189.43 16.695 189.379 16.66 189.352 16.621 cv
189.316 16.582 189.301 16.539 189.305 16.484 cv
189.305 12.52 li
189.301 12.184 189.277 11.918 189.23 11.723 cv
189.18 11.531 189.105 11.367 189.016 11.23 cv
188.922 11.094 188.805 10.988 188.656 10.91 cv
188.508 10.836 188.332 10.797 188.137 10.797 cv
187.883 10.797 187.633 10.891 187.379 11.07 cv
187.125 11.254 186.859 11.516 186.586 11.863 cv
186.586 16.484 li
186.582 16.539 186.566 16.582 186.539 16.621 cv
186.504 16.66 186.449 16.695 186.379 16.719 cv
186.301 16.746 186.203 16.762 186.078 16.777 cv
185.953 16.789 185.793 16.797 185.605 16.797 cv
185.41 16.797 185.254 16.789 185.129 16.777 cv
185.004 16.762 184.902 16.746 184.828 16.719 cv
184.75 16.695 184.695 16.66 184.668 16.621 cv
184.633 16.582 184.617 16.539 184.621 16.484 cv
184.621 9.53497 li
184.617 9.48798 184.633 9.44098 184.66 9.39801 cv
184.684 9.36298 184.73 9.33197 184.801 9.30103 cv
184.867 9.27698 184.953 9.258 185.063 9.242 cv
185.168 9.23401 185.301 9.22699 185.465 9.22302 cv
185.629 9.22699 185.766 9.23401 185.875 9.242 cv
185.98 9.258 186.066 9.27698 186.129 9.30103 cv
186.188 9.33197 186.23 9.36298 186.258 9.39801 cv
186.281 9.44098 186.293 9.48798 186.297 9.53497 cv
186.297 10.336 li
186.68 9.92603 187.07 9.61298 187.469 9.40198 cv
187.863 9.19501 188.281 9.09399 188.715 9.09003 cv
189.184 9.09399 189.582 9.172 189.91 9.32397 cv
190.234 9.48401 190.496 9.69501 190.695 9.961 cv
190.895 10.23 191.039 10.543 191.129 10.898 cv
191.215 11.258 191.258 11.687 191.262 12.191 cv
cp
f
199.457 10.016 mo
199.453 10.27 199.426 10.453 199.371 10.57 cv
199.313 10.691 199.242 10.75 199.164 10.75 cv
198.344 10.75 li
198.457 10.875 198.539 11.02 198.59 11.176 cv
198.637 11.336 198.66 11.5 198.664 11.668 cv
198.66 12.078 198.594 12.437 198.461 12.75 cv
198.324 13.066 198.129 13.332 197.879 13.543 cv
197.625 13.762 197.324 13.926 196.969 14.035 cv
196.609 14.152 196.211 14.207 195.781 14.203 cv
195.555 14.207 195.344 14.18 195.141 14.121 cv
194.938 14.07 194.781 14.008 194.672 13.93 cv
194.609 14 194.551 14.078 194.504 14.172 cv
194.453 14.266 194.43 14.371 194.434 14.48 cv
194.43 14.637 194.496 14.758 194.629 14.852 cv
194.758 14.949 194.945 15.004 195.188 15.012 cv
196.879 15.074 li
197.273 15.09 197.625 15.148 197.934 15.242 cv
198.242 15.344 198.504 15.477 198.715 15.648 cv
198.926 15.824 199.086 16.035 199.195 16.277 cv
199.305 16.523 199.359 16.797 199.363 17.109 cv
199.359 17.445 199.285 17.77 199.137 18.078 cv
198.988 18.379 198.762 18.641 198.461 18.867 cv
198.156 19.086 197.777 19.266 197.324 19.398 cv
196.867 19.527 196.336 19.59 195.734 19.594 cv
195.137 19.59 194.633 19.543 194.215 19.453 cv
193.797 19.355 193.453 19.227 193.188 19.062 cv
192.918 18.895 192.723 18.695 192.605 18.469 cv
192.48 18.234 192.422 17.98 192.422 17.707 cv
192.422 17.535 192.441 17.375 192.488 17.219 cv
192.527 17.062 192.594 16.91 192.684 16.77 cv
192.766 16.625 192.871 16.492 192.996 16.359 cv
193.121 16.23 193.262 16.105 193.426 15.984 cv
193.199 15.871 193.027 15.711 192.906 15.5 cv
192.785 15.297 192.727 15.07 192.727 14.824 cv
192.727 14.523 192.793 14.246 192.934 13.988 cv
193.07 13.738 193.254 13.508 193.48 13.305 cv
193.297 13.125 193.152 12.91 193.043 12.652 cv
192.934 12.402 192.879 12.082 192.883 11.699 cv
192.879 11.297 192.949 10.937 193.094 10.613 cv
193.234 10.297 193.434 10.027 193.691 9.80499 cv
193.945 9.586 194.25 9.414 194.602 9.297 cv
194.953 9.17999 195.344 9.12097 195.773 9.12097 cv
195.992 9.12097 196.199 9.13702 196.398 9.15997 cv
196.598 9.19098 196.785 9.22699 196.957 9.27002 cv
199.164 9.27002 li
199.246 9.27301 199.316 9.33197 199.375 9.44098 cv
199.426 9.55902 199.453 9.75 199.457 10.016 cv
cp
196.941 11.66 mo
196.938 11.289 196.836 11 196.629 10.789 cv
196.418 10.586 196.125 10.48 195.75 10.477 cv
195.555 10.48 195.383 10.512 195.242 10.574 cv
195.094 10.641 194.973 10.73 194.879 10.84 cv
194.777 10.953 194.707 11.082 194.664 11.23 cv
194.613 11.379 194.59 11.535 194.594 11.691 cv
194.59 12.051 194.695 12.328 194.906 12.531 cv
195.113 12.738 195.402 12.844 195.773 12.84 cv
195.969 12.844 196.137 12.812 196.285 12.746 cv
196.426 12.687 196.547 12.602 196.648 12.488 cv
196.742 12.383 196.816 12.254 196.867 12.109 cv
196.914 11.969 196.938 11.82 196.941 11.66 cv
cp
197.402 17.211 mo
197.402 16.973 197.309 16.797 197.121 16.672 cv
196.934 16.551 196.676 16.48 196.348 16.469 cv
194.953 16.43 li
194.816 16.531 194.707 16.625 194.629 16.715 cv
194.547 16.805 194.484 16.891 194.438 16.977 cv
194.387 17.059 194.352 17.141 194.34 17.219 cv
194.32 17.297 194.313 17.375 194.316 17.461 cv
194.313 17.715 194.445 17.914 194.707 18.051 cv
194.969 18.184 195.34 18.25 195.82 18.254 cv
196.113 18.25 196.359 18.219 196.566 18.164 cv
196.766 18.102 196.93 18.023 197.059 17.926 cv
197.18 17.824 197.27 17.715 197.324 17.594 cv
197.375 17.473 197.402 17.344 197.402 17.211 cv
cp
f
205.652 14.52 mo
205.648 14.918 205.574 15.266 205.43 15.566 cv
205.281 15.867 205.074 16.121 204.805 16.32 cv
204.531 16.527 204.211 16.676 203.844 16.777 cv
203.477 16.875 203.074 16.926 202.645 16.93 cv
202.379 16.926 202.133 16.906 201.898 16.871 cv
201.664 16.828 201.453 16.781 201.266 16.723 cv
201.078 16.664 200.922 16.602 200.797 16.539 cv
200.672 16.477 200.578 16.418 200.523 16.363 cv
200.465 16.309 200.422 16.227 200.395 16.109 cv
200.359 15.996 200.344 15.82 200.348 15.59 cv
200.344 15.441 200.352 15.32 200.363 15.227 cv
200.371 15.137 200.387 15.066 200.41 15.008 cv
200.43 14.957 200.453 14.918 200.488 14.898 cv
200.516 14.883 200.555 14.875 200.602 14.871 cv
200.656 14.875 200.742 14.906 200.855 14.969 cv
200.965 15.035 201.102 15.109 201.273 15.184 cv
201.438 15.266 201.633 15.336 201.852 15.402 cv
202.07 15.473 202.32 15.508 202.605 15.504 cv
202.781 15.508 202.938 15.488 203.078 15.449 cv
203.211 15.414 203.332 15.363 203.438 15.293 cv
203.535 15.227 203.609 15.141 203.664 15.035 cv
203.711 14.934 203.738 14.812 203.742 14.676 cv
203.738 14.52 203.691 14.387 203.598 14.277 cv
203.504 14.168 203.375 14.07 203.219 13.984 cv
203.055 13.902 202.875 13.824 202.68 13.75 cv
202.477 13.68 202.273 13.602 202.063 13.508 cv
201.852 13.422 201.645 13.32 201.449 13.203 cv
201.246 13.094 201.066 12.953 200.91 12.785 cv
200.746 12.621 200.621 12.422 200.527 12.184 cv
200.434 11.953 200.387 11.672 200.387 11.34 cv
200.387 11.012 200.449 10.707 200.578 10.426 cv
200.707 10.152 200.895 9.914 201.141 9.71503 cv
201.383 9.52002 201.68 9.367 202.031 9.25403 cv
202.379 9.14801 202.773 9.09399 203.215 9.09003 cv
203.43 9.09399 203.641 9.10901 203.848 9.13702 cv
204.051 9.172 204.238 9.211 204.406 9.25403 cv
204.57 9.30499 204.711 9.35498 204.828 9.40601 cv
204.941 9.46503 205.023 9.51202 205.074 9.547 cv
205.121 9.59003 205.156 9.62903 205.18 9.664 cv
205.199 9.70697 205.211 9.75403 205.223 9.80499 cv
205.23 9.85901 205.242 9.92603 205.25 10.004 cv
205.258 10.09 205.262 10.187 205.262 10.305 cv
205.262 10.445 205.258 10.562 205.25 10.648 cv
205.242 10.742 205.227 10.812 205.211 10.859 cv
205.191 10.914 205.168 10.949 205.141 10.965 cv
205.105 10.988 205.07 10.996 205.031 10.992 cv
204.98 10.996 204.906 10.969 204.813 10.91 cv
204.711 10.859 204.59 10.801 204.441 10.734 cv
204.293 10.676 204.121 10.617 203.926 10.559 cv
203.73 10.508 203.508 10.48 203.262 10.477 cv
203.082 10.48 202.93 10.5 202.801 10.531 cv
202.668 10.57 202.559 10.621 202.48 10.687 cv
202.395 10.758 202.332 10.836 202.293 10.926 cv
202.246 11.02 202.227 11.117 202.23 11.219 cv
202.227 11.379 202.277 11.516 202.379 11.621 cv
202.477 11.734 202.605 11.828 202.77 11.91 cv
202.93 11.996 203.113 12.074 203.32 12.145 cv
203.523 12.219 203.73 12.301 203.941 12.383 cv
204.148 12.473 204.355 12.57 204.566 12.684 cv
204.77 12.797 204.953 12.937 205.113 13.102 cv
205.273 13.27 205.402 13.469 205.504 13.699 cv
205.598 13.934 205.648 14.207 205.652 14.52 cv
cp
f
217.762 12.937 mo
217.758 13.535 217.68 14.078 217.527 14.562 cv
217.367 15.055 217.133 15.473 216.816 15.824 cv
216.5 16.176 216.102 16.449 215.625 16.641 cv
215.145 16.832 214.586 16.926 213.949 16.93 cv
213.328 16.926 212.789 16.844 212.336 16.672 cv
211.875 16.504 211.496 16.254 211.199 15.926 cv
210.895 15.602 210.672 15.199 210.527 14.719 cv
210.383 14.242 210.313 13.695 210.313 13.078 cv
210.313 12.488 210.391 11.949 210.547 11.457 cv
210.703 10.969 210.941 10.547 211.262 10.195 cv
211.578 9.84802 211.973 9.57397 212.449 9.37903 cv
212.922 9.18701 213.48 9.09399 214.121 9.09003 cv
214.746 9.09399 215.285 9.17603 215.742 9.34399 cv
216.199 9.51599 216.578 9.76599 216.875 10.09 cv
217.172 10.418 217.395 10.82 217.543 11.297 cv
217.688 11.777 217.758 12.324 217.762 12.937 cv
cp
215.742 13.016 mo
215.738 12.68 215.711 12.363 215.66 12.07 cv
215.602 11.785 215.508 11.535 215.383 11.32 cv
215.25 11.109 215.078 10.941 214.867 10.82 cv
214.648 10.703 214.379 10.645 214.051 10.641 cv
213.762 10.645 213.508 10.699 213.289 10.801 cv
213.07 10.91 212.891 11.066 212.75 11.27 cv
212.609 11.477 212.504 11.723 212.434 12.008 cv
212.363 12.301 212.328 12.629 212.328 12.992 cv
212.328 13.34 212.355 13.656 212.414 13.941 cv
212.469 14.234 212.563 14.484 212.691 14.695 cv
212.816 14.91 212.988 15.074 213.211 15.187 cv
213.426 15.309 213.695 15.367 214.02 15.363 cv
214.313 15.367 214.57 15.312 214.793 15.203 cv
215.008 15.098 215.188 14.945 215.328 14.738 cv
215.469 14.539 215.57 14.293 215.641 14.004 cv
215.703 13.719 215.738 13.391 215.742 13.016 cv
cp
f
223.516 6.883 mo
223.512 7.03497 223.508 7.15601 223.5 7.24597 cv
223.488 7.34003 223.473 7.40997 223.453 7.45697 cv
223.43 7.508 223.406 7.54303 223.383 7.55902 cv
223.355 7.578 223.328 7.586 223.297 7.586 cv
223.258 7.586 223.215 7.578 223.176 7.55902 cv
223.129 7.54303 223.074 7.52301 223.012 7.5 cv
222.941 7.47998 222.867 7.461 222.781 7.44098 cv
222.691 7.42603 222.586 7.41803 222.469 7.414 cv
222.324 7.41803 222.203 7.43701 222.105 7.47998 cv
222.004 7.52698 221.922 7.59802 221.855 7.69098 cv
221.785 7.789 221.734 7.914 221.707 8.06598 cv
221.672 8.21899 221.656 8.40601 221.66 8.62903 cv
221.66 9.27002 li
222.93 9.27002 li
222.973 9.27301 223.016 9.28497 223.059 9.30902 cv
223.094 9.336 223.129 9.37903 223.156 9.43701 cv
223.18 9.5 223.199 9.58197 223.215 9.68402 cv
223.227 9.78497 223.23 9.914 223.234 10.062 cv
223.23 10.352 223.207 10.555 223.156 10.676 cv
223.102 10.801 223.023 10.863 222.93 10.859 cv
221.66 10.859 li
221.66 16.484 li
221.656 16.539 221.641 16.582 221.613 16.621 cv
221.578 16.66 221.527 16.695 221.457 16.719 cv
221.383 16.746 221.281 16.762 221.152 16.777 cv
221.02 16.789 220.859 16.797 220.676 16.797 cv
220.488 16.797 220.332 16.789 220.207 16.777 cv
220.078 16.762 219.977 16.746 219.902 16.719 cv
219.824 16.695 219.773 16.66 219.746 16.621 cv
219.715 16.582 219.699 16.539 219.703 16.484 cv
219.703 10.859 li
218.832 10.859 li
218.73 10.863 218.656 10.801 218.609 10.676 cv
218.559 10.555 218.531 10.352 218.535 10.062 cv
218.531 9.914 218.539 9.78497 218.555 9.68402 cv
218.566 9.58197 218.586 9.5 218.609 9.43701 cv
218.633 9.37903 218.664 9.336 218.703 9.30902 cv
218.742 9.28497 218.785 9.27301 218.84 9.27002 cv
219.703 9.27002 li
219.703 8.68402 li
219.699 8.21503 219.746 7.80103 219.844 7.44098 cv
219.934 7.086 220.082 6.789 220.285 6.55499 cv
220.484 6.32001 220.738 6.14502 221.047 6.02002 cv
221.355 5.90198 221.719 5.84003 222.145 5.84003 cv
222.34 5.84003 222.531 5.85901 222.719 5.89099 cv
222.898 5.92999 223.043 5.96503 223.148 6 cv
223.25 6.04303 223.32 6.078 223.359 6.10901 cv
223.395 6.14502 223.426 6.19501 223.449 6.258 cv
223.473 6.32397 223.488 6.40601 223.5 6.508 cv
223.508 6.60901 223.512 6.73401 223.516 6.883 cv
cp
f
235.789 15.801 mo
235.789 16.027 235.773 16.203 235.746 16.324 cv
235.715 16.449 235.676 16.535 235.633 16.582 cv
235.582 16.633 235.516 16.676 235.426 16.715 cv
235.332 16.754 235.223 16.785 235.105 16.816 cv
234.98 16.84 234.848 16.863 234.707 16.883 cv
234.563 16.895 234.422 16.902 234.277 16.906 cv
233.887 16.902 233.547 16.852 233.262 16.758 cv
232.977 16.656 232.742 16.508 232.555 16.301 cv
232.367 16.098 232.227 15.84 232.141 15.527 cv
232.047 15.219 232.004 14.848 232.008 14.418 cv
232.008 10.859 li
231.176 10.859 li
231.074 10.863 231 10.801 230.949 10.676 cv
230.895 10.555 230.867 10.352 230.871 10.062 cv
230.867 9.914 230.875 9.78497 230.891 9.68402 cv
230.902 9.58197 230.922 9.5 230.949 9.43701 cv
230.973 9.37903 231.004 9.336 231.047 9.30902 cv
231.082 9.28497 231.129 9.27301 231.184 9.27002 cv
232.008 9.27002 li
232.008 7.71899 li
232.004 7.672 232.02 7.625 232.051 7.578 cv
232.078 7.539 232.129 7.50403 232.207 7.47302 cv
232.281 7.44897 232.383 7.42603 232.512 7.40997 cv
232.637 7.39801 232.793 7.39502 232.984 7.39099 cv
233.172 7.39502 233.332 7.39801 233.461 7.40997 cv
233.586 7.42603 233.688 7.44897 233.762 7.47302 cv
233.832 7.50403 233.883 7.539 233.918 7.578 cv
233.945 7.625 233.961 7.672 233.965 7.71899 cv
233.965 9.27002 li
235.477 9.27002 li
235.527 9.27301 235.574 9.28497 235.613 9.30902 cv
235.652 9.336 235.684 9.37903 235.711 9.43701 cv
235.734 9.5 235.754 9.58197 235.77 9.68402 cv
235.781 9.78497 235.789 9.914 235.789 10.062 cv
235.789 10.352 235.762 10.555 235.711 10.676 cv
235.656 10.801 235.582 10.863 235.484 10.859 cv
233.965 10.859 li
233.965 14.125 li
233.961 14.504 234.02 14.789 234.145 14.977 cv
234.262 15.168 234.477 15.262 234.781 15.262 cv
234.883 15.262 234.977 15.254 235.063 15.234 cv
235.145 15.219 235.219 15.199 235.285 15.172 cv
235.348 15.152 235.402 15.129 235.449 15.109 cv
235.492 15.094 235.531 15.086 235.57 15.082 cv
235.598 15.086 235.629 15.094 235.66 15.109 cv
235.688 15.129 235.707 15.168 235.727 15.219 cv
235.738 15.277 235.754 15.352 235.77 15.441 cv
235.781 15.539 235.789 15.656 235.789 15.801 cv
cp
f
243.852 16.484 mo
243.848 16.539 243.832 16.582 243.805 16.621 cv
243.77 16.66 243.719 16.695 243.648 16.719 cv
243.574 16.746 243.473 16.762 243.348 16.777 cv
243.219 16.789 243.063 16.797 242.879 16.797 cv
242.684 16.797 242.523 16.789 242.398 16.777 cv
242.27 16.762 242.168 16.746 242.098 16.719 cv
242.02 16.695 241.969 16.66 241.941 16.621 cv
241.906 16.582 241.891 16.539 241.895 16.484 cv
241.895 12.52 li
241.891 12.184 241.867 11.918 241.82 11.723 cv
241.77 11.531 241.695 11.367 241.605 11.23 cv
241.512 11.094 241.395 10.988 241.246 10.91 cv
241.098 10.836 240.922 10.797 240.727 10.797 cv
240.473 10.797 240.223 10.891 239.969 11.07 cv
239.715 11.254 239.449 11.516 239.176 11.863 cv
239.176 16.484 li
239.172 16.539 239.156 16.582 239.129 16.621 cv
239.094 16.66 239.039 16.695 238.969 16.719 cv
238.891 16.746 238.793 16.762 238.668 16.777 cv
238.543 16.789 238.383 16.797 238.195 16.797 cv
238 16.797 237.844 16.789 237.719 16.777 cv
237.594 16.762 237.492 16.746 237.418 16.719 cv
237.34 16.695 237.285 16.66 237.258 16.621 cv
237.223 16.582 237.207 16.539 237.211 16.484 cv
237.211 6.23798 li
237.207 6.18701 237.223 6.14099 237.258 6.09802 cv
237.285 6.05902 237.34 6.02301 237.418 5.992 cv
237.492 5.96503 237.594 5.94501 237.719 5.92603 cv
237.844 5.914 238 5.90601 238.195 5.90198 cv
238.383 5.90601 238.543 5.914 238.668 5.92603 cv
238.793 5.94501 238.891 5.96503 238.969 5.992 cv
239.039 6.02301 239.094 6.05902 239.129 6.09802 cv
239.156 6.14099 239.172 6.18701 239.176 6.23798 cv
239.176 10.078 li
239.512 9.75 239.855 9.50403 240.207 9.336 cv
240.555 9.17603 240.922 9.09399 241.305 9.09003 cv
241.773 9.09399 242.172 9.172 242.5 9.32397 cv
242.824 9.48401 243.086 9.69501 243.285 9.96503 cv
243.484 10.234 243.629 10.551 243.719 10.91 cv
243.805 11.273 243.848 11.711 243.852 12.223 cv
cp
f
252.137 12.809 mo
252.133 13.047 252.082 13.223 251.977 13.336 cv
251.867 13.453 251.719 13.512 251.539 13.508 cv
247.305 13.508 li
247.301 13.809 247.336 14.078 247.41 14.316 cv
247.477 14.559 247.59 14.762 247.746 14.93 cv
247.898 15.102 248.094 15.23 248.336 15.316 cv
248.574 15.406 248.863 15.449 249.207 15.449 cv
249.547 15.449 249.848 15.426 250.109 15.375 cv
250.367 15.328 250.594 15.273 250.785 15.211 cv
250.973 15.152 251.129 15.098 251.258 15.047 cv
251.379 15 251.48 14.977 251.563 14.973 cv
251.605 14.977 251.645 14.984 251.68 15 cv
251.707 15.02 251.734 15.051 251.754 15.098 cv
251.773 15.145 251.785 15.211 251.797 15.297 cv
251.801 15.383 251.805 15.492 251.809 15.621 cv
251.805 15.738 251.805 15.836 251.801 15.914 cv
251.793 15.996 251.785 16.062 251.777 16.117 cv
251.766 16.176 251.75 16.227 251.73 16.262 cv
251.711 16.305 251.684 16.34 251.652 16.375 cv
251.617 16.414 251.523 16.465 251.375 16.523 cv
251.219 16.59 251.027 16.652 250.797 16.707 cv
250.559 16.77 250.289 16.816 249.992 16.863 cv
249.688 16.902 249.367 16.926 249.027 16.93 cv
248.406 16.926 247.863 16.852 247.402 16.695 cv
246.934 16.543 246.547 16.305 246.238 15.988 cv
245.922 15.672 245.688 15.273 245.539 14.789 cv
245.383 14.309 245.309 13.742 245.313 13.086 cv
245.309 12.473 245.387 11.914 245.551 11.418 cv
245.707 10.922 245.941 10.504 246.254 10.156 cv
246.559 9.81201 246.934 9.547 247.371 9.36298 cv
247.809 9.18402 248.301 9.09399 248.855 9.09003 cv
249.434 9.09399 249.934 9.17999 250.348 9.34802 cv
250.762 9.52301 251.098 9.76202 251.363 10.062 cv
251.625 10.367 251.82 10.727 251.949 11.141 cv
252.07 11.559 252.133 12.008 252.137 12.496 cv
cp
250.234 12.246 mo
250.246 11.695 250.137 11.262 249.902 10.949 cv
249.668 10.637 249.301 10.48 248.809 10.477 cv
248.559 10.48 248.344 10.527 248.16 10.617 cv
247.973 10.715 247.82 10.84 247.699 10.996 cv
247.574 11.156 247.48 11.344 247.418 11.559 cv
247.352 11.773 247.313 12.004 247.305 12.246 cv
cp
f
263.238 7.508 mo
263.234 7.66803 263.23 7.797 263.219 7.90198 cv
263.203 8.01202 263.18 8.09802 263.156 8.15601 cv
263.125 8.21899 263.094 8.26599 263.059 8.29303 cv
263.02 8.328 262.977 8.34399 262.934 8.34003 cv
259.637 8.34003 li
259.637 11.055 li
262.73 11.055 li
262.773 11.055 262.816 11.07 262.855 11.094 cv
262.891 11.125 262.922 11.168 262.953 11.227 cv
262.98 11.289 263 11.371 263.016 11.473 cv
263.023 11.578 263.031 11.707 263.035 11.863 cv
263.031 12.02 263.023 12.152 263.016 12.254 cv
263 12.363 262.98 12.449 262.953 12.512 cv
262.922 12.582 262.891 12.629 262.855 12.656 cv
262.816 12.687 262.773 12.703 262.73 12.699 cv
259.637 12.699 li
259.637 16.453 li
259.633 16.512 259.617 16.562 259.59 16.602 cv
259.555 16.648 259.5 16.684 259.422 16.707 cv
259.34 16.738 259.234 16.758 259.105 16.773 cv
258.973 16.789 258.805 16.797 258.609 16.797 cv
258.406 16.797 258.242 16.789 258.113 16.773 cv
257.977 16.758 257.871 16.738 257.797 16.707 cv
257.715 16.684 257.66 16.648 257.629 16.602 cv
257.594 16.562 257.574 16.512 257.578 16.453 cv
257.578 7.31201 li
257.574 7.086 257.633 6.922 257.754 6.81598 cv
257.867 6.71899 258.012 6.66803 258.188 6.664 cv
262.934 6.664 li
262.977 6.66803 263.02 6.67999 263.059 6.70697 cv
263.094 6.73798 263.125 6.78497 263.156 6.84802 cv
263.18 6.914 263.203 7.00403 263.219 7.10901 cv
263.23 7.22302 263.234 7.35498 263.238 7.508 cv
cp
f
266.754 16.484 mo
266.75 16.539 266.734 16.582 266.707 16.621 cv
266.672 16.66 266.617 16.695 266.547 16.719 cv
266.469 16.746 266.371 16.762 266.246 16.777 cv
266.121 16.789 265.961 16.797 265.773 16.797 cv
265.578 16.797 265.422 16.789 265.297 16.777 cv
265.172 16.762 265.07 16.746 264.996 16.719 cv
264.918 16.695 264.863 16.66 264.836 16.621 cv
264.801 16.582 264.785 16.539 264.789 16.484 cv
264.789 9.55103 li
264.785 9.5 264.801 9.453 264.836 9.414 cv
264.863 9.375 264.918 9.34399 264.996 9.31201 cv
265.07 9.289 265.172 9.26599 265.297 9.24597 cv
265.422 9.23401 265.578 9.22699 265.773 9.22302 cv
265.961 9.22699 266.121 9.23401 266.246 9.24597 cv
266.371 9.26599 266.469 9.289 266.547 9.31201 cv
266.617 9.34399 266.672 9.375 266.707 9.414 cv
266.734 9.453 266.75 9.5 266.754 9.55103 cv
cp
266.902 7.17999 mo
266.902 7.578 266.82 7.85199 266.66 8 cv
266.496 8.15198 266.199 8.22699 265.766 8.22302 cv
265.32 8.22699 265.02 8.15198 264.871 8.008 cv
264.715 7.86298 264.641 7.60199 264.641 7.21899 cv
264.641 6.82397 264.719 6.55103 264.879 6.39801 cv
265.035 6.24597 265.336 6.16803 265.781 6.16803 cv
266.215 6.16803 266.512 6.242 266.668 6.39099 cv
266.824 6.539 266.902 6.80499 266.902 7.17999 cv
cp
f
270.68 16.484 mo
270.676 16.539 270.66 16.582 270.633 16.621 cv
270.598 16.66 270.543 16.695 270.473 16.719 cv
270.395 16.746 270.297 16.762 270.172 16.777 cv
270.047 16.789 269.887 16.797 269.699 16.797 cv
269.504 16.797 269.348 16.789 269.223 16.777 cv
269.098 16.762 268.996 16.746 268.922 16.719 cv
268.844 16.695 268.789 16.66 268.762 16.621 cv
268.727 16.582 268.711 16.539 268.715 16.484 cv
268.715 6.23798 li
268.711 6.18701 268.727 6.14099 268.762 6.09802 cv
268.789 6.05902 268.844 6.02301 268.922 5.992 cv
268.996 5.96503 269.098 5.94501 269.223 5.92603 cv
269.348 5.914 269.504 5.90601 269.699 5.90198 cv
269.887 5.90601 270.047 5.914 270.172 5.92603 cv
270.297 5.94501 270.395 5.96503 270.473 5.992 cv
270.543 6.02301 270.598 6.05902 270.633 6.09802 cv
270.66 6.14099 270.676 6.18701 270.68 6.23798 cv
cp
f
276.805 15.801 mo
276.805 16.027 276.789 16.203 276.762 16.324 cv
276.73 16.449 276.691 16.535 276.648 16.582 cv
276.598 16.633 276.531 16.676 276.441 16.715 cv
276.348 16.754 276.238 16.785 276.121 16.816 cv
275.996 16.84 275.863 16.863 275.723 16.883 cv
275.578 16.895 275.438 16.902 275.293 16.906 cv
274.902 16.902 274.563 16.852 274.277 16.758 cv
273.992 16.656 273.758 16.508 273.57 16.301 cv
273.383 16.098 273.242 15.84 273.156 15.527 cv
273.063 15.219 273.02 14.848 273.023 14.418 cv
273.023 10.859 li
272.191 10.859 li
272.09 10.863 272.016 10.801 271.965 10.676 cv
271.91 10.555 271.883 10.352 271.887 10.062 cv
271.883 9.914 271.891 9.78497 271.906 9.68402 cv
271.918 9.58197 271.938 9.5 271.965 9.43701 cv
271.988 9.37903 272.02 9.336 272.063 9.30902 cv
272.098 9.28497 272.145 9.27301 272.199 9.27002 cv
273.023 9.27002 li
273.023 7.71899 li
273.02 7.672 273.035 7.625 273.066 7.578 cv
273.094 7.539 273.145 7.50403 273.223 7.47302 cv
273.297 7.44897 273.398 7.42603 273.527 7.40997 cv
273.652 7.39801 273.809 7.39502 274 7.39099 cv
274.188 7.39502 274.348 7.39801 274.477 7.40997 cv
274.602 7.42603 274.703 7.44897 274.777 7.47302 cv
274.848 7.50403 274.898 7.539 274.934 7.578 cv
274.961 7.625 274.977 7.672 274.98 7.71899 cv
274.98 9.27002 li
276.492 9.27002 li
276.543 9.27301 276.59 9.28497 276.629 9.30902 cv
276.668 9.336 276.699 9.37903 276.727 9.43701 cv
276.75 9.5 276.77 9.58197 276.785 9.68402 cv
276.797 9.78497 276.805 9.914 276.805 10.062 cv
276.805 10.352 276.777 10.555 276.727 10.676 cv
276.672 10.801 276.598 10.863 276.5 10.859 cv
274.98 10.859 li
274.98 14.125 li
274.977 14.504 275.035 14.789 275.16 14.977 cv
275.277 15.168 275.492 15.262 275.797 15.262 cv
275.898 15.262 275.992 15.254 276.078 15.234 cv
276.16 15.219 276.234 15.199 276.301 15.172 cv
276.363 15.152 276.418 15.129 276.465 15.109 cv
276.508 15.094 276.547 15.086 276.586 15.082 cv
276.613 15.086 276.645 15.094 276.676 15.109 cv
276.703 15.129 276.723 15.168 276.742 15.219 cv
276.754 15.277 276.77 15.352 276.785 15.441 cv
276.797 15.539 276.805 15.656 276.805 15.801 cv
cp
f
284.395 12.809 mo
284.391 13.047 284.34 13.223 284.234 13.336 cv
284.125 13.453 283.977 13.512 283.797 13.508 cv
279.563 13.508 li
279.559 13.809 279.594 14.078 279.668 14.316 cv
279.734 14.559 279.848 14.762 280.004 14.93 cv
280.156 15.102 280.352 15.23 280.594 15.316 cv
280.832 15.406 281.121 15.449 281.465 15.449 cv
281.805 15.449 282.105 15.426 282.367 15.375 cv
282.625 15.328 282.852 15.273 283.043 15.211 cv
283.23 15.152 283.387 15.098 283.516 15.047 cv
283.637 15 283.738 14.977 283.82 14.973 cv
283.863 14.977 283.902 14.984 283.938 15 cv
283.965 15.02 283.992 15.051 284.012 15.098 cv
284.031 15.145 284.043 15.211 284.055 15.297 cv
284.059 15.383 284.063 15.492 284.066 15.621 cv
284.063 15.738 284.063 15.836 284.059 15.914 cv
284.051 15.996 284.043 16.062 284.035 16.117 cv
284.023 16.176 284.008 16.227 283.988 16.262 cv
283.969 16.305 283.941 16.34 283.91 16.375 cv
283.875 16.414 283.781 16.465 283.633 16.523 cv
283.477 16.59 283.285 16.652 283.055 16.707 cv
282.816 16.77 282.547 16.816 282.25 16.863 cv
281.945 16.902 281.625 16.926 281.285 16.93 cv
280.664 16.926 280.121 16.852 279.66 16.695 cv
279.191 16.543 278.805 16.305 278.496 15.988 cv
278.18 15.672 277.945 15.273 277.797 14.789 cv
277.641 14.309 277.566 13.742 277.57 13.086 cv
277.566 12.473 277.645 11.914 277.809 11.418 cv
277.965 10.922 278.199 10.504 278.512 10.156 cv
278.816 9.81201 279.191 9.547 279.629 9.36298 cv
280.066 9.18402 280.559 9.09399 281.113 9.09003 cv
281.691 9.09399 282.191 9.17999 282.605 9.34802 cv
283.02 9.52301 283.355 9.76202 283.621 10.062 cv
283.883 10.367 284.078 10.727 284.207 11.141 cv
284.328 11.559 284.391 12.008 284.395 12.496 cv
cp
282.492 12.246 mo
282.504 11.695 282.395 11.262 282.16 10.949 cv
281.926 10.637 281.559 10.48 281.066 10.477 cv
280.816 10.48 280.602 10.527 280.418 10.617 cv
280.23 10.715 280.078 10.84 279.957 10.996 cv
279.832 11.156 279.738 11.344 279.676 11.559 cv
279.609 11.773 279.57 12.004 279.563 12.246 cv
cp
f
290.469 10.18 mo
290.469 10.371 290.461 10.523 290.453 10.641 cv
290.438 10.762 290.422 10.855 290.406 10.922 cv
290.383 10.992 290.355 11.039 290.324 11.062 cv
290.285 11.09 290.242 11.102 290.195 11.102 cv
290.148 11.102 290.102 11.094 290.055 11.074 cv
290 11.059 289.941 11.039 289.879 11.016 cv
289.809 10.996 289.738 10.977 289.664 10.957 cv
289.582 10.941 289.496 10.934 289.406 10.93 cv
289.293 10.934 289.184 10.953 289.078 10.996 cv
288.969 11.043 288.855 11.113 288.742 11.203 cv
288.621 11.297 288.5 11.422 288.375 11.574 cv
288.246 11.734 288.109 11.926 287.965 12.152 cv
287.965 16.484 li
287.961 16.539 287.945 16.582 287.918 16.621 cv
287.883 16.66 287.828 16.695 287.758 16.719 cv
287.68 16.746 287.582 16.762 287.457 16.777 cv
287.332 16.789 287.172 16.797 286.984 16.797 cv
286.789 16.797 286.633 16.789 286.508 16.777 cv
286.383 16.762 286.281 16.746 286.207 16.719 cv
286.129 16.695 286.074 16.66 286.047 16.621 cv
286.012 16.582 285.996 16.539 286 16.484 cv
286 9.53497 li
285.996 9.48798 286.012 9.44098 286.039 9.39801 cv
286.063 9.36298 286.109 9.33197 286.18 9.30103 cv
286.246 9.27698 286.332 9.258 286.441 9.242 cv
286.547 9.23401 286.68 9.22699 286.844 9.22302 cv
287.008 9.22699 287.145 9.23401 287.254 9.242 cv
287.359 9.258 287.445 9.27698 287.508 9.30103 cv
287.566 9.33197 287.609 9.36298 287.637 9.39801 cv
287.66 9.44098 287.672 9.48798 287.676 9.53497 cv
287.676 10.398 li
287.855 10.141 288.027 9.92999 288.191 9.758 cv
288.348 9.59399 288.504 9.45697 288.652 9.35498 cv
288.797 9.258 288.941 9.19098 289.086 9.14801 cv
289.23 9.11298 289.375 9.09399 289.523 9.09003 cv
289.59 9.09399 289.664 9.09802 289.742 9.10199 cv
289.82 9.11298 289.898 9.125 289.984 9.14099 cv
290.063 9.15997 290.137 9.17999 290.203 9.203 cv
290.262 9.22699 290.309 9.25403 290.34 9.27698 cv
290.367 9.30902 290.387 9.336 290.402 9.36298 cv
290.414 9.39801 290.426 9.44098 290.438 9.492 cv
290.445 9.55103 290.453 9.633 290.461 9.73798 cv
290.465 9.84802 290.469 9.99597 290.469 10.18 cv
cp
f
293.629 16.484 mo
293.625 16.539 293.609 16.582 293.582 16.621 cv
293.547 16.66 293.492 16.695 293.422 16.719 cv
293.344 16.746 293.246 16.762 293.121 16.777 cv
292.996 16.789 292.836 16.797 292.648 16.797 cv
292.453 16.797 292.297 16.789 292.172 16.777 cv
292.047 16.762 291.945 16.746 291.871 16.719 cv
291.793 16.695 291.738 16.66 291.711 16.621 cv
291.676 16.582 291.66 16.539 291.664 16.484 cv
291.664 9.55103 li
291.66 9.5 291.676 9.453 291.711 9.414 cv
291.738 9.375 291.793 9.34399 291.871 9.31201 cv
291.945 9.289 292.047 9.26599 292.172 9.24597 cv
292.297 9.23401 292.453 9.22699 292.648 9.22302 cv
292.836 9.22699 292.996 9.23401 293.121 9.24597 cv
293.246 9.26599 293.344 9.289 293.422 9.31201 cv
293.492 9.34399 293.547 9.375 293.582 9.414 cv
293.609 9.453 293.625 9.5 293.629 9.55103 cv
cp
293.777 7.17999 mo
293.777 7.578 293.695 7.85199 293.535 8 cv
293.371 8.15198 293.074 8.22699 292.641 8.22302 cv
292.195 8.22699 291.895 8.15198 291.746 8.008 cv
291.59 7.86298 291.516 7.60199 291.516 7.21899 cv
291.516 6.82397 291.594 6.55103 291.754 6.39801 cv
291.91 6.24597 292.211 6.16803 292.656 6.16803 cv
293.09 6.16803 293.387 6.242 293.543 6.39099 cv
293.699 6.539 293.777 6.80499 293.777 7.17999 cv
cp
f
302.23 16.484 mo
302.227 16.539 302.211 16.582 302.184 16.621 cv
302.148 16.66 302.098 16.695 302.027 16.719 cv
301.953 16.746 301.852 16.762 301.727 16.777 cv
301.598 16.789 301.441 16.797 301.258 16.797 cv
301.063 16.797 300.902 16.789 300.777 16.777 cv
300.648 16.762 300.547 16.746 300.477 16.719 cv
300.398 16.695 300.348 16.66 300.32 16.621 cv
300.285 16.582 300.27 16.539 300.273 16.484 cv
300.273 12.52 li
300.27 12.184 300.246 11.918 300.199 11.723 cv
300.148 11.531 300.074 11.367 299.984 11.23 cv
299.891 11.094 299.773 10.988 299.625 10.91 cv
299.477 10.836 299.301 10.797 299.105 10.797 cv
298.852 10.797 298.602 10.891 298.348 11.07 cv
298.094 11.254 297.828 11.516 297.555 11.863 cv
297.555 16.484 li
297.551 16.539 297.535 16.582 297.508 16.621 cv
297.473 16.66 297.418 16.695 297.348 16.719 cv
297.27 16.746 297.172 16.762 297.047 16.777 cv
296.922 16.789 296.762 16.797 296.574 16.797 cv
296.379 16.797 296.223 16.789 296.098 16.777 cv
295.973 16.762 295.871 16.746 295.797 16.719 cv
295.719 16.695 295.664 16.66 295.637 16.621 cv
295.602 16.582 295.586 16.539 295.59 16.484 cv
295.59 9.53497 li
295.586 9.48798 295.602 9.44098 295.629 9.39801 cv
295.652 9.36298 295.699 9.33197 295.77 9.30103 cv
295.836 9.27698 295.922 9.258 296.031 9.242 cv
296.137 9.23401 296.27 9.22699 296.434 9.22302 cv
296.598 9.22699 296.734 9.23401 296.844 9.242 cv
296.949 9.258 297.035 9.27698 297.098 9.30103 cv
297.156 9.33197 297.199 9.36298 297.227 9.39801 cv
297.25 9.44098 297.262 9.48798 297.266 9.53497 cv
297.266 10.336 li
297.648 9.92603 298.039 9.61298 298.438 9.40198 cv
298.832 9.19501 299.25 9.09399 299.684 9.09003 cv
300.152 9.09399 300.551 9.172 300.879 9.32397 cv
301.203 9.48401 301.465 9.69501 301.664 9.961 cv
301.863 10.23 302.008 10.543 302.098 10.898 cv
302.184 11.258 302.227 11.687 302.23 12.191 cv
cp
f
310.426 10.016 mo
310.422 10.27 310.395 10.453 310.34 10.57 cv
310.281 10.691 310.211 10.75 310.133 10.75 cv
309.313 10.75 li
309.426 10.875 309.508 11.02 309.559 11.176 cv
309.605 11.336 309.629 11.5 309.633 11.668 cv
309.629 12.078 309.563 12.437 309.43 12.75 cv
309.293 13.066 309.098 13.332 308.848 13.543 cv
308.594 13.762 308.293 13.926 307.938 14.035 cv
307.578 14.152 307.18 14.207 306.75 14.203 cv
306.523 14.207 306.313 14.18 306.109 14.121 cv
305.906 14.07 305.75 14.008 305.641 13.93 cv
305.578 14 305.52 14.078 305.473 14.172 cv
305.422 14.266 305.398 14.371 305.402 14.48 cv
305.398 14.637 305.465 14.758 305.598 14.852 cv
305.727 14.949 305.914 15.004 306.156 15.012 cv
307.848 15.074 li
308.242 15.09 308.594 15.148 308.902 15.242 cv
309.211 15.344 309.473 15.477 309.684 15.648 cv
309.895 15.824 310.055 16.035 310.164 16.277 cv
310.273 16.523 310.328 16.797 310.332 17.109 cv
310.328 17.445 310.254 17.77 310.105 18.078 cv
309.957 18.379 309.73 18.641 309.43 18.867 cv
309.125 19.086 308.746 19.266 308.293 19.398 cv
307.836 19.527 307.305 19.59 306.703 19.594 cv
306.105 19.59 305.602 19.543 305.184 19.453 cv
304.766 19.355 304.422 19.227 304.156 19.062 cv
303.887 18.895 303.691 18.695 303.574 18.469 cv
303.449 18.234 303.391 17.98 303.391 17.707 cv
303.391 17.535 303.41 17.375 303.457 17.219 cv
303.496 17.062 303.563 16.91 303.652 16.77 cv
303.734 16.625 303.84 16.492 303.965 16.359 cv
304.09 16.23 304.23 16.105 304.395 15.984 cv
304.168 15.871 303.996 15.711 303.875 15.5 cv
303.754 15.297 303.695 15.07 303.695 14.824 cv
303.695 14.523 303.762 14.246 303.902 13.988 cv
304.039 13.738 304.223 13.508 304.449 13.305 cv
304.266 13.125 304.121 12.91 304.012 12.652 cv
303.902 12.402 303.848 12.082 303.852 11.699 cv
303.848 11.297 303.918 10.937 304.063 10.613 cv
304.203 10.297 304.402 10.027 304.66 9.80499 cv
304.914 9.586 305.219 9.414 305.57 9.297 cv
305.922 9.17999 306.313 9.12097 306.742 9.12097 cv
306.961 9.12097 307.168 9.13702 307.367 9.15997 cv
307.566 9.19098 307.754 9.22699 307.926 9.27002 cv
310.133 9.27002 li
310.215 9.27301 310.285 9.33197 310.344 9.44098 cv
310.395 9.55902 310.422 9.75 310.426 10.016 cv
cp
307.91 11.66 mo
307.906 11.289 307.805 11 307.598 10.789 cv
307.387 10.586 307.094 10.48 306.719 10.477 cv
306.523 10.48 306.352 10.512 306.211 10.574 cv
306.063 10.641 305.941 10.73 305.848 10.84 cv
305.746 10.953 305.676 11.082 305.633 11.23 cv
305.582 11.379 305.559 11.535 305.563 11.691 cv
305.559 12.051 305.664 12.328 305.875 12.531 cv
306.082 12.738 306.371 12.844 306.742 12.84 cv
306.938 12.844 307.105 12.812 307.254 12.746 cv
307.395 12.687 307.516 12.602 307.617 12.488 cv
307.711 12.383 307.785 12.254 307.836 12.109 cv
307.883 11.969 307.906 11.82 307.91 11.66 cv
cp
308.371 17.211 mo
308.371 16.973 308.277 16.797 308.09 16.672 cv
307.902 16.551 307.645 16.48 307.316 16.469 cv
305.922 16.43 li
305.785 16.531 305.676 16.625 305.598 16.715 cv
305.516 16.805 305.453 16.891 305.406 16.977 cv
305.355 17.059 305.32 17.141 305.309 17.219 cv
305.289 17.297 305.281 17.375 305.285 17.461 cv
305.281 17.715 305.414 17.914 305.676 18.051 cv
305.938 18.184 306.309 18.25 306.789 18.254 cv
307.082 18.25 307.328 18.219 307.535 18.164 cv
307.734 18.102 307.898 18.023 308.027 17.926 cv
308.148 17.824 308.238 17.715 308.293 17.594 cv
308.344 17.473 308.371 17.344 308.371 17.211 cv
cp
f
322.227 7.508 mo
322.223 7.664 322.215 7.79303 322.207 7.89502 cv
322.191 8.00403 322.172 8.09003 322.148 8.15198 cv
322.117 8.21899 322.086 8.26599 322.051 8.29303 cv
322.008 8.328 321.965 8.34399 321.922 8.34003 cv
319.398 8.34003 li
319.398 16.469 li
319.398 16.523 319.379 16.57 319.348 16.609 cv
319.309 16.652 319.254 16.687 319.18 16.711 cv
319.098 16.738 318.992 16.758 318.863 16.773 cv
318.727 16.789 318.563 16.797 318.367 16.797 cv
318.172 16.797 318.008 16.789 317.875 16.773 cv
317.742 16.758 317.637 16.738 317.559 16.711 cv
317.48 16.687 317.422 16.652 317.391 16.609 cv
317.352 16.57 317.336 16.523 317.34 16.469 cv
317.34 8.34003 li
314.816 8.34003 li
314.762 8.34399 314.715 8.328 314.684 8.29303 cv
314.645 8.26599 314.613 8.21899 314.59 8.15198 cv
314.559 8.09003 314.539 8.00403 314.531 7.89502 cv
314.516 7.79303 314.512 7.664 314.512 7.508 cv
314.512 7.35498 314.516 7.22302 314.531 7.10901 cv
314.539 7.00403 314.559 6.914 314.59 6.84802 cv
314.613 6.78497 314.645 6.73798 314.684 6.70697 cv
314.715 6.67999 314.762 6.66803 314.816 6.664 cv
321.922 6.664 li
321.965 6.66803 322.008 6.67999 322.051 6.70697 cv
322.086 6.73798 322.117 6.78497 322.148 6.84802 cv
322.172 6.914 322.191 7.00403 322.207 7.10901 cv
322.215 7.22302 322.223 7.35498 322.227 7.508 cv
cp
f
325.262 16.484 mo
325.258 16.539 325.242 16.582 325.215 16.621 cv
325.18 16.66 325.125 16.695 325.055 16.719 cv
324.977 16.746 324.879 16.762 324.754 16.777 cv
324.629 16.789 324.469 16.797 324.281 16.797 cv
324.086 16.797 323.93 16.789 323.805 16.777 cv
323.68 16.762 323.578 16.746 323.504 16.719 cv
323.426 16.695 323.371 16.66 323.344 16.621 cv
323.309 16.582 323.293 16.539 323.297 16.484 cv
323.297 9.55103 li
323.293 9.5 323.309 9.453 323.344 9.414 cv
323.371 9.375 323.426 9.34399 323.504 9.31201 cv
323.578 9.289 323.68 9.26599 323.805 9.24597 cv
323.93 9.23401 324.086 9.22699 324.281 9.22302 cv
324.469 9.22699 324.629 9.23401 324.754 9.24597 cv
324.879 9.26599 324.977 9.289 325.055 9.31201 cv
325.125 9.34399 325.18 9.375 325.215 9.414 cv
325.242 9.453 325.258 9.5 325.262 9.55103 cv
cp
325.41 7.17999 mo
325.41 7.578 325.328 7.85199 325.168 8 cv
325.004 8.15198 324.707 8.22699 324.273 8.22302 cv
323.828 8.22699 323.527 8.15198 323.379 8.008 cv
323.223 7.86298 323.148 7.60199 323.148 7.21899 cv
323.148 6.82397 323.227 6.55103 323.387 6.39801 cv
323.543 6.24597 323.844 6.16803 324.289 6.16803 cv
324.723 6.16803 325.02 6.242 325.176 6.39099 cv
325.332 6.539 325.41 6.80499 325.41 7.17999 cv
cp
f
338.316 16.484 mo
338.313 16.539 338.297 16.582 338.27 16.621 cv
338.234 16.66 338.184 16.695 338.113 16.719 cv
338.039 16.746 337.938 16.762 337.816 16.777 cv
337.691 16.789 337.535 16.797 337.344 16.797 cv
337.145 16.797 336.984 16.789 336.859 16.777 cv
336.734 16.762 336.633 16.746 336.559 16.719 cv
336.48 16.695 336.43 16.66 336.402 16.621 cv
336.375 16.582 336.359 16.539 336.363 16.484 cv
336.363 12.363 li
336.359 12.133 336.34 11.918 336.297 11.723 cv
336.25 11.531 336.18 11.367 336.094 11.23 cv
336 11.094 335.887 10.988 335.75 10.91 cv
335.609 10.836 335.445 10.797 335.254 10.797 cv
335.02 10.797 334.781 10.891 334.543 11.07 cv
334.305 11.254 334.047 11.516 333.766 11.863 cv
333.766 16.484 li
333.766 16.539 333.75 16.582 333.719 16.621 cv
333.688 16.66 333.633 16.695 333.559 16.719 cv
333.48 16.746 333.379 16.762 333.258 16.777 cv
333.133 16.789 332.98 16.797 332.793 16.797 cv
332.598 16.797 332.438 16.789 332.316 16.777 cv
332.188 16.762 332.086 16.746 332.016 16.719 cv
331.938 16.695 331.887 16.66 331.855 16.621 cv
331.824 16.582 331.809 16.539 331.809 16.484 cv
331.809 12.363 li
331.809 12.133 331.785 11.918 331.742 11.723 cv
331.699 11.531 331.633 11.367 331.547 11.23 cv
331.453 11.094 331.34 10.988 331.203 10.91 cv
331.059 10.836 330.895 10.797 330.711 10.797 cv
330.469 10.797 330.23 10.891 329.992 11.07 cv
329.754 11.254 329.496 11.516 329.223 11.863 cv
329.223 16.484 li
329.219 16.539 329.203 16.582 329.176 16.621 cv
329.141 16.66 329.086 16.695 329.016 16.719 cv
328.938 16.746 328.84 16.762 328.715 16.777 cv
328.59 16.789 328.43 16.797 328.242 16.797 cv
328.047 16.797 327.891 16.789 327.766 16.777 cv
327.641 16.762 327.539 16.746 327.465 16.719 cv
327.387 16.695 327.332 16.66 327.305 16.621 cv
327.27 16.582 327.254 16.539 327.258 16.484 cv
327.258 9.53497 li
327.254 9.48798 327.27 9.44098 327.297 9.39801 cv
327.32 9.36298 327.367 9.33197 327.438 9.30103 cv
327.504 9.27698 327.59 9.258 327.699 9.242 cv
327.805 9.23401 327.938 9.22699 328.102 9.22302 cv
328.266 9.22699 328.402 9.23401 328.512 9.242 cv
328.617 9.258 328.703 9.27698 328.766 9.30103 cv
328.824 9.33197 328.867 9.36298 328.895 9.39801 cv
328.918 9.44098 328.93 9.48798 328.934 9.53497 cv
328.934 10.336 li
329.316 9.92603 329.699 9.61298 330.082 9.40198 cv
330.461 9.19501 330.863 9.09399 331.281 9.09003 cv
331.566 9.09399 331.82 9.12097 332.051 9.17999 cv
332.277 9.242 332.484 9.328 332.664 9.43701 cv
332.844 9.55103 332.996 9.68701 333.125 9.84003 cv
333.254 9.99597 333.363 10.168 333.453 10.359 cv
333.66 10.137 333.863 9.94501 334.066 9.78497 cv
334.262 9.625 334.461 9.492 334.656 9.39099 cv
334.852 9.289 335.047 9.21503 335.242 9.164 cv
335.438 9.117 335.637 9.09399 335.84 9.09003 cv
336.301 9.09399 336.688 9.172 337.008 9.32397 cv
337.32 9.48401 337.578 9.69501 337.773 9.961 cv
337.969 10.23 338.105 10.543 338.191 10.898 cv
338.27 11.258 338.313 11.637 338.316 12.035 cv
cp
f
346.652 12.809 mo
346.648 13.047 346.598 13.223 346.492 13.336 cv
346.383 13.453 346.234 13.512 346.055 13.508 cv
341.82 13.508 li
341.816 13.809 341.852 14.078 341.926 14.316 cv
341.992 14.559 342.105 14.762 342.262 14.93 cv
342.414 15.102 342.609 15.23 342.852 15.316 cv
343.09 15.406 343.379 15.449 343.723 15.449 cv
344.063 15.449 344.363 15.426 344.625 15.375 cv
344.883 15.328 345.109 15.273 345.301 15.211 cv
345.488 15.152 345.645 15.098 345.773 15.047 cv
345.895 15 345.996 14.977 346.078 14.973 cv
346.121 14.977 346.16 14.984 346.195 15 cv
346.223 15.02 346.25 15.051 346.27 15.098 cv
346.289 15.145 346.301 15.211 346.313 15.297 cv
346.316 15.383 346.32 15.492 346.324 15.621 cv
346.32 15.738 346.32 15.836 346.316 15.914 cv
346.309 15.996 346.301 16.062 346.293 16.117 cv
346.281 16.176 346.266 16.227 346.246 16.262 cv
346.227 16.305 346.199 16.34 346.168 16.375 cv
346.133 16.414 346.039 16.465 345.891 16.523 cv
345.734 16.59 345.543 16.652 345.313 16.707 cv
345.074 16.77 344.805 16.816 344.508 16.863 cv
344.203 16.902 343.883 16.926 343.543 16.93 cv
342.922 16.926 342.379 16.852 341.918 16.695 cv
341.449 16.543 341.063 16.305 340.754 15.988 cv
340.438 15.672 340.203 15.273 340.055 14.789 cv
339.898 14.309 339.824 13.742 339.828 13.086 cv
339.824 12.473 339.902 11.914 340.066 11.418 cv
340.223 10.922 340.457 10.504 340.77 10.156 cv
341.074 9.81201 341.449 9.547 341.887 9.36298 cv
342.324 9.18402 342.816 9.09399 343.371 9.09003 cv
343.949 9.09399 344.449 9.17999 344.863 9.34802 cv
345.277 9.52301 345.613 9.76202 345.879 10.062 cv
346.141 10.367 346.336 10.727 346.465 11.141 cv
346.586 11.559 346.648 12.008 346.652 12.496 cv
cp
344.75 12.246 mo
344.762 11.695 344.652 11.262 344.418 10.949 cv
344.184 10.637 343.816 10.48 343.324 10.477 cv
343.074 10.48 342.859 10.527 342.676 10.617 cv
342.488 10.715 342.336 10.84 342.215 10.996 cv
342.09 11.156 341.996 11.344 341.934 11.559 cv
341.867 11.773 341.828 12.004 341.82 12.246 cv
cp
f
353.152 14.52 mo
353.148 14.918 353.074 15.266 352.93 15.566 cv
352.781 15.867 352.574 16.121 352.305 16.32 cv
352.031 16.527 351.711 16.676 351.344 16.777 cv
350.977 16.875 350.574 16.926 350.145 16.93 cv
349.879 16.926 349.633 16.906 349.398 16.871 cv
349.164 16.828 348.953 16.781 348.766 16.723 cv
348.578 16.664 348.422 16.602 348.297 16.539 cv
348.172 16.477 348.078 16.418 348.023 16.363 cv
347.965 16.309 347.922 16.227 347.895 16.109 cv
347.859 15.996 347.844 15.82 347.848 15.59 cv
347.844 15.441 347.852 15.32 347.863 15.227 cv
347.871 15.137 347.887 15.066 347.91 15.008 cv
347.93 14.957 347.953 14.918 347.988 14.898 cv
348.016 14.883 348.055 14.875 348.102 14.871 cv
348.156 14.875 348.242 14.906 348.355 14.969 cv
348.465 15.035 348.602 15.109 348.773 15.184 cv
348.938 15.266 349.133 15.336 349.352 15.402 cv
349.57 15.473 349.82 15.508 350.105 15.504 cv
350.281 15.508 350.438 15.488 350.578 15.449 cv
350.711 15.414 350.832 15.363 350.938 15.293 cv
351.035 15.227 351.109 15.141 351.164 15.035 cv
351.211 14.934 351.238 14.812 351.242 14.676 cv
351.238 14.52 351.191 14.387 351.098 14.277 cv
351.004 14.168 350.875 14.07 350.719 13.984 cv
350.555 13.902 350.375 13.824 350.18 13.75 cv
349.977 13.68 349.773 13.602 349.563 13.508 cv
349.352 13.422 349.145 13.32 348.949 13.203 cv
348.746 13.094 348.566 12.953 348.41 12.785 cv
348.246 12.621 348.121 12.422 348.027 12.184 cv
347.934 11.953 347.887 11.672 347.887 11.34 cv
347.887 11.012 347.949 10.707 348.078 10.426 cv
348.207 10.152 348.395 9.914 348.641 9.71503 cv
348.883 9.52002 349.18 9.367 349.531 9.25403 cv
349.879 9.14801 350.273 9.09399 350.715 9.09003 cv
350.93 9.09399 351.141 9.10901 351.348 9.13702 cv
351.551 9.172 351.738 9.211 351.906 9.25403 cv
352.07 9.30499 352.211 9.35498 352.328 9.40601 cv
352.441 9.46503 352.523 9.51202 352.574 9.547 cv
352.621 9.59003 352.656 9.62903 352.68 9.664 cv
352.699 9.70697 352.711 9.75403 352.723 9.80499 cv
352.73 9.85901 352.742 9.92603 352.75 10.004 cv
352.758 10.09 352.762 10.187 352.762 10.305 cv
352.762 10.445 352.758 10.562 352.75 10.648 cv
352.742 10.742 352.727 10.812 352.711 10.859 cv
352.691 10.914 352.668 10.949 352.641 10.965 cv
352.605 10.988 352.57 10.996 352.531 10.992 cv
352.48 10.996 352.406 10.969 352.313 10.91 cv
352.211 10.859 352.09 10.801 351.941 10.734 cv
351.793 10.676 351.621 10.617 351.426 10.559 cv
351.23 10.508 351.008 10.48 350.762 10.477 cv
350.582 10.48 350.43 10.5 350.301 10.531 cv
350.168 10.57 350.059 10.621 349.98 10.687 cv
349.895 10.758 349.832 10.836 349.793 10.926 cv
349.746 11.02 349.727 11.117 349.73 11.219 cv
349.727 11.379 349.777 11.516 349.879 11.621 cv
349.977 11.734 350.105 11.828 350.27 11.91 cv
350.43 11.996 350.613 12.074 350.82 12.145 cv
351.023 12.219 351.23 12.301 351.441 12.383 cv
351.648 12.473 351.855 12.57 352.066 12.684 cv
352.27 12.797 352.453 12.937 352.613 13.102 cv
352.773 13.27 352.902 13.469 353.004 13.699 cv
353.098 13.934 353.148 14.207 353.152 14.52 cv
cp
f
365.344 12.937 mo
365.34 13.535 365.262 14.078 365.109 14.562 cv
364.949 15.055 364.715 15.473 364.398 15.824 cv
364.082 16.176 363.684 16.449 363.207 16.641 cv
362.727 16.832 362.168 16.926 361.531 16.93 cv
360.91 16.926 360.371 16.844 359.918 16.672 cv
359.457 16.504 359.078 16.254 358.781 15.926 cv
358.477 15.602 358.254 15.199 358.109 14.719 cv
357.965 14.242 357.895 13.695 357.895 13.078 cv
357.895 12.488 357.973 11.949 358.129 11.457 cv
358.285 10.969 358.523 10.547 358.844 10.195 cv
359.16 9.84802 359.555 9.57397 360.031 9.37903 cv
360.504 9.18701 361.063 9.09399 361.703 9.09003 cv
362.328 9.09399 362.867 9.17603 363.324 9.34399 cv
363.781 9.51599 364.16 9.76599 364.457 10.09 cv
364.754 10.418 364.977 10.82 365.125 11.297 cv
365.27 11.777 365.34 12.324 365.344 12.937 cv
cp
363.324 13.016 mo
363.32 12.68 363.293 12.363 363.242 12.07 cv
363.184 11.785 363.09 11.535 362.965 11.32 cv
362.832 11.109 362.66 10.941 362.449 10.82 cv
362.23 10.703 361.961 10.645 361.633 10.641 cv
361.344 10.645 361.09 10.699 360.871 10.801 cv
360.652 10.91 360.473 11.066 360.332 11.27 cv
360.191 11.477 360.086 11.723 360.016 12.008 cv
359.945 12.301 359.91 12.629 359.91 12.992 cv
359.91 13.34 359.938 13.656 359.996 13.941 cv
360.051 14.234 360.145 14.484 360.273 14.695 cv
360.398 14.91 360.57 15.074 360.793 15.187 cv
361.008 15.309 361.277 15.367 361.602 15.363 cv
361.895 15.367 362.152 15.312 362.375 15.203 cv
362.59 15.098 362.77 14.945 362.91 14.738 cv
363.051 14.539 363.152 14.293 363.223 14.004 cv
363.285 13.719 363.32 13.391 363.324 13.016 cv
cp
f
371.129 6.883 mo
371.125 7.03497 371.121 7.15601 371.113 7.24597 cv
371.102 7.34003 371.086 7.40997 371.066 7.45697 cv
371.043 7.508 371.02 7.54303 370.996 7.55902 cv
370.969 7.578 370.941 7.586 370.91 7.586 cv
370.871 7.586 370.828 7.578 370.789 7.55902 cv
370.742 7.54303 370.688 7.52301 370.625 7.5 cv
370.555 7.47998 370.48 7.461 370.395 7.44098 cv
370.305 7.42603 370.199 7.41803 370.082 7.414 cv
369.938 7.41803 369.816 7.43701 369.719 7.47998 cv
369.617 7.52698 369.535 7.59802 369.469 7.69098 cv
369.398 7.789 369.348 7.914 369.32 8.06598 cv
369.285 8.21899 369.27 8.40601 369.273 8.62903 cv
369.273 9.27002 li
370.543 9.27002 li
370.586 9.27301 370.629 9.28497 370.672 9.30902 cv
370.707 9.336 370.742 9.37903 370.77 9.43701 cv
370.793 9.5 370.813 9.58197 370.828 9.68402 cv
370.84 9.78497 370.844 9.914 370.848 10.062 cv
370.844 10.352 370.82 10.555 370.77 10.676 cv
370.715 10.801 370.637 10.863 370.543 10.859 cv
369.273 10.859 li
369.273 16.484 li
369.27 16.539 369.254 16.582 369.227 16.621 cv
369.191 16.66 369.141 16.695 369.07 16.719 cv
368.996 16.746 368.895 16.762 368.766 16.777 cv
368.633 16.789 368.473 16.797 368.289 16.797 cv
368.102 16.797 367.945 16.789 367.82 16.777 cv
367.691 16.762 367.59 16.746 367.516 16.719 cv
367.438 16.695 367.387 16.66 367.359 16.621 cv
367.328 16.582 367.313 16.539 367.316 16.484 cv
367.316 10.859 li
366.445 10.859 li
366.344 10.863 366.27 10.801 366.223 10.676 cv
366.172 10.555 366.145 10.352 366.148 10.062 cv
366.145 9.914 366.152 9.78497 366.168 9.68402 cv
366.18 9.58197 366.199 9.5 366.223 9.43701 cv
366.246 9.37903 366.277 9.336 366.316 9.30902 cv
366.355 9.28497 366.398 9.27301 366.453 9.27002 cv
367.316 9.27002 li
367.316 8.68402 li
367.313 8.21503 367.359 7.80103 367.457 7.44098 cv
367.547 7.086 367.695 6.789 367.898 6.55499 cv
368.098 6.32001 368.352 6.14502 368.66 6.02002 cv
368.969 5.90198 369.332 5.84003 369.758 5.84003 cv
369.953 5.84003 370.145 5.85901 370.332 5.89099 cv
370.512 5.92999 370.656 5.96503 370.762 6 cv
370.863 6.04303 370.934 6.078 370.973 6.10901 cv
371.008 6.14502 371.039 6.19501 371.063 6.258 cv
371.086 6.32397 371.102 6.40601 371.113 6.508 cv
371.121 6.60901 371.125 6.73401 371.129 6.883 cv
cp
f
381.676 13.727 mo
381.672 14.258 381.574 14.723 381.379 15.121 cv
381.18 15.523 380.914 15.859 380.578 16.125 cv
380.238 16.395 379.84 16.594 379.391 16.727 cv
378.938 16.859 378.457 16.926 377.945 16.93 cv
377.594 16.926 377.27 16.898 376.973 16.844 cv
376.672 16.785 376.41 16.719 376.184 16.637 cv
375.953 16.559 375.762 16.473 375.609 16.383 cv
375.457 16.297 375.348 16.219 375.281 16.148 cv
375.211 16.082 375.16 15.984 375.137 15.859 cv
375.105 15.734 375.094 15.551 375.094 15.309 cv
375.094 15.148 375.098 15.016 375.109 14.902 cv
375.117 14.797 375.133 14.707 375.16 14.637 cv
375.18 14.57 375.211 14.523 375.254 14.492 cv
375.289 14.469 375.336 14.453 375.387 14.449 cv
375.457 14.453 375.559 14.496 375.695 14.578 cv
375.824 14.668 375.996 14.762 376.207 14.863 cv
376.414 14.969 376.66 15.066 376.949 15.148 cv
377.234 15.238 377.57 15.281 377.953 15.277 cv
378.203 15.281 378.426 15.25 378.621 15.187 cv
378.816 15.129 378.984 15.043 379.125 14.934 cv
379.262 14.824 379.367 14.691 379.441 14.531 cv
379.512 14.371 379.547 14.191 379.551 13.992 cv
379.547 13.766 379.484 13.57 379.363 13.402 cv
379.234 13.242 379.07 13.098 378.875 12.969 cv
378.672 12.844 378.445 12.723 378.191 12.609 cv
377.938 12.5 377.676 12.383 377.406 12.254 cv
377.133 12.133 376.871 11.988 376.617 11.828 cv
376.363 11.672 376.137 11.484 375.938 11.262 cv
375.734 11.043 375.57 10.781 375.449 10.477 cv
375.324 10.176 375.262 9.81598 375.266 9.39502 cv
375.262 8.914 375.352 8.48798 375.531 8.12097 cv
375.707 7.758 375.949 7.453 376.258 7.20697 cv
376.559 6.96899 376.918 6.789 377.332 6.66803 cv
377.746 6.55103 378.184 6.492 378.645 6.48798 cv
378.883 6.492 379.121 6.508 379.363 6.54303 cv
379.602 6.58197 379.824 6.633 380.031 6.69098 cv
380.238 6.75403 380.422 6.82397 380.586 6.89801 cv
380.742 6.97998 380.852 7.04303 380.906 7.09399 cv
380.957 7.14801 380.992 7.19501 381.012 7.22699 cv
381.027 7.26599 381.043 7.31201 381.059 7.37097 cv
381.07 7.43402 381.078 7.508 381.086 7.59802 cv
381.09 7.69098 381.094 7.80499 381.094 7.93701 cv
381.094 8.09003 381.09 8.21899 381.082 8.32001 cv
381.074 8.42603 381.059 8.51202 381.043 8.57397 cv
381.02 8.64502 380.996 8.69098 380.965 8.72302 cv
380.93 8.75403 380.883 8.77002 380.828 8.77002 cv
380.77 8.77002 380.68 8.73401 380.555 8.65997 cv
380.43 8.59003 380.273 8.51202 380.094 8.422 cv
379.91 8.34003 379.703 8.26202 379.465 8.19098 cv
379.223 8.125 378.957 8.09003 378.676 8.086 cv
378.449 8.09003 378.258 8.117 378.094 8.16803 cv
377.926 8.22302 377.785 8.297 377.676 8.39099 cv
377.563 8.48798 377.48 8.60498 377.426 8.73798 cv
377.371 8.87903 377.344 9.02002 377.344 9.16803 cv
377.344 9.39502 377.402 9.59003 377.527 9.75 cv
377.645 9.914 377.809 10.059 378.02 10.184 cv
378.223 10.312 378.457 10.434 378.715 10.543 cv
378.973 10.66 379.238 10.777 379.512 10.898 cv
379.781 11.027 380.043 11.168 380.305 11.324 cv
380.563 11.48 380.797 11.672 381 11.891 cv
381.203 12.117 381.363 12.375 381.488 12.672 cv
381.609 12.969 381.672 13.32 381.676 13.727 cv
cp
f
389.727 16.484 mo
389.723 16.539 389.711 16.582 389.688 16.621 cv
389.66 16.66 389.613 16.695 389.551 16.719 cv
389.484 16.746 389.398 16.762 389.293 16.777 cv
389.188 16.789 389.055 16.797 388.895 16.797 cv
388.719 16.797 388.578 16.789 388.477 16.777 cv
388.367 16.762 388.285 16.746 388.223 16.719 cv
388.16 16.695 388.113 16.66 388.09 16.621 cv
388.059 16.582 388.047 16.539 388.051 16.484 cv
388.051 15.684 li
387.664 16.098 387.273 16.41 386.879 16.617 cv
386.477 16.824 386.066 16.926 385.645 16.93 cv
385.164 16.926 384.762 16.852 384.438 16.695 cv
384.113 16.543 383.852 16.328 383.652 16.059 cv
383.449 15.789 383.305 15.477 383.223 15.117 cv
383.133 14.762 383.09 14.32 383.094 13.789 cv
383.094 9.53497 li
383.09 9.48798 383.105 9.44098 383.137 9.39801 cv
383.164 9.36298 383.215 9.33197 383.293 9.30103 cv
383.367 9.27698 383.469 9.258 383.598 9.242 cv
383.723 9.23401 383.879 9.22699 384.07 9.22302 cv
384.258 9.22699 384.418 9.23401 384.543 9.242 cv
384.668 9.258 384.766 9.27698 384.844 9.30103 cv
384.914 9.33197 384.969 9.36298 385.004 9.39801 cv
385.031 9.44098 385.047 9.48798 385.051 9.53497 cv
385.051 13.461 li
385.047 13.828 385.07 14.105 385.121 14.297 cv
385.164 14.488 385.234 14.652 385.336 14.789 cv
385.43 14.93 385.555 15.035 385.703 15.109 cv
385.852 15.187 386.023 15.227 386.219 15.223 cv
386.469 15.227 386.719 15.137 386.973 14.949 cv
387.223 14.77 387.492 14.504 387.777 14.156 cv
387.777 9.53497 li
387.777 9.48798 387.789 9.44098 387.82 9.39801 cv
387.844 9.36298 387.898 9.33197 387.977 9.30103 cv
388.051 9.27698 388.148 9.258 388.277 9.242 cv
388.398 9.23401 388.559 9.22699 388.754 9.22302 cv
388.945 9.22699 389.102 9.23401 389.227 9.242 cv
389.348 9.258 389.449 9.27698 389.523 9.30103 cv
389.594 9.33197 389.645 9.36298 389.68 9.39801 cv
389.707 9.44098 389.723 9.48798 389.727 9.53497 cv
cp
f
398.656 12.914 mo
398.656 13.535 398.586 14.094 398.453 14.586 cv
398.313 15.082 398.117 15.5 397.867 15.848 cv
397.609 16.195 397.297 16.465 396.93 16.648 cv
396.555 16.836 396.133 16.926 395.664 16.93 cv
395.426 16.926 395.207 16.902 395.008 16.863 cv
394.801 16.816 394.609 16.75 394.426 16.648 cv
394.242 16.555 394.059 16.43 393.883 16.273 cv
393.699 16.125 393.516 15.941 393.332 15.73 cv
393.332 16.484 li
393.328 16.547 393.316 16.594 393.289 16.629 cv
393.258 16.672 393.211 16.703 393.148 16.727 cv
393.082 16.75 392.992 16.766 392.887 16.781 cv
392.777 16.789 392.648 16.797 392.492 16.797 cv
392.328 16.797 392.191 16.789 392.09 16.781 cv
391.98 16.766 391.895 16.75 391.832 16.727 cv
391.762 16.703 391.719 16.672 391.695 16.629 cv
391.668 16.594 391.652 16.547 391.656 16.484 cv
391.656 6.23798 li
391.652 6.18701 391.668 6.14099 391.703 6.09802 cv
391.73 6.05902 391.785 6.02301 391.863 5.992 cv
391.938 5.96503 392.039 5.94501 392.164 5.92603 cv
392.289 5.914 392.445 5.90601 392.641 5.90198 cv
392.828 5.90601 392.988 5.914 393.113 5.92603 cv
393.238 5.94501 393.336 5.96503 393.414 5.992 cv
393.484 6.02301 393.539 6.05902 393.574 6.09802 cv
393.602 6.14099 393.617 6.18701 393.621 6.23798 cv
393.621 10.078 li
393.797 9.90198 393.973 9.75403 394.152 9.62903 cv
394.324 9.508 394.5 9.40198 394.68 9.32001 cv
394.852 9.242 395.035 9.18402 395.227 9.14502 cv
395.41 9.10901 395.609 9.09399 395.82 9.09003 cv
396.332 9.09399 396.766 9.19501 397.129 9.39801 cv
397.484 9.60498 397.777 9.883 398.004 10.23 cv
398.227 10.578 398.391 10.984 398.5 11.449 cv
398.602 11.914 398.656 12.402 398.656 12.914 cv
cp
396.621 13.055 mo
396.617 12.762 396.594 12.477 396.555 12.199 cv
396.508 11.926 396.434 11.684 396.324 11.469 cv
396.215 11.258 396.07 11.086 395.898 10.957 cv
395.723 10.832 395.504 10.77 395.242 10.766 cv
395.109 10.77 394.984 10.785 394.859 10.82 cv
394.734 10.859 394.605 10.922 394.473 11.008 cv
394.34 11.098 394.203 11.215 394.066 11.352 cv
393.922 11.492 393.773 11.664 393.621 11.871 cv
393.621 14.18 li
393.895 14.535 394.156 14.805 394.41 14.984 cv
394.66 15.172 394.926 15.262 395.203 15.262 cv
395.457 15.262 395.672 15.199 395.852 15.066 cv
396.023 14.941 396.172 14.773 396.289 14.562 cv
396.406 14.359 396.488 14.121 396.543 13.852 cv
396.59 13.59 396.617 13.324 396.621 13.055 cv
cp
f
403.785 12.832 mo
403.781 13.133 403.754 13.344 403.699 13.461 cv
403.641 13.586 403.551 13.645 403.426 13.641 cv
400.184 13.641 li
400.055 13.645 399.961 13.582 399.906 13.457 cv
399.844 13.336 399.816 13.129 399.82 12.832 cv
399.816 12.543 399.844 12.336 399.906 12.215 cv
399.961 12.098 400.055 12.039 400.184 12.035 cv
403.426 12.035 li
403.488 12.039 403.539 12.051 403.586 12.074 cv
403.625 12.102 403.664 12.148 403.699 12.207 cv
403.727 12.273 403.75 12.355 403.766 12.457 cv
403.777 12.562 403.781 12.687 403.785 12.832 cv
cp
f
407.438 16.469 mo
407.434 16.523 407.418 16.57 407.387 16.609 cv
407.352 16.652 407.293 16.687 407.219 16.711 cv
407.137 16.738 407.035 16.758 406.906 16.773 cv
406.773 16.789 406.605 16.797 406.41 16.797 cv
406.207 16.797 406.043 16.789 405.914 16.773 cv
405.777 16.758 405.672 16.738 405.598 16.711 cv
405.516 16.687 405.461 16.652 405.43 16.609 cv
405.395 16.57 405.375 16.523 405.379 16.469 cv
405.379 6.94501 li
405.375 6.89801 405.395 6.85199 405.43 6.80499 cv
405.461 6.76599 405.516 6.72998 405.602 6.703 cv
405.68 6.67999 405.785 6.65997 405.918 6.64099 cv
406.043 6.62903 406.207 6.62097 406.41 6.617 cv
406.605 6.62097 406.773 6.62903 406.906 6.64099 cv
407.035 6.65997 407.137 6.67999 407.219 6.703 cv
407.293 6.72998 407.352 6.76599 407.387 6.80499 cv
407.418 6.85199 407.434 6.89801 407.438 6.94501 cv
cp
f
420.516 16.484 mo
420.512 16.539 420.496 16.582 420.469 16.621 cv
420.434 16.66 420.383 16.695 420.313 16.719 cv
420.238 16.746 420.137 16.762 420.016 16.777 cv
419.891 16.789 419.734 16.797 419.543 16.797 cv
419.344 16.797 419.184 16.789 419.059 16.777 cv
418.934 16.762 418.832 16.746 418.758 16.719 cv
418.68 16.695 418.629 16.66 418.602 16.621 cv
418.574 16.582 418.559 16.539 418.563 16.484 cv
418.563 12.363 li
418.559 12.133 418.539 11.918 418.496 11.723 cv
418.449 11.531 418.379 11.367 418.293 11.23 cv
418.199 11.094 418.086 10.988 417.949 10.91 cv
417.809 10.836 417.645 10.797 417.453 10.797 cv
417.219 10.797 416.98 10.891 416.742 11.07 cv
416.504 11.254 416.246 11.516 415.965 11.863 cv
415.965 16.484 li
415.965 16.539 415.949 16.582 415.918 16.621 cv
415.887 16.66 415.832 16.695 415.758 16.719 cv
415.68 16.746 415.578 16.762 415.457 16.777 cv
415.332 16.789 415.18 16.797 414.992 16.797 cv
414.797 16.797 414.637 16.789 414.516 16.777 cv
414.387 16.762 414.285 16.746 414.215 16.719 cv
414.137 16.695 414.086 16.66 414.055 16.621 cv
414.023 16.582 414.008 16.539 414.008 16.484 cv
414.008 12.363 li
414.008 12.133 413.984 11.918 413.941 11.723 cv
413.898 11.531 413.832 11.367 413.746 11.23 cv
413.652 11.094 413.539 10.988 413.402 10.91 cv
413.258 10.836 413.094 10.797 412.91 10.797 cv
412.668 10.797 412.43 10.891 412.191 11.07 cv
411.953 11.254 411.695 11.516 411.422 11.863 cv
411.422 16.484 li
411.418 16.539 411.402 16.582 411.375 16.621 cv
411.34 16.66 411.285 16.695 411.215 16.719 cv
411.137 16.746 411.039 16.762 410.914 16.777 cv
410.789 16.789 410.629 16.797 410.441 16.797 cv
410.246 16.797 410.09 16.789 409.965 16.777 cv
409.84 16.762 409.738 16.746 409.664 16.719 cv
409.586 16.695 409.531 16.66 409.504 16.621 cv
409.469 16.582 409.453 16.539 409.457 16.484 cv
409.457 9.53497 li
409.453 9.48798 409.469 9.44098 409.496 9.39801 cv
409.52 9.36298 409.566 9.33197 409.637 9.30103 cv
409.703 9.27698 409.789 9.258 409.898 9.242 cv
410.004 9.23401 410.137 9.22699 410.301 9.22302 cv
410.465 9.22699 410.602 9.23401 410.711 9.242 cv
410.816 9.258 410.902 9.27698 410.965 9.30103 cv
411.023 9.33197 411.066 9.36298 411.094 9.39801 cv
411.117 9.44098 411.129 9.48798 411.133 9.53497 cv
411.133 10.336 li
411.516 9.92603 411.898 9.61298 412.281 9.40198 cv
412.66 9.19501 413.063 9.09399 413.48 9.09003 cv
413.766 9.09399 414.02 9.12097 414.25 9.17999 cv
414.477 9.242 414.684 9.328 414.863 9.43701 cv
415.043 9.55103 415.195 9.68701 415.324 9.84003 cv
415.453 9.99597 415.563 10.168 415.652 10.359 cv
415.859 10.137 416.063 9.94501 416.266 9.78497 cv
416.461 9.625 416.66 9.492 416.855 9.39099 cv
417.051 9.289 417.246 9.21503 417.441 9.164 cv
417.637 9.117 417.836 9.09399 418.039 9.09003 cv
418.5 9.09399 418.887 9.172 419.207 9.32397 cv
419.52 9.48401 419.777 9.69501 419.973 9.961 cv
420.168 10.23 420.305 10.543 420.391 10.898 cv
420.469 11.258 420.512 11.637 420.516 12.035 cv
cp
f
428.359 16.508 mo
428.355 16.586 428.328 16.641 428.281 16.68 cv
428.227 16.723 428.145 16.75 428.035 16.77 cv
427.918 16.785 427.754 16.797 427.539 16.797 cv
427.301 16.797 427.129 16.785 427.027 16.77 cv
426.918 16.75 426.844 16.723 426.805 16.68 cv
426.758 16.641 426.738 16.586 426.738 16.508 cv
426.738 15.957 li
426.449 16.266 426.121 16.504 425.758 16.672 cv
425.391 16.844 424.984 16.926 424.539 16.93 cv
424.168 16.926 423.828 16.879 423.52 16.785 cv
423.211 16.691 422.945 16.551 422.719 16.355 cv
422.492 16.168 422.316 15.934 422.191 15.652 cv
422.066 15.375 422.004 15.047 422.008 14.668 cv
422.004 14.27 422.082 13.918 422.242 13.613 cv
422.398 13.316 422.637 13.07 422.953 12.875 cv
423.266 12.684 423.656 12.539 424.125 12.441 cv
424.594 12.352 425.137 12.305 425.754 12.301 cv
426.434 12.301 li
426.434 11.879 li
426.434 11.664 426.41 11.473 426.367 11.309 cv
426.32 11.148 426.246 11.012 426.148 10.898 cv
426.043 10.793 425.91 10.711 425.742 10.656 cv
425.57 10.605 425.359 10.582 425.117 10.578 cv
424.785 10.582 424.492 10.617 424.238 10.687 cv
423.977 10.762 423.75 10.844 423.555 10.93 cv
423.355 11.023 423.191 11.102 423.063 11.172 cv
422.926 11.246 422.816 11.285 422.738 11.281 cv
422.676 11.285 422.625 11.266 422.586 11.227 cv
422.539 11.191 422.504 11.141 422.477 11.07 cv
422.445 11.008 422.422 10.922 422.41 10.82 cv
422.391 10.723 422.383 10.613 422.387 10.492 cv
422.383 10.332 422.398 10.207 422.426 10.109 cv
422.449 10.02 422.496 9.93402 422.574 9.85498 cv
422.645 9.78101 422.773 9.69897 422.957 9.60901 cv
423.137 9.52002 423.348 9.43402 423.594 9.35498 cv
423.836 9.27698 424.105 9.21503 424.395 9.164 cv
424.684 9.117 424.98 9.09399 425.289 9.09003 cv
425.832 9.09399 426.297 9.14502 426.684 9.25 cv
427.07 9.35901 427.391 9.52301 427.641 9.742 cv
427.891 9.961 428.07 10.246 428.188 10.594 cv
428.297 10.945 428.355 11.359 428.359 11.832 cv
cp
426.434 13.531 mo
425.684 13.531 li
425.367 13.535 425.098 13.559 424.875 13.602 cv
424.648 13.652 424.465 13.723 424.328 13.812 cv
424.184 13.91 424.082 14.023 424.02 14.152 cv
423.953 14.289 423.918 14.437 423.922 14.605 cv
423.918 14.898 424.012 15.129 424.199 15.293 cv
424.383 15.461 424.641 15.543 424.969 15.543 cv
425.242 15.543 425.492 15.473 425.727 15.332 cv
425.953 15.191 426.191 14.988 426.434 14.715 cv
cp
f
436.582 10.016 mo
436.578 10.27 436.551 10.453 436.496 10.57 cv
436.438 10.691 436.367 10.75 436.289 10.75 cv
435.469 10.75 li
435.582 10.875 435.664 11.02 435.715 11.176 cv
435.762 11.336 435.785 11.5 435.789 11.668 cv
435.785 12.078 435.719 12.437 435.586 12.75 cv
435.449 13.066 435.254 13.332 435.004 13.543 cv
434.75 13.762 434.449 13.926 434.094 14.035 cv
433.734 14.152 433.336 14.207 432.906 14.203 cv
432.68 14.207 432.469 14.18 432.266 14.121 cv
432.063 14.07 431.906 14.008 431.797 13.93 cv
431.734 14 431.676 14.078 431.629 14.172 cv
431.578 14.266 431.555 14.371 431.559 14.48 cv
431.555 14.637 431.621 14.758 431.754 14.852 cv
431.883 14.949 432.07 15.004 432.313 15.012 cv
434.004 15.074 li
434.398 15.09 434.75 15.148 435.059 15.242 cv
435.367 15.344 435.629 15.477 435.84 15.648 cv
436.051 15.824 436.211 16.035 436.32 16.277 cv
436.43 16.523 436.484 16.797 436.488 17.109 cv
436.484 17.445 436.41 17.77 436.262 18.078 cv
436.113 18.379 435.887 18.641 435.586 18.867 cv
435.281 19.086 434.902 19.266 434.449 19.398 cv
433.992 19.527 433.461 19.59 432.859 19.594 cv
432.262 19.59 431.758 19.543 431.34 19.453 cv
430.922 19.355 430.578 19.227 430.313 19.062 cv
430.043 18.895 429.848 18.695 429.73 18.469 cv
429.605 18.234 429.547 17.98 429.547 17.707 cv
429.547 17.535 429.566 17.375 429.613 17.219 cv
429.652 17.062 429.719 16.91 429.809 16.77 cv
429.891 16.625 429.996 16.492 430.121 16.359 cv
430.246 16.23 430.387 16.105 430.551 15.984 cv
430.324 15.871 430.152 15.711 430.031 15.5 cv
429.91 15.297 429.852 15.07 429.852 14.824 cv
429.852 14.523 429.918 14.246 430.059 13.988 cv
430.195 13.738 430.379 13.508 430.605 13.305 cv
430.422 13.125 430.277 12.91 430.168 12.652 cv
430.059 12.402 430.004 12.082 430.008 11.699 cv
430.004 11.297 430.074 10.937 430.219 10.613 cv
430.359 10.297 430.559 10.027 430.816 9.80499 cv
431.07 9.586 431.375 9.414 431.727 9.297 cv
432.078 9.17999 432.469 9.12097 432.898 9.12097 cv
433.117 9.12097 433.324 9.13702 433.523 9.15997 cv
433.723 9.19098 433.91 9.22699 434.082 9.27002 cv
436.289 9.27002 li
436.371 9.27301 436.441 9.33197 436.5 9.44098 cv
436.551 9.55902 436.578 9.75 436.582 10.016 cv
cp
434.066 11.66 mo
434.063 11.289 433.961 11 433.754 10.789 cv
433.543 10.586 433.25 10.48 432.875 10.477 cv
432.68 10.48 432.508 10.512 432.367 10.574 cv
432.219 10.641 432.098 10.73 432.004 10.84 cv
431.902 10.953 431.832 11.082 431.789 11.23 cv
431.738 11.379 431.715 11.535 431.719 11.691 cv
431.715 12.051 431.82 12.328 432.031 12.531 cv
432.238 12.738 432.527 12.844 432.898 12.84 cv
433.094 12.844 433.262 12.812 433.41 12.746 cv
433.551 12.687 433.672 12.602 433.773 12.488 cv
433.867 12.383 433.941 12.254 433.992 12.109 cv
434.039 11.969 434.063 11.82 434.066 11.66 cv
cp
434.527 17.211 mo
434.527 16.973 434.434 16.797 434.246 16.672 cv
434.059 16.551 433.801 16.48 433.473 16.469 cv
432.078 16.43 li
431.941 16.531 431.832 16.625 431.754 16.715 cv
431.672 16.805 431.609 16.891 431.563 16.977 cv
431.512 17.059 431.477 17.141 431.465 17.219 cv
431.445 17.297 431.438 17.375 431.441 17.461 cv
431.438 17.715 431.57 17.914 431.832 18.051 cv
432.094 18.184 432.465 18.25 432.945 18.254 cv
433.238 18.25 433.484 18.219 433.691 18.164 cv
433.891 18.102 434.055 18.023 434.184 17.926 cv
434.305 17.824 434.395 17.715 434.449 17.594 cv
434.5 17.473 434.527 17.344 434.527 17.211 cv
cp
f
444.191 12.809 mo
444.188 13.047 444.137 13.223 444.031 13.336 cv
443.922 13.453 443.773 13.512 443.594 13.508 cv
439.359 13.508 li
439.355 13.809 439.391 14.078 439.465 14.316 cv
439.531 14.559 439.645 14.762 439.801 14.93 cv
439.953 15.102 440.148 15.23 440.391 15.316 cv
440.629 15.406 440.918 15.449 441.262 15.449 cv
441.602 15.449 441.902 15.426 442.164 15.375 cv
442.422 15.328 442.648 15.273 442.84 15.211 cv
443.027 15.152 443.184 15.098 443.313 15.047 cv
443.434 15 443.535 14.977 443.617 14.973 cv
443.66 14.977 443.699 14.984 443.734 15 cv
443.762 15.02 443.789 15.051 443.809 15.098 cv
443.828 15.145 443.84 15.211 443.852 15.297 cv
443.855 15.383 443.859 15.492 443.863 15.621 cv
443.859 15.738 443.859 15.836 443.855 15.914 cv
443.848 15.996 443.84 16.062 443.832 16.117 cv
443.82 16.176 443.805 16.227 443.785 16.262 cv
443.766 16.305 443.738 16.34 443.707 16.375 cv
443.672 16.414 443.578 16.465 443.43 16.523 cv
443.273 16.59 443.082 16.652 442.852 16.707 cv
442.613 16.77 442.344 16.816 442.047 16.863 cv
441.742 16.902 441.422 16.926 441.082 16.93 cv
440.461 16.926 439.918 16.852 439.457 16.695 cv
438.988 16.543 438.602 16.305 438.293 15.988 cv
437.977 15.672 437.742 15.273 437.594 14.789 cv
437.438 14.309 437.363 13.742 437.367 13.086 cv
437.363 12.473 437.441 11.914 437.605 11.418 cv
437.762 10.922 437.996 10.504 438.309 10.156 cv
438.613 9.81201 438.988 9.547 439.426 9.36298 cv
439.863 9.18402 440.355 9.09399 440.91 9.09003 cv
441.488 9.09399 441.988 9.17999 442.402 9.34802 cv
442.816 9.52301 443.152 9.76202 443.418 10.062 cv
443.68 10.367 443.875 10.727 444.004 11.141 cv
444.125 11.559 444.188 12.008 444.191 12.496 cv
cp
442.289 12.246 mo
442.301 11.695 442.191 11.262 441.957 10.949 cv
441.723 10.637 441.355 10.48 440.863 10.477 cv
440.613 10.48 440.398 10.527 440.215 10.617 cv
440.027 10.715 439.875 10.84 439.754 10.996 cv
439.629 11.156 439.535 11.344 439.473 11.559 cv
439.406 11.773 439.367 12.004 439.359 12.246 cv
cp
f
450.695 14.52 mo
450.691 14.918 450.617 15.266 450.473 15.566 cv
450.324 15.867 450.117 16.121 449.848 16.32 cv
449.574 16.527 449.254 16.676 448.887 16.777 cv
448.52 16.875 448.117 16.926 447.688 16.93 cv
447.422 16.926 447.176 16.906 446.941 16.871 cv
446.707 16.828 446.496 16.781 446.309 16.723 cv
446.121 16.664 445.965 16.602 445.84 16.539 cv
445.715 16.477 445.621 16.418 445.566 16.363 cv
445.508 16.309 445.465 16.227 445.438 16.109 cv
445.402 15.996 445.387 15.82 445.391 15.59 cv
445.387 15.441 445.395 15.32 445.406 15.227 cv
445.414 15.137 445.43 15.066 445.453 15.008 cv
445.473 14.957 445.496 14.918 445.531 14.898 cv
445.559 14.883 445.598 14.875 445.645 14.871 cv
445.699 14.875 445.785 14.906 445.898 14.969 cv
446.008 15.035 446.145 15.109 446.316 15.184 cv
446.48 15.266 446.676 15.336 446.895 15.402 cv
447.113 15.473 447.363 15.508 447.648 15.504 cv
447.824 15.508 447.98 15.488 448.121 15.449 cv
448.254 15.414 448.375 15.363 448.48 15.293 cv
448.578 15.227 448.652 15.141 448.707 15.035 cv
448.754 14.934 448.781 14.812 448.785 14.676 cv
448.781 14.52 448.734 14.387 448.641 14.277 cv
448.547 14.168 448.418 14.07 448.262 13.984 cv
448.098 13.902 447.918 13.824 447.723 13.75 cv
447.52 13.68 447.316 13.602 447.105 13.508 cv
446.895 13.422 446.688 13.32 446.492 13.203 cv
446.289 13.094 446.109 12.953 445.953 12.785 cv
445.789 12.621 445.664 12.422 445.57 12.184 cv
445.477 11.953 445.43 11.672 445.43 11.34 cv
445.43 11.012 445.492 10.707 445.621 10.426 cv
445.75 10.152 445.938 9.914 446.184 9.71503 cv
446.426 9.52002 446.723 9.367 447.074 9.25403 cv
447.422 9.14801 447.816 9.09399 448.258 9.09003 cv
448.473 9.09399 448.684 9.10901 448.891 9.13702 cv
449.094 9.172 449.281 9.211 449.449 9.25403 cv
449.613 9.30499 449.754 9.35498 449.871 9.40601 cv
449.984 9.46503 450.066 9.51202 450.117 9.547 cv
450.164 9.59003 450.199 9.62903 450.223 9.664 cv
450.242 9.70697 450.254 9.75403 450.266 9.80499 cv
450.273 9.85901 450.285 9.92603 450.293 10.004 cv
450.301 10.09 450.305 10.187 450.305 10.305 cv
450.305 10.445 450.301 10.562 450.293 10.648 cv
450.285 10.742 450.27 10.812 450.254 10.859 cv
450.234 10.914 450.211 10.949 450.184 10.965 cv
450.148 10.988 450.113 10.996 450.074 10.992 cv
450.023 10.996 449.949 10.969 449.855 10.91 cv
449.754 10.859 449.633 10.801 449.484 10.734 cv
449.336 10.676 449.164 10.617 448.969 10.559 cv
448.773 10.508 448.551 10.48 448.305 10.477 cv
448.125 10.48 447.973 10.5 447.844 10.531 cv
447.711 10.57 447.602 10.621 447.523 10.687 cv
447.438 10.758 447.375 10.836 447.336 10.926 cv
447.289 11.02 447.27 11.117 447.273 11.219 cv
447.27 11.379 447.32 11.516 447.422 11.621 cv
447.52 11.734 447.648 11.828 447.813 11.91 cv
447.973 11.996 448.156 12.074 448.363 12.145 cv
448.566 12.219 448.773 12.301 448.984 12.383 cv
449.191 12.473 449.398 12.57 449.609 12.684 cv
449.813 12.797 449.996 12.937 450.156 13.102 cv
450.316 13.27 450.445 13.469 450.547 13.699 cv
450.641 13.934 450.691 14.207 450.695 14.52 cv
cp
f
459.465 12.832 mo
459.461 13.133 459.434 13.344 459.379 13.461 cv
459.32 13.586 459.23 13.645 459.105 13.641 cv
455.863 13.641 li
455.734 13.645 455.641 13.582 455.586 13.457 cv
455.523 13.336 455.496 13.129 455.5 12.832 cv
455.496 12.543 455.523 12.336 455.586 12.215 cv
455.641 12.098 455.734 12.039 455.863 12.035 cv
459.105 12.035 li
459.168 12.039 459.219 12.051 459.266 12.074 cv
459.305 12.102 459.344 12.148 459.379 12.207 cv
459.406 12.273 459.43 12.355 459.445 12.457 cv
459.457 12.562 459.461 12.687 459.465 12.832 cv
cp
f
470.199 15.895 mo
470.195 16.051 470.191 16.184 470.18 16.285 cv
470.164 16.395 470.145 16.48 470.121 16.551 cv
470.094 16.621 470.059 16.672 470.023 16.703 cv
469.98 16.734 469.938 16.75 469.887 16.75 cv
465.266 16.75 li
465.09 16.75 464.945 16.699 464.832 16.598 cv
464.711 16.496 464.652 16.332 464.656 16.102 cv
464.656 6.94501 li
464.652 6.89801 464.672 6.85199 464.707 6.80499 cv
464.738 6.76599 464.793 6.72998 464.875 6.703 cv
464.949 6.67999 465.055 6.65997 465.191 6.64099 cv
465.32 6.62903 465.484 6.62097 465.688 6.617 cv
465.883 6.62097 466.051 6.62903 466.184 6.64099 cv
466.313 6.65997 466.414 6.67999 466.496 6.703 cv
466.57 6.72998 466.629 6.76599 466.664 6.80499 cv
466.695 6.85199 466.711 6.89801 466.715 6.94501 cv
466.715 15.059 li
469.887 15.059 li
469.938 15.062 469.98 15.078 470.023 15.102 cv
470.059 15.133 470.094 15.18 470.121 15.242 cv
470.145 15.312 470.164 15.398 470.18 15.5 cv
470.191 15.609 470.195 15.738 470.199 15.895 cv
cp
f
478.324 12.937 mo
478.32 13.535 478.242 14.078 478.09 14.562 cv
477.93 15.055 477.695 15.473 477.379 15.824 cv
477.063 16.176 476.664 16.449 476.188 16.641 cv
475.707 16.832 475.148 16.926 474.512 16.93 cv
473.891 16.926 473.352 16.844 472.898 16.672 cv
472.438 16.504 472.059 16.254 471.762 15.926 cv
471.457 15.602 471.234 15.199 471.09 14.719 cv
470.945 14.242 470.875 13.695 470.875 13.078 cv
470.875 12.488 470.953 11.949 471.109 11.457 cv
471.266 10.969 471.504 10.547 471.824 10.195 cv
472.141 9.84802 472.535 9.57397 473.012 9.37903 cv
473.484 9.18701 474.043 9.09399 474.684 9.09003 cv
475.309 9.09399 475.848 9.17603 476.305 9.34399 cv
476.762 9.51599 477.141 9.76599 477.438 10.09 cv
477.734 10.418 477.957 10.82 478.105 11.297 cv
478.25 11.777 478.32 12.324 478.324 12.937 cv
cp
476.305 13.016 mo
476.301 12.68 476.273 12.363 476.223 12.07 cv
476.164 11.785 476.07 11.535 475.945 11.32 cv
475.813 11.109 475.641 10.941 475.43 10.82 cv
475.211 10.703 474.941 10.645 474.613 10.641 cv
474.324 10.645 474.07 10.699 473.852 10.801 cv
473.633 10.91 473.453 11.066 473.313 11.27 cv
473.172 11.477 473.066 11.723 472.996 12.008 cv
472.926 12.301 472.891 12.629 472.891 12.992 cv
472.891 13.34 472.918 13.656 472.977 13.941 cv
473.031 14.234 473.125 14.484 473.254 14.695 cv
473.379 14.91 473.551 15.074 473.773 15.187 cv
473.988 15.309 474.258 15.367 474.582 15.363 cv
474.875 15.367 475.133 15.312 475.355 15.203 cv
475.57 15.098 475.75 14.945 475.891 14.738 cv
476.031 14.539 476.133 14.293 476.203 14.004 cv
476.266 13.719 476.301 13.391 476.305 13.016 cv
cp
f
485.141 15.379 mo
485.137 15.516 485.133 15.629 485.129 15.719 cv
485.117 15.812 485.109 15.891 485.098 15.949 cv
485.082 16.012 485.066 16.062 485.051 16.098 cv
485.031 16.141 484.988 16.187 484.93 16.246 cv
484.863 16.309 484.758 16.383 484.609 16.465 cv
484.457 16.555 484.285 16.633 484.094 16.695 cv
483.902 16.766 483.695 16.816 483.469 16.859 cv
483.242 16.898 483.008 16.918 482.773 16.922 cv
482.234 16.918 481.762 16.84 481.348 16.672 cv
480.934 16.508 480.586 16.262 480.309 15.937 cv
480.023 15.613 479.813 15.219 479.672 14.75 cv
479.531 14.285 479.461 13.746 479.461 13.141 cv
479.461 12.445 479.547 11.848 479.719 11.34 cv
479.891 10.836 480.133 10.414 480.449 10.082 cv
480.758 9.75 481.125 9.50403 481.555 9.34003 cv
481.977 9.17999 482.445 9.09802 482.957 9.09802 cv
483.164 9.09802 483.367 9.117 483.57 9.15198 cv
483.766 9.19098 483.953 9.242 484.129 9.30103 cv
484.301 9.367 484.457 9.43701 484.598 9.51202 cv
484.734 9.59399 484.832 9.65997 484.891 9.71503 cv
484.945 9.77301 484.984 9.82001 485.012 9.85498 cv
485.031 9.89801 485.051 9.94897 485.066 10.008 cv
485.078 10.074 485.09 10.152 485.098 10.238 cv
485.105 10.332 485.109 10.441 485.109 10.57 cv
485.109 10.875 485.082 11.086 485.031 11.207 cv
484.977 11.328 484.91 11.391 484.828 11.387 cv
484.738 11.391 484.645 11.355 484.547 11.281 cv
484.445 11.211 484.328 11.129 484.195 11.039 cv
484.063 10.953 483.902 10.871 483.715 10.797 cv
483.527 10.727 483.301 10.691 483.043 10.687 cv
482.531 10.691 482.145 10.887 481.875 11.277 cv
481.602 11.668 481.465 12.242 481.469 13 cv
481.465 13.375 481.5 13.707 481.57 13.992 cv
481.637 14.277 481.734 14.516 481.871 14.707 cv
482 14.902 482.168 15.047 482.371 15.141 cv
482.57 15.238 482.801 15.285 483.066 15.285 cv
483.332 15.285 483.566 15.246 483.766 15.164 cv
483.957 15.086 484.125 14.996 484.273 14.895 cv
484.414 14.797 484.539 14.707 484.641 14.625 cv
484.738 14.547 484.82 14.508 484.891 14.504 cv
484.934 14.508 484.973 14.52 485.008 14.543 cv
485.035 14.57 485.059 14.617 485.082 14.687 cv
485.098 14.758 485.113 14.848 485.125 14.957 cv
485.133 15.066 485.137 15.207 485.141 15.379 cv
cp
f
492.426 16.508 mo
492.422 16.586 492.395 16.641 492.348 16.68 cv
492.293 16.723 492.211 16.75 492.102 16.77 cv
491.984 16.785 491.82 16.797 491.605 16.797 cv
491.367 16.797 491.195 16.785 491.094 16.77 cv
490.984 16.75 490.91 16.723 490.871 16.68 cv
490.824 16.641 490.805 16.586 490.805 16.508 cv
490.805 15.957 li
490.516 16.266 490.188 16.504 489.824 16.672 cv
489.457 16.844 489.051 16.926 488.605 16.93 cv
488.234 16.926 487.895 16.879 487.586 16.785 cv
487.277 16.691 487.012 16.551 486.785 16.355 cv
486.559 16.168 486.383 15.934 486.258 15.652 cv
486.133 15.375 486.07 15.047 486.074 14.668 cv
486.07 14.27 486.148 13.918 486.309 13.613 cv
486.465 13.316 486.703 13.07 487.02 12.875 cv
487.332 12.684 487.723 12.539 488.191 12.441 cv
488.66 12.352 489.203 12.305 489.82 12.301 cv
490.5 12.301 li
490.5 11.879 li
490.5 11.664 490.477 11.473 490.434 11.309 cv
490.387 11.148 490.313 11.012 490.215 10.898 cv
490.109 10.793 489.977 10.711 489.809 10.656 cv
489.637 10.605 489.426 10.582 489.184 10.578 cv
488.852 10.582 488.559 10.617 488.305 10.687 cv
488.043 10.762 487.816 10.844 487.621 10.93 cv
487.422 11.023 487.258 11.102 487.129 11.172 cv
486.992 11.246 486.883 11.285 486.805 11.281 cv
486.742 11.285 486.691 11.266 486.652 11.227 cv
486.605 11.191 486.57 11.141 486.543 11.07 cv
486.512 11.008 486.488 10.922 486.477 10.82 cv
486.457 10.723 486.449 10.613 486.453 10.492 cv
486.449 10.332 486.465 10.207 486.492 10.109 cv
486.516 10.02 486.563 9.93402 486.641 9.85498 cv
486.711 9.78101 486.84 9.69897 487.023 9.60901 cv
487.203 9.52002 487.414 9.43402 487.66 9.35498 cv
487.902 9.27698 488.172 9.21503 488.461 9.164 cv
488.75 9.117 489.047 9.09399 489.355 9.09003 cv
489.898 9.09399 490.363 9.14502 490.75 9.25 cv
491.137 9.35901 491.457 9.52301 491.707 9.742 cv
491.957 9.961 492.137 10.246 492.254 10.594 cv
492.363 10.945 492.422 11.359 492.426 11.832 cv
cp
490.5 13.531 mo
489.75 13.531 li
489.434 13.535 489.164 13.559 488.941 13.602 cv
488.715 13.652 488.531 13.723 488.395 13.812 cv
488.25 13.91 488.148 14.023 488.086 14.152 cv
488.02 14.289 487.984 14.437 487.988 14.605 cv
487.984 14.898 488.078 15.129 488.266 15.293 cv
488.449 15.461 488.707 15.543 489.035 15.543 cv
489.309 15.543 489.559 15.473 489.793 15.332 cv
490.02 15.191 490.258 14.988 490.5 14.715 cv
cp
f
496.352 16.484 mo
496.348 16.539 496.332 16.582 496.305 16.621 cv
496.27 16.66 496.215 16.695 496.145 16.719 cv
496.066 16.746 495.969 16.762 495.844 16.777 cv
495.719 16.789 495.559 16.797 495.371 16.797 cv
495.176 16.797 495.02 16.789 494.895 16.777 cv
494.77 16.762 494.668 16.746 494.594 16.719 cv
494.516 16.695 494.461 16.66 494.434 16.621 cv
494.398 16.582 494.383 16.539 494.387 16.484 cv
494.387 6.23798 li
494.383 6.18701 494.398 6.14099 494.434 6.09802 cv
494.461 6.05902 494.516 6.02301 494.594 5.992 cv
494.668 5.96503 494.77 5.94501 494.895 5.92603 cv
495.02 5.914 495.176 5.90601 495.371 5.90198 cv
495.559 5.90601 495.719 5.914 495.844 5.92603 cv
495.969 5.94501 496.066 5.96503 496.145 5.992 cv
496.215 6.02301 496.27 6.05902 496.305 6.09802 cv
496.332 6.14099 496.348 6.18701 496.352 6.23798 cv
cp
f
513.711 16.469 mo
513.707 16.523 513.695 16.57 513.668 16.609 cv
513.637 16.652 513.582 16.687 513.512 16.711 cv
513.434 16.738 513.336 16.758 513.211 16.773 cv
513.086 16.789 512.926 16.797 512.734 16.797 cv
512.547 16.797 512.391 16.789 512.27 16.773 cv
512.141 16.758 512.043 16.738 511.973 16.711 cv
511.898 16.687 511.848 16.652 511.816 16.609 cv
511.785 16.57 511.77 16.523 511.77 16.469 cv
511.77 8.26202 li
511.754 8.26202 li
508.832 16.461 li
508.809 16.531 508.773 16.586 508.73 16.629 cv
508.68 16.676 508.617 16.711 508.539 16.734 cv
508.457 16.762 508.355 16.777 508.23 16.785 cv
508.105 16.793 507.953 16.797 507.781 16.797 cv
507.602 16.797 507.453 16.789 507.328 16.777 cv
507.203 16.762 507.098 16.742 507.02 16.715 cv
506.934 16.687 506.871 16.652 506.828 16.609 cv
506.777 16.57 506.746 16.523 506.734 16.461 cv
503.914 8.26202 li
503.898 8.26202 li
503.898 16.469 li
503.895 16.523 503.879 16.57 503.855 16.609 cv
503.824 16.652 503.773 16.687 503.695 16.711 cv
503.617 16.738 503.516 16.758 503.395 16.773 cv
503.27 16.789 503.113 16.797 502.926 16.797 cv
502.734 16.797 502.578 16.789 502.457 16.773 cv
502.328 16.758 502.227 16.738 502.156 16.711 cv
502.078 16.687 502.027 16.652 502 16.609 cv
501.969 16.57 501.953 16.523 501.957 16.469 cv
501.957 7.48401 li
501.953 7.22302 502.023 7.02002 502.168 6.875 cv
502.305 6.73798 502.492 6.66803 502.73 6.664 cv
504.07 6.664 li
504.309 6.66803 504.512 6.68701 504.684 6.72302 cv
504.852 6.76599 505 6.828 505.129 6.91803 cv
505.25 7.01202 505.355 7.133 505.441 7.27698 cv
505.523 7.42999 505.594 7.61298 505.66 7.828 cv
507.844 13.836 li
507.875 13.836 li
510.133 7.84399 li
510.199 7.625 510.273 7.44098 510.355 7.289 cv
510.434 7.14099 510.527 7.02002 510.637 6.922 cv
510.742 6.83197 510.867 6.76599 511.012 6.72302 cv
511.156 6.68701 511.324 6.66803 511.52 6.664 cv
512.898 6.664 li
513.035 6.66803 513.156 6.68402 513.262 6.71899 cv
513.359 6.758 513.441 6.81201 513.512 6.87903 cv
513.574 6.953 513.625 7.039 513.66 7.13702 cv
513.691 7.242 513.707 7.35901 513.711 7.48401 cv
cp
f
522.82 12.937 mo
522.816 13.535 522.738 14.078 522.586 14.562 cv
522.426 15.055 522.191 15.473 521.875 15.824 cv
521.559 16.176 521.16 16.449 520.684 16.641 cv
520.203 16.832 519.645 16.926 519.008 16.93 cv
518.387 16.926 517.848 16.844 517.395 16.672 cv
516.934 16.504 516.555 16.254 516.258 15.926 cv
515.953 15.602 515.73 15.199 515.586 14.719 cv
515.441 14.242 515.371 13.695 515.371 13.078 cv
515.371 12.488 515.449 11.949 515.605 11.457 cv
515.762 10.969 516 10.547 516.32 10.195 cv
516.637 9.84802 517.031 9.57397 517.508 9.37903 cv
517.98 9.18701 518.539 9.09399 519.18 9.09003 cv
519.805 9.09399 520.344 9.17603 520.801 9.34399 cv
521.258 9.51599 521.637 9.76599 521.934 10.09 cv
522.23 10.418 522.453 10.82 522.602 11.297 cv
522.746 11.777 522.816 12.324 522.82 12.937 cv
cp
520.801 13.016 mo
520.797 12.68 520.77 12.363 520.719 12.07 cv
520.66 11.785 520.566 11.535 520.441 11.32 cv
520.309 11.109 520.137 10.941 519.926 10.82 cv
519.707 10.703 519.438 10.645 519.109 10.641 cv
518.82 10.645 518.566 10.699 518.348 10.801 cv
518.129 10.91 517.949 11.066 517.809 11.27 cv
517.668 11.477 517.563 11.723 517.492 12.008 cv
517.422 12.301 517.387 12.629 517.387 12.992 cv
517.387 13.34 517.414 13.656 517.473 13.941 cv
517.527 14.234 517.621 14.484 517.75 14.695 cv
517.875 14.91 518.047 15.074 518.27 15.187 cv
518.484 15.309 518.754 15.367 519.078 15.363 cv
519.371 15.367 519.629 15.312 519.852 15.203 cv
520.066 15.098 520.246 14.945 520.387 14.738 cv
520.527 14.539 520.629 14.293 520.699 14.004 cv
520.762 13.719 520.797 13.391 520.801 13.016 cv
cp
f
530.969 16.484 mo
530.965 16.547 530.953 16.594 530.93 16.629 cv
530.902 16.672 530.855 16.703 530.797 16.727 cv
530.73 16.75 530.648 16.766 530.543 16.781 cv
530.438 16.789 530.305 16.797 530.152 16.797 cv
529.98 16.797 529.848 16.789 529.746 16.781 cv
529.641 16.766 529.555 16.75 529.492 16.727 cv
529.426 16.703 529.379 16.672 529.352 16.629 cv
529.32 16.594 529.305 16.547 529.309 16.484 cv
529.309 15.715 li
528.949 16.102 528.574 16.398 528.184 16.609 cv
527.785 16.82 527.352 16.926 526.879 16.93 cv
526.344 16.926 525.895 16.824 525.531 16.621 cv
525.164 16.418 524.867 16.145 524.637 15.793 cv
524.402 15.449 524.234 15.043 524.133 14.574 cv
524.031 14.113 523.98 13.621 523.98 13.102 cv
523.98 12.488 524.043 11.934 524.176 11.437 cv
524.305 10.945 524.5 10.523 524.758 10.176 cv
525.012 9.828 525.328 9.56201 525.707 9.37097 cv
526.086 9.18701 526.523 9.09399 527.02 9.09003 cv
527.406 9.09399 527.758 9.172 528.078 9.328 cv
528.391 9.48798 528.707 9.71899 529.02 10.023 cv
529.02 6.26202 li
529.02 6.211 529.031 6.164 529.063 6.12097 cv
529.086 6.08197 529.141 6.047 529.219 6.01599 cv
529.293 5.98798 529.391 5.96899 529.52 5.94897 cv
529.641 5.93701 529.801 5.92999 529.996 5.92603 cv
530.188 5.92999 530.344 5.93701 530.469 5.94897 cv
530.59 5.96899 530.691 5.98798 530.766 6.01599 cv
530.836 6.047 530.887 6.08197 530.922 6.12097 cv
530.949 6.164 530.965 6.211 530.969 6.26202 cv
cp
529.02 11.84 mo
528.738 11.488 528.469 11.219 528.215 11.031 cv
527.953 10.844 527.684 10.75 527.406 10.75 cv
527.152 10.75 526.934 10.816 526.75 10.941 cv
526.563 11.074 526.414 11.242 526.305 11.453 cv
526.191 11.664 526.109 11.902 526.055 12.164 cv
526 12.43 525.973 12.699 525.973 12.969 cv
525.973 13.266 525.996 13.547 526.043 13.82 cv
526.09 14.098 526.164 14.344 526.273 14.559 cv
526.375 14.773 526.52 14.945 526.699 15.074 cv
526.875 15.207 527.098 15.273 527.367 15.27 cv
527.5 15.273 527.629 15.254 527.762 15.211 cv
527.887 15.176 528.02 15.113 528.152 15.02 cv
528.285 14.934 528.422 14.816 528.563 14.672 cv
528.703 14.531 528.855 14.355 529.02 14.148 cv
cp
f
539.367 12.809 mo
539.363 13.047 539.313 13.223 539.207 13.336 cv
539.098 13.453 538.949 13.512 538.77 13.508 cv
534.535 13.508 li
534.531 13.809 534.566 14.078 534.641 14.316 cv
534.707 14.559 534.82 14.762 534.977 14.93 cv
535.129 15.102 535.324 15.23 535.566 15.316 cv
535.805 15.406 536.094 15.449 536.438 15.449 cv
536.777 15.449 537.078 15.426 537.34 15.375 cv
537.598 15.328 537.824 15.273 538.016 15.211 cv
538.203 15.152 538.359 15.098 538.488 15.047 cv
538.609 15 538.711 14.977 538.793 14.973 cv
538.836 14.977 538.875 14.984 538.91 15 cv
538.938 15.02 538.965 15.051 538.984 15.098 cv
539.004 15.145 539.016 15.211 539.027 15.297 cv
539.031 15.383 539.035 15.492 539.039 15.621 cv
539.035 15.738 539.035 15.836 539.031 15.914 cv
539.023 15.996 539.016 16.062 539.008 16.117 cv
538.996 16.176 538.98 16.227 538.961 16.262 cv
538.941 16.305 538.914 16.34 538.883 16.375 cv
538.848 16.414 538.754 16.465 538.605 16.523 cv
538.449 16.59 538.258 16.652 538.027 16.707 cv
537.789 16.77 537.52 16.816 537.223 16.863 cv
536.918 16.902 536.598 16.926 536.258 16.93 cv
535.637 16.926 535.094 16.852 534.633 16.695 cv
534.164 16.543 533.777 16.305 533.469 15.988 cv
533.152 15.672 532.918 15.273 532.77 14.789 cv
532.613 14.309 532.539 13.742 532.543 13.086 cv
532.539 12.473 532.617 11.914 532.781 11.418 cv
532.938 10.922 533.172 10.504 533.484 10.156 cv
533.789 9.81201 534.164 9.547 534.602 9.36298 cv
535.039 9.18402 535.531 9.09399 536.086 9.09003 cv
536.664 9.09399 537.164 9.17999 537.578 9.34802 cv
537.992 9.52301 538.328 9.76202 538.594 10.062 cv
538.855 10.367 539.051 10.727 539.18 11.141 cv
539.301 11.559 539.363 12.008 539.367 12.496 cv
cp
537.465 12.246 mo
537.477 11.695 537.367 11.262 537.133 10.949 cv
536.898 10.637 536.531 10.48 536.039 10.477 cv
535.789 10.48 535.574 10.527 535.391 10.617 cv
535.203 10.715 535.051 10.84 534.93 10.996 cv
534.805 11.156 534.711 11.344 534.648 11.559 cv
534.582 11.773 534.543 12.004 534.535 12.246 cv
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
